
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008758  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000002c  20000000  00008758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002890  2000002c  00008784  0002002c  2**2
                  ALLOC
  3 .stack        00002004  200028bc  0000b014  0002002c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
  6 .debug_info   00026fa4  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039fb  00000000  00000000  00047051  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a315  00000000  00000000  0004aa4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001a80  00000000  00000000  00054d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000018b0  00000000  00000000  000567e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021763  00000000  00000000  00058091  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017cca  00000000  00000000  000797f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a78b8  00000000  00000000  000914be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00006224  00000000  00000000  00138d78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 48 00 20 31 01 00 00 b5 01 00 00 b5 01 00 00     .H. 1...........
	...
      2c:	09 48 00 00 00 00 00 00 00 00 00 00 41 49 00 00     .H..........AI..
      3c:	89 49 00 00 b5 01 00 00 b5 01 00 00 65 2b 00 00     .I..........e+..
      4c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      5c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      6c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      7c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      8c:	b5 01 00 00 c5 38 00 00 b5 01 00 00 b5 01 00 00     .....8..........
      9c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      ac:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	2000002c 	.word	0x2000002c
      dc:	00000000 	.word	0x00000000
      e0:	00008758 	.word	0x00008758

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000030 	.word	0x20000030
     110:	00008758 	.word	0x00008758
     114:	00008758 	.word	0x00008758
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b580      	push	{r7, lr}
     11e:	af00      	add	r7, sp, #0
	system_init();
     120:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     122:	4798      	blx	r3
}
     124:	46c0      	nop			; (mov r8, r8)
     126:	46bd      	mov	sp, r7
     128:	bd80      	pop	{r7, pc}
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	00000c41 	.word	0x00000c41

00000130 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     130:	b580      	push	{r7, lr}
     132:	b082      	sub	sp, #8
     134:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     136:	4b16      	ldr	r3, [pc, #88]	; (190 <Reset_Handler+0x60>)
     138:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     13a:	4b16      	ldr	r3, [pc, #88]	; (194 <Reset_Handler+0x64>)
     13c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     13e:	687a      	ldr	r2, [r7, #4]
     140:	683b      	ldr	r3, [r7, #0]
     142:	429a      	cmp	r2, r3
     144:	d00c      	beq.n	160 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     146:	e007      	b.n	158 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     148:	683b      	ldr	r3, [r7, #0]
     14a:	1d1a      	adds	r2, r3, #4
     14c:	603a      	str	r2, [r7, #0]
     14e:	687a      	ldr	r2, [r7, #4]
     150:	1d11      	adds	r1, r2, #4
     152:	6079      	str	r1, [r7, #4]
     154:	6812      	ldr	r2, [r2, #0]
     156:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     158:	683a      	ldr	r2, [r7, #0]
     15a:	4b0f      	ldr	r3, [pc, #60]	; (198 <Reset_Handler+0x68>)
     15c:	429a      	cmp	r2, r3
     15e:	d3f3      	bcc.n	148 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4b0e      	ldr	r3, [pc, #56]	; (19c <Reset_Handler+0x6c>)
     162:	603b      	str	r3, [r7, #0]
     164:	e004      	b.n	170 <Reset_Handler+0x40>
                *pDest++ = 0;
     166:	683b      	ldr	r3, [r7, #0]
     168:	1d1a      	adds	r2, r3, #4
     16a:	603a      	str	r2, [r7, #0]
     16c:	2200      	movs	r2, #0
     16e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     170:	683a      	ldr	r2, [r7, #0]
     172:	4b0b      	ldr	r3, [pc, #44]	; (1a0 <Reset_Handler+0x70>)
     174:	429a      	cmp	r2, r3
     176:	d3f6      	bcc.n	166 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     178:	4b0a      	ldr	r3, [pc, #40]	; (1a4 <Reset_Handler+0x74>)
     17a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0a      	ldr	r3, [pc, #40]	; (1a8 <Reset_Handler+0x78>)
     17e:	687a      	ldr	r2, [r7, #4]
     180:	21ff      	movs	r1, #255	; 0xff
     182:	438a      	bics	r2, r1
     184:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
     186:	4b09      	ldr	r3, [pc, #36]	; (1ac <Reset_Handler+0x7c>)
     188:	4798      	blx	r3

        /* Branch to main function */
        main();
     18a:	4b09      	ldr	r3, [pc, #36]	; (1b0 <Reset_Handler+0x80>)
     18c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     18e:	e7fe      	b.n	18e <Reset_Handler+0x5e>
     190:	00008758 	.word	0x00008758
     194:	20000000 	.word	0x20000000
     198:	2000002c 	.word	0x2000002c
     19c:	2000002c 	.word	0x2000002c
     1a0:	200028bc 	.word	0x200028bc
     1a4:	00000000 	.word	0x00000000
     1a8:	e000ed00 	.word	0xe000ed00
     1ac:	00008371 	.word	0x00008371
     1b0:	000039c5 	.word	0x000039c5

000001b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	af00      	add	r7, sp, #0
        while (1) {
     1b8:	e7fe      	b.n	1b8 <Dummy_Handler+0x4>

000001ba <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     1ba:	b580      	push	{r7, lr}
     1bc:	b084      	sub	sp, #16
     1be:	af00      	add	r7, sp, #0
     1c0:	60f8      	str	r0, [r7, #12]
     1c2:	607a      	str	r2, [r7, #4]
     1c4:	230b      	movs	r3, #11
     1c6:	18fb      	adds	r3, r7, r3
     1c8:	1c0a      	adds	r2, r1, #0
     1ca:	701a      	strb	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1cc:	230b      	movs	r3, #11
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	781a      	ldrb	r2, [r3, #0]
     1d2:	68fb      	ldr	r3, [r7, #12]
     1d4:	3220      	adds	r2, #32
     1d6:	0092      	lsls	r2, r2, #2
     1d8:	6879      	ldr	r1, [r7, #4]
     1da:	50d1      	str	r1, [r2, r3]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     1dc:	46c0      	nop			; (mov r8, r8)
     1de:	46bd      	mov	sp, r7
     1e0:	b004      	add	sp, #16
     1e2:	bd80      	pop	{r7, pc}

000001e4 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	b082      	sub	sp, #8
     1e8:	af00      	add	r7, sp, #0
     1ea:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     1ec:	687b      	ldr	r3, [r7, #4]
     1ee:	695b      	ldr	r3, [r3, #20]
     1f0:	2280      	movs	r2, #128	; 0x80
     1f2:	0092      	lsls	r2, r2, #2
     1f4:	431a      	orrs	r2, r3
     1f6:	687b      	ldr	r3, [r7, #4]
     1f8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	46bd      	mov	sp, r7
     1fe:	b002      	add	sp, #8
     200:	bd80      	pop	{r7, pc}

00000202 <hri_mclk_set_APBCMASK_SERCOM3_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_SERCOM2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_SERCOM3_bit(const void *const hw)
{
     202:	b580      	push	{r7, lr}
     204:	b082      	sub	sp, #8
     206:	af00      	add	r7, sp, #0
     208:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	69db      	ldr	r3, [r3, #28]
     20e:	2210      	movs	r2, #16
     210:	431a      	orrs	r2, r3
     212:	687b      	ldr	r3, [r7, #4]
     214:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     216:	46c0      	nop			; (mov r8, r8)
     218:	46bd      	mov	sp, r7
     21a:	b002      	add	sp, #8
     21c:	bd80      	pop	{r7, pc}

0000021e <hri_mclk_set_APBCMASK_TC0_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC0_bit(const void *const hw)
{
     21e:	b580      	push	{r7, lr}
     220:	b082      	sub	sp, #8
     222:	af00      	add	r7, sp, #0
     224:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC0;
     226:	687b      	ldr	r3, [r7, #4]
     228:	69db      	ldr	r3, [r3, #28]
     22a:	2280      	movs	r2, #128	; 0x80
     22c:	0152      	lsls	r2, r2, #5
     22e:	431a      	orrs	r2, r3
     230:	687b      	ldr	r3, [r7, #4]
     232:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     234:	46c0      	nop			; (mov r8, r8)
     236:	46bd      	mov	sp, r7
     238:	b002      	add	sp, #8
     23a:	bd80      	pop	{r7, pc}

0000023c <hri_mclk_set_APBCMASK_ADC0_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_ADC0_bit(const void *const hw)
{
     23c:	b580      	push	{r7, lr}
     23e:	b082      	sub	sp, #8
     240:	af00      	add	r7, sp, #0
     242:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC0;
     244:	687b      	ldr	r3, [r7, #4]
     246:	69db      	ldr	r3, [r3, #28]
     248:	2280      	movs	r2, #128	; 0x80
     24a:	0292      	lsls	r2, r2, #10
     24c:	431a      	orrs	r2, r3
     24e:	687b      	ldr	r3, [r7, #4]
     250:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     252:	46c0      	nop			; (mov r8, r8)
     254:	46bd      	mov	sp, r7
     256:	b002      	add	sp, #8
     258:	bd80      	pop	{r7, pc}

0000025a <hri_mclk_set_APBCMASK_ADC1_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ADC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_ADC1_bit(const void *const hw)
{
     25a:	b580      	push	{r7, lr}
     25c:	b082      	sub	sp, #8
     25e:	af00      	add	r7, sp, #0
     260:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC1;
     262:	687b      	ldr	r3, [r7, #4]
     264:	69db      	ldr	r3, [r3, #28]
     266:	2280      	movs	r2, #128	; 0x80
     268:	02d2      	lsls	r2, r2, #11
     26a:	431a      	orrs	r2, r3
     26c:	687b      	ldr	r3, [r7, #4]
     26e:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     270:	46c0      	nop			; (mov r8, r8)
     272:	46bd      	mov	sp, r7
     274:	b002      	add	sp, #8
     276:	bd80      	pop	{r7, pc}

00000278 <hri_port_set_DIR_reg>:
	((PortGroup *)hw)->WRCONFIG.reg = data;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     278:	b580      	push	{r7, lr}
     27a:	b084      	sub	sp, #16
     27c:	af00      	add	r7, sp, #0
     27e:	60f8      	str	r0, [r7, #12]
     280:	607a      	str	r2, [r7, #4]
     282:	230b      	movs	r3, #11
     284:	18fb      	adds	r3, r7, r3
     286:	1c0a      	adds	r2, r1, #0
     288:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     28a:	230b      	movs	r3, #11
     28c:	18fb      	adds	r3, r7, r3
     28e:	781b      	ldrb	r3, [r3, #0]
     290:	68fa      	ldr	r2, [r7, #12]
     292:	01db      	lsls	r3, r3, #7
     294:	18d3      	adds	r3, r2, r3
     296:	3308      	adds	r3, #8
     298:	687a      	ldr	r2, [r7, #4]
     29a:	601a      	str	r2, [r3, #0]
}
     29c:	46c0      	nop			; (mov r8, r8)
     29e:	46bd      	mov	sp, r7
     2a0:	b004      	add	sp, #16
     2a2:	bd80      	pop	{r7, pc}

000002a4 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	60f8      	str	r0, [r7, #12]
     2ac:	607a      	str	r2, [r7, #4]
     2ae:	230b      	movs	r3, #11
     2b0:	18fb      	adds	r3, r7, r3
     2b2:	1c0a      	adds	r2, r1, #0
     2b4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2b6:	230b      	movs	r3, #11
     2b8:	18fb      	adds	r3, r7, r3
     2ba:	781b      	ldrb	r3, [r3, #0]
     2bc:	68fa      	ldr	r2, [r7, #12]
     2be:	01db      	lsls	r3, r3, #7
     2c0:	18d3      	adds	r3, r2, r3
     2c2:	3304      	adds	r3, #4
     2c4:	687a      	ldr	r2, [r7, #4]
     2c6:	601a      	str	r2, [r3, #0]
}
     2c8:	46c0      	nop			; (mov r8, r8)
     2ca:	46bd      	mov	sp, r7
     2cc:	b004      	add	sp, #16
     2ce:	bd80      	pop	{r7, pc}

000002d0 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = mask;
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b084      	sub	sp, #16
     2d4:	af00      	add	r7, sp, #0
     2d6:	60f8      	str	r0, [r7, #12]
     2d8:	607a      	str	r2, [r7, #4]
     2da:	230b      	movs	r3, #11
     2dc:	18fb      	adds	r3, r7, r3
     2de:	1c0a      	adds	r2, r1, #0
     2e0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2e2:	230b      	movs	r3, #11
     2e4:	18fb      	adds	r3, r7, r3
     2e6:	781b      	ldrb	r3, [r3, #0]
     2e8:	68fa      	ldr	r2, [r7, #12]
     2ea:	01db      	lsls	r3, r3, #7
     2ec:	18d3      	adds	r3, r2, r3
     2ee:	3318      	adds	r3, #24
     2f0:	687a      	ldr	r2, [r7, #4]
     2f2:	601a      	str	r2, [r3, #0]
}
     2f4:	46c0      	nop			; (mov r8, r8)
     2f6:	46bd      	mov	sp, r7
     2f8:	b004      	add	sp, #16
     2fa:	bd80      	pop	{r7, pc}

000002fc <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	b084      	sub	sp, #16
     300:	af00      	add	r7, sp, #0
     302:	60f8      	str	r0, [r7, #12]
     304:	607a      	str	r2, [r7, #4]
     306:	230b      	movs	r3, #11
     308:	18fb      	adds	r3, r7, r3
     30a:	1c0a      	adds	r2, r1, #0
     30c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     30e:	230b      	movs	r3, #11
     310:	18fb      	adds	r3, r7, r3
     312:	781b      	ldrb	r3, [r3, #0]
     314:	68fa      	ldr	r2, [r7, #12]
     316:	01db      	lsls	r3, r3, #7
     318:	18d3      	adds	r3, r2, r3
     31a:	3314      	adds	r3, #20
     31c:	687a      	ldr	r2, [r7, #4]
     31e:	601a      	str	r2, [r3, #0]
}
     320:	46c0      	nop			; (mov r8, r8)
     322:	46bd      	mov	sp, r7
     324:	b004      	add	sp, #16
     326:	bd80      	pop	{r7, pc}

00000328 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     328:	b590      	push	{r4, r7, lr}
     32a:	b085      	sub	sp, #20
     32c:	af00      	add	r7, sp, #0
     32e:	6078      	str	r0, [r7, #4]
     330:	000c      	movs	r4, r1
     332:	0010      	movs	r0, r2
     334:	0019      	movs	r1, r3
     336:	1cfb      	adds	r3, r7, #3
     338:	1c22      	adds	r2, r4, #0
     33a:	701a      	strb	r2, [r3, #0]
     33c:	1cbb      	adds	r3, r7, #2
     33e:	1c02      	adds	r2, r0, #0
     340:	701a      	strb	r2, [r3, #0]
     342:	1c7b      	adds	r3, r7, #1
     344:	1c0a      	adds	r2, r1, #0
     346:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     348:	1cfb      	adds	r3, r7, #3
     34a:	7819      	ldrb	r1, [r3, #0]
     34c:	1cbb      	adds	r3, r7, #2
     34e:	781a      	ldrb	r2, [r3, #0]
     350:	230f      	movs	r3, #15
     352:	18fb      	adds	r3, r7, r3
     354:	6878      	ldr	r0, [r7, #4]
     356:	2430      	movs	r4, #48	; 0x30
     358:	01c9      	lsls	r1, r1, #7
     35a:	1841      	adds	r1, r0, r1
     35c:	188a      	adds	r2, r1, r2
     35e:	1912      	adds	r2, r2, r4
     360:	7812      	ldrb	r2, [r2, #0]
     362:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     364:	230f      	movs	r3, #15
     366:	18fb      	adds	r3, r7, r3
     368:	220f      	movs	r2, #15
     36a:	18ba      	adds	r2, r7, r2
     36c:	7812      	ldrb	r2, [r2, #0]
     36e:	210f      	movs	r1, #15
     370:	438a      	bics	r2, r1
     372:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     374:	1c7b      	adds	r3, r7, #1
     376:	781b      	ldrb	r3, [r3, #0]
     378:	220f      	movs	r2, #15
     37a:	4013      	ands	r3, r2
     37c:	b2d9      	uxtb	r1, r3
     37e:	230f      	movs	r3, #15
     380:	18fb      	adds	r3, r7, r3
     382:	220f      	movs	r2, #15
     384:	18ba      	adds	r2, r7, r2
     386:	7812      	ldrb	r2, [r2, #0]
     388:	430a      	orrs	r2, r1
     38a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     38c:	1cfb      	adds	r3, r7, #3
     38e:	781a      	ldrb	r2, [r3, #0]
     390:	1cbb      	adds	r3, r7, #2
     392:	781b      	ldrb	r3, [r3, #0]
     394:	6879      	ldr	r1, [r7, #4]
     396:	2030      	movs	r0, #48	; 0x30
     398:	01d2      	lsls	r2, r2, #7
     39a:	188a      	adds	r2, r1, r2
     39c:	18d3      	adds	r3, r2, r3
     39e:	181b      	adds	r3, r3, r0
     3a0:	220f      	movs	r2, #15
     3a2:	18ba      	adds	r2, r7, r2
     3a4:	7812      	ldrb	r2, [r2, #0]
     3a6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     3a8:	46c0      	nop			; (mov r8, r8)
     3aa:	46bd      	mov	sp, r7
     3ac:	b005      	add	sp, #20
     3ae:	bd90      	pop	{r4, r7, pc}

000003b0 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     3b0:	b590      	push	{r4, r7, lr}
     3b2:	b085      	sub	sp, #20
     3b4:	af00      	add	r7, sp, #0
     3b6:	6078      	str	r0, [r7, #4]
     3b8:	000c      	movs	r4, r1
     3ba:	0010      	movs	r0, r2
     3bc:	0019      	movs	r1, r3
     3be:	1cfb      	adds	r3, r7, #3
     3c0:	1c22      	adds	r2, r4, #0
     3c2:	701a      	strb	r2, [r3, #0]
     3c4:	1cbb      	adds	r3, r7, #2
     3c6:	1c02      	adds	r2, r0, #0
     3c8:	701a      	strb	r2, [r3, #0]
     3ca:	1c7b      	adds	r3, r7, #1
     3cc:	1c0a      	adds	r2, r1, #0
     3ce:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d0:	1cfb      	adds	r3, r7, #3
     3d2:	7819      	ldrb	r1, [r3, #0]
     3d4:	1cbb      	adds	r3, r7, #2
     3d6:	781a      	ldrb	r2, [r3, #0]
     3d8:	230f      	movs	r3, #15
     3da:	18fb      	adds	r3, r7, r3
     3dc:	6878      	ldr	r0, [r7, #4]
     3de:	2430      	movs	r4, #48	; 0x30
     3e0:	01c9      	lsls	r1, r1, #7
     3e2:	1841      	adds	r1, r0, r1
     3e4:	188a      	adds	r2, r1, r2
     3e6:	1912      	adds	r2, r2, r4
     3e8:	7812      	ldrb	r2, [r2, #0]
     3ea:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	230f      	movs	r3, #15
     3ee:	18fb      	adds	r3, r7, r3
     3f0:	220f      	movs	r2, #15
     3f2:	18ba      	adds	r2, r7, r2
     3f4:	7812      	ldrb	r2, [r2, #0]
     3f6:	210f      	movs	r1, #15
     3f8:	400a      	ands	r2, r1
     3fa:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     3fc:	1c7b      	adds	r3, r7, #1
     3fe:	781b      	ldrb	r3, [r3, #0]
     400:	011b      	lsls	r3, r3, #4
     402:	b2d9      	uxtb	r1, r3
     404:	230f      	movs	r3, #15
     406:	18fb      	adds	r3, r7, r3
     408:	220f      	movs	r2, #15
     40a:	18ba      	adds	r2, r7, r2
     40c:	7812      	ldrb	r2, [r2, #0]
     40e:	430a      	orrs	r2, r1
     410:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     412:	1cfb      	adds	r3, r7, #3
     414:	781a      	ldrb	r2, [r3, #0]
     416:	1cbb      	adds	r3, r7, #2
     418:	781b      	ldrb	r3, [r3, #0]
     41a:	6879      	ldr	r1, [r7, #4]
     41c:	2030      	movs	r0, #48	; 0x30
     41e:	01d2      	lsls	r2, r2, #7
     420:	188a      	adds	r2, r1, r2
     422:	18d3      	adds	r3, r2, r3
     424:	181b      	adds	r3, r3, r0
     426:	220f      	movs	r2, #15
     428:	18ba      	adds	r2, r7, r2
     42a:	7812      	ldrb	r2, [r2, #0]
     42c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	46bd      	mov	sp, r7
     432:	b005      	add	sp, #20
     434:	bd90      	pop	{r4, r7, pc}

00000436 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     436:	b590      	push	{r4, r7, lr}
     438:	b085      	sub	sp, #20
     43a:	af00      	add	r7, sp, #0
     43c:	6078      	str	r0, [r7, #4]
     43e:	000c      	movs	r4, r1
     440:	0010      	movs	r0, r2
     442:	0019      	movs	r1, r3
     444:	1cfb      	adds	r3, r7, #3
     446:	1c22      	adds	r2, r4, #0
     448:	701a      	strb	r2, [r3, #0]
     44a:	1cbb      	adds	r3, r7, #2
     44c:	1c02      	adds	r2, r0, #0
     44e:	701a      	strb	r2, [r3, #0]
     450:	1c7b      	adds	r3, r7, #1
     452:	1c0a      	adds	r2, r1, #0
     454:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     456:	1cfb      	adds	r3, r7, #3
     458:	7819      	ldrb	r1, [r3, #0]
     45a:	1cbb      	adds	r3, r7, #2
     45c:	781a      	ldrb	r2, [r3, #0]
     45e:	230f      	movs	r3, #15
     460:	18fb      	adds	r3, r7, r3
     462:	6878      	ldr	r0, [r7, #4]
     464:	2440      	movs	r4, #64	; 0x40
     466:	01c9      	lsls	r1, r1, #7
     468:	1841      	adds	r1, r0, r1
     46a:	188a      	adds	r2, r1, r2
     46c:	1912      	adds	r2, r2, r4
     46e:	7812      	ldrb	r2, [r2, #0]
     470:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     472:	230f      	movs	r3, #15
     474:	18fb      	adds	r3, r7, r3
     476:	220f      	movs	r2, #15
     478:	18ba      	adds	r2, r7, r2
     47a:	7812      	ldrb	r2, [r2, #0]
     47c:	2101      	movs	r1, #1
     47e:	438a      	bics	r2, r1
     480:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	1c7b      	adds	r3, r7, #1
     484:	7819      	ldrb	r1, [r3, #0]
     486:	230f      	movs	r3, #15
     488:	18fb      	adds	r3, r7, r3
     48a:	220f      	movs	r2, #15
     48c:	18ba      	adds	r2, r7, r2
     48e:	7812      	ldrb	r2, [r2, #0]
     490:	430a      	orrs	r2, r1
     492:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     494:	1cfb      	adds	r3, r7, #3
     496:	781a      	ldrb	r2, [r3, #0]
     498:	1cbb      	adds	r3, r7, #2
     49a:	781b      	ldrb	r3, [r3, #0]
     49c:	6879      	ldr	r1, [r7, #4]
     49e:	2040      	movs	r0, #64	; 0x40
     4a0:	01d2      	lsls	r2, r2, #7
     4a2:	188a      	adds	r2, r1, r2
     4a4:	18d3      	adds	r3, r2, r3
     4a6:	181b      	adds	r3, r3, r0
     4a8:	220f      	movs	r2, #15
     4aa:	18ba      	adds	r2, r7, r2
     4ac:	7812      	ldrb	r2, [r2, #0]
     4ae:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4b0:	46c0      	nop			; (mov r8, r8)
     4b2:	46bd      	mov	sp, r7
     4b4:	b005      	add	sp, #20
     4b6:	bd90      	pop	{r4, r7, pc}

000004b8 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     4b8:	b5b0      	push	{r4, r5, r7, lr}
     4ba:	b082      	sub	sp, #8
     4bc:	af00      	add	r7, sp, #0
     4be:	6078      	str	r0, [r7, #4]
     4c0:	0008      	movs	r0, r1
     4c2:	0011      	movs	r1, r2
     4c4:	1cfb      	adds	r3, r7, #3
     4c6:	1c02      	adds	r2, r0, #0
     4c8:	701a      	strb	r2, [r3, #0]
     4ca:	1cbb      	adds	r3, r7, #2
     4cc:	1c0a      	adds	r2, r1, #0
     4ce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4d0:	1cfb      	adds	r3, r7, #3
     4d2:	781a      	ldrb	r2, [r3, #0]
     4d4:	1cbb      	adds	r3, r7, #2
     4d6:	781b      	ldrb	r3, [r3, #0]
     4d8:	1cf9      	adds	r1, r7, #3
     4da:	7808      	ldrb	r0, [r1, #0]
     4dc:	1cb9      	adds	r1, r7, #2
     4de:	7809      	ldrb	r1, [r1, #0]
     4e0:	687c      	ldr	r4, [r7, #4]
     4e2:	2540      	movs	r5, #64	; 0x40
     4e4:	01c0      	lsls	r0, r0, #7
     4e6:	1820      	adds	r0, r4, r0
     4e8:	1841      	adds	r1, r0, r1
     4ea:	1949      	adds	r1, r1, r5
     4ec:	7809      	ldrb	r1, [r1, #0]
     4ee:	b2c9      	uxtb	r1, r1
     4f0:	2004      	movs	r0, #4
     4f2:	4301      	orrs	r1, r0
     4f4:	b2cc      	uxtb	r4, r1
     4f6:	6879      	ldr	r1, [r7, #4]
     4f8:	2040      	movs	r0, #64	; 0x40
     4fa:	01d2      	lsls	r2, r2, #7
     4fc:	188a      	adds	r2, r1, r2
     4fe:	18d3      	adds	r3, r2, r3
     500:	181b      	adds	r3, r3, r0
     502:	1c22      	adds	r2, r4, #0
     504:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     506:	46c0      	nop			; (mov r8, r8)
     508:	46bd      	mov	sp, r7
     50a:	b002      	add	sp, #8
     50c:	bdb0      	pop	{r4, r5, r7, pc}

0000050e <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     50e:	b5b0      	push	{r4, r5, r7, lr}
     510:	b082      	sub	sp, #8
     512:	af00      	add	r7, sp, #0
     514:	6078      	str	r0, [r7, #4]
     516:	0008      	movs	r0, r1
     518:	0011      	movs	r1, r2
     51a:	1cfb      	adds	r3, r7, #3
     51c:	1c02      	adds	r2, r0, #0
     51e:	701a      	strb	r2, [r3, #0]
     520:	1cbb      	adds	r3, r7, #2
     522:	1c0a      	adds	r2, r1, #0
     524:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     526:	1cfb      	adds	r3, r7, #3
     528:	781a      	ldrb	r2, [r3, #0]
     52a:	1cbb      	adds	r3, r7, #2
     52c:	781b      	ldrb	r3, [r3, #0]
     52e:	1cf9      	adds	r1, r7, #3
     530:	7808      	ldrb	r0, [r1, #0]
     532:	1cb9      	adds	r1, r7, #2
     534:	7809      	ldrb	r1, [r1, #0]
     536:	687c      	ldr	r4, [r7, #4]
     538:	2540      	movs	r5, #64	; 0x40
     53a:	01c0      	lsls	r0, r0, #7
     53c:	1820      	adds	r0, r4, r0
     53e:	1841      	adds	r1, r0, r1
     540:	1949      	adds	r1, r1, r5
     542:	7809      	ldrb	r1, [r1, #0]
     544:	b2c9      	uxtb	r1, r1
     546:	2004      	movs	r0, #4
     548:	4381      	bics	r1, r0
     54a:	b2cc      	uxtb	r4, r1
     54c:	6879      	ldr	r1, [r7, #4]
     54e:	2040      	movs	r0, #64	; 0x40
     550:	01d2      	lsls	r2, r2, #7
     552:	188a      	adds	r2, r1, r2
     554:	18d3      	adds	r3, r2, r3
     556:	181b      	adds	r3, r3, r0
     558:	1c22      	adds	r2, r4, #0
     55a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     55c:	46c0      	nop			; (mov r8, r8)
     55e:	46bd      	mov	sp, r7
     560:	b002      	add	sp, #8
     562:	bdb0      	pop	{r4, r5, r7, pc}

00000564 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     564:	b580      	push	{r7, lr}
     566:	b084      	sub	sp, #16
     568:	af00      	add	r7, sp, #0
     56a:	60f8      	str	r0, [r7, #12]
     56c:	607a      	str	r2, [r7, #4]
     56e:	230b      	movs	r3, #11
     570:	18fb      	adds	r3, r7, r3
     572:	1c0a      	adds	r2, r1, #0
     574:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     576:	230b      	movs	r3, #11
     578:	18fb      	adds	r3, r7, r3
     57a:	781b      	ldrb	r3, [r3, #0]
     57c:	68fa      	ldr	r2, [r7, #12]
     57e:	01db      	lsls	r3, r3, #7
     580:	18d3      	adds	r3, r2, r3
     582:	3328      	adds	r3, #40	; 0x28
     584:	687a      	ldr	r2, [r7, #4]
     586:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     588:	46c0      	nop			; (mov r8, r8)
     58a:	46bd      	mov	sp, r7
     58c:	b004      	add	sp, #16
     58e:	bd80      	pop	{r7, pc}

00000590 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     590:	b580      	push	{r7, lr}
     592:	b082      	sub	sp, #8
     594:	af00      	add	r7, sp, #0
     596:	6039      	str	r1, [r7, #0]
     598:	0011      	movs	r1, r2
     59a:	1dfb      	adds	r3, r7, #7
     59c:	1c02      	adds	r2, r0, #0
     59e:	701a      	strb	r2, [r3, #0]
     5a0:	1dbb      	adds	r3, r7, #6
     5a2:	1c0a      	adds	r2, r1, #0
     5a4:	701a      	strb	r2, [r3, #0]
	switch (direction) {
     5a6:	1dbb      	adds	r3, r7, #6
     5a8:	781b      	ldrb	r3, [r3, #0]
     5aa:	2b01      	cmp	r3, #1
     5ac:	d025      	beq.n	5fa <_gpio_set_direction+0x6a>
     5ae:	2b02      	cmp	r3, #2
     5b0:	d043      	beq.n	63a <_gpio_set_direction+0xaa>
     5b2:	2b00      	cmp	r3, #0
     5b4:	d163      	bne.n	67e <_gpio_set_direction+0xee>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     5b6:	683a      	ldr	r2, [r7, #0]
     5b8:	1dfb      	adds	r3, r7, #7
     5ba:	7819      	ldrb	r1, [r3, #0]
     5bc:	23c0      	movs	r3, #192	; 0xc0
     5be:	05db      	lsls	r3, r3, #23
     5c0:	0018      	movs	r0, r3
     5c2:	4b34      	ldr	r3, [pc, #208]	; (694 <_gpio_set_direction+0x104>)
     5c4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     5c6:	683b      	ldr	r3, [r7, #0]
     5c8:	041b      	lsls	r3, r3, #16
     5ca:	0c1b      	lsrs	r3, r3, #16
     5cc:	2280      	movs	r2, #128	; 0x80
     5ce:	05d2      	lsls	r2, r2, #23
     5d0:	431a      	orrs	r2, r3
     5d2:	1dfb      	adds	r3, r7, #7
     5d4:	7819      	ldrb	r1, [r3, #0]
     5d6:	2382      	movs	r3, #130	; 0x82
     5d8:	05db      	lsls	r3, r3, #23
     5da:	0018      	movs	r0, r3
     5dc:	4b2e      	ldr	r3, [pc, #184]	; (698 <_gpio_set_direction+0x108>)
     5de:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     5e0:	683b      	ldr	r3, [r7, #0]
     5e2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     5e4:	22c0      	movs	r2, #192	; 0xc0
     5e6:	0612      	lsls	r2, r2, #24
     5e8:	431a      	orrs	r2, r3
     5ea:	1dfb      	adds	r3, r7, #7
     5ec:	7819      	ldrb	r1, [r3, #0]
     5ee:	2382      	movs	r3, #130	; 0x82
     5f0:	05db      	lsls	r3, r3, #23
     5f2:	0018      	movs	r0, r3
     5f4:	4b28      	ldr	r3, [pc, #160]	; (698 <_gpio_set_direction+0x108>)
     5f6:	4798      	blx	r3
		break;
     5f8:	e047      	b.n	68a <_gpio_set_direction+0xfa>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     5fa:	683a      	ldr	r2, [r7, #0]
     5fc:	1dfb      	adds	r3, r7, #7
     5fe:	7819      	ldrb	r1, [r3, #0]
     600:	23c0      	movs	r3, #192	; 0xc0
     602:	05db      	lsls	r3, r3, #23
     604:	0018      	movs	r0, r3
     606:	4b23      	ldr	r3, [pc, #140]	; (694 <_gpio_set_direction+0x104>)
     608:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     60a:	683b      	ldr	r3, [r7, #0]
     60c:	041b      	lsls	r3, r3, #16
     60e:	0c1b      	lsrs	r3, r3, #16
     610:	4a22      	ldr	r2, [pc, #136]	; (69c <_gpio_set_direction+0x10c>)
     612:	431a      	orrs	r2, r3
     614:	1dfb      	adds	r3, r7, #7
     616:	7819      	ldrb	r1, [r3, #0]
     618:	2382      	movs	r3, #130	; 0x82
     61a:	05db      	lsls	r3, r3, #23
     61c:	0018      	movs	r0, r3
     61e:	4b1e      	ldr	r3, [pc, #120]	; (698 <_gpio_set_direction+0x108>)
     620:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     622:	683b      	ldr	r3, [r7, #0]
     624:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     626:	4a1e      	ldr	r2, [pc, #120]	; (6a0 <_gpio_set_direction+0x110>)
     628:	431a      	orrs	r2, r3
     62a:	1dfb      	adds	r3, r7, #7
     62c:	7819      	ldrb	r1, [r3, #0]
     62e:	2382      	movs	r3, #130	; 0x82
     630:	05db      	lsls	r3, r3, #23
     632:	0018      	movs	r0, r3
     634:	4b18      	ldr	r3, [pc, #96]	; (698 <_gpio_set_direction+0x108>)
     636:	4798      	blx	r3
		break;
     638:	e027      	b.n	68a <_gpio_set_direction+0xfa>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
     63a:	683a      	ldr	r2, [r7, #0]
     63c:	1dfb      	adds	r3, r7, #7
     63e:	7819      	ldrb	r1, [r3, #0]
     640:	23c0      	movs	r3, #192	; 0xc0
     642:	05db      	lsls	r3, r3, #23
     644:	0018      	movs	r0, r3
     646:	4b17      	ldr	r3, [pc, #92]	; (6a4 <_gpio_set_direction+0x114>)
     648:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     64a:	683b      	ldr	r3, [r7, #0]
     64c:	041b      	lsls	r3, r3, #16
     64e:	0c1b      	lsrs	r3, r3, #16
     650:	2280      	movs	r2, #128	; 0x80
     652:	05d2      	lsls	r2, r2, #23
     654:	431a      	orrs	r2, r3
     656:	1dfb      	adds	r3, r7, #7
     658:	7819      	ldrb	r1, [r3, #0]
     65a:	2382      	movs	r3, #130	; 0x82
     65c:	05db      	lsls	r3, r3, #23
     65e:	0018      	movs	r0, r3
     660:	4b0d      	ldr	r3, [pc, #52]	; (698 <_gpio_set_direction+0x108>)
     662:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     664:	683b      	ldr	r3, [r7, #0]
     666:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     668:	22c0      	movs	r2, #192	; 0xc0
     66a:	0612      	lsls	r2, r2, #24
     66c:	431a      	orrs	r2, r3
     66e:	1dfb      	adds	r3, r7, #7
     670:	7819      	ldrb	r1, [r3, #0]
     672:	2382      	movs	r3, #130	; 0x82
     674:	05db      	lsls	r3, r3, #23
     676:	0018      	movs	r0, r3
     678:	4b07      	ldr	r3, [pc, #28]	; (698 <_gpio_set_direction+0x108>)
     67a:	4798      	blx	r3
		break;
     67c:	e005      	b.n	68a <_gpio_set_direction+0xfa>

	default:
		ASSERT(false);
     67e:	4b0a      	ldr	r3, [pc, #40]	; (6a8 <_gpio_set_direction+0x118>)
     680:	2246      	movs	r2, #70	; 0x46
     682:	0019      	movs	r1, r3
     684:	2000      	movs	r0, #0
     686:	4b09      	ldr	r3, [pc, #36]	; (6ac <_gpio_set_direction+0x11c>)
     688:	4798      	blx	r3
	}
}
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	46bd      	mov	sp, r7
     68e:	b002      	add	sp, #8
     690:	bd80      	pop	{r7, pc}
     692:	46c0      	nop			; (mov r8, r8)
     694:	000002a5 	.word	0x000002a5
     698:	00000565 	.word	0x00000565
     69c:	40020000 	.word	0x40020000
     6a0:	c0020000 	.word	0xc0020000
     6a4:	00000279 	.word	0x00000279
     6a8:	000083dc 	.word	0x000083dc
     6ac:	00001afd 	.word	0x00001afd

000006b0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     6b0:	b580      	push	{r7, lr}
     6b2:	b082      	sub	sp, #8
     6b4:	af00      	add	r7, sp, #0
     6b6:	6039      	str	r1, [r7, #0]
     6b8:	0011      	movs	r1, r2
     6ba:	1dfb      	adds	r3, r7, #7
     6bc:	1c02      	adds	r2, r0, #0
     6be:	701a      	strb	r2, [r3, #0]
     6c0:	1dbb      	adds	r3, r7, #6
     6c2:	1c0a      	adds	r2, r1, #0
     6c4:	701a      	strb	r2, [r3, #0]
	if (level) {
     6c6:	1dbb      	adds	r3, r7, #6
     6c8:	781b      	ldrb	r3, [r3, #0]
     6ca:	2b00      	cmp	r3, #0
     6cc:	d008      	beq.n	6e0 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     6ce:	683a      	ldr	r2, [r7, #0]
     6d0:	1dfb      	adds	r3, r7, #7
     6d2:	7819      	ldrb	r1, [r3, #0]
     6d4:	23c0      	movs	r3, #192	; 0xc0
     6d6:	05db      	lsls	r3, r3, #23
     6d8:	0018      	movs	r0, r3
     6da:	4b07      	ldr	r3, [pc, #28]	; (6f8 <_gpio_set_level+0x48>)
     6dc:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     6de:	e007      	b.n	6f0 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     6e0:	683a      	ldr	r2, [r7, #0]
     6e2:	1dfb      	adds	r3, r7, #7
     6e4:	7819      	ldrb	r1, [r3, #0]
     6e6:	23c0      	movs	r3, #192	; 0xc0
     6e8:	05db      	lsls	r3, r3, #23
     6ea:	0018      	movs	r0, r3
     6ec:	4b03      	ldr	r3, [pc, #12]	; (6fc <_gpio_set_level+0x4c>)
     6ee:	4798      	blx	r3
}
     6f0:	46c0      	nop			; (mov r8, r8)
     6f2:	46bd      	mov	sp, r7
     6f4:	b002      	add	sp, #8
     6f6:	bd80      	pop	{r7, pc}
     6f8:	000002d1 	.word	0x000002d1
     6fc:	000002fd 	.word	0x000002fd

00000700 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     700:	b590      	push	{r4, r7, lr}
     702:	b083      	sub	sp, #12
     704:	af00      	add	r7, sp, #0
     706:	0004      	movs	r4, r0
     708:	0008      	movs	r0, r1
     70a:	0011      	movs	r1, r2
     70c:	1dfb      	adds	r3, r7, #7
     70e:	1c22      	adds	r2, r4, #0
     710:	701a      	strb	r2, [r3, #0]
     712:	1dbb      	adds	r3, r7, #6
     714:	1c02      	adds	r2, r0, #0
     716:	701a      	strb	r2, [r3, #0]
     718:	1d7b      	adds	r3, r7, #5
     71a:	1c0a      	adds	r2, r1, #0
     71c:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
     71e:	1d7b      	adds	r3, r7, #5
     720:	781b      	ldrb	r3, [r3, #0]
     722:	2b01      	cmp	r3, #1
     724:	d00d      	beq.n	742 <_gpio_set_pin_pull_mode+0x42>
     726:	2b02      	cmp	r3, #2
     728:	d02b      	beq.n	782 <_gpio_set_pin_pull_mode+0x82>
     72a:	2b00      	cmp	r3, #0
     72c:	d149      	bne.n	7c2 <_gpio_set_pin_pull_mode+0xc2>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     72e:	1dbb      	adds	r3, r7, #6
     730:	781a      	ldrb	r2, [r3, #0]
     732:	1dfb      	adds	r3, r7, #7
     734:	7819      	ldrb	r1, [r3, #0]
     736:	2382      	movs	r3, #130	; 0x82
     738:	05db      	lsls	r3, r3, #23
     73a:	0018      	movs	r0, r3
     73c:	4b26      	ldr	r3, [pc, #152]	; (7d8 <_gpio_set_pin_pull_mode+0xd8>)
     73e:	4798      	blx	r3
		break;
     740:	e046      	b.n	7d0 <_gpio_set_pin_pull_mode+0xd0>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     742:	1dbb      	adds	r3, r7, #6
     744:	781b      	ldrb	r3, [r3, #0]
     746:	2201      	movs	r2, #1
     748:	409a      	lsls	r2, r3
     74a:	1dfb      	adds	r3, r7, #7
     74c:	7819      	ldrb	r1, [r3, #0]
     74e:	23c0      	movs	r3, #192	; 0xc0
     750:	05db      	lsls	r3, r3, #23
     752:	0018      	movs	r0, r3
     754:	4b21      	ldr	r3, [pc, #132]	; (7dc <_gpio_set_pin_pull_mode+0xdc>)
     756:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     758:	1dbb      	adds	r3, r7, #6
     75a:	781a      	ldrb	r2, [r3, #0]
     75c:	1dfb      	adds	r3, r7, #7
     75e:	7819      	ldrb	r1, [r3, #0]
     760:	2382      	movs	r3, #130	; 0x82
     762:	05db      	lsls	r3, r3, #23
     764:	0018      	movs	r0, r3
     766:	4b1e      	ldr	r3, [pc, #120]	; (7e0 <_gpio_set_pin_pull_mode+0xe0>)
     768:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
     76a:	1dbb      	adds	r3, r7, #6
     76c:	781b      	ldrb	r3, [r3, #0]
     76e:	2201      	movs	r2, #1
     770:	409a      	lsls	r2, r3
     772:	1dfb      	adds	r3, r7, #7
     774:	7819      	ldrb	r1, [r3, #0]
     776:	23c0      	movs	r3, #192	; 0xc0
     778:	05db      	lsls	r3, r3, #23
     77a:	0018      	movs	r0, r3
     77c:	4b19      	ldr	r3, [pc, #100]	; (7e4 <_gpio_set_pin_pull_mode+0xe4>)
     77e:	4798      	blx	r3
		break;
     780:	e026      	b.n	7d0 <_gpio_set_pin_pull_mode+0xd0>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     782:	1dbb      	adds	r3, r7, #6
     784:	781b      	ldrb	r3, [r3, #0]
     786:	2201      	movs	r2, #1
     788:	409a      	lsls	r2, r3
     78a:	1dfb      	adds	r3, r7, #7
     78c:	7819      	ldrb	r1, [r3, #0]
     78e:	23c0      	movs	r3, #192	; 0xc0
     790:	05db      	lsls	r3, r3, #23
     792:	0018      	movs	r0, r3
     794:	4b11      	ldr	r3, [pc, #68]	; (7dc <_gpio_set_pin_pull_mode+0xdc>)
     796:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     798:	1dbb      	adds	r3, r7, #6
     79a:	781a      	ldrb	r2, [r3, #0]
     79c:	1dfb      	adds	r3, r7, #7
     79e:	7819      	ldrb	r1, [r3, #0]
     7a0:	2382      	movs	r3, #130	; 0x82
     7a2:	05db      	lsls	r3, r3, #23
     7a4:	0018      	movs	r0, r3
     7a6:	4b0e      	ldr	r3, [pc, #56]	; (7e0 <_gpio_set_pin_pull_mode+0xe0>)
     7a8:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
     7aa:	1dbb      	adds	r3, r7, #6
     7ac:	781b      	ldrb	r3, [r3, #0]
     7ae:	2201      	movs	r2, #1
     7b0:	409a      	lsls	r2, r3
     7b2:	1dfb      	adds	r3, r7, #7
     7b4:	7819      	ldrb	r1, [r3, #0]
     7b6:	23c0      	movs	r3, #192	; 0xc0
     7b8:	05db      	lsls	r3, r3, #23
     7ba:	0018      	movs	r0, r3
     7bc:	4b0a      	ldr	r3, [pc, #40]	; (7e8 <_gpio_set_pin_pull_mode+0xe8>)
     7be:	4798      	blx	r3
		break;
     7c0:	e006      	b.n	7d0 <_gpio_set_pin_pull_mode+0xd0>

	default:
		ASSERT(false);
     7c2:	4b0a      	ldr	r3, [pc, #40]	; (7ec <_gpio_set_pin_pull_mode+0xec>)
     7c4:	2289      	movs	r2, #137	; 0x89
     7c6:	0019      	movs	r1, r3
     7c8:	2000      	movs	r0, #0
     7ca:	4b09      	ldr	r3, [pc, #36]	; (7f0 <_gpio_set_pin_pull_mode+0xf0>)
     7cc:	4798      	blx	r3
		break;
     7ce:	46c0      	nop			; (mov r8, r8)
	}
}
     7d0:	46c0      	nop			; (mov r8, r8)
     7d2:	46bd      	mov	sp, r7
     7d4:	b003      	add	sp, #12
     7d6:	bd90      	pop	{r4, r7, pc}
     7d8:	0000050f 	.word	0x0000050f
     7dc:	000002a5 	.word	0x000002a5
     7e0:	000004b9 	.word	0x000004b9
     7e4:	000002d1 	.word	0x000002d1
     7e8:	000002fd 	.word	0x000002fd
     7ec:	000083dc 	.word	0x000083dc
     7f0:	00001afd 	.word	0x00001afd

000007f4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     7f4:	b590      	push	{r4, r7, lr}
     7f6:	b085      	sub	sp, #20
     7f8:	af00      	add	r7, sp, #0
     7fa:	6078      	str	r0, [r7, #4]
     7fc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     7fe:	687b      	ldr	r3, [r7, #4]
     800:	095a      	lsrs	r2, r3, #5
     802:	230f      	movs	r3, #15
     804:	18fb      	adds	r3, r7, r3
     806:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     808:	687b      	ldr	r3, [r7, #4]
     80a:	b2da      	uxtb	r2, r3
     80c:	230e      	movs	r3, #14
     80e:	18fb      	adds	r3, r7, r3
     810:	211f      	movs	r1, #31
     812:	400a      	ands	r2, r1
     814:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     816:	683b      	ldr	r3, [r7, #0]
     818:	3301      	adds	r3, #1
     81a:	d10b      	bne.n	834 <_gpio_set_pin_function+0x40>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     81c:	230e      	movs	r3, #14
     81e:	18fb      	adds	r3, r7, r3
     820:	781a      	ldrb	r2, [r3, #0]
     822:	230f      	movs	r3, #15
     824:	18fb      	adds	r3, r7, r3
     826:	7819      	ldrb	r1, [r3, #0]
     828:	2382      	movs	r3, #130	; 0x82
     82a:	05d8      	lsls	r0, r3, #23
     82c:	2300      	movs	r3, #0
     82e:	4c1b      	ldr	r4, [pc, #108]	; (89c <_gpio_set_pin_function+0xa8>)
     830:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     832:	e02f      	b.n	894 <_gpio_set_pin_function+0xa0>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     834:	230e      	movs	r3, #14
     836:	18fb      	adds	r3, r7, r3
     838:	781a      	ldrb	r2, [r3, #0]
     83a:	230f      	movs	r3, #15
     83c:	18fb      	adds	r3, r7, r3
     83e:	7819      	ldrb	r1, [r3, #0]
     840:	2382      	movs	r3, #130	; 0x82
     842:	05d8      	lsls	r0, r3, #23
     844:	2301      	movs	r3, #1
     846:	4c15      	ldr	r4, [pc, #84]	; (89c <_gpio_set_pin_function+0xa8>)
     848:	47a0      	blx	r4
		if (pin & 1) {
     84a:	230e      	movs	r3, #14
     84c:	18fb      	adds	r3, r7, r3
     84e:	781b      	ldrb	r3, [r3, #0]
     850:	2201      	movs	r2, #1
     852:	4013      	ands	r3, r2
     854:	d00f      	beq.n	876 <_gpio_set_pin_function+0x82>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     856:	230e      	movs	r3, #14
     858:	18fb      	adds	r3, r7, r3
     85a:	781b      	ldrb	r3, [r3, #0]
     85c:	085b      	lsrs	r3, r3, #1
     85e:	b2da      	uxtb	r2, r3
     860:	683b      	ldr	r3, [r7, #0]
     862:	b2dc      	uxtb	r4, r3
     864:	230f      	movs	r3, #15
     866:	18fb      	adds	r3, r7, r3
     868:	7819      	ldrb	r1, [r3, #0]
     86a:	2382      	movs	r3, #130	; 0x82
     86c:	05d8      	lsls	r0, r3, #23
     86e:	0023      	movs	r3, r4
     870:	4c0b      	ldr	r4, [pc, #44]	; (8a0 <_gpio_set_pin_function+0xac>)
     872:	47a0      	blx	r4
}
     874:	e00e      	b.n	894 <_gpio_set_pin_function+0xa0>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     876:	230e      	movs	r3, #14
     878:	18fb      	adds	r3, r7, r3
     87a:	781b      	ldrb	r3, [r3, #0]
     87c:	085b      	lsrs	r3, r3, #1
     87e:	b2da      	uxtb	r2, r3
     880:	683b      	ldr	r3, [r7, #0]
     882:	b2dc      	uxtb	r4, r3
     884:	230f      	movs	r3, #15
     886:	18fb      	adds	r3, r7, r3
     888:	7819      	ldrb	r1, [r3, #0]
     88a:	2382      	movs	r3, #130	; 0x82
     88c:	05d8      	lsls	r0, r3, #23
     88e:	0023      	movs	r3, r4
     890:	4c04      	ldr	r4, [pc, #16]	; (8a4 <_gpio_set_pin_function+0xb0>)
     892:	47a0      	blx	r4
}
     894:	46c0      	nop			; (mov r8, r8)
     896:	46bd      	mov	sp, r7
     898:	b005      	add	sp, #20
     89a:	bd90      	pop	{r4, r7, pc}
     89c:	00000437 	.word	0x00000437
     8a0:	000003b1 	.word	0x000003b1
     8a4:	00000329 	.word	0x00000329

000008a8 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     8a8:	b580      	push	{r7, lr}
     8aa:	b082      	sub	sp, #8
     8ac:	af00      	add	r7, sp, #0
     8ae:	0002      	movs	r2, r0
     8b0:	1dfb      	adds	r3, r7, #7
     8b2:	701a      	strb	r2, [r3, #0]
     8b4:	1dbb      	adds	r3, r7, #6
     8b6:	1c0a      	adds	r2, r1, #0
     8b8:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     8ba:	1dfb      	adds	r3, r7, #7
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	095b      	lsrs	r3, r3, #5
     8c0:	b2d8      	uxtb	r0, r3
     8c2:	1dfb      	adds	r3, r7, #7
     8c4:	781b      	ldrb	r3, [r3, #0]
     8c6:	221f      	movs	r2, #31
     8c8:	4013      	ands	r3, r2
     8ca:	b2d9      	uxtb	r1, r3
     8cc:	1dbb      	adds	r3, r7, #6
     8ce:	781b      	ldrb	r3, [r3, #0]
     8d0:	001a      	movs	r2, r3
     8d2:	4b03      	ldr	r3, [pc, #12]	; (8e0 <gpio_set_pin_pull_mode+0x38>)
     8d4:	4798      	blx	r3
}
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	46bd      	mov	sp, r7
     8da:	b002      	add	sp, #8
     8dc:	bd80      	pop	{r7, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	00000701 	.word	0x00000701

000008e4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     8e4:	b580      	push	{r7, lr}
     8e6:	b082      	sub	sp, #8
     8e8:	af00      	add	r7, sp, #0
     8ea:	6078      	str	r0, [r7, #4]
     8ec:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     8ee:	683a      	ldr	r2, [r7, #0]
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	0011      	movs	r1, r2
     8f4:	0018      	movs	r0, r3
     8f6:	4b03      	ldr	r3, [pc, #12]	; (904 <gpio_set_pin_function+0x20>)
     8f8:	4798      	blx	r3
}
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	46bd      	mov	sp, r7
     8fe:	b002      	add	sp, #8
     900:	bd80      	pop	{r7, pc}
     902:	46c0      	nop			; (mov r8, r8)
     904:	000007f5 	.word	0x000007f5

00000908 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     908:	b580      	push	{r7, lr}
     90a:	b082      	sub	sp, #8
     90c:	af00      	add	r7, sp, #0
     90e:	0002      	movs	r2, r0
     910:	1dfb      	adds	r3, r7, #7
     912:	701a      	strb	r2, [r3, #0]
     914:	1dbb      	adds	r3, r7, #6
     916:	1c0a      	adds	r2, r1, #0
     918:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     91a:	1dfb      	adds	r3, r7, #7
     91c:	781b      	ldrb	r3, [r3, #0]
     91e:	095b      	lsrs	r3, r3, #5
     920:	b2d8      	uxtb	r0, r3
     922:	1dfb      	adds	r3, r7, #7
     924:	781b      	ldrb	r3, [r3, #0]
     926:	221f      	movs	r2, #31
     928:	4013      	ands	r3, r2
     92a:	2201      	movs	r2, #1
     92c:	409a      	lsls	r2, r3
     92e:	0011      	movs	r1, r2
     930:	1dbb      	adds	r3, r7, #6
     932:	781b      	ldrb	r3, [r3, #0]
     934:	001a      	movs	r2, r3
     936:	4b03      	ldr	r3, [pc, #12]	; (944 <gpio_set_pin_direction+0x3c>)
     938:	4798      	blx	r3
}
     93a:	46c0      	nop			; (mov r8, r8)
     93c:	46bd      	mov	sp, r7
     93e:	b002      	add	sp, #8
     940:	bd80      	pop	{r7, pc}
     942:	46c0      	nop			; (mov r8, r8)
     944:	00000591 	.word	0x00000591

00000948 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     948:	b580      	push	{r7, lr}
     94a:	b082      	sub	sp, #8
     94c:	af00      	add	r7, sp, #0
     94e:	0002      	movs	r2, r0
     950:	1dfb      	adds	r3, r7, #7
     952:	701a      	strb	r2, [r3, #0]
     954:	1dbb      	adds	r3, r7, #6
     956:	1c0a      	adds	r2, r1, #0
     958:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     95a:	1dfb      	adds	r3, r7, #7
     95c:	781b      	ldrb	r3, [r3, #0]
     95e:	095b      	lsrs	r3, r3, #5
     960:	b2d8      	uxtb	r0, r3
     962:	1dfb      	adds	r3, r7, #7
     964:	781b      	ldrb	r3, [r3, #0]
     966:	221f      	movs	r2, #31
     968:	4013      	ands	r3, r2
     96a:	2201      	movs	r2, #1
     96c:	409a      	lsls	r2, r3
     96e:	0011      	movs	r1, r2
     970:	1dbb      	adds	r3, r7, #6
     972:	781b      	ldrb	r3, [r3, #0]
     974:	001a      	movs	r2, r3
     976:	4b03      	ldr	r3, [pc, #12]	; (984 <gpio_set_pin_level+0x3c>)
     978:	4798      	blx	r3
}
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	46bd      	mov	sp, r7
     97e:	b002      	add	sp, #8
     980:	bd80      	pop	{r7, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	000006b1 	.word	0x000006b1

00000988 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     988:	b580      	push	{r7, lr}
     98a:	af00      	add	r7, sp, #0
	_init_chip();
     98c:	4b02      	ldr	r3, [pc, #8]	; (998 <init_mcu+0x10>)
     98e:	4798      	blx	r3
}
     990:	46c0      	nop			; (mov r8, r8)
     992:	46bd      	mov	sp, r7
     994:	bd80      	pop	{r7, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	0000236d 	.word	0x0000236d

0000099c <WindSensor_PORT_init>:
struct usart_sync_descriptor UART;

struct pwm_descriptor StepperDriver;

void WindSensor_PORT_init(void)
{
     99c:	b580      	push	{r7, lr}
     99e:	af00      	add	r7, sp, #0

	// Disable digital pin circuitry
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_OFF);
     9a0:	2100      	movs	r1, #0
     9a2:	2029      	movs	r0, #41	; 0x29
     9a4:	4b04      	ldr	r3, [pc, #16]	; (9b8 <WindSensor_PORT_init+0x1c>)
     9a6:	4798      	blx	r3

	gpio_set_pin_function(PB09, PINMUX_PB09B_ADC0_AIN3);
     9a8:	4b04      	ldr	r3, [pc, #16]	; (9bc <WindSensor_PORT_init+0x20>)
     9aa:	0019      	movs	r1, r3
     9ac:	2029      	movs	r0, #41	; 0x29
     9ae:	4b04      	ldr	r3, [pc, #16]	; (9c0 <WindSensor_PORT_init+0x24>)
     9b0:	4798      	blx	r3
}
     9b2:	46c0      	nop			; (mov r8, r8)
     9b4:	46bd      	mov	sp, r7
     9b6:	bd80      	pop	{r7, pc}
     9b8:	00000909 	.word	0x00000909
     9bc:	00290001 	.word	0x00290001
     9c0:	000008e5 	.word	0x000008e5

000009c4 <WindSensor_CLOCK_init>:

void WindSensor_CLOCK_init(void)
{
     9c4:	b580      	push	{r7, lr}
     9c6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_ADC0_bit(MCLK);
     9c8:	4b06      	ldr	r3, [pc, #24]	; (9e4 <WindSensor_CLOCK_init+0x20>)
     9ca:	0018      	movs	r0, r3
     9cc:	4b06      	ldr	r3, [pc, #24]	; (9e8 <WindSensor_CLOCK_init+0x24>)
     9ce:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     9d0:	4b06      	ldr	r3, [pc, #24]	; (9ec <WindSensor_CLOCK_init+0x28>)
     9d2:	2240      	movs	r2, #64	; 0x40
     9d4:	2121      	movs	r1, #33	; 0x21
     9d6:	0018      	movs	r0, r3
     9d8:	4b05      	ldr	r3, [pc, #20]	; (9f0 <WindSensor_CLOCK_init+0x2c>)
     9da:	4798      	blx	r3
}
     9dc:	46c0      	nop			; (mov r8, r8)
     9de:	46bd      	mov	sp, r7
     9e0:	bd80      	pop	{r7, pc}
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	40000800 	.word	0x40000800
     9e8:	0000023d 	.word	0x0000023d
     9ec:	40001c00 	.word	0x40001c00
     9f0:	000001bb 	.word	0x000001bb

000009f4 <WindSensor_init>:

void WindSensor_init(void)
{
     9f4:	b580      	push	{r7, lr}
     9f6:	af00      	add	r7, sp, #0
	WindSensor_CLOCK_init();
     9f8:	4b07      	ldr	r3, [pc, #28]	; (a18 <WindSensor_init+0x24>)
     9fa:	4798      	blx	r3
	WindSensor_PORT_init();
     9fc:	4b07      	ldr	r3, [pc, #28]	; (a1c <WindSensor_init+0x28>)
     9fe:	4798      	blx	r3
	adc_sync_init(&WindSensor, ADC0, _adc_get_adc_sync());
     a00:	4b07      	ldr	r3, [pc, #28]	; (a20 <WindSensor_init+0x2c>)
     a02:	4798      	blx	r3
     a04:	0002      	movs	r2, r0
     a06:	4907      	ldr	r1, [pc, #28]	; (a24 <WindSensor_init+0x30>)
     a08:	4b07      	ldr	r3, [pc, #28]	; (a28 <WindSensor_init+0x34>)
     a0a:	0018      	movs	r0, r3
     a0c:	4b07      	ldr	r3, [pc, #28]	; (a2c <WindSensor_init+0x38>)
     a0e:	4798      	blx	r3
}
     a10:	46c0      	nop			; (mov r8, r8)
     a12:	46bd      	mov	sp, r7
     a14:	bd80      	pop	{r7, pc}
     a16:	46c0      	nop			; (mov r8, r8)
     a18:	000009c5 	.word	0x000009c5
     a1c:	0000099d 	.word	0x0000099d
     a20:	0000233d 	.word	0x0000233d
     a24:	42004400 	.word	0x42004400
     a28:	200027b4 	.word	0x200027b4
     a2c:	00000dc1 	.word	0x00000dc1

00000a30 <TempSensor_PORT_init>:

void TempSensor_PORT_init(void)
{
     a30:	b580      	push	{r7, lr}
     a32:	af00      	add	r7, sp, #0

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA08, GPIO_DIRECTION_OFF);
     a34:	2100      	movs	r1, #0
     a36:	2008      	movs	r0, #8
     a38:	4b04      	ldr	r3, [pc, #16]	; (a4c <TempSensor_PORT_init+0x1c>)
     a3a:	4798      	blx	r3

	gpio_set_pin_function(PA08, PINMUX_PA08B_ADC1_AIN10);
     a3c:	4b04      	ldr	r3, [pc, #16]	; (a50 <TempSensor_PORT_init+0x20>)
     a3e:	0019      	movs	r1, r3
     a40:	2008      	movs	r0, #8
     a42:	4b04      	ldr	r3, [pc, #16]	; (a54 <TempSensor_PORT_init+0x24>)
     a44:	4798      	blx	r3
}
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	46bd      	mov	sp, r7
     a4a:	bd80      	pop	{r7, pc}
     a4c:	00000909 	.word	0x00000909
     a50:	00080001 	.word	0x00080001
     a54:	000008e5 	.word	0x000008e5

00000a58 <TempSensor_CLOCK_init>:

void TempSensor_CLOCK_init(void)
{
     a58:	b580      	push	{r7, lr}
     a5a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_ADC1_bit(MCLK);
     a5c:	4b06      	ldr	r3, [pc, #24]	; (a78 <TempSensor_CLOCK_init+0x20>)
     a5e:	0018      	movs	r0, r3
     a60:	4b06      	ldr	r3, [pc, #24]	; (a7c <TempSensor_CLOCK_init+0x24>)
     a62:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a64:	4b06      	ldr	r3, [pc, #24]	; (a80 <TempSensor_CLOCK_init+0x28>)
     a66:	2240      	movs	r2, #64	; 0x40
     a68:	2122      	movs	r1, #34	; 0x22
     a6a:	0018      	movs	r0, r3
     a6c:	4b05      	ldr	r3, [pc, #20]	; (a84 <TempSensor_CLOCK_init+0x2c>)
     a6e:	4798      	blx	r3
}
     a70:	46c0      	nop			; (mov r8, r8)
     a72:	46bd      	mov	sp, r7
     a74:	bd80      	pop	{r7, pc}
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	40000800 	.word	0x40000800
     a7c:	0000025b 	.word	0x0000025b
     a80:	40001c00 	.word	0x40001c00
     a84:	000001bb 	.word	0x000001bb

00000a88 <TempSensor_init>:

void TempSensor_init(void)
{
     a88:	b580      	push	{r7, lr}
     a8a:	af00      	add	r7, sp, #0
	TempSensor_CLOCK_init();
     a8c:	4b07      	ldr	r3, [pc, #28]	; (aac <TempSensor_init+0x24>)
     a8e:	4798      	blx	r3
	TempSensor_PORT_init();
     a90:	4b07      	ldr	r3, [pc, #28]	; (ab0 <TempSensor_init+0x28>)
     a92:	4798      	blx	r3
	adc_sync_init(&TempSensor, ADC1, _adc_get_adc_sync());
     a94:	4b07      	ldr	r3, [pc, #28]	; (ab4 <TempSensor_init+0x2c>)
     a96:	4798      	blx	r3
     a98:	0002      	movs	r2, r0
     a9a:	4907      	ldr	r1, [pc, #28]	; (ab8 <TempSensor_init+0x30>)
     a9c:	4b07      	ldr	r3, [pc, #28]	; (abc <TempSensor_init+0x34>)
     a9e:	0018      	movs	r0, r3
     aa0:	4b07      	ldr	r3, [pc, #28]	; (ac0 <TempSensor_init+0x38>)
     aa2:	4798      	blx	r3
}
     aa4:	46c0      	nop			; (mov r8, r8)
     aa6:	46bd      	mov	sp, r7
     aa8:	bd80      	pop	{r7, pc}
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	00000a59 	.word	0x00000a59
     ab0:	00000a31 	.word	0x00000a31
     ab4:	0000233d 	.word	0x0000233d
     ab8:	42004800 	.word	0x42004800
     abc:	200027b8 	.word	0x200027b8
     ac0:	00000dc1 	.word	0x00000dc1

00000ac4 <Scheduler_CLOCK_init>:

void Scheduler_CLOCK_init(void)
{
     ac4:	b580      	push	{r7, lr}
     ac6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     ac8:	4b03      	ldr	r3, [pc, #12]	; (ad8 <Scheduler_CLOCK_init+0x14>)
     aca:	0018      	movs	r0, r3
     acc:	4b03      	ldr	r3, [pc, #12]	; (adc <Scheduler_CLOCK_init+0x18>)
     ace:	4798      	blx	r3
}
     ad0:	46c0      	nop			; (mov r8, r8)
     ad2:	46bd      	mov	sp, r7
     ad4:	bd80      	pop	{r7, pc}
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	40000800 	.word	0x40000800
     adc:	000001e5 	.word	0x000001e5

00000ae0 <Scheduler_init>:

void Scheduler_init(void)
{
     ae0:	b580      	push	{r7, lr}
     ae2:	af00      	add	r7, sp, #0
	Scheduler_CLOCK_init();
     ae4:	4b05      	ldr	r3, [pc, #20]	; (afc <Scheduler_init+0x1c>)
     ae6:	4798      	blx	r3
	calendar_os_init(&Scheduler, RTC);
     ae8:	4a05      	ldr	r2, [pc, #20]	; (b00 <Scheduler_init+0x20>)
     aea:	4b06      	ldr	r3, [pc, #24]	; (b04 <Scheduler_init+0x24>)
     aec:	0011      	movs	r1, r2
     aee:	0018      	movs	r0, r3
     af0:	4b05      	ldr	r3, [pc, #20]	; (b08 <Scheduler_init+0x28>)
     af2:	4798      	blx	r3
}
     af4:	46c0      	nop			; (mov r8, r8)
     af6:	46bd      	mov	sp, r7
     af8:	bd80      	pop	{r7, pc}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	00000ac5 	.word	0x00000ac5
     b00:	40002400 	.word	0x40002400
     b04:	200027bc 	.word	0x200027bc
     b08:	00001599 	.word	0x00001599

00000b0c <UART_PORT_init>:

void UART_PORT_init(void)
{
     b0c:	b580      	push	{r7, lr}
     b0e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <UART_PORT_init+0x20>)
     b12:	0019      	movs	r1, r3
     b14:	2016      	movs	r0, #22
     b16:	4b06      	ldr	r3, [pc, #24]	; (b30 <UART_PORT_init+0x24>)
     b18:	4798      	blx	r3

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
     b1a:	4b06      	ldr	r3, [pc, #24]	; (b34 <UART_PORT_init+0x28>)
     b1c:	0019      	movs	r1, r3
     b1e:	2017      	movs	r0, #23
     b20:	4b03      	ldr	r3, [pc, #12]	; (b30 <UART_PORT_init+0x24>)
     b22:	4798      	blx	r3
}
     b24:	46c0      	nop			; (mov r8, r8)
     b26:	46bd      	mov	sp, r7
     b28:	bd80      	pop	{r7, pc}
     b2a:	46c0      	nop			; (mov r8, r8)
     b2c:	00160002 	.word	0x00160002
     b30:	000008e5 	.word	0x000008e5
     b34:	00170002 	.word	0x00170002

00000b38 <UART_CLOCK_init>:

void UART_CLOCK_init(void)
{
     b38:	b580      	push	{r7, lr}
     b3a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b3c:	4b09      	ldr	r3, [pc, #36]	; (b64 <UART_CLOCK_init+0x2c>)
     b3e:	2240      	movs	r2, #64	; 0x40
     b40:	2116      	movs	r1, #22
     b42:	0018      	movs	r0, r3
     b44:	4b08      	ldr	r3, [pc, #32]	; (b68 <UART_CLOCK_init+0x30>)
     b46:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b48:	4b06      	ldr	r3, [pc, #24]	; (b64 <UART_CLOCK_init+0x2c>)
     b4a:	2242      	movs	r2, #66	; 0x42
     b4c:	2112      	movs	r1, #18
     b4e:	0018      	movs	r0, r3
     b50:	4b05      	ldr	r3, [pc, #20]	; (b68 <UART_CLOCK_init+0x30>)
     b52:	4798      	blx	r3
	hri_mclk_set_APBCMASK_SERCOM3_bit(MCLK);
     b54:	4b05      	ldr	r3, [pc, #20]	; (b6c <UART_CLOCK_init+0x34>)
     b56:	0018      	movs	r0, r3
     b58:	4b05      	ldr	r3, [pc, #20]	; (b70 <UART_CLOCK_init+0x38>)
     b5a:	4798      	blx	r3
}
     b5c:	46c0      	nop			; (mov r8, r8)
     b5e:	46bd      	mov	sp, r7
     b60:	bd80      	pop	{r7, pc}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	40001c00 	.word	0x40001c00
     b68:	000001bb 	.word	0x000001bb
     b6c:	40000800 	.word	0x40000800
     b70:	00000203 	.word	0x00000203

00000b74 <UART_init>:

void UART_init(void)
{
     b74:	b580      	push	{r7, lr}
     b76:	af00      	add	r7, sp, #0
	UART_CLOCK_init();
     b78:	4b06      	ldr	r3, [pc, #24]	; (b94 <UART_init+0x20>)
     b7a:	4798      	blx	r3
	usart_sync_init(&UART, SERCOM3, (void *)NULL);
     b7c:	4906      	ldr	r1, [pc, #24]	; (b98 <UART_init+0x24>)
     b7e:	4b07      	ldr	r3, [pc, #28]	; (b9c <UART_init+0x28>)
     b80:	2200      	movs	r2, #0
     b82:	0018      	movs	r0, r3
     b84:	4b06      	ldr	r3, [pc, #24]	; (ba0 <UART_init+0x2c>)
     b86:	4798      	blx	r3
	UART_PORT_init();
     b88:	4b06      	ldr	r3, [pc, #24]	; (ba4 <UART_init+0x30>)
     b8a:	4798      	blx	r3
}
     b8c:	46c0      	nop			; (mov r8, r8)
     b8e:	46bd      	mov	sp, r7
     b90:	bd80      	pop	{r7, pc}
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	00000b39 	.word	0x00000b39
     b98:	42001000 	.word	0x42001000
     b9c:	200027a8 	.word	0x200027a8
     ba0:	00001855 	.word	0x00001855
     ba4:	00000b0d 	.word	0x00000b0d

00000ba8 <StepperDriver_PORT_init>:

void StepperDriver_PORT_init(void)
{
     ba8:	b580      	push	{r7, lr}
     baa:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB12, PINMUX_PB12E_TC0_WO0);
     bac:	4b06      	ldr	r3, [pc, #24]	; (bc8 <StepperDriver_PORT_init+0x20>)
     bae:	0019      	movs	r1, r3
     bb0:	202c      	movs	r0, #44	; 0x2c
     bb2:	4b06      	ldr	r3, [pc, #24]	; (bcc <StepperDriver_PORT_init+0x24>)
     bb4:	4798      	blx	r3

	gpio_set_pin_function(PB13, PINMUX_PB13E_TC0_WO1);
     bb6:	4b06      	ldr	r3, [pc, #24]	; (bd0 <StepperDriver_PORT_init+0x28>)
     bb8:	0019      	movs	r1, r3
     bba:	202d      	movs	r0, #45	; 0x2d
     bbc:	4b03      	ldr	r3, [pc, #12]	; (bcc <StepperDriver_PORT_init+0x24>)
     bbe:	4798      	blx	r3
}
     bc0:	46c0      	nop			; (mov r8, r8)
     bc2:	46bd      	mov	sp, r7
     bc4:	bd80      	pop	{r7, pc}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	002c0004 	.word	0x002c0004
     bcc:	000008e5 	.word	0x000008e5
     bd0:	002d0004 	.word	0x002d0004

00000bd4 <StepperDriver_CLOCK_init>:

void StepperDriver_CLOCK_init(void)
{
     bd4:	b580      	push	{r7, lr}
     bd6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC0_bit(MCLK);
     bd8:	4b06      	ldr	r3, [pc, #24]	; (bf4 <StepperDriver_CLOCK_init+0x20>)
     bda:	0018      	movs	r0, r3
     bdc:	4b06      	ldr	r3, [pc, #24]	; (bf8 <StepperDriver_CLOCK_init+0x24>)
     bde:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <StepperDriver_CLOCK_init+0x28>)
     be2:	2240      	movs	r2, #64	; 0x40
     be4:	211e      	movs	r1, #30
     be6:	0018      	movs	r0, r3
     be8:	4b05      	ldr	r3, [pc, #20]	; (c00 <StepperDriver_CLOCK_init+0x2c>)
     bea:	4798      	blx	r3
}
     bec:	46c0      	nop			; (mov r8, r8)
     bee:	46bd      	mov	sp, r7
     bf0:	bd80      	pop	{r7, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	40000800 	.word	0x40000800
     bf8:	0000021f 	.word	0x0000021f
     bfc:	40001c00 	.word	0x40001c00
     c00:	000001bb 	.word	0x000001bb

00000c04 <StepperDriver_init>:

void StepperDriver_init(void)
{
     c04:	b580      	push	{r7, lr}
     c06:	af00      	add	r7, sp, #0
	StepperDriver_CLOCK_init();
     c08:	4b07      	ldr	r3, [pc, #28]	; (c28 <StepperDriver_init+0x24>)
     c0a:	4798      	blx	r3
	StepperDriver_PORT_init();
     c0c:	4b07      	ldr	r3, [pc, #28]	; (c2c <StepperDriver_init+0x28>)
     c0e:	4798      	blx	r3
	pwm_init(&StepperDriver, TC0, _tc_get_pwm());
     c10:	4b07      	ldr	r3, [pc, #28]	; (c30 <StepperDriver_init+0x2c>)
     c12:	4798      	blx	r3
     c14:	0002      	movs	r2, r0
     c16:	4907      	ldr	r1, [pc, #28]	; (c34 <StepperDriver_init+0x30>)
     c18:	4b07      	ldr	r3, [pc, #28]	; (c38 <StepperDriver_init+0x34>)
     c1a:	0018      	movs	r0, r3
     c1c:	4b07      	ldr	r3, [pc, #28]	; (c3c <StepperDriver_init+0x38>)
     c1e:	4798      	blx	r3
}
     c20:	46c0      	nop			; (mov r8, r8)
     c22:	46bd      	mov	sp, r7
     c24:	bd80      	pop	{r7, pc}
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	00000bd5 	.word	0x00000bd5
     c2c:	00000ba9 	.word	0x00000ba9
     c30:	00003845 	.word	0x00003845
     c34:	42003000 	.word	0x42003000
     c38:	200027d4 	.word	0x200027d4
     c3c:	000016b9 	.word	0x000016b9

00000c40 <system_init>:

void system_init(void)
{
     c40:	b580      	push	{r7, lr}
     c42:	af00      	add	r7, sp, #0
	init_mcu();
     c44:	4b54      	ldr	r3, [pc, #336]	; (d98 <system_init+0x158>)
     c46:	4798      	blx	r3

	// GPIO on PA09

	// Set pin direction to input
	gpio_set_pin_direction(Manual_1, GPIO_DIRECTION_IN);
     c48:	2101      	movs	r1, #1
     c4a:	2009      	movs	r0, #9
     c4c:	4b53      	ldr	r3, [pc, #332]	; (d9c <system_init+0x15c>)
     c4e:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_1,
     c50:	2101      	movs	r1, #1
     c52:	2009      	movs	r0, #9
     c54:	4b52      	ldr	r3, [pc, #328]	; (da0 <system_init+0x160>)
     c56:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_1, GPIO_PIN_FUNCTION_OFF);
     c58:	2301      	movs	r3, #1
     c5a:	425b      	negs	r3, r3
     c5c:	0019      	movs	r1, r3
     c5e:	2009      	movs	r0, #9
     c60:	4b50      	ldr	r3, [pc, #320]	; (da4 <system_init+0x164>)
     c62:	4798      	blx	r3

	// GPIO on PA10

	// Set pin direction to input
	gpio_set_pin_direction(Manual_2, GPIO_DIRECTION_IN);
     c64:	2101      	movs	r1, #1
     c66:	200a      	movs	r0, #10
     c68:	4b4c      	ldr	r3, [pc, #304]	; (d9c <system_init+0x15c>)
     c6a:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_2,
     c6c:	2101      	movs	r1, #1
     c6e:	200a      	movs	r0, #10
     c70:	4b4b      	ldr	r3, [pc, #300]	; (da0 <system_init+0x160>)
     c72:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_2, GPIO_PIN_FUNCTION_OFF);
     c74:	2301      	movs	r3, #1
     c76:	425b      	negs	r3, r3
     c78:	0019      	movs	r1, r3
     c7a:	200a      	movs	r0, #10
     c7c:	4b49      	ldr	r3, [pc, #292]	; (da4 <system_init+0x164>)
     c7e:	4798      	blx	r3

	// GPIO on PA11

	// Set pin direction to input
	gpio_set_pin_direction(Manual_3, GPIO_DIRECTION_IN);
     c80:	2101      	movs	r1, #1
     c82:	200b      	movs	r0, #11
     c84:	4b45      	ldr	r3, [pc, #276]	; (d9c <system_init+0x15c>)
     c86:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_3,
     c88:	2101      	movs	r1, #1
     c8a:	200b      	movs	r0, #11
     c8c:	4b44      	ldr	r3, [pc, #272]	; (da0 <system_init+0x160>)
     c8e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_3, GPIO_PIN_FUNCTION_OFF);
     c90:	2301      	movs	r3, #1
     c92:	425b      	negs	r3, r3
     c94:	0019      	movs	r1, r3
     c96:	200b      	movs	r0, #11
     c98:	4b42      	ldr	r3, [pc, #264]	; (da4 <system_init+0x164>)
     c9a:	4798      	blx	r3

	// GPIO on PA20

	// Set pin direction to input
	gpio_set_pin_direction(Right, GPIO_DIRECTION_IN);
     c9c:	2101      	movs	r1, #1
     c9e:	2014      	movs	r0, #20
     ca0:	4b3e      	ldr	r3, [pc, #248]	; (d9c <system_init+0x15c>)
     ca2:	4798      	blx	r3

	gpio_set_pin_pull_mode(Right,
     ca4:	2101      	movs	r1, #1
     ca6:	2014      	movs	r0, #20
     ca8:	4b3d      	ldr	r3, [pc, #244]	; (da0 <system_init+0x160>)
     caa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Right, GPIO_PIN_FUNCTION_OFF);
     cac:	2301      	movs	r3, #1
     cae:	425b      	negs	r3, r3
     cb0:	0019      	movs	r1, r3
     cb2:	2014      	movs	r0, #20
     cb4:	4b3b      	ldr	r3, [pc, #236]	; (da4 <system_init+0x164>)
     cb6:	4798      	blx	r3

	// GPIO on PA21

	// Set pin direction to input
	gpio_set_pin_direction(Left, GPIO_DIRECTION_IN);
     cb8:	2101      	movs	r1, #1
     cba:	2015      	movs	r0, #21
     cbc:	4b37      	ldr	r3, [pc, #220]	; (d9c <system_init+0x15c>)
     cbe:	4798      	blx	r3

	gpio_set_pin_pull_mode(Left,
     cc0:	2101      	movs	r1, #1
     cc2:	2015      	movs	r0, #21
     cc4:	4b36      	ldr	r3, [pc, #216]	; (da0 <system_init+0x160>)
     cc6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Left, GPIO_PIN_FUNCTION_OFF);
     cc8:	2301      	movs	r3, #1
     cca:	425b      	negs	r3, r3
     ccc:	0019      	movs	r1, r3
     cce:	2015      	movs	r0, #21
     cd0:	4b34      	ldr	r3, [pc, #208]	; (da4 <system_init+0x164>)
     cd2:	4798      	blx	r3

	// GPIO on PB03

	// Set pin direction to input
	gpio_set_pin_direction(Manual_6, GPIO_DIRECTION_IN);
     cd4:	2101      	movs	r1, #1
     cd6:	2023      	movs	r0, #35	; 0x23
     cd8:	4b30      	ldr	r3, [pc, #192]	; (d9c <system_init+0x15c>)
     cda:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_6,
     cdc:	2101      	movs	r1, #1
     cde:	2023      	movs	r0, #35	; 0x23
     ce0:	4b2f      	ldr	r3, [pc, #188]	; (da0 <system_init+0x160>)
     ce2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_6, GPIO_PIN_FUNCTION_OFF);
     ce4:	2301      	movs	r3, #1
     ce6:	425b      	negs	r3, r3
     ce8:	0019      	movs	r1, r3
     cea:	2023      	movs	r0, #35	; 0x23
     cec:	4b2d      	ldr	r3, [pc, #180]	; (da4 <system_init+0x164>)
     cee:	4798      	blx	r3

	// GPIO on PB08

	// Set pin direction to input
	gpio_set_pin_direction(Start_Cleaning, GPIO_DIRECTION_IN);
     cf0:	2101      	movs	r1, #1
     cf2:	2028      	movs	r0, #40	; 0x28
     cf4:	4b29      	ldr	r3, [pc, #164]	; (d9c <system_init+0x15c>)
     cf6:	4798      	blx	r3

	gpio_set_pin_pull_mode(Start_Cleaning,
     cf8:	2101      	movs	r1, #1
     cfa:	2028      	movs	r0, #40	; 0x28
     cfc:	4b28      	ldr	r3, [pc, #160]	; (da0 <system_init+0x160>)
     cfe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Start_Cleaning, GPIO_PIN_FUNCTION_OFF);
     d00:	2301      	movs	r3, #1
     d02:	425b      	negs	r3, r3
     d04:	0019      	movs	r1, r3
     d06:	2028      	movs	r0, #40	; 0x28
     d08:	4b26      	ldr	r3, [pc, #152]	; (da4 <system_init+0x164>)
     d0a:	4798      	blx	r3

	// GPIO on PB16

	// Set pin direction to input
	gpio_set_pin_direction(Manual_7, GPIO_DIRECTION_IN);
     d0c:	2101      	movs	r1, #1
     d0e:	2030      	movs	r0, #48	; 0x30
     d10:	4b22      	ldr	r3, [pc, #136]	; (d9c <system_init+0x15c>)
     d12:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_7,
     d14:	2101      	movs	r1, #1
     d16:	2030      	movs	r0, #48	; 0x30
     d18:	4b21      	ldr	r3, [pc, #132]	; (da0 <system_init+0x160>)
     d1a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_7, GPIO_PIN_FUNCTION_OFF);
     d1c:	2301      	movs	r3, #1
     d1e:	425b      	negs	r3, r3
     d20:	0019      	movs	r1, r3
     d22:	2030      	movs	r0, #48	; 0x30
     d24:	4b1f      	ldr	r3, [pc, #124]	; (da4 <system_init+0x164>)
     d26:	4798      	blx	r3

	// GPIO on PB17

	gpio_set_pin_level(Direction,
     d28:	2100      	movs	r1, #0
     d2a:	2031      	movs	r0, #49	; 0x31
     d2c:	4b1e      	ldr	r3, [pc, #120]	; (da8 <system_init+0x168>)
     d2e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Direction, GPIO_DIRECTION_OUT);
     d30:	2102      	movs	r1, #2
     d32:	2031      	movs	r0, #49	; 0x31
     d34:	4b19      	ldr	r3, [pc, #100]	; (d9c <system_init+0x15c>)
     d36:	4798      	blx	r3

	gpio_set_pin_function(Direction, GPIO_PIN_FUNCTION_OFF);
     d38:	2301      	movs	r3, #1
     d3a:	425b      	negs	r3, r3
     d3c:	0019      	movs	r1, r3
     d3e:	2031      	movs	r0, #49	; 0x31
     d40:	4b18      	ldr	r3, [pc, #96]	; (da4 <system_init+0x164>)
     d42:	4798      	blx	r3

	// GPIO on PB30

	// Set pin direction to input
	gpio_set_pin_direction(Manual_4, GPIO_DIRECTION_IN);
     d44:	2101      	movs	r1, #1
     d46:	203e      	movs	r0, #62	; 0x3e
     d48:	4b14      	ldr	r3, [pc, #80]	; (d9c <system_init+0x15c>)
     d4a:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_4,
     d4c:	2101      	movs	r1, #1
     d4e:	203e      	movs	r0, #62	; 0x3e
     d50:	4b13      	ldr	r3, [pc, #76]	; (da0 <system_init+0x160>)
     d52:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_4, GPIO_PIN_FUNCTION_OFF);
     d54:	2301      	movs	r3, #1
     d56:	425b      	negs	r3, r3
     d58:	0019      	movs	r1, r3
     d5a:	203e      	movs	r0, #62	; 0x3e
     d5c:	4b11      	ldr	r3, [pc, #68]	; (da4 <system_init+0x164>)
     d5e:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(Manual_5, GPIO_DIRECTION_IN);
     d60:	2101      	movs	r1, #1
     d62:	203f      	movs	r0, #63	; 0x3f
     d64:	4b0d      	ldr	r3, [pc, #52]	; (d9c <system_init+0x15c>)
     d66:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_5,
     d68:	2101      	movs	r1, #1
     d6a:	203f      	movs	r0, #63	; 0x3f
     d6c:	4b0c      	ldr	r3, [pc, #48]	; (da0 <system_init+0x160>)
     d6e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_5, GPIO_PIN_FUNCTION_OFF);
     d70:	2301      	movs	r3, #1
     d72:	425b      	negs	r3, r3
     d74:	0019      	movs	r1, r3
     d76:	203f      	movs	r0, #63	; 0x3f
     d78:	4b0a      	ldr	r3, [pc, #40]	; (da4 <system_init+0x164>)
     d7a:	4798      	blx	r3

	WindSensor_init();
     d7c:	4b0b      	ldr	r3, [pc, #44]	; (dac <system_init+0x16c>)
     d7e:	4798      	blx	r3

	TempSensor_init();
     d80:	4b0b      	ldr	r3, [pc, #44]	; (db0 <system_init+0x170>)
     d82:	4798      	blx	r3

	Scheduler_init();
     d84:	4b0b      	ldr	r3, [pc, #44]	; (db4 <system_init+0x174>)
     d86:	4798      	blx	r3

	UART_init();
     d88:	4b0b      	ldr	r3, [pc, #44]	; (db8 <system_init+0x178>)
     d8a:	4798      	blx	r3

	StepperDriver_init();
     d8c:	4b0b      	ldr	r3, [pc, #44]	; (dbc <system_init+0x17c>)
     d8e:	4798      	blx	r3
}
     d90:	46c0      	nop			; (mov r8, r8)
     d92:	46bd      	mov	sp, r7
     d94:	bd80      	pop	{r7, pc}
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	00000989 	.word	0x00000989
     d9c:	00000909 	.word	0x00000909
     da0:	000008a9 	.word	0x000008a9
     da4:	000008e5 	.word	0x000008e5
     da8:	00000949 	.word	0x00000949
     dac:	000009f5 	.word	0x000009f5
     db0:	00000a89 	.word	0x00000a89
     db4:	00000ae1 	.word	0x00000ae1
     db8:	00000b75 	.word	0x00000b75
     dbc:	00000c05 	.word	0x00000c05

00000dc0 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     dc0:	b580      	push	{r7, lr}
     dc2:	b084      	sub	sp, #16
     dc4:	af00      	add	r7, sp, #0
     dc6:	60f8      	str	r0, [r7, #12]
     dc8:	60b9      	str	r1, [r7, #8]
     dca:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     dcc:	68fb      	ldr	r3, [r7, #12]
     dce:	2b00      	cmp	r3, #0
     dd0:	d004      	beq.n	ddc <adc_sync_init+0x1c>
     dd2:	68bb      	ldr	r3, [r7, #8]
     dd4:	2b00      	cmp	r3, #0
     dd6:	d001      	beq.n	ddc <adc_sync_init+0x1c>
     dd8:	2301      	movs	r3, #1
     dda:	e000      	b.n	dde <adc_sync_init+0x1e>
     ddc:	2300      	movs	r3, #0
     dde:	1c1a      	adds	r2, r3, #0
     de0:	2301      	movs	r3, #1
     de2:	4013      	ands	r3, r2
     de4:	b2db      	uxtb	r3, r3
     de6:	4908      	ldr	r1, [pc, #32]	; (e08 <adc_sync_init+0x48>)
     de8:	2239      	movs	r2, #57	; 0x39
     dea:	0018      	movs	r0, r3
     dec:	4b07      	ldr	r3, [pc, #28]	; (e0c <adc_sync_init+0x4c>)
     dee:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     df0:	68fb      	ldr	r3, [r7, #12]
     df2:	68ba      	ldr	r2, [r7, #8]
     df4:	0011      	movs	r1, r2
     df6:	0018      	movs	r0, r3
     df8:	4b05      	ldr	r3, [pc, #20]	; (e10 <adc_sync_init+0x50>)
     dfa:	4798      	blx	r3
     dfc:	0003      	movs	r3, r0
}
     dfe:	0018      	movs	r0, r3
     e00:	46bd      	mov	sp, r7
     e02:	b004      	add	sp, #16
     e04:	bd80      	pop	{r7, pc}
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	000083f8 	.word	0x000083f8
     e0c:	00001afd 	.word	0x00001afd
     e10:	00002205 	.word	0x00002205

00000e14 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     e14:	b580      	push	{r7, lr}
     e16:	b082      	sub	sp, #8
     e18:	af00      	add	r7, sp, #0
     e1a:	6078      	str	r0, [r7, #4]
     e1c:	000a      	movs	r2, r1
     e1e:	1cfb      	adds	r3, r7, #3
     e20:	701a      	strb	r2, [r3, #0]
	ASSERT(descr);
     e22:	687b      	ldr	r3, [r7, #4]
     e24:	1e5a      	subs	r2, r3, #1
     e26:	4193      	sbcs	r3, r2
     e28:	b2db      	uxtb	r3, r3
     e2a:	4908      	ldr	r1, [pc, #32]	; (e4c <adc_sync_enable_channel+0x38>)
     e2c:	224e      	movs	r2, #78	; 0x4e
     e2e:	0018      	movs	r0, r3
     e30:	4b07      	ldr	r3, [pc, #28]	; (e50 <adc_sync_enable_channel+0x3c>)
     e32:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     e34:	687a      	ldr	r2, [r7, #4]
     e36:	1cfb      	adds	r3, r7, #3
     e38:	781b      	ldrb	r3, [r3, #0]
     e3a:	0019      	movs	r1, r3
     e3c:	0010      	movs	r0, r2
     e3e:	4b05      	ldr	r3, [pc, #20]	; (e54 <adc_sync_enable_channel+0x40>)
     e40:	4798      	blx	r3

	return ERR_NONE;
     e42:	2300      	movs	r3, #0
}
     e44:	0018      	movs	r0, r3
     e46:	46bd      	mov	sp, r7
     e48:	b002      	add	sp, #8
     e4a:	bd80      	pop	{r7, pc}
     e4c:	000083f8 	.word	0x000083f8
     e50:	00001afd 	.word	0x00001afd
     e54:	00002259 	.word	0x00002259

00000e58 <adc_sync_disable_channel>:

/**
 * \brief Disable ADC
 */
int32_t adc_sync_disable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     e58:	b580      	push	{r7, lr}
     e5a:	b082      	sub	sp, #8
     e5c:	af00      	add	r7, sp, #0
     e5e:	6078      	str	r0, [r7, #4]
     e60:	000a      	movs	r2, r1
     e62:	1cfb      	adds	r3, r7, #3
     e64:	701a      	strb	r2, [r3, #0]
	ASSERT(descr);
     e66:	687b      	ldr	r3, [r7, #4]
     e68:	1e5a      	subs	r2, r3, #1
     e6a:	4193      	sbcs	r3, r2
     e6c:	b2db      	uxtb	r3, r3
     e6e:	4908      	ldr	r1, [pc, #32]	; (e90 <adc_sync_disable_channel+0x38>)
     e70:	2259      	movs	r2, #89	; 0x59
     e72:	0018      	movs	r0, r3
     e74:	4b07      	ldr	r3, [pc, #28]	; (e94 <adc_sync_disable_channel+0x3c>)
     e76:	4798      	blx	r3
	_adc_sync_disable_channel(&descr->device, channel);
     e78:	687a      	ldr	r2, [r7, #4]
     e7a:	1cfb      	adds	r3, r7, #3
     e7c:	781b      	ldrb	r3, [r3, #0]
     e7e:	0019      	movs	r1, r3
     e80:	0010      	movs	r0, r2
     e82:	4b05      	ldr	r3, [pc, #20]	; (e98 <adc_sync_disable_channel+0x40>)
     e84:	4798      	blx	r3
	return ERR_NONE;
     e86:	2300      	movs	r3, #0
}
     e88:	0018      	movs	r0, r3
     e8a:	46bd      	mov	sp, r7
     e8c:	b002      	add	sp, #8
     e8e:	bd80      	pop	{r7, pc}
     e90:	000083f8 	.word	0x000083f8
     e94:	00001afd 	.word	0x00001afd
     e98:	0000227d 	.word	0x0000227d

00000e9c <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     e9c:	b590      	push	{r4, r7, lr}
     e9e:	b087      	sub	sp, #28
     ea0:	af00      	add	r7, sp, #0
     ea2:	60f8      	str	r0, [r7, #12]
     ea4:	0008      	movs	r0, r1
     ea6:	607a      	str	r2, [r7, #4]
     ea8:	0019      	movs	r1, r3
     eaa:	230b      	movs	r3, #11
     eac:	18fb      	adds	r3, r7, r3
     eae:	1c02      	adds	r2, r0, #0
     eb0:	701a      	strb	r2, [r3, #0]
     eb2:	2308      	movs	r3, #8
     eb4:	18fb      	adds	r3, r7, r3
     eb6:	1c0a      	adds	r2, r1, #0
     eb8:	801a      	strh	r2, [r3, #0]
	uint8_t  data_size;
	uint16_t offset = 0;
     eba:	2316      	movs	r3, #22
     ebc:	18fb      	adds	r3, r7, r3
     ebe:	2200      	movs	r2, #0
     ec0:	801a      	strh	r2, [r3, #0]

	ASSERT(descr && buffer && length);
     ec2:	68fb      	ldr	r3, [r7, #12]
     ec4:	2b00      	cmp	r3, #0
     ec6:	d009      	beq.n	edc <adc_sync_read_channel+0x40>
     ec8:	687b      	ldr	r3, [r7, #4]
     eca:	2b00      	cmp	r3, #0
     ecc:	d006      	beq.n	edc <adc_sync_read_channel+0x40>
     ece:	2308      	movs	r3, #8
     ed0:	18fb      	adds	r3, r7, r3
     ed2:	881b      	ldrh	r3, [r3, #0]
     ed4:	2b00      	cmp	r3, #0
     ed6:	d001      	beq.n	edc <adc_sync_read_channel+0x40>
     ed8:	2301      	movs	r3, #1
     eda:	e000      	b.n	ede <adc_sync_read_channel+0x42>
     edc:	2300      	movs	r3, #0
     ede:	1c1a      	adds	r2, r3, #0
     ee0:	2301      	movs	r3, #1
     ee2:	4013      	ands	r3, r2
     ee4:	b2db      	uxtb	r3, r3
     ee6:	493a      	ldr	r1, [pc, #232]	; (fd0 <adc_sync_read_channel+0x134>)
     ee8:	2267      	movs	r2, #103	; 0x67
     eea:	0018      	movs	r0, r3
     eec:	4b39      	ldr	r3, [pc, #228]	; (fd4 <adc_sync_read_channel+0x138>)
     eee:	4798      	blx	r3
	data_size = _adc_sync_get_data_size(&descr->device);
     ef0:	68fb      	ldr	r3, [r7, #12]
     ef2:	2215      	movs	r2, #21
     ef4:	18bc      	adds	r4, r7, r2
     ef6:	0018      	movs	r0, r3
     ef8:	4b37      	ldr	r3, [pc, #220]	; (fd8 <adc_sync_read_channel+0x13c>)
     efa:	4798      	blx	r3
     efc:	0003      	movs	r3, r0
     efe:	7023      	strb	r3, [r4, #0]
	ASSERT(!(length % data_size));
     f00:	2308      	movs	r3, #8
     f02:	18fb      	adds	r3, r7, r3
     f04:	881a      	ldrh	r2, [r3, #0]
     f06:	2315      	movs	r3, #21
     f08:	18fb      	adds	r3, r7, r3
     f0a:	7819      	ldrb	r1, [r3, #0]
     f0c:	4b33      	ldr	r3, [pc, #204]	; (fdc <adc_sync_read_channel+0x140>)
     f0e:	0010      	movs	r0, r2
     f10:	4798      	blx	r3
     f12:	000b      	movs	r3, r1
     f14:	425a      	negs	r2, r3
     f16:	4153      	adcs	r3, r2
     f18:	b2db      	uxtb	r3, r3
     f1a:	492d      	ldr	r1, [pc, #180]	; (fd0 <adc_sync_read_channel+0x134>)
     f1c:	2269      	movs	r2, #105	; 0x69
     f1e:	0018      	movs	r0, r3
     f20:	4b2c      	ldr	r3, [pc, #176]	; (fd4 <adc_sync_read_channel+0x138>)
     f22:	4798      	blx	r3

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
     f24:	68fb      	ldr	r3, [r7, #12]
     f26:	0018      	movs	r0, r3
     f28:	4b2d      	ldr	r3, [pc, #180]	; (fe0 <adc_sync_read_channel+0x144>)
     f2a:	4798      	blx	r3

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     f2c:	46c0      	nop			; (mov r8, r8)
     f2e:	68fa      	ldr	r2, [r7, #12]
     f30:	230b      	movs	r3, #11
     f32:	18fb      	adds	r3, r7, r3
     f34:	781b      	ldrb	r3, [r3, #0]
     f36:	0019      	movs	r1, r3
     f38:	0010      	movs	r0, r2
     f3a:	4b2a      	ldr	r3, [pc, #168]	; (fe4 <adc_sync_read_channel+0x148>)
     f3c:	4798      	blx	r3
     f3e:	0003      	movs	r3, r0
     f40:	001a      	movs	r2, r3
     f42:	2301      	movs	r3, #1
     f44:	4053      	eors	r3, r2
     f46:	b2db      	uxtb	r3, r3
     f48:	2b00      	cmp	r3, #0
     f4a:	d1f0      	bne.n	f2e <adc_sync_read_channel+0x92>
			;

		result         = _adc_sync_read_channel_data(&descr->device, channel);
     f4c:	68fa      	ldr	r2, [r7, #12]
     f4e:	2312      	movs	r3, #18
     f50:	18fc      	adds	r4, r7, r3
     f52:	230b      	movs	r3, #11
     f54:	18fb      	adds	r3, r7, r3
     f56:	781b      	ldrb	r3, [r3, #0]
     f58:	0019      	movs	r1, r3
     f5a:	0010      	movs	r0, r2
     f5c:	4b22      	ldr	r3, [pc, #136]	; (fe8 <adc_sync_read_channel+0x14c>)
     f5e:	4798      	blx	r3
     f60:	0003      	movs	r3, r0
     f62:	8023      	strh	r3, [r4, #0]
		buffer[offset] = result;
     f64:	2316      	movs	r3, #22
     f66:	18fb      	adds	r3, r7, r3
     f68:	881b      	ldrh	r3, [r3, #0]
     f6a:	687a      	ldr	r2, [r7, #4]
     f6c:	18d3      	adds	r3, r2, r3
     f6e:	2212      	movs	r2, #18
     f70:	18ba      	adds	r2, r7, r2
     f72:	8812      	ldrh	r2, [r2, #0]
     f74:	b2d2      	uxtb	r2, r2
     f76:	701a      	strb	r2, [r3, #0]
		if (1 < data_size) {
     f78:	2315      	movs	r3, #21
     f7a:	18fb      	adds	r3, r7, r3
     f7c:	781b      	ldrb	r3, [r3, #0]
     f7e:	2b01      	cmp	r3, #1
     f80:	d90c      	bls.n	f9c <adc_sync_read_channel+0x100>
			buffer[offset + 1] = result >> 8;
     f82:	2316      	movs	r3, #22
     f84:	18fb      	adds	r3, r7, r3
     f86:	881b      	ldrh	r3, [r3, #0]
     f88:	3301      	adds	r3, #1
     f8a:	687a      	ldr	r2, [r7, #4]
     f8c:	18d3      	adds	r3, r2, r3
     f8e:	2212      	movs	r2, #18
     f90:	18ba      	adds	r2, r7, r2
     f92:	8812      	ldrh	r2, [r2, #0]
     f94:	0a12      	lsrs	r2, r2, #8
     f96:	b292      	uxth	r2, r2
     f98:	b2d2      	uxtb	r2, r2
     f9a:	701a      	strb	r2, [r3, #0]
		}
		offset += data_size;
     f9c:	2315      	movs	r3, #21
     f9e:	18fb      	adds	r3, r7, r3
     fa0:	781b      	ldrb	r3, [r3, #0]
     fa2:	b299      	uxth	r1, r3
     fa4:	2316      	movs	r3, #22
     fa6:	18fb      	adds	r3, r7, r3
     fa8:	2216      	movs	r2, #22
     faa:	18ba      	adds	r2, r7, r2
     fac:	8812      	ldrh	r2, [r2, #0]
     fae:	188a      	adds	r2, r1, r2
     fb0:	801a      	strh	r2, [r3, #0]
	} while (offset < length);
     fb2:	2316      	movs	r3, #22
     fb4:	18fa      	adds	r2, r7, r3
     fb6:	2308      	movs	r3, #8
     fb8:	18fb      	adds	r3, r7, r3
     fba:	8812      	ldrh	r2, [r2, #0]
     fbc:	881b      	ldrh	r3, [r3, #0]
     fbe:	429a      	cmp	r2, r3
     fc0:	d3b0      	bcc.n	f24 <adc_sync_read_channel+0x88>

	return offset;
     fc2:	2316      	movs	r3, #22
     fc4:	18fb      	adds	r3, r7, r3
     fc6:	881b      	ldrh	r3, [r3, #0]
}
     fc8:	0018      	movs	r0, r3
     fca:	46bd      	mov	sp, r7
     fcc:	b007      	add	sp, #28
     fce:	bd90      	pop	{r4, r7, pc}
     fd0:	000083f8 	.word	0x000083f8
     fd4:	00001afd 	.word	0x00001afd
     fd8:	000022a1 	.word	0x000022a1
     fdc:	000024d1 	.word	0x000024d1
     fe0:	000022f5 	.word	0x000022f5
     fe4:	000022cd 	.word	0x000022cd
     fe8:	00002315 	.word	0x00002315

00000fec <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     fec:	b580      	push	{r7, lr}
     fee:	b084      	sub	sp, #16
     ff0:	af00      	add	r7, sp, #0
     ff2:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     ff4:	f3ef 8310 	mrs	r3, PRIMASK
     ff8:	60fb      	str	r3, [r7, #12]
  return(result);
     ffa:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     ffc:	687b      	ldr	r3, [r7, #4]
     ffe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1000:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1002:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	46bd      	mov	sp, r7
    100a:	b004      	add	sp, #16
    100c:	bd80      	pop	{r7, pc}

0000100e <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    100e:	b580      	push	{r7, lr}
    1010:	b084      	sub	sp, #16
    1012:	af00      	add	r7, sp, #0
    1014:	6078      	str	r0, [r7, #4]
    1016:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    101a:	687b      	ldr	r3, [r7, #4]
    101c:	681b      	ldr	r3, [r3, #0]
    101e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1020:	68fb      	ldr	r3, [r7, #12]
    1022:	f383 8810 	msr	PRIMASK, r3
}
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	46bd      	mov	sp, r7
    102a:	b004      	add	sp, #16
    102c:	bd80      	pop	{r7, pc}

0000102e <leap_year>:
/** \brief leapyear check
 *  \retval false  not leapyear.
 *  \retval true  leapyear.
 */
static bool leap_year(uint16_t year)
{
    102e:	b580      	push	{r7, lr}
    1030:	b082      	sub	sp, #8
    1032:	af00      	add	r7, sp, #0
    1034:	0002      	movs	r2, r0
    1036:	1dbb      	adds	r3, r7, #6
    1038:	801a      	strh	r2, [r3, #0]
	if (year & 3) {
    103a:	1dbb      	adds	r3, r7, #6
    103c:	881b      	ldrh	r3, [r3, #0]
    103e:	2203      	movs	r2, #3
    1040:	4013      	ands	r3, r2
    1042:	d001      	beq.n	1048 <leap_year+0x1a>
		return false;
    1044:	2300      	movs	r3, #0
    1046:	e000      	b.n	104a <leap_year+0x1c>
	} else {
		return true;
    1048:	2301      	movs	r3, #1
	}
}
    104a:	0018      	movs	r0, r3
    104c:	46bd      	mov	sp, r7
    104e:	b002      	add	sp, #8
    1050:	bd80      	pop	{r7, pc}
	...

00001054 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    1054:	b580      	push	{r7, lr}
    1056:	b084      	sub	sp, #16
    1058:	af00      	add	r7, sp, #0
    105a:	6078      	str	r0, [r7, #4]
    105c:	000a      	movs	r2, r1
    105e:	1cfb      	adds	r3, r7, #3
    1060:	701a      	strb	r2, [r3, #0]
	uint32_t sec_in_month = 0;
    1062:	2300      	movs	r3, #0
    1064:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    1066:	687b      	ldr	r3, [r7, #4]
    1068:	b29b      	uxth	r3, r3
    106a:	0018      	movs	r0, r3
    106c:	4b17      	ldr	r3, [pc, #92]	; (10cc <get_secs_in_month+0x78>)
    106e:	4798      	blx	r3
    1070:	1e03      	subs	r3, r0, #0
    1072:	d011      	beq.n	1098 <get_secs_in_month+0x44>
		switch (month) {
    1074:	1cfb      	adds	r3, r7, #3
    1076:	781b      	ldrb	r3, [r3, #0]
    1078:	2b0c      	cmp	r3, #12
    107a:	d81f      	bhi.n	10bc <get_secs_in_month+0x68>
    107c:	009a      	lsls	r2, r3, #2
    107e:	4b14      	ldr	r3, [pc, #80]	; (10d0 <get_secs_in_month+0x7c>)
    1080:	18d3      	adds	r3, r2, r3
    1082:	681b      	ldr	r3, [r3, #0]
    1084:	469f      	mov	pc, r3
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    1086:	4b13      	ldr	r3, [pc, #76]	; (10d4 <get_secs_in_month+0x80>)
    1088:	60fb      	str	r3, [r7, #12]
			break;
    108a:	e01a      	b.n	10c2 <get_secs_in_month+0x6e>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    108c:	4b12      	ldr	r3, [pc, #72]	; (10d8 <get_secs_in_month+0x84>)
    108e:	60fb      	str	r3, [r7, #12]
			break;
    1090:	e017      	b.n	10c2 <get_secs_in_month+0x6e>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    1092:	4b12      	ldr	r3, [pc, #72]	; (10dc <get_secs_in_month+0x88>)
    1094:	60fb      	str	r3, [r7, #12]
			break;
    1096:	e014      	b.n	10c2 <get_secs_in_month+0x6e>
		default:
			break;
		}
	} else {
		switch (month) {
    1098:	1cfb      	adds	r3, r7, #3
    109a:	781b      	ldrb	r3, [r3, #0]
    109c:	2b0c      	cmp	r3, #12
    109e:	d80f      	bhi.n	10c0 <get_secs_in_month+0x6c>
    10a0:	009a      	lsls	r2, r3, #2
    10a2:	4b0f      	ldr	r3, [pc, #60]	; (10e0 <get_secs_in_month+0x8c>)
    10a4:	18d3      	adds	r3, r2, r3
    10a6:	681b      	ldr	r3, [r3, #0]
    10a8:	469f      	mov	pc, r3
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    10aa:	4b0a      	ldr	r3, [pc, #40]	; (10d4 <get_secs_in_month+0x80>)
    10ac:	60fb      	str	r3, [r7, #12]
			break;
    10ae:	e008      	b.n	10c2 <get_secs_in_month+0x6e>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    10b0:	4b0c      	ldr	r3, [pc, #48]	; (10e4 <get_secs_in_month+0x90>)
    10b2:	60fb      	str	r3, [r7, #12]
			break;
    10b4:	e005      	b.n	10c2 <get_secs_in_month+0x6e>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    10b6:	4b09      	ldr	r3, [pc, #36]	; (10dc <get_secs_in_month+0x88>)
    10b8:	60fb      	str	r3, [r7, #12]
			break;
    10ba:	e002      	b.n	10c2 <get_secs_in_month+0x6e>
			break;
    10bc:	46c0      	nop			; (mov r8, r8)
    10be:	e000      	b.n	10c2 <get_secs_in_month+0x6e>
		default:
			break;
    10c0:	46c0      	nop			; (mov r8, r8)
		}
	}

	return sec_in_month;
    10c2:	68fb      	ldr	r3, [r7, #12]
}
    10c4:	0018      	movs	r0, r3
    10c6:	46bd      	mov	sp, r7
    10c8:	b004      	add	sp, #16
    10ca:	bd80      	pop	{r7, pc}
    10cc:	0000102f 	.word	0x0000102f
    10d0:	00008414 	.word	0x00008414
    10d4:	0028de80 	.word	0x0028de80
    10d8:	00263b80 	.word	0x00263b80
    10dc:	00278d00 	.word	0x00278d00
    10e0:	00008448 	.word	0x00008448
    10e4:	0024ea00 	.word	0x0024ea00

000010e8 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(uint32_t ts, struct calendar_date_time *dt)
{
    10e8:	b580      	push	{r7, lr}
    10ea:	b088      	sub	sp, #32
    10ec:	af00      	add	r7, sp, #0
    10ee:	6078      	str	r0, [r7, #4]
    10f0:	6039      	str	r1, [r7, #0]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = DEFAULT_BASE_YEAR;
    10f2:	4b4b      	ldr	r3, [pc, #300]	; (1220 <convert_timestamp_to_datetime+0x138>)
    10f4:	61bb      	str	r3, [r7, #24]
	uint8_t  tmp_month   = 1;
    10f6:	2317      	movs	r3, #23
    10f8:	18fb      	adds	r3, r7, r3
    10fa:	2201      	movs	r2, #1
    10fc:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_day     = 1;
    10fe:	2316      	movs	r3, #22
    1100:	18fb      	adds	r3, r7, r3
    1102:	2201      	movs	r2, #1
    1104:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_hour    = 0;
    1106:	2315      	movs	r3, #21
    1108:	18fb      	adds	r3, r7, r3
    110a:	2200      	movs	r2, #0
    110c:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_minutes = 0;
    110e:	2314      	movs	r3, #20
    1110:	18fb      	adds	r3, r7, r3
    1112:	2200      	movs	r2, #0
    1114:	701a      	strb	r2, [r3, #0]

	tmp = ts;
    1116:	687b      	ldr	r3, [r7, #4]
    1118:	61fb      	str	r3, [r7, #28]

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    111a:	69bb      	ldr	r3, [r7, #24]
    111c:	b29b      	uxth	r3, r3
    111e:	0018      	movs	r0, r3
    1120:	4b40      	ldr	r3, [pc, #256]	; (1224 <convert_timestamp_to_datetime+0x13c>)
    1122:	4798      	blx	r3
    1124:	1e03      	subs	r3, r0, #0
    1126:	d001      	beq.n	112c <convert_timestamp_to_datetime+0x44>
    1128:	4b3f      	ldr	r3, [pc, #252]	; (1228 <convert_timestamp_to_datetime+0x140>)
    112a:	e000      	b.n	112e <convert_timestamp_to_datetime+0x46>
    112c:	4b3f      	ldr	r3, [pc, #252]	; (122c <convert_timestamp_to_datetime+0x144>)
    112e:	613b      	str	r3, [r7, #16]

		if (tmp >= sec_in_year) {
    1130:	69fa      	ldr	r2, [r7, #28]
    1132:	693b      	ldr	r3, [r7, #16]
    1134:	429a      	cmp	r2, r3
    1136:	d307      	bcc.n	1148 <convert_timestamp_to_datetime+0x60>
			tmp -= sec_in_year;
    1138:	69fa      	ldr	r2, [r7, #28]
    113a:	693b      	ldr	r3, [r7, #16]
    113c:	1ad3      	subs	r3, r2, r3
    113e:	61fb      	str	r3, [r7, #28]
			tmp_year++;
    1140:	69bb      	ldr	r3, [r7, #24]
    1142:	3301      	adds	r3, #1
    1144:	61bb      	str	r3, [r7, #24]
    1146:	e7e8      	b.n	111a <convert_timestamp_to_datetime+0x32>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    1148:	2317      	movs	r3, #23
    114a:	18fb      	adds	r3, r7, r3
    114c:	781a      	ldrb	r2, [r3, #0]
    114e:	69bb      	ldr	r3, [r7, #24]
    1150:	0011      	movs	r1, r2
    1152:	0018      	movs	r0, r3
    1154:	4b36      	ldr	r3, [pc, #216]	; (1230 <convert_timestamp_to_datetime+0x148>)
    1156:	4798      	blx	r3
    1158:	0003      	movs	r3, r0
    115a:	60fb      	str	r3, [r7, #12]

		if (tmp >= sec_in_month) {
    115c:	69fa      	ldr	r2, [r7, #28]
    115e:	68fb      	ldr	r3, [r7, #12]
    1160:	429a      	cmp	r2, r3
    1162:	d30b      	bcc.n	117c <convert_timestamp_to_datetime+0x94>
			tmp -= sec_in_month;
    1164:	69fa      	ldr	r2, [r7, #28]
    1166:	68fb      	ldr	r3, [r7, #12]
    1168:	1ad3      	subs	r3, r2, r3
    116a:	61fb      	str	r3, [r7, #28]
			tmp_month++;
    116c:	2317      	movs	r3, #23
    116e:	18fb      	adds	r3, r7, r3
    1170:	781a      	ldrb	r2, [r3, #0]
    1172:	2317      	movs	r3, #23
    1174:	18fb      	adds	r3, r7, r3
    1176:	3201      	adds	r2, #1
    1178:	701a      	strb	r2, [r3, #0]
    117a:	e7e5      	b.n	1148 <convert_timestamp_to_datetime+0x60>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    117c:	69fb      	ldr	r3, [r7, #28]
    117e:	4a2d      	ldr	r2, [pc, #180]	; (1234 <convert_timestamp_to_datetime+0x14c>)
    1180:	4293      	cmp	r3, r2
    1182:	d90c      	bls.n	119e <convert_timestamp_to_datetime+0xb6>
			tmp -= SECS_IN_DAY;
    1184:	69fb      	ldr	r3, [r7, #28]
    1186:	4a2c      	ldr	r2, [pc, #176]	; (1238 <convert_timestamp_to_datetime+0x150>)
    1188:	4694      	mov	ip, r2
    118a:	4463      	add	r3, ip
    118c:	61fb      	str	r3, [r7, #28]
			tmp_day++;
    118e:	2316      	movs	r3, #22
    1190:	18fb      	adds	r3, r7, r3
    1192:	781a      	ldrb	r2, [r3, #0]
    1194:	2316      	movs	r3, #22
    1196:	18fb      	adds	r3, r7, r3
    1198:	3201      	adds	r2, #1
    119a:	701a      	strb	r2, [r3, #0]
    119c:	e7ee      	b.n	117c <convert_timestamp_to_datetime+0x94>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    119e:	69fb      	ldr	r3, [r7, #28]
    11a0:	4a26      	ldr	r2, [pc, #152]	; (123c <convert_timestamp_to_datetime+0x154>)
    11a2:	4293      	cmp	r3, r2
    11a4:	d90c      	bls.n	11c0 <convert_timestamp_to_datetime+0xd8>
			tmp -= SECS_IN_HOUR;
    11a6:	69fb      	ldr	r3, [r7, #28]
    11a8:	4a25      	ldr	r2, [pc, #148]	; (1240 <convert_timestamp_to_datetime+0x158>)
    11aa:	4694      	mov	ip, r2
    11ac:	4463      	add	r3, ip
    11ae:	61fb      	str	r3, [r7, #28]
			tmp_hour++;
    11b0:	2315      	movs	r3, #21
    11b2:	18fb      	adds	r3, r7, r3
    11b4:	781a      	ldrb	r2, [r3, #0]
    11b6:	2315      	movs	r3, #21
    11b8:	18fb      	adds	r3, r7, r3
    11ba:	3201      	adds	r2, #1
    11bc:	701a      	strb	r2, [r3, #0]
    11be:	e7ee      	b.n	119e <convert_timestamp_to_datetime+0xb6>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    11c0:	69fb      	ldr	r3, [r7, #28]
    11c2:	2b3b      	cmp	r3, #59	; 0x3b
    11c4:	d90a      	bls.n	11dc <convert_timestamp_to_datetime+0xf4>
			tmp -= SECS_IN_MINUTE;
    11c6:	69fb      	ldr	r3, [r7, #28]
    11c8:	3b3c      	subs	r3, #60	; 0x3c
    11ca:	61fb      	str	r3, [r7, #28]
			tmp_minutes++;
    11cc:	2314      	movs	r3, #20
    11ce:	18fb      	adds	r3, r7, r3
    11d0:	781a      	ldrb	r2, [r3, #0]
    11d2:	2314      	movs	r3, #20
    11d4:	18fb      	adds	r3, r7, r3
    11d6:	3201      	adds	r2, #1
    11d8:	701a      	strb	r2, [r3, #0]
		if (tmp >= SECS_IN_MINUTE) {
    11da:	e7f1      	b.n	11c0 <convert_timestamp_to_datetime+0xd8>
		} else {
			break;
    11dc:	46c0      	nop			; (mov r8, r8)
		}
	}

	dt->date.year  = tmp_year;
    11de:	69bb      	ldr	r3, [r7, #24]
    11e0:	b29a      	uxth	r2, r3
    11e2:	683b      	ldr	r3, [r7, #0]
    11e4:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    11e6:	683b      	ldr	r3, [r7, #0]
    11e8:	2217      	movs	r2, #23
    11ea:	18ba      	adds	r2, r7, r2
    11ec:	7812      	ldrb	r2, [r2, #0]
    11ee:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    11f0:	683b      	ldr	r3, [r7, #0]
    11f2:	2216      	movs	r2, #22
    11f4:	18ba      	adds	r2, r7, r2
    11f6:	7812      	ldrb	r2, [r2, #0]
    11f8:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    11fa:	683b      	ldr	r3, [r7, #0]
    11fc:	2215      	movs	r2, #21
    11fe:	18ba      	adds	r2, r7, r2
    1200:	7812      	ldrb	r2, [r2, #0]
    1202:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    1204:	683b      	ldr	r3, [r7, #0]
    1206:	2214      	movs	r2, #20
    1208:	18ba      	adds	r2, r7, r2
    120a:	7812      	ldrb	r2, [r2, #0]
    120c:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    120e:	69fb      	ldr	r3, [r7, #28]
    1210:	b2da      	uxtb	r2, r3
    1212:	683b      	ldr	r3, [r7, #0]
    1214:	701a      	strb	r2, [r3, #0]

	return 0;
    1216:	2300      	movs	r3, #0
}
    1218:	0018      	movs	r0, r3
    121a:	46bd      	mov	sp, r7
    121c:	b008      	add	sp, #32
    121e:	bd80      	pop	{r7, pc}
    1220:	000007b2 	.word	0x000007b2
    1224:	0000102f 	.word	0x0000102f
    1228:	01e28500 	.word	0x01e28500
    122c:	01e13380 	.word	0x01e13380
    1230:	00001055 	.word	0x00001055
    1234:	0001517f 	.word	0x0001517f
    1238:	fffeae80 	.word	0xfffeae80
    123c:	00000e0f 	.word	0x00000e0f
    1240:	fffff1f0 	.word	0xfffff1f0

00001244 <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    1244:	b580      	push	{r7, lr}
    1246:	b086      	sub	sp, #24
    1248:	af00      	add	r7, sp, #0
    124a:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0;
    124c:	2300      	movs	r3, #0
    124e:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    1250:	2300      	movs	r3, #0
    1252:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - DEFAULT_BASE_YEAR;
    1254:	687b      	ldr	r3, [r7, #4]
    1256:	88db      	ldrh	r3, [r3, #6]
    1258:	b2da      	uxtb	r2, r3
    125a:	230f      	movs	r3, #15
    125c:	18fb      	adds	r3, r7, r3
    125e:	324e      	adds	r2, #78	; 0x4e
    1260:	701a      	strb	r2, [r3, #0]
	month   = dt->date.month;
    1262:	230e      	movs	r3, #14
    1264:	18fb      	adds	r3, r7, r3
    1266:	687a      	ldr	r2, [r7, #4]
    1268:	7952      	ldrb	r2, [r2, #5]
    126a:	701a      	strb	r2, [r3, #0]
	day     = dt->date.day;
    126c:	230d      	movs	r3, #13
    126e:	18fb      	adds	r3, r7, r3
    1270:	687a      	ldr	r2, [r7, #4]
    1272:	7912      	ldrb	r2, [r2, #4]
    1274:	701a      	strb	r2, [r3, #0]
	hour    = dt->time.hour;
    1276:	230c      	movs	r3, #12
    1278:	18fb      	adds	r3, r7, r3
    127a:	687a      	ldr	r2, [r7, #4]
    127c:	7892      	ldrb	r2, [r2, #2]
    127e:	701a      	strb	r2, [r3, #0]
	minutes = dt->time.min;
    1280:	230b      	movs	r3, #11
    1282:	18fb      	adds	r3, r7, r3
    1284:	687a      	ldr	r2, [r7, #4]
    1286:	7852      	ldrb	r2, [r2, #1]
    1288:	701a      	strb	r2, [r3, #0]
	seconds = dt->time.sec;
    128a:	230a      	movs	r3, #10
    128c:	18fb      	adds	r3, r7, r3
    128e:	687a      	ldr	r2, [r7, #4]
    1290:	7812      	ldrb	r2, [r2, #0]
    1292:	701a      	strb	r2, [r3, #0]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    1294:	2300      	movs	r3, #0
    1296:	613b      	str	r3, [r7, #16]
    1298:	e018      	b.n	12cc <convert_datetime_to_timestamp+0x88>
		if (leap_year(DEFAULT_BASE_YEAR + i)) {
    129a:	693b      	ldr	r3, [r7, #16]
    129c:	b29b      	uxth	r3, r3
    129e:	4a30      	ldr	r2, [pc, #192]	; (1360 <convert_datetime_to_timestamp+0x11c>)
    12a0:	4694      	mov	ip, r2
    12a2:	4463      	add	r3, ip
    12a4:	b29b      	uxth	r3, r3
    12a6:	0018      	movs	r0, r3
    12a8:	4b2e      	ldr	r3, [pc, #184]	; (1364 <convert_datetime_to_timestamp+0x120>)
    12aa:	4798      	blx	r3
    12ac:	1e03      	subs	r3, r0, #0
    12ae:	d005      	beq.n	12bc <convert_datetime_to_timestamp+0x78>
			tmp += SECS_IN_LEAP_YEAR;
    12b0:	697b      	ldr	r3, [r7, #20]
    12b2:	4a2d      	ldr	r2, [pc, #180]	; (1368 <convert_datetime_to_timestamp+0x124>)
    12b4:	4694      	mov	ip, r2
    12b6:	4463      	add	r3, ip
    12b8:	617b      	str	r3, [r7, #20]
    12ba:	e004      	b.n	12c6 <convert_datetime_to_timestamp+0x82>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    12bc:	697b      	ldr	r3, [r7, #20]
    12be:	4a2b      	ldr	r2, [pc, #172]	; (136c <convert_datetime_to_timestamp+0x128>)
    12c0:	4694      	mov	ip, r2
    12c2:	4463      	add	r3, ip
    12c4:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    12c6:	693b      	ldr	r3, [r7, #16]
    12c8:	3301      	adds	r3, #1
    12ca:	613b      	str	r3, [r7, #16]
    12cc:	230f      	movs	r3, #15
    12ce:	18fb      	adds	r3, r7, r3
    12d0:	781a      	ldrb	r2, [r3, #0]
    12d2:	693b      	ldr	r3, [r7, #16]
    12d4:	429a      	cmp	r2, r3
    12d6:	d8e0      	bhi.n	129a <convert_datetime_to_timestamp+0x56>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    12d8:	2301      	movs	r3, #1
    12da:	613b      	str	r3, [r7, #16]
    12dc:	e00f      	b.n	12fe <convert_datetime_to_timestamp+0xba>
		tmp += get_secs_in_month(dt->date.year, i);
    12de:	687b      	ldr	r3, [r7, #4]
    12e0:	88db      	ldrh	r3, [r3, #6]
    12e2:	001a      	movs	r2, r3
    12e4:	693b      	ldr	r3, [r7, #16]
    12e6:	b2db      	uxtb	r3, r3
    12e8:	0019      	movs	r1, r3
    12ea:	0010      	movs	r0, r2
    12ec:	4b20      	ldr	r3, [pc, #128]	; (1370 <convert_datetime_to_timestamp+0x12c>)
    12ee:	4798      	blx	r3
    12f0:	0002      	movs	r2, r0
    12f2:	697b      	ldr	r3, [r7, #20]
    12f4:	189b      	adds	r3, r3, r2
    12f6:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    12f8:	693b      	ldr	r3, [r7, #16]
    12fa:	3301      	adds	r3, #1
    12fc:	613b      	str	r3, [r7, #16]
    12fe:	230e      	movs	r3, #14
    1300:	18fb      	adds	r3, r7, r3
    1302:	781a      	ldrb	r2, [r3, #0]
    1304:	693b      	ldr	r3, [r7, #16]
    1306:	429a      	cmp	r2, r3
    1308:	d8e9      	bhi.n	12de <convert_datetime_to_timestamp+0x9a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    130a:	230d      	movs	r3, #13
    130c:	18fb      	adds	r3, r7, r3
    130e:	781b      	ldrb	r3, [r3, #0]
    1310:	3b01      	subs	r3, #1
    1312:	4a18      	ldr	r2, [pc, #96]	; (1374 <convert_datetime_to_timestamp+0x130>)
    1314:	4353      	muls	r3, r2
    1316:	001a      	movs	r2, r3
    1318:	697b      	ldr	r3, [r7, #20]
    131a:	189b      	adds	r3, r3, r2
    131c:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    131e:	230c      	movs	r3, #12
    1320:	18fb      	adds	r3, r7, r3
    1322:	781b      	ldrb	r3, [r3, #0]
    1324:	22e1      	movs	r2, #225	; 0xe1
    1326:	0112      	lsls	r2, r2, #4
    1328:	4353      	muls	r3, r2
    132a:	001a      	movs	r2, r3
    132c:	697b      	ldr	r3, [r7, #20]
    132e:	189b      	adds	r3, r3, r2
    1330:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    1332:	230b      	movs	r3, #11
    1334:	18fb      	adds	r3, r7, r3
    1336:	781a      	ldrb	r2, [r3, #0]
    1338:	0013      	movs	r3, r2
    133a:	011b      	lsls	r3, r3, #4
    133c:	1a9b      	subs	r3, r3, r2
    133e:	009b      	lsls	r3, r3, #2
    1340:	001a      	movs	r2, r3
    1342:	697b      	ldr	r3, [r7, #20]
    1344:	189b      	adds	r3, r3, r2
    1346:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    1348:	230a      	movs	r3, #10
    134a:	18fb      	adds	r3, r7, r3
    134c:	781b      	ldrb	r3, [r3, #0]
    134e:	697a      	ldr	r2, [r7, #20]
    1350:	18d3      	adds	r3, r2, r3
    1352:	617b      	str	r3, [r7, #20]

	return tmp;
    1354:	697b      	ldr	r3, [r7, #20]
}
    1356:	0018      	movs	r0, r3
    1358:	46bd      	mov	sp, r7
    135a:	b006      	add	sp, #24
    135c:	bd80      	pop	{r7, pc}
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	000007b2 	.word	0x000007b2
    1364:	0000102f 	.word	0x0000102f
    1368:	01e28500 	.word	0x01e28500
    136c:	01e13380 	.word	0x01e13380
    1370:	00001055 	.word	0x00001055
    1374:	00015180 	.word	0x00015180

00001378 <calibrate_timestamp>:

/** \brief calibrate timestamp to make desired timestamp ahead of current timestamp
 */
static void calibrate_timestamp(struct calendar_os_alarm *alarm, struct calendar_os_alarm *current_dt)
{
    1378:	b580      	push	{r7, lr}
    137a:	b084      	sub	sp, #16
    137c:	af00      	add	r7, sp, #0
    137e:	6078      	str	r0, [r7, #4]
    1380:	6039      	str	r1, [r7, #0]
	uint32_t alarm_ts;
	uint32_t current_ts = current_dt->cal_alarm.timestamp;
    1382:	683b      	ldr	r3, [r7, #0]
    1384:	68db      	ldr	r3, [r3, #12]
    1386:	60bb      	str	r3, [r7, #8]

	alarm_ts = alarm->cal_alarm.timestamp;
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	68db      	ldr	r3, [r3, #12]
    138c:	60fb      	str	r3, [r7, #12]

	/* calibrate timestamp */
	switch (alarm->cal_alarm.option) {
    138e:	687b      	ldr	r3, [r7, #4]
    1390:	7c1b      	ldrb	r3, [r3, #16]
    1392:	2b05      	cmp	r3, #5
    1394:	d84a      	bhi.n	142c <calibrate_timestamp+0xb4>
    1396:	009a      	lsls	r2, r3, #2
    1398:	4b2d      	ldr	r3, [pc, #180]	; (1450 <calibrate_timestamp+0xd8>)
    139a:	18d3      	adds	r3, r2, r3
    139c:	681b      	ldr	r3, [r3, #0]
    139e:	469f      	mov	pc, r3
	case CALENDAR_ALARM_MATCH_SEC:

		if (alarm_ts <= current_ts) {
    13a0:	68fa      	ldr	r2, [r7, #12]
    13a2:	68bb      	ldr	r3, [r7, #8]
    13a4:	429a      	cmp	r2, r3
    13a6:	d843      	bhi.n	1430 <calibrate_timestamp+0xb8>
			alarm_ts += SECS_IN_MINUTE;
    13a8:	68fb      	ldr	r3, [r7, #12]
    13aa:	333c      	adds	r3, #60	; 0x3c
    13ac:	60fb      	str	r3, [r7, #12]
		}

		break;
    13ae:	e03f      	b.n	1430 <calibrate_timestamp+0xb8>
	case CALENDAR_ALARM_MATCH_MIN:

		if (alarm_ts <= current_ts) {
    13b0:	68fa      	ldr	r2, [r7, #12]
    13b2:	68bb      	ldr	r3, [r7, #8]
    13b4:	429a      	cmp	r2, r3
    13b6:	d83d      	bhi.n	1434 <calibrate_timestamp+0xbc>
			alarm_ts += SECS_IN_HOUR;
    13b8:	68fb      	ldr	r3, [r7, #12]
    13ba:	22e1      	movs	r2, #225	; 0xe1
    13bc:	0112      	lsls	r2, r2, #4
    13be:	4694      	mov	ip, r2
    13c0:	4463      	add	r3, ip
    13c2:	60fb      	str	r3, [r7, #12]
		}

		break;
    13c4:	e036      	b.n	1434 <calibrate_timestamp+0xbc>
	case CALENDAR_ALARM_MATCH_HOUR:

		if (alarm_ts <= current_ts) {
    13c6:	68fa      	ldr	r2, [r7, #12]
    13c8:	68bb      	ldr	r3, [r7, #8]
    13ca:	429a      	cmp	r2, r3
    13cc:	d834      	bhi.n	1438 <calibrate_timestamp+0xc0>
			alarm_ts += SECS_IN_DAY;
    13ce:	68fb      	ldr	r3, [r7, #12]
    13d0:	4a20      	ldr	r2, [pc, #128]	; (1454 <calibrate_timestamp+0xdc>)
    13d2:	4694      	mov	ip, r2
    13d4:	4463      	add	r3, ip
    13d6:	60fb      	str	r3, [r7, #12]
		}

		break;
    13d8:	e02e      	b.n	1438 <calibrate_timestamp+0xc0>
	case CALENDAR_ALARM_MATCH_DAY:

		if (alarm_ts <= current_ts) {
    13da:	68fa      	ldr	r2, [r7, #12]
    13dc:	68bb      	ldr	r3, [r7, #8]
    13de:	429a      	cmp	r2, r3
    13e0:	d82c      	bhi.n	143c <calibrate_timestamp+0xc4>
			alarm_ts += get_secs_in_month(current_dt->cal_alarm.datetime.date.year,
    13e2:	683b      	ldr	r3, [r7, #0]
    13e4:	895b      	ldrh	r3, [r3, #10]
    13e6:	001a      	movs	r2, r3
    13e8:	683b      	ldr	r3, [r7, #0]
    13ea:	7a5b      	ldrb	r3, [r3, #9]
    13ec:	0019      	movs	r1, r3
    13ee:	0010      	movs	r0, r2
    13f0:	4b19      	ldr	r3, [pc, #100]	; (1458 <calibrate_timestamp+0xe0>)
    13f2:	4798      	blx	r3
    13f4:	0002      	movs	r2, r0
    13f6:	68fb      	ldr	r3, [r7, #12]
    13f8:	189b      	adds	r3, r3, r2
    13fa:	60fb      	str	r3, [r7, #12]
			                              current_dt->cal_alarm.datetime.date.month);
		}

		break;
    13fc:	e01e      	b.n	143c <calibrate_timestamp+0xc4>
	case CALENDAR_ALARM_MATCH_MONTH:

		if (alarm_ts <= current_ts) {
    13fe:	68fa      	ldr	r2, [r7, #12]
    1400:	68bb      	ldr	r3, [r7, #8]
    1402:	429a      	cmp	r2, r3
    1404:	d81c      	bhi.n	1440 <calibrate_timestamp+0xc8>
			if (leap_year(current_dt->cal_alarm.datetime.date.year)) {
    1406:	683b      	ldr	r3, [r7, #0]
    1408:	895b      	ldrh	r3, [r3, #10]
    140a:	0018      	movs	r0, r3
    140c:	4b13      	ldr	r3, [pc, #76]	; (145c <calibrate_timestamp+0xe4>)
    140e:	4798      	blx	r3
    1410:	1e03      	subs	r3, r0, #0
    1412:	d005      	beq.n	1420 <calibrate_timestamp+0xa8>
				alarm_ts += SECS_IN_LEAP_YEAR;
    1414:	68fb      	ldr	r3, [r7, #12]
    1416:	4a12      	ldr	r2, [pc, #72]	; (1460 <calibrate_timestamp+0xe8>)
    1418:	4694      	mov	ip, r2
    141a:	4463      	add	r3, ip
    141c:	60fb      	str	r3, [r7, #12]
			} else {
				alarm_ts += SECS_IN_NON_LEAP_YEAR;
			}
		}

		break;
    141e:	e00f      	b.n	1440 <calibrate_timestamp+0xc8>
				alarm_ts += SECS_IN_NON_LEAP_YEAR;
    1420:	68fb      	ldr	r3, [r7, #12]
    1422:	4a10      	ldr	r2, [pc, #64]	; (1464 <calibrate_timestamp+0xec>)
    1424:	4694      	mov	ip, r2
    1426:	4463      	add	r3, ip
    1428:	60fb      	str	r3, [r7, #12]
		break;
    142a:	e009      	b.n	1440 <calibrate_timestamp+0xc8>
	/* do nothing for year match */
	case CALENDAR_ALARM_MATCH_YEAR:
	default:
		break;
    142c:	46c0      	nop			; (mov r8, r8)
    142e:	e008      	b.n	1442 <calibrate_timestamp+0xca>
		break;
    1430:	46c0      	nop			; (mov r8, r8)
    1432:	e006      	b.n	1442 <calibrate_timestamp+0xca>
		break;
    1434:	46c0      	nop			; (mov r8, r8)
    1436:	e004      	b.n	1442 <calibrate_timestamp+0xca>
		break;
    1438:	46c0      	nop			; (mov r8, r8)
    143a:	e002      	b.n	1442 <calibrate_timestamp+0xca>
		break;
    143c:	46c0      	nop			; (mov r8, r8)
    143e:	e000      	b.n	1442 <calibrate_timestamp+0xca>
		break;
    1440:	46c0      	nop			; (mov r8, r8)
	}

	/* desired timestamp after calibration */
	alarm->cal_alarm.timestamp = alarm_ts;
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	68fa      	ldr	r2, [r7, #12]
    1446:	60da      	str	r2, [r3, #12]
}
    1448:	46c0      	nop			; (mov r8, r8)
    144a:	46bd      	mov	sp, r7
    144c:	b004      	add	sp, #16
    144e:	bd80      	pop	{r7, pc}
    1450:	0000847c 	.word	0x0000847c
    1454:	00015180 	.word	0x00015180
    1458:	00001055 	.word	0x00001055
    145c:	0000102f 	.word	0x0000102f
    1460:	01e28500 	.word	0x01e28500
    1464:	01e13380 	.word	0x01e13380

00001468 <fill_alarm>:

/** \brief complete alarm to absolute date/time, then fill up the timestamp
 */
static void fill_alarm(struct calendar_os_descriptor *const calendar, struct calendar_os_alarm *alarm)
{
    1468:	b580      	push	{r7, lr}
    146a:	b08a      	sub	sp, #40	; 0x28
    146c:	af00      	add	r7, sp, #0
    146e:	6078      	str	r0, [r7, #4]
    1470:	6039      	str	r1, [r7, #0]
	struct calendar_os_alarm current_dt;
	uint32_t                 tmp, current_ts;

	/* get current date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    1472:	687b      	ldr	r3, [r7, #4]
    1474:	0018      	movs	r0, r3
    1476:	4b43      	ldr	r3, [pc, #268]	; (1584 <fill_alarm+0x11c>)
    1478:	4798      	blx	r3
    147a:	0003      	movs	r3, r0
    147c:	627b      	str	r3, [r7, #36]	; 0x24
	convert_timestamp_to_datetime(current_ts, &current_dt.cal_alarm.datetime);
    147e:	2308      	movs	r3, #8
    1480:	18fb      	adds	r3, r7, r3
    1482:	1d1a      	adds	r2, r3, #4
    1484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1486:	0011      	movs	r1, r2
    1488:	0018      	movs	r0, r3
    148a:	4b3f      	ldr	r3, [pc, #252]	; (1588 <fill_alarm+0x120>)
    148c:	4798      	blx	r3

	current_dt.cal_alarm.timestamp = current_ts;
    148e:	2308      	movs	r3, #8
    1490:	18fb      	adds	r3, r7, r3
    1492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1494:	60da      	str	r2, [r3, #12]

	/* complete alarm */
	switch (alarm->cal_alarm.option) {
    1496:	683b      	ldr	r3, [r7, #0]
    1498:	7c1b      	ldrb	r3, [r3, #16]
    149a:	2b06      	cmp	r3, #6
    149c:	d854      	bhi.n	1548 <fill_alarm+0xe0>
    149e:	009a      	lsls	r2, r3, #2
    14a0:	4b3a      	ldr	r3, [pc, #232]	; (158c <fill_alarm+0x124>)
    14a2:	18d3      	adds	r3, r2, r3
    14a4:	681b      	ldr	r3, [r3, #0]
    14a6:	469f      	mov	pc, r3
	case CALENDAR_ALARM_MATCH_SEC:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    14a8:	2308      	movs	r3, #8
    14aa:	18fb      	adds	r3, r7, r3
    14ac:	895a      	ldrh	r2, [r3, #10]
    14ae:	683b      	ldr	r3, [r7, #0]
    14b0:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    14b2:	2308      	movs	r3, #8
    14b4:	18fb      	adds	r3, r7, r3
    14b6:	7a5a      	ldrb	r2, [r3, #9]
    14b8:	683b      	ldr	r3, [r7, #0]
    14ba:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    14bc:	2308      	movs	r3, #8
    14be:	18fb      	adds	r3, r7, r3
    14c0:	7a1a      	ldrb	r2, [r3, #8]
    14c2:	683b      	ldr	r3, [r7, #0]
    14c4:	721a      	strb	r2, [r3, #8]
		alarm->cal_alarm.datetime.time.hour  = current_dt.cal_alarm.datetime.time.hour;
    14c6:	2308      	movs	r3, #8
    14c8:	18fb      	adds	r3, r7, r3
    14ca:	799a      	ldrb	r2, [r3, #6]
    14cc:	683b      	ldr	r3, [r7, #0]
    14ce:	719a      	strb	r2, [r3, #6]
		alarm->cal_alarm.datetime.time.min   = current_dt.cal_alarm.datetime.time.min;
    14d0:	2308      	movs	r3, #8
    14d2:	18fb      	adds	r3, r7, r3
    14d4:	795a      	ldrb	r2, [r3, #5]
    14d6:	683b      	ldr	r3, [r7, #0]
    14d8:	715a      	strb	r2, [r3, #5]
		break;
    14da:	e036      	b.n	154a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_MIN:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    14dc:	2308      	movs	r3, #8
    14de:	18fb      	adds	r3, r7, r3
    14e0:	895a      	ldrh	r2, [r3, #10]
    14e2:	683b      	ldr	r3, [r7, #0]
    14e4:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    14e6:	2308      	movs	r3, #8
    14e8:	18fb      	adds	r3, r7, r3
    14ea:	7a5a      	ldrb	r2, [r3, #9]
    14ec:	683b      	ldr	r3, [r7, #0]
    14ee:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    14f0:	2308      	movs	r3, #8
    14f2:	18fb      	adds	r3, r7, r3
    14f4:	7a1a      	ldrb	r2, [r3, #8]
    14f6:	683b      	ldr	r3, [r7, #0]
    14f8:	721a      	strb	r2, [r3, #8]
		alarm->cal_alarm.datetime.time.hour  = current_dt.cal_alarm.datetime.time.hour;
    14fa:	2308      	movs	r3, #8
    14fc:	18fb      	adds	r3, r7, r3
    14fe:	799a      	ldrb	r2, [r3, #6]
    1500:	683b      	ldr	r3, [r7, #0]
    1502:	719a      	strb	r2, [r3, #6]
		break;
    1504:	e021      	b.n	154a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_HOUR:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    1506:	2308      	movs	r3, #8
    1508:	18fb      	adds	r3, r7, r3
    150a:	895a      	ldrh	r2, [r3, #10]
    150c:	683b      	ldr	r3, [r7, #0]
    150e:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    1510:	2308      	movs	r3, #8
    1512:	18fb      	adds	r3, r7, r3
    1514:	7a5a      	ldrb	r2, [r3, #9]
    1516:	683b      	ldr	r3, [r7, #0]
    1518:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    151a:	2308      	movs	r3, #8
    151c:	18fb      	adds	r3, r7, r3
    151e:	7a1a      	ldrb	r2, [r3, #8]
    1520:	683b      	ldr	r3, [r7, #0]
    1522:	721a      	strb	r2, [r3, #8]
		break;
    1524:	e011      	b.n	154a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_DAY:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    1526:	2308      	movs	r3, #8
    1528:	18fb      	adds	r3, r7, r3
    152a:	895a      	ldrh	r2, [r3, #10]
    152c:	683b      	ldr	r3, [r7, #0]
    152e:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    1530:	2308      	movs	r3, #8
    1532:	18fb      	adds	r3, r7, r3
    1534:	7a5a      	ldrb	r2, [r3, #9]
    1536:	683b      	ldr	r3, [r7, #0]
    1538:	725a      	strb	r2, [r3, #9]
		break;
    153a:	e006      	b.n	154a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_MONTH:
		alarm->cal_alarm.datetime.date.year = current_dt.cal_alarm.datetime.date.year;
    153c:	2308      	movs	r3, #8
    153e:	18fb      	adds	r3, r7, r3
    1540:	895a      	ldrh	r2, [r3, #10]
    1542:	683b      	ldr	r3, [r7, #0]
    1544:	815a      	strh	r2, [r3, #10]
		break;
    1546:	e000      	b.n	154a <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_YEAR:
		break;
	default:
		break;
    1548:	46c0      	nop			; (mov r8, r8)
	}

	/* fill up the timestamp */
	tmp                        = convert_datetime_to_timestamp(&alarm->cal_alarm.datetime);
    154a:	683b      	ldr	r3, [r7, #0]
    154c:	3304      	adds	r3, #4
    154e:	0018      	movs	r0, r3
    1550:	4b0f      	ldr	r3, [pc, #60]	; (1590 <fill_alarm+0x128>)
    1552:	4798      	blx	r3
    1554:	0003      	movs	r3, r0
    1556:	623b      	str	r3, [r7, #32]
	alarm->cal_alarm.timestamp = tmp;
    1558:	683b      	ldr	r3, [r7, #0]
    155a:	6a3a      	ldr	r2, [r7, #32]
    155c:	60da      	str	r2, [r3, #12]

	/* calibrate the timestamp */
	calibrate_timestamp(alarm, &current_dt);
    155e:	2308      	movs	r3, #8
    1560:	18fa      	adds	r2, r7, r3
    1562:	683b      	ldr	r3, [r7, #0]
    1564:	0011      	movs	r1, r2
    1566:	0018      	movs	r0, r3
    1568:	4b0a      	ldr	r3, [pc, #40]	; (1594 <fill_alarm+0x12c>)
    156a:	4798      	blx	r3
	convert_timestamp_to_datetime(alarm->cal_alarm.timestamp, &alarm->cal_alarm.datetime);
    156c:	683b      	ldr	r3, [r7, #0]
    156e:	68da      	ldr	r2, [r3, #12]
    1570:	683b      	ldr	r3, [r7, #0]
    1572:	3304      	adds	r3, #4
    1574:	0019      	movs	r1, r3
    1576:	0010      	movs	r0, r2
    1578:	4b03      	ldr	r3, [pc, #12]	; (1588 <fill_alarm+0x120>)
    157a:	4798      	blx	r3
}
    157c:	46c0      	nop			; (mov r8, r8)
    157e:	46bd      	mov	sp, r7
    1580:	b00a      	add	sp, #40	; 0x28
    1582:	bd80      	pop	{r7, pc}
    1584:	00002ac9 	.word	0x00002ac9
    1588:	000010e9 	.word	0x000010e9
    158c:	00008494 	.word	0x00008494
    1590:	00001245 	.word	0x00001245
    1594:	00001379 	.word	0x00001379

00001598 <calendar_os_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_os_init(struct calendar_os_descriptor *const calendar, const void *hw)
{
    1598:	b580      	push	{r7, lr}
    159a:	b084      	sub	sp, #16
    159c:	af00      	add	r7, sp, #0
    159e:	6078      	str	r0, [r7, #4]
    15a0:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    15a2:	2300      	movs	r3, #0
    15a4:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    15a6:	687b      	ldr	r3, [r7, #4]
    15a8:	1e5a      	subs	r2, r3, #1
    15aa:	4193      	sbcs	r3, r2
    15ac:	b2d8      	uxtb	r0, r3
    15ae:	23c4      	movs	r3, #196	; 0xc4
    15b0:	33ff      	adds	r3, #255	; 0xff
    15b2:	001a      	movs	r2, r3
    15b4:	4b11      	ldr	r3, [pc, #68]	; (15fc <calendar_os_init+0x64>)
    15b6:	0019      	movs	r1, r3
    15b8:	4b11      	ldr	r3, [pc, #68]	; (1600 <calendar_os_init+0x68>)
    15ba:	4798      	blx	r3

	ret = sem_init(&calendar->alarm_sem, 0);
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	3314      	adds	r3, #20
    15c0:	2100      	movs	r1, #0
    15c2:	0018      	movs	r0, r3
    15c4:	4b0f      	ldr	r3, [pc, #60]	; (1604 <calendar_os_init+0x6c>)
    15c6:	4798      	blx	r3
    15c8:	0003      	movs	r3, r0
    15ca:	60fb      	str	r3, [r7, #12]
	if (ret < 0) {
    15cc:	68fb      	ldr	r3, [r7, #12]
    15ce:	2b00      	cmp	r3, #0
    15d0:	da01      	bge.n	15d6 <calendar_os_init+0x3e>
		return ret;
    15d2:	68fb      	ldr	r3, [r7, #12]
    15d4:	e00e      	b.n	15f4 <calendar_os_init+0x5c>
	}

	calendar->device.hw = (void *)hw;
    15d6:	687b      	ldr	r3, [r7, #4]
    15d8:	683a      	ldr	r2, [r7, #0]
    15da:	601a      	str	r2, [r3, #0]

	_calendar_init(&calendar->device);
    15dc:	687b      	ldr	r3, [r7, #4]
    15de:	0018      	movs	r0, r3
    15e0:	4b09      	ldr	r3, [pc, #36]	; (1608 <calendar_os_init+0x70>)
    15e2:	4798      	blx	r3
	_calendar_enable(&calendar->device);
    15e4:	687b      	ldr	r3, [r7, #4]
    15e6:	0018      	movs	r0, r3
    15e8:	4b08      	ldr	r3, [pc, #32]	; (160c <calendar_os_init+0x74>)
    15ea:	4798      	blx	r3
	calendar->alarms.head = NULL;
    15ec:	687b      	ldr	r3, [r7, #4]
    15ee:	2200      	movs	r2, #0
    15f0:	611a      	str	r2, [r3, #16]

	return 0;
    15f2:	2300      	movs	r3, #0
}
    15f4:	0018      	movs	r0, r3
    15f6:	46bd      	mov	sp, r7
    15f8:	b004      	add	sp, #16
    15fa:	bd80      	pop	{r7, pc}
    15fc:	000084b0 	.word	0x000084b0
    1600:	00001afd 	.word	0x00001afd
    1604:	000045e1 	.word	0x000045e1
    1608:	000029d9 	.word	0x000029d9
    160c:	00002a79 	.word	0x00002a79

00001610 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1610:	b580      	push	{r7, lr}
    1612:	b084      	sub	sp, #16
    1614:	af00      	add	r7, sp, #0
    1616:	60f8      	str	r0, [r7, #12]
    1618:	60b9      	str	r1, [r7, #8]
    161a:	1dbb      	adds	r3, r7, #6
    161c:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    161e:	68fb      	ldr	r3, [r7, #12]
    1620:	2b00      	cmp	r3, #0
    1622:	d004      	beq.n	162e <io_write+0x1e>
    1624:	68bb      	ldr	r3, [r7, #8]
    1626:	2b00      	cmp	r3, #0
    1628:	d001      	beq.n	162e <io_write+0x1e>
    162a:	2301      	movs	r3, #1
    162c:	e000      	b.n	1630 <io_write+0x20>
    162e:	2300      	movs	r3, #0
    1630:	1c1a      	adds	r2, r3, #0
    1632:	2301      	movs	r3, #1
    1634:	4013      	ands	r3, r2
    1636:	b2db      	uxtb	r3, r3
    1638:	4908      	ldr	r1, [pc, #32]	; (165c <io_write+0x4c>)
    163a:	2234      	movs	r2, #52	; 0x34
    163c:	0018      	movs	r0, r3
    163e:	4b08      	ldr	r3, [pc, #32]	; (1660 <io_write+0x50>)
    1640:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1642:	68fb      	ldr	r3, [r7, #12]
    1644:	681b      	ldr	r3, [r3, #0]
    1646:	1dba      	adds	r2, r7, #6
    1648:	8812      	ldrh	r2, [r2, #0]
    164a:	68b9      	ldr	r1, [r7, #8]
    164c:	68f8      	ldr	r0, [r7, #12]
    164e:	4798      	blx	r3
    1650:	0003      	movs	r3, r0
}
    1652:	0018      	movs	r0, r3
    1654:	46bd      	mov	sp, r7
    1656:	b004      	add	sp, #16
    1658:	bd80      	pop	{r7, pc}
    165a:	46c0      	nop			; (mov r8, r8)
    165c:	000084d0 	.word	0x000084d0
    1660:	00001afd 	.word	0x00001afd

00001664 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1664:	b580      	push	{r7, lr}
    1666:	b084      	sub	sp, #16
    1668:	af00      	add	r7, sp, #0
    166a:	60f8      	str	r0, [r7, #12]
    166c:	60b9      	str	r1, [r7, #8]
    166e:	1dbb      	adds	r3, r7, #6
    1670:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    1672:	68fb      	ldr	r3, [r7, #12]
    1674:	2b00      	cmp	r3, #0
    1676:	d004      	beq.n	1682 <io_read+0x1e>
    1678:	68bb      	ldr	r3, [r7, #8]
    167a:	2b00      	cmp	r3, #0
    167c:	d001      	beq.n	1682 <io_read+0x1e>
    167e:	2301      	movs	r3, #1
    1680:	e000      	b.n	1684 <io_read+0x20>
    1682:	2300      	movs	r3, #0
    1684:	1c1a      	adds	r2, r3, #0
    1686:	2301      	movs	r3, #1
    1688:	4013      	ands	r3, r2
    168a:	b2db      	uxtb	r3, r3
    168c:	4908      	ldr	r1, [pc, #32]	; (16b0 <io_read+0x4c>)
    168e:	223d      	movs	r2, #61	; 0x3d
    1690:	0018      	movs	r0, r3
    1692:	4b08      	ldr	r3, [pc, #32]	; (16b4 <io_read+0x50>)
    1694:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    1696:	68fb      	ldr	r3, [r7, #12]
    1698:	685b      	ldr	r3, [r3, #4]
    169a:	1dba      	adds	r2, r7, #6
    169c:	8812      	ldrh	r2, [r2, #0]
    169e:	68b9      	ldr	r1, [r7, #8]
    16a0:	68f8      	ldr	r0, [r7, #12]
    16a2:	4798      	blx	r3
    16a4:	0003      	movs	r3, r0
}
    16a6:	0018      	movs	r0, r3
    16a8:	46bd      	mov	sp, r7
    16aa:	b004      	add	sp, #16
    16ac:	bd80      	pop	{r7, pc}
    16ae:	46c0      	nop			; (mov r8, r8)
    16b0:	000084d0 	.word	0x000084d0
    16b4:	00001afd 	.word	0x00001afd

000016b8 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    16b8:	b580      	push	{r7, lr}
    16ba:	b084      	sub	sp, #16
    16bc:	af00      	add	r7, sp, #0
    16be:	60f8      	str	r0, [r7, #12]
    16c0:	60b9      	str	r1, [r7, #8]
    16c2:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    16c4:	68fb      	ldr	r3, [r7, #12]
    16c6:	2b00      	cmp	r3, #0
    16c8:	d004      	beq.n	16d4 <pwm_init+0x1c>
    16ca:	68bb      	ldr	r3, [r7, #8]
    16cc:	2b00      	cmp	r3, #0
    16ce:	d001      	beq.n	16d4 <pwm_init+0x1c>
    16d0:	2301      	movs	r3, #1
    16d2:	e000      	b.n	16d6 <pwm_init+0x1e>
    16d4:	2300      	movs	r3, #0
    16d6:	1c1a      	adds	r2, r3, #0
    16d8:	2301      	movs	r3, #1
    16da:	4013      	ands	r3, r2
    16dc:	b2db      	uxtb	r3, r3
    16de:	490b      	ldr	r1, [pc, #44]	; (170c <pwm_init+0x54>)
    16e0:	2233      	movs	r2, #51	; 0x33
    16e2:	0018      	movs	r0, r3
    16e4:	4b0a      	ldr	r3, [pc, #40]	; (1710 <pwm_init+0x58>)
    16e6:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    16e8:	68fb      	ldr	r3, [r7, #12]
    16ea:	68ba      	ldr	r2, [r7, #8]
    16ec:	0011      	movs	r1, r2
    16ee:	0018      	movs	r0, r3
    16f0:	4b08      	ldr	r3, [pc, #32]	; (1714 <pwm_init+0x5c>)
    16f2:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    16f4:	68fb      	ldr	r3, [r7, #12]
    16f6:	4a08      	ldr	r2, [pc, #32]	; (1718 <pwm_init+0x60>)
    16f8:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    16fa:	68fb      	ldr	r3, [r7, #12]
    16fc:	4a07      	ldr	r2, [pc, #28]	; (171c <pwm_init+0x64>)
    16fe:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    1700:	2300      	movs	r3, #0
}
    1702:	0018      	movs	r0, r3
    1704:	46bd      	mov	sp, r7
    1706:	b004      	add	sp, #16
    1708:	bd80      	pop	{r7, pc}
    170a:	46c0      	nop			; (mov r8, r8)
    170c:	000084e4 	.word	0x000084e4
    1710:	00001afd 	.word	0x00001afd
    1714:	00003461 	.word	0x00003461
    1718:	00001809 	.word	0x00001809
    171c:	0000182f 	.word	0x0000182f

00001720 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    1720:	b580      	push	{r7, lr}
    1722:	b082      	sub	sp, #8
    1724:	af00      	add	r7, sp, #0
    1726:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1728:	687b      	ldr	r3, [r7, #4]
    172a:	1e5a      	subs	r2, r3, #1
    172c:	4193      	sbcs	r3, r2
    172e:	b2db      	uxtb	r3, r3
    1730:	490b      	ldr	r1, [pc, #44]	; (1760 <pwm_enable+0x40>)
    1732:	224a      	movs	r2, #74	; 0x4a
    1734:	0018      	movs	r0, r3
    1736:	4b0b      	ldr	r3, [pc, #44]	; (1764 <pwm_enable+0x44>)
    1738:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    173a:	687b      	ldr	r3, [r7, #4]
    173c:	0018      	movs	r0, r3
    173e:	4b0a      	ldr	r3, [pc, #40]	; (1768 <pwm_enable+0x48>)
    1740:	4798      	blx	r3
    1742:	1e03      	subs	r3, r0, #0
    1744:	d002      	beq.n	174c <pwm_enable+0x2c>
		return ERR_DENIED;
    1746:	2311      	movs	r3, #17
    1748:	425b      	negs	r3, r3
    174a:	e004      	b.n	1756 <pwm_enable+0x36>
	}
	_pwm_enable(&descr->device);
    174c:	687b      	ldr	r3, [r7, #4]
    174e:	0018      	movs	r0, r3
    1750:	4b06      	ldr	r3, [pc, #24]	; (176c <pwm_enable+0x4c>)
    1752:	4798      	blx	r3

	return ERR_NONE;
    1754:	2300      	movs	r3, #0
}
    1756:	0018      	movs	r0, r3
    1758:	46bd      	mov	sp, r7
    175a:	b002      	add	sp, #8
    175c:	bd80      	pop	{r7, pc}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	000084e4 	.word	0x000084e4
    1764:	00001afd 	.word	0x00001afd
    1768:	00003825 	.word	0x00003825
    176c:	000036c9 	.word	0x000036c9

00001770 <pwm_disable>:

/**
 * \brief Stop pwm
 */
int32_t pwm_disable(struct pwm_descriptor *const descr)
{
    1770:	b580      	push	{r7, lr}
    1772:	b082      	sub	sp, #8
    1774:	af00      	add	r7, sp, #0
    1776:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1778:	687b      	ldr	r3, [r7, #4]
    177a:	1e5a      	subs	r2, r3, #1
    177c:	4193      	sbcs	r3, r2
    177e:	b2db      	uxtb	r3, r3
    1780:	490d      	ldr	r1, [pc, #52]	; (17b8 <pwm_disable+0x48>)
    1782:	2258      	movs	r2, #88	; 0x58
    1784:	0018      	movs	r0, r3
    1786:	4b0d      	ldr	r3, [pc, #52]	; (17bc <pwm_disable+0x4c>)
    1788:	4798      	blx	r3
	if (!_pwm_is_enabled(&descr->device)) {
    178a:	687b      	ldr	r3, [r7, #4]
    178c:	0018      	movs	r0, r3
    178e:	4b0c      	ldr	r3, [pc, #48]	; (17c0 <pwm_disable+0x50>)
    1790:	4798      	blx	r3
    1792:	0003      	movs	r3, r0
    1794:	001a      	movs	r2, r3
    1796:	2301      	movs	r3, #1
    1798:	4053      	eors	r3, r2
    179a:	b2db      	uxtb	r3, r3
    179c:	2b00      	cmp	r3, #0
    179e:	d002      	beq.n	17a6 <pwm_disable+0x36>
		return ERR_DENIED;
    17a0:	2311      	movs	r3, #17
    17a2:	425b      	negs	r3, r3
    17a4:	e004      	b.n	17b0 <pwm_disable+0x40>
	}
	_pwm_disable(&descr->device);
    17a6:	687b      	ldr	r3, [r7, #4]
    17a8:	0018      	movs	r0, r3
    17aa:	4b06      	ldr	r3, [pc, #24]	; (17c4 <pwm_disable+0x54>)
    17ac:	4798      	blx	r3

	return ERR_NONE;
    17ae:	2300      	movs	r3, #0
}
    17b0:	0018      	movs	r0, r3
    17b2:	46bd      	mov	sp, r7
    17b4:	b002      	add	sp, #8
    17b6:	bd80      	pop	{r7, pc}
    17b8:	000084e4 	.word	0x000084e4
    17bc:	00001afd 	.word	0x00001afd
    17c0:	00003825 	.word	0x00003825
    17c4:	000036e9 	.word	0x000036e9

000017c8 <pwm_set_parameters>:

/**
 * \brief Change PWM parameter
 */
int32_t pwm_set_parameters(struct pwm_descriptor *const descr, const pwm_period_t period, const pwm_period_t duty_cycle)
{
    17c8:	b580      	push	{r7, lr}
    17ca:	b084      	sub	sp, #16
    17cc:	af00      	add	r7, sp, #0
    17ce:	60f8      	str	r0, [r7, #12]
    17d0:	60b9      	str	r1, [r7, #8]
    17d2:	607a      	str	r2, [r7, #4]
	ASSERT(descr);
    17d4:	68fb      	ldr	r3, [r7, #12]
    17d6:	1e5a      	subs	r2, r3, #1
    17d8:	4193      	sbcs	r3, r2
    17da:	b2db      	uxtb	r3, r3
    17dc:	4907      	ldr	r1, [pc, #28]	; (17fc <pwm_set_parameters+0x34>)
    17de:	227c      	movs	r2, #124	; 0x7c
    17e0:	0018      	movs	r0, r3
    17e2:	4b07      	ldr	r3, [pc, #28]	; (1800 <pwm_set_parameters+0x38>)
    17e4:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
    17e6:	68fb      	ldr	r3, [r7, #12]
    17e8:	687a      	ldr	r2, [r7, #4]
    17ea:	68b9      	ldr	r1, [r7, #8]
    17ec:	0018      	movs	r0, r3
    17ee:	4b05      	ldr	r3, [pc, #20]	; (1804 <pwm_set_parameters+0x3c>)
    17f0:	4798      	blx	r3
	return ERR_NONE;
    17f2:	2300      	movs	r3, #0
}
    17f4:	0018      	movs	r0, r3
    17f6:	46bd      	mov	sp, r7
    17f8:	b004      	add	sp, #16
    17fa:	bd80      	pop	{r7, pc}
    17fc:	000084e4 	.word	0x000084e4
    1800:	00001afd 	.word	0x00001afd
    1804:	00003709 	.word	0x00003709

00001808 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1808:	b580      	push	{r7, lr}
    180a:	b084      	sub	sp, #16
    180c:	af00      	add	r7, sp, #0
    180e:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1810:	687b      	ldr	r3, [r7, #4]
    1812:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    1814:	68fb      	ldr	r3, [r7, #12]
    1816:	695b      	ldr	r3, [r3, #20]
    1818:	2b00      	cmp	r3, #0
    181a:	d004      	beq.n	1826 <pwm_period_expired+0x1e>
		descr->pwm_cb.period(descr);
    181c:	68fb      	ldr	r3, [r7, #12]
    181e:	695b      	ldr	r3, [r3, #20]
    1820:	68fa      	ldr	r2, [r7, #12]
    1822:	0010      	movs	r0, r2
    1824:	4798      	blx	r3
	}
}
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	46bd      	mov	sp, r7
    182a:	b004      	add	sp, #16
    182c:	bd80      	pop	{r7, pc}

0000182e <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    182e:	b580      	push	{r7, lr}
    1830:	b084      	sub	sp, #16
    1832:	af00      	add	r7, sp, #0
    1834:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1836:	687b      	ldr	r3, [r7, #4]
    1838:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    183a:	68fb      	ldr	r3, [r7, #12]
    183c:	699b      	ldr	r3, [r3, #24]
    183e:	2b00      	cmp	r3, #0
    1840:	d004      	beq.n	184c <pwm_detect_fault+0x1e>
		descr->pwm_cb.error(descr);
    1842:	68fb      	ldr	r3, [r7, #12]
    1844:	699b      	ldr	r3, [r3, #24]
    1846:	68fa      	ldr	r2, [r7, #12]
    1848:	0010      	movs	r0, r2
    184a:	4798      	blx	r3
	}
}
    184c:	46c0      	nop			; (mov r8, r8)
    184e:	46bd      	mov	sp, r7
    1850:	b004      	add	sp, #16
    1852:	bd80      	pop	{r7, pc}

00001854 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
    1854:	b580      	push	{r7, lr}
    1856:	b086      	sub	sp, #24
    1858:	af00      	add	r7, sp, #0
    185a:	60f8      	str	r0, [r7, #12]
    185c:	60b9      	str	r1, [r7, #8]
    185e:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
    1860:	68fb      	ldr	r3, [r7, #12]
    1862:	2b00      	cmp	r3, #0
    1864:	d004      	beq.n	1870 <usart_sync_init+0x1c>
    1866:	68bb      	ldr	r3, [r7, #8]
    1868:	2b00      	cmp	r3, #0
    186a:	d001      	beq.n	1870 <usart_sync_init+0x1c>
    186c:	2301      	movs	r3, #1
    186e:	e000      	b.n	1872 <usart_sync_init+0x1e>
    1870:	2300      	movs	r3, #0
    1872:	1c1a      	adds	r2, r3, #0
    1874:	2301      	movs	r3, #1
    1876:	4013      	ands	r3, r2
    1878:	b2db      	uxtb	r3, r3
    187a:	490f      	ldr	r1, [pc, #60]	; (18b8 <usart_sync_init+0x64>)
    187c:	2234      	movs	r2, #52	; 0x34
    187e:	0018      	movs	r0, r3
    1880:	4b0e      	ldr	r3, [pc, #56]	; (18bc <usart_sync_init+0x68>)
    1882:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    1884:	68fb      	ldr	r3, [r7, #12]
    1886:	3308      	adds	r3, #8
    1888:	68ba      	ldr	r2, [r7, #8]
    188a:	0011      	movs	r1, r2
    188c:	0018      	movs	r0, r3
    188e:	4b0c      	ldr	r3, [pc, #48]	; (18c0 <usart_sync_init+0x6c>)
    1890:	4798      	blx	r3
    1892:	0003      	movs	r3, r0
    1894:	617b      	str	r3, [r7, #20]
	if (init_status) {
    1896:	697b      	ldr	r3, [r7, #20]
    1898:	2b00      	cmp	r3, #0
    189a:	d001      	beq.n	18a0 <usart_sync_init+0x4c>
		return init_status;
    189c:	697b      	ldr	r3, [r7, #20]
    189e:	e006      	b.n	18ae <usart_sync_init+0x5a>
	}

	descr->io.read  = usart_sync_read;
    18a0:	68fb      	ldr	r3, [r7, #12]
    18a2:	4a08      	ldr	r2, [pc, #32]	; (18c4 <usart_sync_init+0x70>)
    18a4:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
    18a6:	68fb      	ldr	r3, [r7, #12]
    18a8:	4a07      	ldr	r2, [pc, #28]	; (18c8 <usart_sync_init+0x74>)
    18aa:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    18ac:	2300      	movs	r3, #0
}
    18ae:	0018      	movs	r0, r3
    18b0:	46bd      	mov	sp, r7
    18b2:	b006      	add	sp, #24
    18b4:	bd80      	pop	{r7, pc}
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	000084fc 	.word	0x000084fc
    18bc:	00001afd 	.word	0x00001afd
    18c0:	00002d8d 	.word	0x00002d8d
    18c4:	00001a61 	.word	0x00001a61
    18c8:	0000198d 	.word	0x0000198d

000018cc <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
    18cc:	b580      	push	{r7, lr}
    18ce:	b082      	sub	sp, #8
    18d0:	af00      	add	r7, sp, #0
    18d2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    18d4:	687b      	ldr	r3, [r7, #4]
    18d6:	1e5a      	subs	r2, r3, #1
    18d8:	4193      	sbcs	r3, r2
    18da:	b2db      	uxtb	r3, r3
    18dc:	4907      	ldr	r1, [pc, #28]	; (18fc <usart_sync_enable+0x30>)
    18de:	2253      	movs	r2, #83	; 0x53
    18e0:	0018      	movs	r0, r3
    18e2:	4b07      	ldr	r3, [pc, #28]	; (1900 <usart_sync_enable+0x34>)
    18e4:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    18e6:	687b      	ldr	r3, [r7, #4]
    18e8:	3308      	adds	r3, #8
    18ea:	0018      	movs	r0, r3
    18ec:	4b05      	ldr	r3, [pc, #20]	; (1904 <usart_sync_enable+0x38>)
    18ee:	4798      	blx	r3

	return ERR_NONE;
    18f0:	2300      	movs	r3, #0
}
    18f2:	0018      	movs	r0, r3
    18f4:	46bd      	mov	sp, r7
    18f6:	b002      	add	sp, #8
    18f8:	bd80      	pop	{r7, pc}
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	000084fc 	.word	0x000084fc
    1900:	00001afd 	.word	0x00001afd
    1904:	00002dcd 	.word	0x00002dcd

00001908 <usart_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t usart_sync_get_io_descriptor(struct usart_sync_descriptor *const descr, struct io_descriptor **io)
{
    1908:	b580      	push	{r7, lr}
    190a:	b082      	sub	sp, #8
    190c:	af00      	add	r7, sp, #0
    190e:	6078      	str	r0, [r7, #4]
    1910:	6039      	str	r1, [r7, #0]
	ASSERT(descr && io);
    1912:	687b      	ldr	r3, [r7, #4]
    1914:	2b00      	cmp	r3, #0
    1916:	d004      	beq.n	1922 <usart_sync_get_io_descriptor+0x1a>
    1918:	683b      	ldr	r3, [r7, #0]
    191a:	2b00      	cmp	r3, #0
    191c:	d001      	beq.n	1922 <usart_sync_get_io_descriptor+0x1a>
    191e:	2301      	movs	r3, #1
    1920:	e000      	b.n	1924 <usart_sync_get_io_descriptor+0x1c>
    1922:	2300      	movs	r3, #0
    1924:	1c1a      	adds	r2, r3, #0
    1926:	2301      	movs	r3, #1
    1928:	4013      	ands	r3, r2
    192a:	b2db      	uxtb	r3, r3
    192c:	4906      	ldr	r1, [pc, #24]	; (1948 <usart_sync_get_io_descriptor+0x40>)
    192e:	2269      	movs	r2, #105	; 0x69
    1930:	0018      	movs	r0, r3
    1932:	4b06      	ldr	r3, [pc, #24]	; (194c <usart_sync_get_io_descriptor+0x44>)
    1934:	4798      	blx	r3

	*io = &descr->io;
    1936:	687a      	ldr	r2, [r7, #4]
    1938:	683b      	ldr	r3, [r7, #0]
    193a:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    193c:	2300      	movs	r3, #0
}
    193e:	0018      	movs	r0, r3
    1940:	46bd      	mov	sp, r7
    1942:	b002      	add	sp, #8
    1944:	bd80      	pop	{r7, pc}
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	000084fc 	.word	0x000084fc
    194c:	00001afd 	.word	0x00001afd

00001950 <usart_sync_is_rx_not_empty>:

/**
 * \brief Check if the usart receiver is not empty
 */
int32_t usart_sync_is_rx_not_empty(const struct usart_sync_descriptor *const descr)
{
    1950:	b580      	push	{r7, lr}
    1952:	b082      	sub	sp, #8
    1954:	af00      	add	r7, sp, #0
    1956:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1958:	687b      	ldr	r3, [r7, #4]
    195a:	1e5a      	subs	r2, r3, #1
    195c:	4193      	sbcs	r3, r2
    195e:	b2db      	uxtb	r3, r3
    1960:	4907      	ldr	r1, [pc, #28]	; (1980 <usart_sync_is_rx_not_empty+0x30>)
    1962:	22d7      	movs	r2, #215	; 0xd7
    1964:	0018      	movs	r0, r3
    1966:	4b07      	ldr	r3, [pc, #28]	; (1984 <usart_sync_is_rx_not_empty+0x34>)
    1968:	4798      	blx	r3
	return _usart_sync_is_byte_received(&descr->device);
    196a:	687b      	ldr	r3, [r7, #4]
    196c:	3308      	adds	r3, #8
    196e:	0018      	movs	r0, r3
    1970:	4b05      	ldr	r3, [pc, #20]	; (1988 <usart_sync_is_rx_not_empty+0x38>)
    1972:	4798      	blx	r3
    1974:	0003      	movs	r3, r0
}
    1976:	0018      	movs	r0, r3
    1978:	46bd      	mov	sp, r7
    197a:	b002      	add	sp, #8
    197c:	bd80      	pop	{r7, pc}
    197e:	46c0      	nop			; (mov r8, r8)
    1980:	000084fc 	.word	0x000084fc
    1984:	00001afd 	.word	0x00001afd
    1988:	00002e7d 	.word	0x00002e7d

0000198c <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    198c:	b580      	push	{r7, lr}
    198e:	b086      	sub	sp, #24
    1990:	af00      	add	r7, sp, #0
    1992:	60f8      	str	r0, [r7, #12]
    1994:	60b9      	str	r1, [r7, #8]
    1996:	1dbb      	adds	r3, r7, #6
    1998:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    199a:	2300      	movs	r3, #0
    199c:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    199e:	68fb      	ldr	r3, [r7, #12]
    19a0:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    19a2:	68fb      	ldr	r3, [r7, #12]
    19a4:	2b00      	cmp	r3, #0
    19a6:	d008      	beq.n	19ba <usart_sync_write+0x2e>
    19a8:	68bb      	ldr	r3, [r7, #8]
    19aa:	2b00      	cmp	r3, #0
    19ac:	d005      	beq.n	19ba <usart_sync_write+0x2e>
    19ae:	1dbb      	adds	r3, r7, #6
    19b0:	881b      	ldrh	r3, [r3, #0]
    19b2:	2b00      	cmp	r3, #0
    19b4:	d001      	beq.n	19ba <usart_sync_write+0x2e>
    19b6:	2301      	movs	r3, #1
    19b8:	e000      	b.n	19bc <usart_sync_write+0x30>
    19ba:	2300      	movs	r3, #0
    19bc:	1c1a      	adds	r2, r3, #0
    19be:	2301      	movs	r3, #1
    19c0:	4013      	ands	r3, r2
    19c2:	b2db      	uxtb	r3, r3
    19c4:	4921      	ldr	r1, [pc, #132]	; (1a4c <usart_sync_write+0xc0>)
    19c6:	22f1      	movs	r2, #241	; 0xf1
    19c8:	0018      	movs	r0, r3
    19ca:	4b21      	ldr	r3, [pc, #132]	; (1a50 <usart_sync_write+0xc4>)
    19cc:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    19ce:	46c0      	nop			; (mov r8, r8)
    19d0:	693b      	ldr	r3, [r7, #16]
    19d2:	3308      	adds	r3, #8
    19d4:	0018      	movs	r0, r3
    19d6:	4b1f      	ldr	r3, [pc, #124]	; (1a54 <usart_sync_write+0xc8>)
    19d8:	4798      	blx	r3
    19da:	0003      	movs	r3, r0
    19dc:	001a      	movs	r2, r3
    19de:	2301      	movs	r3, #1
    19e0:	4053      	eors	r3, r2
    19e2:	b2db      	uxtb	r3, r3
    19e4:	2b00      	cmp	r3, #0
    19e6:	d1f3      	bne.n	19d0 <usart_sync_write+0x44>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    19e8:	693b      	ldr	r3, [r7, #16]
    19ea:	3308      	adds	r3, #8
    19ec:	0018      	movs	r0, r3
    19ee:	68ba      	ldr	r2, [r7, #8]
    19f0:	697b      	ldr	r3, [r7, #20]
    19f2:	18d3      	adds	r3, r2, r3
    19f4:	781b      	ldrb	r3, [r3, #0]
    19f6:	0019      	movs	r1, r3
    19f8:	4b17      	ldr	r3, [pc, #92]	; (1a58 <usart_sync_write+0xcc>)
    19fa:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    19fc:	46c0      	nop			; (mov r8, r8)
    19fe:	693b      	ldr	r3, [r7, #16]
    1a00:	3308      	adds	r3, #8
    1a02:	0018      	movs	r0, r3
    1a04:	4b13      	ldr	r3, [pc, #76]	; (1a54 <usart_sync_write+0xc8>)
    1a06:	4798      	blx	r3
    1a08:	0003      	movs	r3, r0
    1a0a:	001a      	movs	r2, r3
    1a0c:	2301      	movs	r3, #1
    1a0e:	4053      	eors	r3, r2
    1a10:	b2db      	uxtb	r3, r3
    1a12:	2b00      	cmp	r3, #0
    1a14:	d1f3      	bne.n	19fe <usart_sync_write+0x72>
			;
	} while (++offset < length);
    1a16:	697b      	ldr	r3, [r7, #20]
    1a18:	3301      	adds	r3, #1
    1a1a:	617b      	str	r3, [r7, #20]
    1a1c:	1dbb      	adds	r3, r7, #6
    1a1e:	881b      	ldrh	r3, [r3, #0]
    1a20:	697a      	ldr	r2, [r7, #20]
    1a22:	429a      	cmp	r2, r3
    1a24:	d3e0      	bcc.n	19e8 <usart_sync_write+0x5c>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1a26:	46c0      	nop			; (mov r8, r8)
    1a28:	693b      	ldr	r3, [r7, #16]
    1a2a:	3308      	adds	r3, #8
    1a2c:	0018      	movs	r0, r3
    1a2e:	4b0b      	ldr	r3, [pc, #44]	; (1a5c <usart_sync_write+0xd0>)
    1a30:	4798      	blx	r3
    1a32:	0003      	movs	r3, r0
    1a34:	001a      	movs	r2, r3
    1a36:	2301      	movs	r3, #1
    1a38:	4053      	eors	r3, r2
    1a3a:	b2db      	uxtb	r3, r3
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d1f3      	bne.n	1a28 <usart_sync_write+0x9c>
		;
	return (int32_t)offset;
    1a40:	697b      	ldr	r3, [r7, #20]
}
    1a42:	0018      	movs	r0, r3
    1a44:	46bd      	mov	sp, r7
    1a46:	b006      	add	sp, #24
    1a48:	bd80      	pop	{r7, pc}
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	000084fc 	.word	0x000084fc
    1a50:	00001afd 	.word	0x00001afd
    1a54:	00002e3d 	.word	0x00002e3d
    1a58:	00002ded 	.word	0x00002ded
    1a5c:	00002e5d 	.word	0x00002e5d

00001a60 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1a60:	b590      	push	{r4, r7, lr}
    1a62:	b087      	sub	sp, #28
    1a64:	af00      	add	r7, sp, #0
    1a66:	60f8      	str	r0, [r7, #12]
    1a68:	60b9      	str	r1, [r7, #8]
    1a6a:	1dbb      	adds	r3, r7, #6
    1a6c:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    1a6e:	2300      	movs	r3, #0
    1a70:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1a72:	68fb      	ldr	r3, [r7, #12]
    1a74:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1a76:	68fb      	ldr	r3, [r7, #12]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d008      	beq.n	1a8e <usart_sync_read+0x2e>
    1a7c:	68bb      	ldr	r3, [r7, #8]
    1a7e:	2b00      	cmp	r3, #0
    1a80:	d005      	beq.n	1a8e <usart_sync_read+0x2e>
    1a82:	1dbb      	adds	r3, r7, #6
    1a84:	881b      	ldrh	r3, [r3, #0]
    1a86:	2b00      	cmp	r3, #0
    1a88:	d001      	beq.n	1a8e <usart_sync_read+0x2e>
    1a8a:	2301      	movs	r3, #1
    1a8c:	e000      	b.n	1a90 <usart_sync_read+0x30>
    1a8e:	2300      	movs	r3, #0
    1a90:	1c1a      	adds	r2, r3, #0
    1a92:	2301      	movs	r3, #1
    1a94:	4013      	ands	r3, r2
    1a96:	b2d8      	uxtb	r0, r3
    1a98:	2386      	movs	r3, #134	; 0x86
    1a9a:	005a      	lsls	r2, r3, #1
    1a9c:	4b13      	ldr	r3, [pc, #76]	; (1aec <usart_sync_read+0x8c>)
    1a9e:	0019      	movs	r1, r3
    1aa0:	4b13      	ldr	r3, [pc, #76]	; (1af0 <usart_sync_read+0x90>)
    1aa2:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1aa4:	46c0      	nop			; (mov r8, r8)
    1aa6:	693b      	ldr	r3, [r7, #16]
    1aa8:	3308      	adds	r3, #8
    1aaa:	0018      	movs	r0, r3
    1aac:	4b11      	ldr	r3, [pc, #68]	; (1af4 <usart_sync_read+0x94>)
    1aae:	4798      	blx	r3
    1ab0:	0003      	movs	r3, r0
    1ab2:	001a      	movs	r2, r3
    1ab4:	2301      	movs	r3, #1
    1ab6:	4053      	eors	r3, r2
    1ab8:	b2db      	uxtb	r3, r3
    1aba:	2b00      	cmp	r3, #0
    1abc:	d1f3      	bne.n	1aa6 <usart_sync_read+0x46>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1abe:	68ba      	ldr	r2, [r7, #8]
    1ac0:	697b      	ldr	r3, [r7, #20]
    1ac2:	18d4      	adds	r4, r2, r3
    1ac4:	693b      	ldr	r3, [r7, #16]
    1ac6:	3308      	adds	r3, #8
    1ac8:	0018      	movs	r0, r3
    1aca:	4b0b      	ldr	r3, [pc, #44]	; (1af8 <usart_sync_read+0x98>)
    1acc:	4798      	blx	r3
    1ace:	0003      	movs	r3, r0
    1ad0:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    1ad2:	697b      	ldr	r3, [r7, #20]
    1ad4:	3301      	adds	r3, #1
    1ad6:	617b      	str	r3, [r7, #20]
    1ad8:	1dbb      	adds	r3, r7, #6
    1ada:	881b      	ldrh	r3, [r3, #0]
    1adc:	697a      	ldr	r2, [r7, #20]
    1ade:	429a      	cmp	r2, r3
    1ae0:	d3e0      	bcc.n	1aa4 <usart_sync_read+0x44>

	return (int32_t)offset;
    1ae2:	697b      	ldr	r3, [r7, #20]
}
    1ae4:	0018      	movs	r0, r3
    1ae6:	46bd      	mov	sp, r7
    1ae8:	b007      	add	sp, #28
    1aea:	bd90      	pop	{r4, r7, pc}
    1aec:	000084fc 	.word	0x000084fc
    1af0:	00001afd 	.word	0x00001afd
    1af4:	00002e7d 	.word	0x00002e7d
    1af8:	00002e19 	.word	0x00002e19

00001afc <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    1afc:	b580      	push	{r7, lr}
    1afe:	b084      	sub	sp, #16
    1b00:	af00      	add	r7, sp, #0
    1b02:	60b9      	str	r1, [r7, #8]
    1b04:	607a      	str	r2, [r7, #4]
    1b06:	230f      	movs	r3, #15
    1b08:	18fb      	adds	r3, r7, r3
    1b0a:	1c02      	adds	r2, r0, #0
    1b0c:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    1b0e:	230f      	movs	r3, #15
    1b10:	18fb      	adds	r3, r7, r3
    1b12:	781b      	ldrb	r3, [r3, #0]
    1b14:	2201      	movs	r2, #1
    1b16:	4053      	eors	r3, r2
    1b18:	b2db      	uxtb	r3, r3
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	d000      	beq.n	1b20 <assert+0x24>
		__asm("BKPT #0");
    1b1e:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1b20:	46c0      	nop			; (mov r8, r8)
    1b22:	46bd      	mov	sp, r7
    1b24:	b004      	add	sp, #16
    1b26:	bd80      	pop	{r7, pc}

00001b28 <hri_adc_wait_for_sync>:
typedef uint8_t  hri_adc_sampctrl_reg_t;
typedef uint8_t  hri_adc_seqstatus_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
    1b28:	b580      	push	{r7, lr}
    1b2a:	b082      	sub	sp, #8
    1b2c:	af00      	add	r7, sp, #0
    1b2e:	6078      	str	r0, [r7, #4]
    1b30:	000a      	movs	r2, r1
    1b32:	1cbb      	adds	r3, r7, #2
    1b34:	801a      	strh	r2, [r3, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	687b      	ldr	r3, [r7, #4]
    1b3a:	8c1b      	ldrh	r3, [r3, #32]
    1b3c:	b29b      	uxth	r3, r3
    1b3e:	1cba      	adds	r2, r7, #2
    1b40:	8812      	ldrh	r2, [r2, #0]
    1b42:	4013      	ands	r3, r2
    1b44:	b29b      	uxth	r3, r3
    1b46:	2b00      	cmp	r3, #0
    1b48:	d1f6      	bne.n	1b38 <hri_adc_wait_for_sync+0x10>
	};
}
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	46bd      	mov	sp, r7
    1b4e:	b002      	add	sp, #8
    1b50:	bd80      	pop	{r7, pc}

00001b52 <hri_adc_is_syncing>:

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
    1b52:	b580      	push	{r7, lr}
    1b54:	b082      	sub	sp, #8
    1b56:	af00      	add	r7, sp, #0
    1b58:	6078      	str	r0, [r7, #4]
    1b5a:	000a      	movs	r2, r1
    1b5c:	1cbb      	adds	r3, r7, #2
    1b5e:	801a      	strh	r2, [r3, #0]
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    1b60:	687b      	ldr	r3, [r7, #4]
    1b62:	8c1b      	ldrh	r3, [r3, #32]
    1b64:	b29b      	uxth	r3, r3
    1b66:	1cba      	adds	r2, r7, #2
    1b68:	8812      	ldrh	r2, [r2, #0]
    1b6a:	4013      	ands	r3, r2
    1b6c:	b29b      	uxth	r3, r3
    1b6e:	1e5a      	subs	r2, r3, #1
    1b70:	4193      	sbcs	r3, r2
    1b72:	b2db      	uxtb	r3, r3
}
    1b74:	0018      	movs	r0, r3
    1b76:	46bd      	mov	sp, r7
    1b78:	b002      	add	sp, #8
    1b7a:	bd80      	pop	{r7, pc}

00001b7c <hri_adc_get_interrupt_RESRDY_bit>:
{
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
}

static inline bool hri_adc_get_interrupt_RESRDY_bit(const void *const hw)
{
    1b7c:	b580      	push	{r7, lr}
    1b7e:	b082      	sub	sp, #8
    1b80:	af00      	add	r7, sp, #0
    1b82:	6078      	str	r0, [r7, #4]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    1b84:	687b      	ldr	r3, [r7, #4]
    1b86:	799b      	ldrb	r3, [r3, #6]
    1b88:	b2db      	uxtb	r3, r3
    1b8a:	001a      	movs	r2, r3
    1b8c:	2301      	movs	r3, #1
    1b8e:	4013      	ands	r3, r2
    1b90:	1e5a      	subs	r2, r3, #1
    1b92:	4193      	sbcs	r3, r2
    1b94:	b2db      	uxtb	r3, r3
}
    1b96:	0018      	movs	r0, r3
    1b98:	46bd      	mov	sp, r7
    1b9a:	b002      	add	sp, #8
    1b9c:	bd80      	pop	{r7, pc}

00001b9e <hri_adc_read_RESULT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
    1b9e:	b580      	push	{r7, lr}
    1ba0:	b082      	sub	sp, #8
    1ba2:	af00      	add	r7, sp, #0
    1ba4:	6078      	str	r0, [r7, #4]
	return ((Adc *)hw)->RESULT.reg;
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1baa:	b29b      	uxth	r3, r3
}
    1bac:	0018      	movs	r0, r3
    1bae:	46bd      	mov	sp, r7
    1bb0:	b002      	add	sp, #8
    1bb2:	bd80      	pop	{r7, pc}

00001bb4 <hri_adc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & ADC_CTRLA_SWRST) >> ADC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_adc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    1bb4:	b580      	push	{r7, lr}
    1bb6:	b082      	sub	sp, #8
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1bbc:	687b      	ldr	r3, [r7, #4]
    1bbe:	781b      	ldrb	r3, [r3, #0]
    1bc0:	b2db      	uxtb	r3, r3
    1bc2:	2202      	movs	r2, #2
    1bc4:	4313      	orrs	r3, r2
    1bc6:	b2da      	uxtb	r2, r3
    1bc8:	687b      	ldr	r3, [r7, #4]
    1bca:	701a      	strb	r2, [r3, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    1bcc:	687b      	ldr	r3, [r7, #4]
    1bce:	2103      	movs	r1, #3
    1bd0:	0018      	movs	r0, r3
    1bd2:	4b03      	ldr	r3, [pc, #12]	; (1be0 <hri_adc_set_CTRLA_ENABLE_bit+0x2c>)
    1bd4:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1bd6:	46c0      	nop			; (mov r8, r8)
    1bd8:	46bd      	mov	sp, r7
    1bda:	b002      	add	sp, #8
    1bdc:	bd80      	pop	{r7, pc}
    1bde:	46c0      	nop			; (mov r8, r8)
    1be0:	00001b29 	.word	0x00001b29

00001be4 <hri_adc_clear_CTRLA_ENABLE_bit>:
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_adc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1be4:	b580      	push	{r7, lr}
    1be6:	b082      	sub	sp, #8
    1be8:	af00      	add	r7, sp, #0
    1bea:	6078      	str	r0, [r7, #4]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1bec:	687b      	ldr	r3, [r7, #4]
    1bee:	781b      	ldrb	r3, [r3, #0]
    1bf0:	b2db      	uxtb	r3, r3
    1bf2:	2202      	movs	r2, #2
    1bf4:	4393      	bics	r3, r2
    1bf6:	b2da      	uxtb	r2, r3
    1bf8:	687b      	ldr	r3, [r7, #4]
    1bfa:	701a      	strb	r2, [r3, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    1bfc:	687b      	ldr	r3, [r7, #4]
    1bfe:	2103      	movs	r1, #3
    1c00:	0018      	movs	r0, r3
    1c02:	4b03      	ldr	r3, [pc, #12]	; (1c10 <hri_adc_clear_CTRLA_ENABLE_bit+0x2c>)
    1c04:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1c06:	46c0      	nop			; (mov r8, r8)
    1c08:	46bd      	mov	sp, r7
    1c0a:	b002      	add	sp, #8
    1c0c:	bd80      	pop	{r7, pc}
    1c0e:	46c0      	nop			; (mov r8, r8)
    1c10:	00001b29 	.word	0x00001b29

00001c14 <hri_adc_get_CTRLA_reg>:
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
    1c14:	b580      	push	{r7, lr}
    1c16:	b084      	sub	sp, #16
    1c18:	af00      	add	r7, sp, #0
    1c1a:	6078      	str	r0, [r7, #4]
    1c1c:	000a      	movs	r2, r1
    1c1e:	1cfb      	adds	r3, r7, #3
    1c20:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    1c22:	687b      	ldr	r3, [r7, #4]
    1c24:	2103      	movs	r1, #3
    1c26:	0018      	movs	r0, r3
    1c28:	4b0b      	ldr	r3, [pc, #44]	; (1c58 <hri_adc_get_CTRLA_reg+0x44>)
    1c2a:	4798      	blx	r3
	tmp = ((Adc *)hw)->CTRLA.reg;
    1c2c:	230f      	movs	r3, #15
    1c2e:	18fb      	adds	r3, r7, r3
    1c30:	687a      	ldr	r2, [r7, #4]
    1c32:	7812      	ldrb	r2, [r2, #0]
    1c34:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    1c36:	230f      	movs	r3, #15
    1c38:	18fb      	adds	r3, r7, r3
    1c3a:	220f      	movs	r2, #15
    1c3c:	18ba      	adds	r2, r7, r2
    1c3e:	1cf9      	adds	r1, r7, #3
    1c40:	7812      	ldrb	r2, [r2, #0]
    1c42:	7809      	ldrb	r1, [r1, #0]
    1c44:	400a      	ands	r2, r1
    1c46:	701a      	strb	r2, [r3, #0]
	return tmp;
    1c48:	230f      	movs	r3, #15
    1c4a:	18fb      	adds	r3, r7, r3
    1c4c:	781b      	ldrb	r3, [r3, #0]
}
    1c4e:	0018      	movs	r0, r3
    1c50:	46bd      	mov	sp, r7
    1c52:	b004      	add	sp, #16
    1c54:	bd80      	pop	{r7, pc}
    1c56:	46c0      	nop			; (mov r8, r8)
    1c58:	00001b29 	.word	0x00001b29

00001c5c <hri_adc_write_CTRLA_reg>:

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
    1c5c:	b580      	push	{r7, lr}
    1c5e:	b082      	sub	sp, #8
    1c60:	af00      	add	r7, sp, #0
    1c62:	6078      	str	r0, [r7, #4]
    1c64:	000a      	movs	r2, r1
    1c66:	1cfb      	adds	r3, r7, #3
    1c68:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1c6a:	687b      	ldr	r3, [r7, #4]
    1c6c:	1cfa      	adds	r2, r7, #3
    1c6e:	7812      	ldrb	r2, [r2, #0]
    1c70:	701a      	strb	r2, [r3, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    1c72:	687b      	ldr	r3, [r7, #4]
    1c74:	2103      	movs	r1, #3
    1c76:	0018      	movs	r0, r3
    1c78:	4b02      	ldr	r3, [pc, #8]	; (1c84 <hri_adc_write_CTRLA_reg+0x28>)
    1c7a:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1c7c:	46c0      	nop			; (mov r8, r8)
    1c7e:	46bd      	mov	sp, r7
    1c80:	b002      	add	sp, #8
    1c82:	bd80      	pop	{r7, pc}
    1c84:	00001b29 	.word	0x00001b29

00001c88 <hri_adc_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
    1c88:	b580      	push	{r7, lr}
    1c8a:	b082      	sub	sp, #8
    1c8c:	af00      	add	r7, sp, #0
    1c8e:	6078      	str	r0, [r7, #4]
    1c90:	000a      	movs	r2, r1
    1c92:	1cfb      	adds	r3, r7, #3
    1c94:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1c96:	687b      	ldr	r3, [r7, #4]
    1c98:	1cfa      	adds	r2, r7, #3
    1c9a:	7812      	ldrb	r2, [r2, #0]
    1c9c:	705a      	strb	r2, [r3, #1]
	ADC_CRITICAL_SECTION_LEAVE();
}
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	46bd      	mov	sp, r7
    1ca2:	b002      	add	sp, #8
    1ca4:	bd80      	pop	{r7, pc}

00001ca6 <hri_adc_write_REFCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
    1ca6:	b580      	push	{r7, lr}
    1ca8:	b082      	sub	sp, #8
    1caa:	af00      	add	r7, sp, #0
    1cac:	6078      	str	r0, [r7, #4]
    1cae:	000a      	movs	r2, r1
    1cb0:	1cfb      	adds	r3, r7, #3
    1cb2:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1cb4:	687b      	ldr	r3, [r7, #4]
    1cb6:	1cfa      	adds	r2, r7, #3
    1cb8:	7812      	ldrb	r2, [r2, #0]
    1cba:	709a      	strb	r2, [r3, #2]
	ADC_CRITICAL_SECTION_LEAVE();
}
    1cbc:	46c0      	nop			; (mov r8, r8)
    1cbe:	46bd      	mov	sp, r7
    1cc0:	b002      	add	sp, #8
    1cc2:	bd80      	pop	{r7, pc}

00001cc4 <hri_adc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	b082      	sub	sp, #8
    1cc8:	af00      	add	r7, sp, #0
    1cca:	6078      	str	r0, [r7, #4]
    1ccc:	000a      	movs	r2, r1
    1cce:	1cfb      	adds	r3, r7, #3
    1cd0:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
    1cd2:	687b      	ldr	r3, [r7, #4]
    1cd4:	1cfa      	adds	r2, r7, #3
    1cd6:	7812      	ldrb	r2, [r2, #0]
    1cd8:	70da      	strb	r2, [r3, #3]
	ADC_CRITICAL_SECTION_LEAVE();
}
    1cda:	46c0      	nop			; (mov r8, r8)
    1cdc:	46bd      	mov	sp, r7
    1cde:	b002      	add	sp, #8
    1ce0:	bd80      	pop	{r7, pc}
	...

00001ce4 <hri_adc_write_INPUTCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
    1ce4:	b580      	push	{r7, lr}
    1ce6:	b082      	sub	sp, #8
    1ce8:	af00      	add	r7, sp, #0
    1cea:	6078      	str	r0, [r7, #4]
    1cec:	000a      	movs	r2, r1
    1cee:	1cbb      	adds	r3, r7, #2
    1cf0:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
    1cf2:	687b      	ldr	r3, [r7, #4]
    1cf4:	1cba      	adds	r2, r7, #2
    1cf6:	8812      	ldrh	r2, [r2, #0]
    1cf8:	811a      	strh	r2, [r3, #8]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    1cfa:	4a05      	ldr	r2, [pc, #20]	; (1d10 <hri_adc_write_INPUTCTRL_reg+0x2c>)
    1cfc:	687b      	ldr	r3, [r7, #4]
    1cfe:	0011      	movs	r1, r2
    1d00:	0018      	movs	r0, r3
    1d02:	4b04      	ldr	r3, [pc, #16]	; (1d14 <hri_adc_write_INPUTCTRL_reg+0x30>)
    1d04:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1d06:	46c0      	nop			; (mov r8, r8)
    1d08:	46bd      	mov	sp, r7
    1d0a:	b002      	add	sp, #8
    1d0c:	bd80      	pop	{r7, pc}
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	000007ff 	.word	0x000007ff
    1d14:	00001b29 	.word	0x00001b29

00001d18 <hri_adc_read_CTRLC_RESSEL_bf>:
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline hri_adc_ctrlc_reg_t hri_adc_read_CTRLC_RESSEL_bf(const void *const hw)
{
    1d18:	b580      	push	{r7, lr}
    1d1a:	b084      	sub	sp, #16
    1d1c:	af00      	add	r7, sp, #0
    1d1e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	tmp = ((Adc *)hw)->CTRLC.reg;
    1d20:	230e      	movs	r3, #14
    1d22:	18fb      	adds	r3, r7, r3
    1d24:	687a      	ldr	r2, [r7, #4]
    1d26:	8952      	ldrh	r2, [r2, #10]
    1d28:	801a      	strh	r2, [r3, #0]
	tmp = (tmp & ADC_CTRLC_RESSEL_Msk) >> ADC_CTRLC_RESSEL_Pos;
    1d2a:	230e      	movs	r3, #14
    1d2c:	18fb      	adds	r3, r7, r3
    1d2e:	881b      	ldrh	r3, [r3, #0]
    1d30:	091b      	lsrs	r3, r3, #4
    1d32:	b29a      	uxth	r2, r3
    1d34:	230e      	movs	r3, #14
    1d36:	18fb      	adds	r3, r7, r3
    1d38:	2103      	movs	r1, #3
    1d3a:	400a      	ands	r2, r1
    1d3c:	801a      	strh	r2, [r3, #0]
	return tmp;
    1d3e:	230e      	movs	r3, #14
    1d40:	18fb      	adds	r3, r7, r3
    1d42:	881b      	ldrh	r3, [r3, #0]
}
    1d44:	0018      	movs	r0, r3
    1d46:	46bd      	mov	sp, r7
    1d48:	b004      	add	sp, #16
    1d4a:	bd80      	pop	{r7, pc}

00001d4c <hri_adc_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_CTRLC_reg(const void *const hw, hri_adc_ctrlc_reg_t data)
{
    1d4c:	b580      	push	{r7, lr}
    1d4e:	b082      	sub	sp, #8
    1d50:	af00      	add	r7, sp, #0
    1d52:	6078      	str	r0, [r7, #4]
    1d54:	000a      	movs	r2, r1
    1d56:	1cbb      	adds	r3, r7, #2
    1d58:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLC.reg = data;
    1d5a:	687b      	ldr	r3, [r7, #4]
    1d5c:	1cba      	adds	r2, r7, #2
    1d5e:	8812      	ldrh	r2, [r2, #0]
    1d60:	815a      	strh	r2, [r3, #10]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    1d62:	4a05      	ldr	r2, [pc, #20]	; (1d78 <hri_adc_write_CTRLC_reg+0x2c>)
    1d64:	687b      	ldr	r3, [r7, #4]
    1d66:	0011      	movs	r1, r2
    1d68:	0018      	movs	r0, r3
    1d6a:	4b04      	ldr	r3, [pc, #16]	; (1d7c <hri_adc_write_CTRLC_reg+0x30>)
    1d6c:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	46bd      	mov	sp, r7
    1d72:	b002      	add	sp, #8
    1d74:	bd80      	pop	{r7, pc}
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	000007ff 	.word	0x000007ff
    1d7c:	00001b29 	.word	0x00001b29

00001d80 <hri_adc_write_AVGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
    1d80:	b580      	push	{r7, lr}
    1d82:	b082      	sub	sp, #8
    1d84:	af00      	add	r7, sp, #0
    1d86:	6078      	str	r0, [r7, #4]
    1d88:	000a      	movs	r2, r1
    1d8a:	1cfb      	adds	r3, r7, #3
    1d8c:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1d8e:	687b      	ldr	r3, [r7, #4]
    1d90:	1cfa      	adds	r2, r7, #3
    1d92:	7812      	ldrb	r2, [r2, #0]
    1d94:	731a      	strb	r2, [r3, #12]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    1d96:	4a05      	ldr	r2, [pc, #20]	; (1dac <hri_adc_write_AVGCTRL_reg+0x2c>)
    1d98:	687b      	ldr	r3, [r7, #4]
    1d9a:	0011      	movs	r1, r2
    1d9c:	0018      	movs	r0, r3
    1d9e:	4b04      	ldr	r3, [pc, #16]	; (1db0 <hri_adc_write_AVGCTRL_reg+0x30>)
    1da0:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1da2:	46c0      	nop			; (mov r8, r8)
    1da4:	46bd      	mov	sp, r7
    1da6:	b002      	add	sp, #8
    1da8:	bd80      	pop	{r7, pc}
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	000007ff 	.word	0x000007ff
    1db0:	00001b29 	.word	0x00001b29

00001db4 <hri_adc_write_SAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
    1db4:	b580      	push	{r7, lr}
    1db6:	b082      	sub	sp, #8
    1db8:	af00      	add	r7, sp, #0
    1dba:	6078      	str	r0, [r7, #4]
    1dbc:	000a      	movs	r2, r1
    1dbe:	1cfb      	adds	r3, r7, #3
    1dc0:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1dc2:	687b      	ldr	r3, [r7, #4]
    1dc4:	1cfa      	adds	r2, r7, #3
    1dc6:	7812      	ldrb	r2, [r2, #0]
    1dc8:	735a      	strb	r2, [r3, #13]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    1dca:	4a05      	ldr	r2, [pc, #20]	; (1de0 <hri_adc_write_SAMPCTRL_reg+0x2c>)
    1dcc:	687b      	ldr	r3, [r7, #4]
    1dce:	0011      	movs	r1, r2
    1dd0:	0018      	movs	r0, r3
    1dd2:	4b04      	ldr	r3, [pc, #16]	; (1de4 <hri_adc_write_SAMPCTRL_reg+0x30>)
    1dd4:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	46bd      	mov	sp, r7
    1dda:	b002      	add	sp, #8
    1ddc:	bd80      	pop	{r7, pc}
    1dde:	46c0      	nop			; (mov r8, r8)
    1de0:	000007ff 	.word	0x000007ff
    1de4:	00001b29 	.word	0x00001b29

00001de8 <hri_adc_write_WINLT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
    1de8:	b580      	push	{r7, lr}
    1dea:	b082      	sub	sp, #8
    1dec:	af00      	add	r7, sp, #0
    1dee:	6078      	str	r0, [r7, #4]
    1df0:	000a      	movs	r2, r1
    1df2:	1cbb      	adds	r3, r7, #2
    1df4:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	1cba      	adds	r2, r7, #2
    1dfa:	8812      	ldrh	r2, [r2, #0]
    1dfc:	81da      	strh	r2, [r3, #14]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_WINLT);
    1dfe:	687b      	ldr	r3, [r7, #4]
    1e00:	2140      	movs	r1, #64	; 0x40
    1e02:	0018      	movs	r0, r3
    1e04:	4b02      	ldr	r3, [pc, #8]	; (1e10 <hri_adc_write_WINLT_reg+0x28>)
    1e06:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1e08:	46c0      	nop			; (mov r8, r8)
    1e0a:	46bd      	mov	sp, r7
    1e0c:	b002      	add	sp, #8
    1e0e:	bd80      	pop	{r7, pc}
    1e10:	00001b29 	.word	0x00001b29

00001e14 <hri_adc_write_WINUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
    1e14:	b580      	push	{r7, lr}
    1e16:	b082      	sub	sp, #8
    1e18:	af00      	add	r7, sp, #0
    1e1a:	6078      	str	r0, [r7, #4]
    1e1c:	000a      	movs	r2, r1
    1e1e:	1cbb      	adds	r3, r7, #2
    1e20:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1e22:	687b      	ldr	r3, [r7, #4]
    1e24:	1cba      	adds	r2, r7, #2
    1e26:	8812      	ldrh	r2, [r2, #0]
    1e28:	821a      	strh	r2, [r3, #16]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_WINUT);
    1e2a:	687b      	ldr	r3, [r7, #4]
    1e2c:	2180      	movs	r1, #128	; 0x80
    1e2e:	0018      	movs	r0, r3
    1e30:	4b02      	ldr	r3, [pc, #8]	; (1e3c <hri_adc_write_WINUT_reg+0x28>)
    1e32:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1e34:	46c0      	nop			; (mov r8, r8)
    1e36:	46bd      	mov	sp, r7
    1e38:	b002      	add	sp, #8
    1e3a:	bd80      	pop	{r7, pc}
    1e3c:	00001b29 	.word	0x00001b29

00001e40 <hri_adc_write_GAINCORR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
    1e40:	b580      	push	{r7, lr}
    1e42:	b082      	sub	sp, #8
    1e44:	af00      	add	r7, sp, #0
    1e46:	6078      	str	r0, [r7, #4]
    1e48:	000a      	movs	r2, r1
    1e4a:	1cbb      	adds	r3, r7, #2
    1e4c:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1e4e:	687b      	ldr	r3, [r7, #4]
    1e50:	1cba      	adds	r2, r7, #2
    1e52:	8812      	ldrh	r2, [r2, #0]
    1e54:	825a      	strh	r2, [r3, #18]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_GAINCORR);
    1e56:	2380      	movs	r3, #128	; 0x80
    1e58:	005a      	lsls	r2, r3, #1
    1e5a:	687b      	ldr	r3, [r7, #4]
    1e5c:	0011      	movs	r1, r2
    1e5e:	0018      	movs	r0, r3
    1e60:	4b02      	ldr	r3, [pc, #8]	; (1e6c <hri_adc_write_GAINCORR_reg+0x2c>)
    1e62:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1e64:	46c0      	nop			; (mov r8, r8)
    1e66:	46bd      	mov	sp, r7
    1e68:	b002      	add	sp, #8
    1e6a:	bd80      	pop	{r7, pc}
    1e6c:	00001b29 	.word	0x00001b29

00001e70 <hri_adc_write_OFFSETCORR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
    1e70:	b580      	push	{r7, lr}
    1e72:	b082      	sub	sp, #8
    1e74:	af00      	add	r7, sp, #0
    1e76:	6078      	str	r0, [r7, #4]
    1e78:	000a      	movs	r2, r1
    1e7a:	1cbb      	adds	r3, r7, #2
    1e7c:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1e7e:	687b      	ldr	r3, [r7, #4]
    1e80:	1cba      	adds	r2, r7, #2
    1e82:	8812      	ldrh	r2, [r2, #0]
    1e84:	829a      	strh	r2, [r3, #20]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_OFFSETCORR);
    1e86:	2380      	movs	r3, #128	; 0x80
    1e88:	009a      	lsls	r2, r3, #2
    1e8a:	687b      	ldr	r3, [r7, #4]
    1e8c:	0011      	movs	r1, r2
    1e8e:	0018      	movs	r0, r3
    1e90:	4b02      	ldr	r3, [pc, #8]	; (1e9c <hri_adc_write_OFFSETCORR_reg+0x2c>)
    1e92:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1e94:	46c0      	nop			; (mov r8, r8)
    1e96:	46bd      	mov	sp, r7
    1e98:	b002      	add	sp, #8
    1e9a:	bd80      	pop	{r7, pc}
    1e9c:	00001b29 	.word	0x00001b29

00001ea0 <hri_adc_set_SWTRIG_START_bit>:
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
    1ea0:	b580      	push	{r7, lr}
    1ea2:	b082      	sub	sp, #8
    1ea4:	af00      	add	r7, sp, #0
    1ea6:	6078      	str	r0, [r7, #4]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	7e1b      	ldrb	r3, [r3, #24]
    1eac:	b2db      	uxtb	r3, r3
    1eae:	2202      	movs	r2, #2
    1eb0:	4313      	orrs	r3, r2
    1eb2:	b2da      	uxtb	r2, r3
    1eb4:	687b      	ldr	r3, [r7, #4]
    1eb6:	761a      	strb	r2, [r3, #24]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    1eb8:	4a04      	ldr	r2, [pc, #16]	; (1ecc <hri_adc_set_SWTRIG_START_bit+0x2c>)
    1eba:	687b      	ldr	r3, [r7, #4]
    1ebc:	0011      	movs	r1, r2
    1ebe:	0018      	movs	r0, r3
    1ec0:	4b03      	ldr	r3, [pc, #12]	; (1ed0 <hri_adc_set_SWTRIG_START_bit+0x30>)
    1ec2:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1ec4:	46c0      	nop			; (mov r8, r8)
    1ec6:	46bd      	mov	sp, r7
    1ec8:	b002      	add	sp, #8
    1eca:	bd80      	pop	{r7, pc}
    1ecc:	000007ff 	.word	0x000007ff
    1ed0:	00001b29 	.word	0x00001b29

00001ed4 <hri_adc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
    1ed4:	b580      	push	{r7, lr}
    1ed6:	b082      	sub	sp, #8
    1ed8:	af00      	add	r7, sp, #0
    1eda:	6078      	str	r0, [r7, #4]
    1edc:	000a      	movs	r2, r1
    1ede:	1cfb      	adds	r3, r7, #3
    1ee0:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	1cfa      	adds	r2, r7, #3
    1ee6:	7812      	ldrb	r2, [r2, #0]
    1ee8:	771a      	strb	r2, [r3, #28]
	ADC_CRITICAL_SECTION_LEAVE();
}
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	46bd      	mov	sp, r7
    1eee:	b002      	add	sp, #8
    1ef0:	bd80      	pop	{r7, pc}

00001ef2 <hri_adc_write_SEQCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_SEQCTRL_reg(const void *const hw, hri_adc_seqctrl_reg_t data)
{
    1ef2:	b580      	push	{r7, lr}
    1ef4:	b082      	sub	sp, #8
    1ef6:	af00      	add	r7, sp, #0
    1ef8:	6078      	str	r0, [r7, #4]
    1efa:	6039      	str	r1, [r7, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SEQCTRL.reg = data;
    1efc:	687b      	ldr	r3, [r7, #4]
    1efe:	683a      	ldr	r2, [r7, #0]
    1f00:	629a      	str	r2, [r3, #40]	; 0x28
	ADC_CRITICAL_SECTION_LEAVE();
}
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	46bd      	mov	sp, r7
    1f06:	b002      	add	sp, #8
    1f08:	bd80      	pop	{r7, pc}
	...

00001f0c <_adc_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
    1f0c:	b580      	push	{r7, lr}
    1f0e:	b082      	sub	sp, #8
    1f10:	af00      	add	r7, sp, #0
    1f12:	6078      	str	r0, [r7, #4]
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	4a04      	ldr	r2, [pc, #16]	; (1f28 <_adc_get_hardware_index+0x1c>)
    1f18:	4694      	mov	ip, r2
    1f1a:	4463      	add	r3, ip
    1f1c:	0a9b      	lsrs	r3, r3, #10
    1f1e:	b2db      	uxtb	r3, r3
}
    1f20:	0018      	movs	r0, r3
    1f22:	46bd      	mov	sp, r7
    1f24:	b002      	add	sp, #8
    1f26:	bd80      	pop	{r7, pc}
    1f28:	bdffbc00 	.word	0xbdffbc00

00001f2c <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
    1f2c:	b590      	push	{r4, r7, lr}
    1f2e:	b085      	sub	sp, #20
    1f30:	af00      	add	r7, sp, #0
    1f32:	6078      	str	r0, [r7, #4]
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    1f34:	687b      	ldr	r3, [r7, #4]
    1f36:	220e      	movs	r2, #14
    1f38:	18bc      	adds	r4, r7, r2
    1f3a:	0018      	movs	r0, r3
    1f3c:	4b18      	ldr	r3, [pc, #96]	; (1fa0 <_adc_get_regs+0x74>)
    1f3e:	4798      	blx	r3
    1f40:	0003      	movs	r3, r0
    1f42:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1f44:	230f      	movs	r3, #15
    1f46:	18fb      	adds	r3, r7, r3
    1f48:	2200      	movs	r2, #0
    1f4a:	701a      	strb	r2, [r3, #0]
    1f4c:	e018      	b.n	1f80 <_adc_get_regs+0x54>
		if (_adcs[i].number == n) {
    1f4e:	230f      	movs	r3, #15
    1f50:	18fb      	adds	r3, r7, r3
    1f52:	781a      	ldrb	r2, [r3, #0]
    1f54:	4913      	ldr	r1, [pc, #76]	; (1fa4 <_adc_get_regs+0x78>)
    1f56:	0013      	movs	r3, r2
    1f58:	00db      	lsls	r3, r3, #3
    1f5a:	1a9b      	subs	r3, r3, r2
    1f5c:	009b      	lsls	r3, r3, #2
    1f5e:	5c5b      	ldrb	r3, [r3, r1]
    1f60:	220e      	movs	r2, #14
    1f62:	18ba      	adds	r2, r7, r2
    1f64:	7812      	ldrb	r2, [r2, #0]
    1f66:	429a      	cmp	r2, r3
    1f68:	d103      	bne.n	1f72 <_adc_get_regs+0x46>
			return i;
    1f6a:	230f      	movs	r3, #15
    1f6c:	18fb      	adds	r3, r7, r3
    1f6e:	781b      	ldrb	r3, [r3, #0]
    1f70:	e012      	b.n	1f98 <_adc_get_regs+0x6c>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1f72:	230f      	movs	r3, #15
    1f74:	18fb      	adds	r3, r7, r3
    1f76:	781a      	ldrb	r2, [r3, #0]
    1f78:	230f      	movs	r3, #15
    1f7a:	18fb      	adds	r3, r7, r3
    1f7c:	3201      	adds	r2, #1
    1f7e:	701a      	strb	r2, [r3, #0]
    1f80:	230f      	movs	r3, #15
    1f82:	18fb      	adds	r3, r7, r3
    1f84:	781b      	ldrb	r3, [r3, #0]
    1f86:	2b01      	cmp	r3, #1
    1f88:	d9e1      	bls.n	1f4e <_adc_get_regs+0x22>
		}
	}

	ASSERT(false);
    1f8a:	4b07      	ldr	r3, [pc, #28]	; (1fa8 <_adc_get_regs+0x7c>)
    1f8c:	228d      	movs	r2, #141	; 0x8d
    1f8e:	0019      	movs	r1, r3
    1f90:	2000      	movs	r0, #0
    1f92:	4b06      	ldr	r3, [pc, #24]	; (1fac <_adc_get_regs+0x80>)
    1f94:	4798      	blx	r3
	return 0;
    1f96:	2300      	movs	r3, #0
}
    1f98:	0018      	movs	r0, r3
    1f9a:	46bd      	mov	sp, r7
    1f9c:	b005      	add	sp, #20
    1f9e:	bd90      	pop	{r4, r7, pc}
    1fa0:	00001f0d 	.word	0x00001f0d
    1fa4:	00008518 	.word	0x00008518
    1fa8:	00008550 	.word	0x00008550
    1fac:	00001afd 	.word	0x00001afd

00001fb0 <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    1fb0:	b580      	push	{r7, lr}
    1fb2:	b082      	sub	sp, #8
    1fb4:	af00      	add	r7, sp, #0
    1fb6:	6078      	str	r0, [r7, #4]
    1fb8:	000a      	movs	r2, r1
    1fba:	1cfb      	adds	r3, r7, #3
    1fbc:	701a      	strb	r2, [r3, #0]

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    1fbe:	687b      	ldr	r3, [r7, #4]
    1fc0:	2101      	movs	r1, #1
    1fc2:	0018      	movs	r0, r3
    1fc4:	4b7c      	ldr	r3, [pc, #496]	; (21b8 <STACK_SIZE+0x1b8>)
    1fc6:	4798      	blx	r3
    1fc8:	0003      	movs	r3, r0
    1fca:	001a      	movs	r2, r3
    1fcc:	2301      	movs	r3, #1
    1fce:	4053      	eors	r3, r2
    1fd0:	b2db      	uxtb	r3, r3
    1fd2:	2b00      	cmp	r3, #0
    1fd4:	d014      	beq.n	2000 <STACK_SIZE>
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    1fd6:	687b      	ldr	r3, [r7, #4]
    1fd8:	2102      	movs	r1, #2
    1fda:	0018      	movs	r0, r3
    1fdc:	4b77      	ldr	r3, [pc, #476]	; (21bc <STACK_SIZE+0x1bc>)
    1fde:	4798      	blx	r3
    1fe0:	1e03      	subs	r3, r0, #0
    1fe2:	d008      	beq.n	1ff6 <_adc_init+0x46>
			hri_adc_clear_CTRLA_ENABLE_bit(hw);
    1fe4:	687b      	ldr	r3, [r7, #4]
    1fe6:	0018      	movs	r0, r3
    1fe8:	4b75      	ldr	r3, [pc, #468]	; (21c0 <STACK_SIZE+0x1c0>)
    1fea:	4798      	blx	r3
			hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_ENABLE);
    1fec:	687b      	ldr	r3, [r7, #4]
    1fee:	2102      	movs	r1, #2
    1ff0:	0018      	movs	r0, r3
    1ff2:	4b74      	ldr	r3, [pc, #464]	; (21c4 <STACK_SIZE+0x1c4>)
    1ff4:	4798      	blx	r3
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
    1ff6:	687b      	ldr	r3, [r7, #4]
    1ff8:	2101      	movs	r1, #1
    1ffa:	0018      	movs	r0, r3
    1ffc:	4b72      	ldr	r3, [pc, #456]	; (21c8 <STACK_SIZE+0x1c8>)
    1ffe:	4798      	blx	r3
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
    2000:	687b      	ldr	r3, [r7, #4]
    2002:	2101      	movs	r1, #1
    2004:	0018      	movs	r0, r3
    2006:	4b6f      	ldr	r3, [pc, #444]	; (21c4 <STACK_SIZE+0x1c4>)
    2008:	4798      	blx	r3

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    200a:	1cfb      	adds	r3, r7, #3
    200c:	781a      	ldrb	r2, [r3, #0]
    200e:	496f      	ldr	r1, [pc, #444]	; (21cc <STACK_SIZE+0x1cc>)
    2010:	0013      	movs	r3, r2
    2012:	00db      	lsls	r3, r3, #3
    2014:	1a9b      	subs	r3, r3, r2
    2016:	009b      	lsls	r3, r3, #2
    2018:	18cb      	adds	r3, r1, r3
    201a:	3302      	adds	r3, #2
    201c:	781a      	ldrb	r2, [r3, #0]
    201e:	687b      	ldr	r3, [r7, #4]
    2020:	0011      	movs	r1, r2
    2022:	0018      	movs	r0, r3
    2024:	4b6a      	ldr	r3, [pc, #424]	; (21d0 <STACK_SIZE+0x1d0>)
    2026:	4798      	blx	r3
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    2028:	1cfb      	adds	r3, r7, #3
    202a:	781a      	ldrb	r2, [r3, #0]
    202c:	4967      	ldr	r1, [pc, #412]	; (21cc <STACK_SIZE+0x1cc>)
    202e:	0013      	movs	r3, r2
    2030:	00db      	lsls	r3, r3, #3
    2032:	1a9b      	subs	r3, r3, r2
    2034:	009b      	lsls	r3, r3, #2
    2036:	18cb      	adds	r3, r1, r3
    2038:	3303      	adds	r3, #3
    203a:	781a      	ldrb	r2, [r3, #0]
    203c:	687b      	ldr	r3, [r7, #4]
    203e:	0011      	movs	r1, r2
    2040:	0018      	movs	r0, r3
    2042:	4b64      	ldr	r3, [pc, #400]	; (21d4 <STACK_SIZE+0x1d4>)
    2044:	4798      	blx	r3
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    2046:	1cfb      	adds	r3, r7, #3
    2048:	781a      	ldrb	r2, [r3, #0]
    204a:	4960      	ldr	r1, [pc, #384]	; (21cc <STACK_SIZE+0x1cc>)
    204c:	0013      	movs	r3, r2
    204e:	00db      	lsls	r3, r3, #3
    2050:	1a9b      	subs	r3, r3, r2
    2052:	009b      	lsls	r3, r3, #2
    2054:	18cb      	adds	r3, r1, r3
    2056:	3304      	adds	r3, #4
    2058:	781a      	ldrb	r2, [r3, #0]
    205a:	687b      	ldr	r3, [r7, #4]
    205c:	0011      	movs	r1, r2
    205e:	0018      	movs	r0, r3
    2060:	4b5d      	ldr	r3, [pc, #372]	; (21d8 <STACK_SIZE+0x1d8>)
    2062:	4798      	blx	r3
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2064:	1cfb      	adds	r3, r7, #3
    2066:	781a      	ldrb	r2, [r3, #0]
    2068:	4958      	ldr	r1, [pc, #352]	; (21cc <STACK_SIZE+0x1cc>)
    206a:	0013      	movs	r3, r2
    206c:	00db      	lsls	r3, r3, #3
    206e:	1a9b      	subs	r3, r3, r2
    2070:	009b      	lsls	r3, r3, #2
    2072:	18cb      	adds	r3, r1, r3
    2074:	3306      	adds	r3, #6
    2076:	881a      	ldrh	r2, [r3, #0]
    2078:	687b      	ldr	r3, [r7, #4]
    207a:	0011      	movs	r1, r2
    207c:	0018      	movs	r0, r3
    207e:	4b57      	ldr	r3, [pc, #348]	; (21dc <STACK_SIZE+0x1dc>)
    2080:	4798      	blx	r3
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
    2082:	1cfb      	adds	r3, r7, #3
    2084:	781a      	ldrb	r2, [r3, #0]
    2086:	4951      	ldr	r1, [pc, #324]	; (21cc <STACK_SIZE+0x1cc>)
    2088:	0013      	movs	r3, r2
    208a:	00db      	lsls	r3, r3, #3
    208c:	1a9b      	subs	r3, r3, r2
    208e:	009b      	lsls	r3, r3, #2
    2090:	18cb      	adds	r3, r1, r3
    2092:	3308      	adds	r3, #8
    2094:	881a      	ldrh	r2, [r3, #0]
    2096:	687b      	ldr	r3, [r7, #4]
    2098:	0011      	movs	r1, r2
    209a:	0018      	movs	r0, r3
    209c:	4b50      	ldr	r3, [pc, #320]	; (21e0 <STACK_SIZE+0x1e0>)
    209e:	4798      	blx	r3
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    20a0:	1cfb      	adds	r3, r7, #3
    20a2:	781a      	ldrb	r2, [r3, #0]
    20a4:	4949      	ldr	r1, [pc, #292]	; (21cc <STACK_SIZE+0x1cc>)
    20a6:	0013      	movs	r3, r2
    20a8:	00db      	lsls	r3, r3, #3
    20aa:	1a9b      	subs	r3, r3, r2
    20ac:	009b      	lsls	r3, r3, #2
    20ae:	18cb      	adds	r3, r1, r3
    20b0:	330a      	adds	r3, #10
    20b2:	781a      	ldrb	r2, [r3, #0]
    20b4:	687b      	ldr	r3, [r7, #4]
    20b6:	0011      	movs	r1, r2
    20b8:	0018      	movs	r0, r3
    20ba:	4b4a      	ldr	r3, [pc, #296]	; (21e4 <STACK_SIZE+0x1e4>)
    20bc:	4798      	blx	r3
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    20be:	1cfb      	adds	r3, r7, #3
    20c0:	781a      	ldrb	r2, [r3, #0]
    20c2:	4942      	ldr	r1, [pc, #264]	; (21cc <STACK_SIZE+0x1cc>)
    20c4:	0013      	movs	r3, r2
    20c6:	00db      	lsls	r3, r3, #3
    20c8:	1a9b      	subs	r3, r3, r2
    20ca:	009b      	lsls	r3, r3, #2
    20cc:	18cb      	adds	r3, r1, r3
    20ce:	330b      	adds	r3, #11
    20d0:	781a      	ldrb	r2, [r3, #0]
    20d2:	687b      	ldr	r3, [r7, #4]
    20d4:	0011      	movs	r1, r2
    20d6:	0018      	movs	r0, r3
    20d8:	4b43      	ldr	r3, [pc, #268]	; (21e8 <STACK_SIZE+0x1e8>)
    20da:	4798      	blx	r3
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    20dc:	1cfb      	adds	r3, r7, #3
    20de:	781a      	ldrb	r2, [r3, #0]
    20e0:	493a      	ldr	r1, [pc, #232]	; (21cc <STACK_SIZE+0x1cc>)
    20e2:	0013      	movs	r3, r2
    20e4:	00db      	lsls	r3, r3, #3
    20e6:	1a9b      	subs	r3, r3, r2
    20e8:	009b      	lsls	r3, r3, #2
    20ea:	18cb      	adds	r3, r1, r3
    20ec:	330c      	adds	r3, #12
    20ee:	881a      	ldrh	r2, [r3, #0]
    20f0:	687b      	ldr	r3, [r7, #4]
    20f2:	0011      	movs	r1, r2
    20f4:	0018      	movs	r0, r3
    20f6:	4b3d      	ldr	r3, [pc, #244]	; (21ec <STACK_SIZE+0x1ec>)
    20f8:	4798      	blx	r3
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    20fa:	1cfb      	adds	r3, r7, #3
    20fc:	781a      	ldrb	r2, [r3, #0]
    20fe:	4933      	ldr	r1, [pc, #204]	; (21cc <STACK_SIZE+0x1cc>)
    2100:	0013      	movs	r3, r2
    2102:	00db      	lsls	r3, r3, #3
    2104:	1a9b      	subs	r3, r3, r2
    2106:	009b      	lsls	r3, r3, #2
    2108:	18cb      	adds	r3, r1, r3
    210a:	330e      	adds	r3, #14
    210c:	881a      	ldrh	r2, [r3, #0]
    210e:	687b      	ldr	r3, [r7, #4]
    2110:	0011      	movs	r1, r2
    2112:	0018      	movs	r0, r3
    2114:	4b36      	ldr	r3, [pc, #216]	; (21f0 <STACK_SIZE+0x1f0>)
    2116:	4798      	blx	r3
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    2118:	1cfb      	adds	r3, r7, #3
    211a:	781a      	ldrb	r2, [r3, #0]
    211c:	492b      	ldr	r1, [pc, #172]	; (21cc <STACK_SIZE+0x1cc>)
    211e:	0013      	movs	r3, r2
    2120:	00db      	lsls	r3, r3, #3
    2122:	1a9b      	subs	r3, r3, r2
    2124:	009b      	lsls	r3, r3, #2
    2126:	18cb      	adds	r3, r1, r3
    2128:	3310      	adds	r3, #16
    212a:	881a      	ldrh	r2, [r3, #0]
    212c:	687b      	ldr	r3, [r7, #4]
    212e:	0011      	movs	r1, r2
    2130:	0018      	movs	r0, r3
    2132:	4b30      	ldr	r3, [pc, #192]	; (21f4 <STACK_SIZE+0x1f4>)
    2134:	4798      	blx	r3
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    2136:	1cfb      	adds	r3, r7, #3
    2138:	781a      	ldrb	r2, [r3, #0]
    213a:	4924      	ldr	r1, [pc, #144]	; (21cc <STACK_SIZE+0x1cc>)
    213c:	0013      	movs	r3, r2
    213e:	00db      	lsls	r3, r3, #3
    2140:	1a9b      	subs	r3, r3, r2
    2142:	009b      	lsls	r3, r3, #2
    2144:	18cb      	adds	r3, r1, r3
    2146:	3312      	adds	r3, #18
    2148:	881a      	ldrh	r2, [r3, #0]
    214a:	687b      	ldr	r3, [r7, #4]
    214c:	0011      	movs	r1, r2
    214e:	0018      	movs	r0, r3
    2150:	4b29      	ldr	r3, [pc, #164]	; (21f8 <STACK_SIZE+0x1f8>)
    2152:	4798      	blx	r3
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    2154:	1cfb      	adds	r3, r7, #3
    2156:	781a      	ldrb	r2, [r3, #0]
    2158:	491c      	ldr	r1, [pc, #112]	; (21cc <STACK_SIZE+0x1cc>)
    215a:	0013      	movs	r3, r2
    215c:	00db      	lsls	r3, r3, #3
    215e:	1a9b      	subs	r3, r3, r2
    2160:	009b      	lsls	r3, r3, #2
    2162:	18cb      	adds	r3, r1, r3
    2164:	3314      	adds	r3, #20
    2166:	781a      	ldrb	r2, [r3, #0]
    2168:	687b      	ldr	r3, [r7, #4]
    216a:	0011      	movs	r1, r2
    216c:	0018      	movs	r0, r3
    216e:	4b23      	ldr	r3, [pc, #140]	; (21fc <STACK_SIZE+0x1fc>)
    2170:	4798      	blx	r3
	hri_adc_write_SEQCTRL_reg(hw, _adcs[i].seq_ctrl);
    2172:	1cfb      	adds	r3, r7, #3
    2174:	781a      	ldrb	r2, [r3, #0]
    2176:	4915      	ldr	r1, [pc, #84]	; (21cc <STACK_SIZE+0x1cc>)
    2178:	0013      	movs	r3, r2
    217a:	00db      	lsls	r3, r3, #3
    217c:	1a9b      	subs	r3, r3, r2
    217e:	009b      	lsls	r3, r3, #2
    2180:	18cb      	adds	r3, r1, r3
    2182:	3318      	adds	r3, #24
    2184:	681a      	ldr	r2, [r3, #0]
    2186:	687b      	ldr	r3, [r7, #4]
    2188:	0011      	movs	r1, r2
    218a:	0018      	movs	r0, r3
    218c:	4b1c      	ldr	r3, [pc, #112]	; (2200 <STACK_SIZE+0x200>)
    218e:	4798      	blx	r3
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    2190:	1cfb      	adds	r3, r7, #3
    2192:	781a      	ldrb	r2, [r3, #0]
    2194:	490d      	ldr	r1, [pc, #52]	; (21cc <STACK_SIZE+0x1cc>)
    2196:	0013      	movs	r3, r2
    2198:	00db      	lsls	r3, r3, #3
    219a:	1a9b      	subs	r3, r3, r2
    219c:	009b      	lsls	r3, r3, #2
    219e:	18cb      	adds	r3, r1, r3
    21a0:	3301      	adds	r3, #1
    21a2:	781a      	ldrb	r2, [r3, #0]
    21a4:	687b      	ldr	r3, [r7, #4]
    21a6:	0011      	movs	r1, r2
    21a8:	0018      	movs	r0, r3
    21aa:	4b07      	ldr	r3, [pc, #28]	; (21c8 <STACK_SIZE+0x1c8>)
    21ac:	4798      	blx	r3

	return ERR_NONE;
    21ae:	2300      	movs	r3, #0
}
    21b0:	0018      	movs	r0, r3
    21b2:	46bd      	mov	sp, r7
    21b4:	b002      	add	sp, #8
    21b6:	bd80      	pop	{r7, pc}
    21b8:	00001b53 	.word	0x00001b53
    21bc:	00001c15 	.word	0x00001c15
    21c0:	00001be5 	.word	0x00001be5
    21c4:	00001b29 	.word	0x00001b29
    21c8:	00001c5d 	.word	0x00001c5d
    21cc:	00008518 	.word	0x00008518
    21d0:	00001c89 	.word	0x00001c89
    21d4:	00001ca7 	.word	0x00001ca7
    21d8:	00001cc5 	.word	0x00001cc5
    21dc:	00001ce5 	.word	0x00001ce5
    21e0:	00001d4d 	.word	0x00001d4d
    21e4:	00001d81 	.word	0x00001d81
    21e8:	00001db5 	.word	0x00001db5
    21ec:	00001de9 	.word	0x00001de9
    21f0:	00001e15 	.word	0x00001e15
    21f4:	00001e41 	.word	0x00001e41
    21f8:	00001e71 	.word	0x00001e71
    21fc:	00001ed5 	.word	0x00001ed5
    2200:	00001ef3 	.word	0x00001ef3

00002204 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    2204:	b580      	push	{r7, lr}
    2206:	b082      	sub	sp, #8
    2208:	af00      	add	r7, sp, #0
    220a:	6078      	str	r0, [r7, #4]
    220c:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    220e:	687b      	ldr	r3, [r7, #4]
    2210:	1e5a      	subs	r2, r3, #1
    2212:	4193      	sbcs	r3, r2
    2214:	b2db      	uxtb	r3, r3
    2216:	490c      	ldr	r1, [pc, #48]	; (2248 <_adc_sync_init+0x44>)
    2218:	22d4      	movs	r2, #212	; 0xd4
    221a:	0018      	movs	r0, r3
    221c:	4b0b      	ldr	r3, [pc, #44]	; (224c <_adc_sync_init+0x48>)
    221e:	4798      	blx	r3

	device->hw = hw;
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	683a      	ldr	r2, [r7, #0]
    2224:	601a      	str	r2, [r3, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    2226:	683b      	ldr	r3, [r7, #0]
    2228:	0018      	movs	r0, r3
    222a:	4b09      	ldr	r3, [pc, #36]	; (2250 <_adc_sync_init+0x4c>)
    222c:	4798      	blx	r3
    222e:	0003      	movs	r3, r0
    2230:	001a      	movs	r2, r3
    2232:	683b      	ldr	r3, [r7, #0]
    2234:	0011      	movs	r1, r2
    2236:	0018      	movs	r0, r3
    2238:	4b06      	ldr	r3, [pc, #24]	; (2254 <_adc_sync_init+0x50>)
    223a:	4798      	blx	r3
    223c:	0003      	movs	r3, r0
}
    223e:	0018      	movs	r0, r3
    2240:	46bd      	mov	sp, r7
    2242:	b002      	add	sp, #8
    2244:	bd80      	pop	{r7, pc}
    2246:	46c0      	nop			; (mov r8, r8)
    2248:	00008550 	.word	0x00008550
    224c:	00001afd 	.word	0x00001afd
    2250:	00001f2d 	.word	0x00001f2d
    2254:	00001fb1 	.word	0x00001fb1

00002258 <_adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
    2258:	b580      	push	{r7, lr}
    225a:	b082      	sub	sp, #8
    225c:	af00      	add	r7, sp, #0
    225e:	6078      	str	r0, [r7, #4]
    2260:	000a      	movs	r2, r1
    2262:	1cfb      	adds	r3, r7, #3
    2264:	701a      	strb	r2, [r3, #0]
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    2266:	687b      	ldr	r3, [r7, #4]
    2268:	681b      	ldr	r3, [r3, #0]
    226a:	0018      	movs	r0, r3
    226c:	4b02      	ldr	r3, [pc, #8]	; (2278 <_adc_sync_enable_channel+0x20>)
    226e:	4798      	blx	r3
}
    2270:	46c0      	nop			; (mov r8, r8)
    2272:	46bd      	mov	sp, r7
    2274:	b002      	add	sp, #8
    2276:	bd80      	pop	{r7, pc}
    2278:	00001bb5 	.word	0x00001bb5

0000227c <_adc_sync_disable_channel>:

/**
 * \brief Disable ADC
 */
void _adc_sync_disable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
    227c:	b580      	push	{r7, lr}
    227e:	b082      	sub	sp, #8
    2280:	af00      	add	r7, sp, #0
    2282:	6078      	str	r0, [r7, #4]
    2284:	000a      	movs	r2, r1
    2286:	1cfb      	adds	r3, r7, #3
    2288:	701a      	strb	r2, [r3, #0]
	(void)channel;

	hri_adc_clear_CTRLA_ENABLE_bit(device->hw);
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	681b      	ldr	r3, [r3, #0]
    228e:	0018      	movs	r0, r3
    2290:	4b02      	ldr	r3, [pc, #8]	; (229c <_adc_sync_disable_channel+0x20>)
    2292:	4798      	blx	r3
}
    2294:	46c0      	nop			; (mov r8, r8)
    2296:	46bd      	mov	sp, r7
    2298:	b002      	add	sp, #8
    229a:	bd80      	pop	{r7, pc}
    229c:	00001be5 	.word	0x00001be5

000022a0 <_adc_sync_get_data_size>:

/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
    22a0:	b580      	push	{r7, lr}
    22a2:	b082      	sub	sp, #8
    22a4:	af00      	add	r7, sp, #0
    22a6:	6078      	str	r0, [r7, #4]
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
    22a8:	687b      	ldr	r3, [r7, #4]
    22aa:	681b      	ldr	r3, [r3, #0]
    22ac:	0018      	movs	r0, r3
    22ae:	4b06      	ldr	r3, [pc, #24]	; (22c8 <_adc_sync_get_data_size+0x28>)
    22b0:	4798      	blx	r3
    22b2:	0003      	movs	r3, r0
    22b4:	2b03      	cmp	r3, #3
    22b6:	d101      	bne.n	22bc <_adc_sync_get_data_size+0x1c>
    22b8:	2301      	movs	r3, #1
    22ba:	e000      	b.n	22be <_adc_sync_get_data_size+0x1e>
    22bc:	2302      	movs	r3, #2
}
    22be:	0018      	movs	r0, r3
    22c0:	46bd      	mov	sp, r7
    22c2:	b002      	add	sp, #8
    22c4:	bd80      	pop	{r7, pc}
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	00001d19 	.word	0x00001d19

000022cc <_adc_sync_is_channel_conversion_done>:

/**
 * \brief Check if conversion is done
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
    22cc:	b580      	push	{r7, lr}
    22ce:	b082      	sub	sp, #8
    22d0:	af00      	add	r7, sp, #0
    22d2:	6078      	str	r0, [r7, #4]
    22d4:	000a      	movs	r2, r1
    22d6:	1cfb      	adds	r3, r7, #3
    22d8:	701a      	strb	r2, [r3, #0]
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    22da:	687b      	ldr	r3, [r7, #4]
    22dc:	681b      	ldr	r3, [r3, #0]
    22de:	0018      	movs	r0, r3
    22e0:	4b03      	ldr	r3, [pc, #12]	; (22f0 <_adc_sync_is_channel_conversion_done+0x24>)
    22e2:	4798      	blx	r3
    22e4:	0003      	movs	r3, r0
}
    22e6:	0018      	movs	r0, r3
    22e8:	46bd      	mov	sp, r7
    22ea:	b002      	add	sp, #8
    22ec:	bd80      	pop	{r7, pc}
    22ee:	46c0      	nop			; (mov r8, r8)
    22f0:	00001b7d 	.word	0x00001b7d

000022f4 <_adc_sync_convert>:

/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
    22f4:	b580      	push	{r7, lr}
    22f6:	b082      	sub	sp, #8
    22f8:	af00      	add	r7, sp, #0
    22fa:	6078      	str	r0, [r7, #4]
	hri_adc_set_SWTRIG_START_bit(device->hw);
    22fc:	687b      	ldr	r3, [r7, #4]
    22fe:	681b      	ldr	r3, [r3, #0]
    2300:	0018      	movs	r0, r3
    2302:	4b03      	ldr	r3, [pc, #12]	; (2310 <_adc_sync_convert+0x1c>)
    2304:	4798      	blx	r3
}
    2306:	46c0      	nop			; (mov r8, r8)
    2308:	46bd      	mov	sp, r7
    230a:	b002      	add	sp, #8
    230c:	bd80      	pop	{r7, pc}
    230e:	46c0      	nop			; (mov r8, r8)
    2310:	00001ea1 	.word	0x00001ea1

00002314 <_adc_sync_read_channel_data>:

/**
 * \brief Retrieve the conversion result
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
    2314:	b580      	push	{r7, lr}
    2316:	b082      	sub	sp, #8
    2318:	af00      	add	r7, sp, #0
    231a:	6078      	str	r0, [r7, #4]
    231c:	000a      	movs	r2, r1
    231e:	1cfb      	adds	r3, r7, #3
    2320:	701a      	strb	r2, [r3, #0]
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    2322:	687b      	ldr	r3, [r7, #4]
    2324:	681b      	ldr	r3, [r3, #0]
    2326:	0018      	movs	r0, r3
    2328:	4b03      	ldr	r3, [pc, #12]	; (2338 <_adc_sync_read_channel_data+0x24>)
    232a:	4798      	blx	r3
    232c:	0003      	movs	r3, r0
}
    232e:	0018      	movs	r0, r3
    2330:	46bd      	mov	sp, r7
    2332:	b002      	add	sp, #8
    2334:	bd80      	pop	{r7, pc}
    2336:	46c0      	nop			; (mov r8, r8)
    2338:	00001b9f 	.word	0x00001b9f

0000233c <_adc_get_adc_sync>:

/**
 * \brief Retrieve ADC sync helper functions
 */
void *_adc_get_adc_sync(void)
{
    233c:	b580      	push	{r7, lr}
    233e:	af00      	add	r7, sp, #0
	return (void *)NULL;
    2340:	2300      	movs	r3, #0
}
    2342:	0018      	movs	r0, r3
    2344:	46bd      	mov	sp, r7
    2346:	bd80      	pop	{r7, pc}

00002348 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_MANW;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    2348:	b580      	push	{r7, lr}
    234a:	b082      	sub	sp, #8
    234c:	af00      	add	r7, sp, #0
    234e:	6078      	str	r0, [r7, #4]
    2350:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    2352:	687b      	ldr	r3, [r7, #4]
    2354:	685a      	ldr	r2, [r3, #4]
    2356:	683b      	ldr	r3, [r7, #0]
    2358:	005b      	lsls	r3, r3, #1
    235a:	211e      	movs	r1, #30
    235c:	400b      	ands	r3, r1
    235e:	431a      	orrs	r2, r3
    2360:	687b      	ldr	r3, [r7, #4]
    2362:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    2364:	46c0      	nop			; (mov r8, r8)
    2366:	46bd      	mov	sp, r7
    2368:	b002      	add	sp, #8
    236a:	bd80      	pop	{r7, pc}

0000236c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    236c:	b580      	push	{r7, lr}
    236e:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    2370:	4b0a      	ldr	r3, [pc, #40]	; (239c <_init_chip+0x30>)
    2372:	2100      	movs	r1, #0
    2374:	0018      	movs	r0, r3
    2376:	4b0a      	ldr	r3, [pc, #40]	; (23a0 <_init_chip+0x34>)
    2378:	4798      	blx	r3

	_osc32kctrl_init_sources();
    237a:	4b0a      	ldr	r3, [pc, #40]	; (23a4 <_init_chip+0x38>)
    237c:	4798      	blx	r3
	_oscctrl_init_sources();
    237e:	4b0a      	ldr	r3, [pc, #40]	; (23a8 <_init_chip+0x3c>)
    2380:	4798      	blx	r3
	_mclk_init();
    2382:	4b0a      	ldr	r3, [pc, #40]	; (23ac <_init_chip+0x40>)
    2384:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    2386:	4b0a      	ldr	r3, [pc, #40]	; (23b0 <_init_chip+0x44>)
    2388:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    238a:	20ff      	movs	r0, #255	; 0xff
    238c:	4b09      	ldr	r3, [pc, #36]	; (23b4 <_init_chip+0x48>)
    238e:	4798      	blx	r3

	_div_init();
    2390:	4b09      	ldr	r3, [pc, #36]	; (23b8 <_init_chip+0x4c>)
    2392:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    2394:	46c0      	nop			; (mov r8, r8)
    2396:	46bd      	mov	sp, r7
    2398:	bd80      	pop	{r7, pc}
    239a:	46c0      	nop			; (mov r8, r8)
    239c:	41004000 	.word	0x41004000
    23a0:	00002349 	.word	0x00002349
    23a4:	000026a9 	.word	0x000026a9
    23a8:	000027ed 	.word	0x000027ed
    23ac:	00002631 	.word	0x00002631
    23b0:	00002869 	.word	0x00002869
    23b4:	000025c9 	.word	0x000025c9
    23b8:	00002471 	.word	0x00002471

000023bc <hri_divas_write_CTRLA_DLZ_bit>:
	tmp = (tmp & DIVAS_CTRLA_DLZ) >> DIVAS_CTRLA_DLZ_Pos;
	return (bool)tmp;
}

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
    23bc:	b580      	push	{r7, lr}
    23be:	b084      	sub	sp, #16
    23c0:	af00      	add	r7, sp, #0
    23c2:	6078      	str	r0, [r7, #4]
    23c4:	000a      	movs	r2, r1
    23c6:	1cfb      	adds	r3, r7, #3
    23c8:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
    23ca:	230f      	movs	r3, #15
    23cc:	18fb      	adds	r3, r7, r3
    23ce:	687a      	ldr	r2, [r7, #4]
    23d0:	7812      	ldrb	r2, [r2, #0]
    23d2:	701a      	strb	r2, [r3, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
    23d4:	230f      	movs	r3, #15
    23d6:	18fb      	adds	r3, r7, r3
    23d8:	220f      	movs	r2, #15
    23da:	18ba      	adds	r2, r7, r2
    23dc:	7812      	ldrb	r2, [r2, #0]
    23de:	2102      	movs	r1, #2
    23e0:	438a      	bics	r2, r1
    23e2:	701a      	strb	r2, [r3, #0]
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
    23e4:	1cfb      	adds	r3, r7, #3
    23e6:	781b      	ldrb	r3, [r3, #0]
    23e8:	005b      	lsls	r3, r3, #1
    23ea:	b25a      	sxtb	r2, r3
    23ec:	230f      	movs	r3, #15
    23ee:	18fb      	adds	r3, r7, r3
    23f0:	781b      	ldrb	r3, [r3, #0]
    23f2:	b25b      	sxtb	r3, r3
    23f4:	4313      	orrs	r3, r2
    23f6:	b25a      	sxtb	r2, r3
    23f8:	230f      	movs	r3, #15
    23fa:	18fb      	adds	r3, r7, r3
    23fc:	701a      	strb	r2, [r3, #0]
	((Divas *)hw)->CTRLA.reg = tmp;
    23fe:	687b      	ldr	r3, [r7, #4]
    2400:	220f      	movs	r2, #15
    2402:	18ba      	adds	r2, r7, r2
    2404:	7812      	ldrb	r2, [r2, #0]
    2406:	701a      	strb	r2, [r3, #0]
	DIVAS_CRITICAL_SECTION_LEAVE();
}
    2408:	46c0      	nop			; (mov r8, r8)
    240a:	46bd      	mov	sp, r7
    240c:	b004      	add	sp, #16
    240e:	bd80      	pop	{r7, pc}

00002410 <_divas_div>:
 *  \param[in] s Indicate operation mode: signed/unsigned
 *  \param[in] n The dividend
 *  \param[in] d The divisor
 */
static inline void _divas_div(const uint8_t s, const uint32_t n, const uint32_t d)
{
    2410:	b580      	push	{r7, lr}
    2412:	b084      	sub	sp, #16
    2414:	af00      	add	r7, sp, #0
    2416:	60b9      	str	r1, [r7, #8]
    2418:	607a      	str	r2, [r7, #4]
    241a:	230f      	movs	r3, #15
    241c:	18fb      	adds	r3, r7, r3
    241e:	1c02      	adds	r2, r0, #0
    2420:	701a      	strb	r2, [r3, #0]
	DIVAS->CTRLA.bit.SIGNED = s;
    2422:	2390      	movs	r3, #144	; 0x90
    2424:	05da      	lsls	r2, r3, #23
    2426:	230f      	movs	r3, #15
    2428:	18fb      	adds	r3, r7, r3
    242a:	781b      	ldrb	r3, [r3, #0]
    242c:	2101      	movs	r1, #1
    242e:	400b      	ands	r3, r1
    2430:	b2d9      	uxtb	r1, r3
    2432:	7813      	ldrb	r3, [r2, #0]
    2434:	2001      	movs	r0, #1
    2436:	4008      	ands	r0, r1
    2438:	2101      	movs	r1, #1
    243a:	438b      	bics	r3, r1
    243c:	1c19      	adds	r1, r3, #0
    243e:	1c03      	adds	r3, r0, #0
    2440:	430b      	orrs	r3, r1
    2442:	7013      	strb	r3, [r2, #0]
	DIVAS->DIVIDEND.reg     = n;
    2444:	2390      	movs	r3, #144	; 0x90
    2446:	05db      	lsls	r3, r3, #23
    2448:	68ba      	ldr	r2, [r7, #8]
    244a:	609a      	str	r2, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    244c:	2390      	movs	r3, #144	; 0x90
    244e:	05db      	lsls	r3, r3, #23
    2450:	687a      	ldr	r2, [r7, #4]
    2452:	60da      	str	r2, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    2454:	46c0      	nop			; (mov r8, r8)
    2456:	2390      	movs	r3, #144	; 0x90
    2458:	05db      	lsls	r3, r3, #23
    245a:	791b      	ldrb	r3, [r3, #4]
    245c:	07db      	lsls	r3, r3, #31
    245e:	0fdb      	lsrs	r3, r3, #31
    2460:	b2db      	uxtb	r3, r3
    2462:	2b00      	cmp	r3, #0
    2464:	d1f7      	bne.n	2456 <_divas_div+0x46>
		/* Wait the division is complete. */
	}
}
    2466:	46c0      	nop			; (mov r8, r8)
    2468:	46bd      	mov	sp, r7
    246a:	b004      	add	sp, #16
    246c:	bd80      	pop	{r7, pc}
	...

00002470 <_div_init>:

/**
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
    2470:	b580      	push	{r7, lr}
    2472:	af00      	add	r7, sp, #0
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
    2474:	2390      	movs	r3, #144	; 0x90
    2476:	05db      	lsls	r3, r3, #23
    2478:	2100      	movs	r1, #0
    247a:	0018      	movs	r0, r3
    247c:	4b02      	ldr	r3, [pc, #8]	; (2488 <_div_init+0x18>)
    247e:	4798      	blx	r3
}
    2480:	46c0      	nop			; (mov r8, r8)
    2482:	46bd      	mov	sp, r7
    2484:	bd80      	pop	{r7, pc}
    2486:	46c0      	nop			; (mov r8, r8)
    2488:	000023bd 	.word	0x000023bd

0000248c <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
    248c:	b580      	push	{r7, lr}
    248e:	b086      	sub	sp, #24
    2490:	af00      	add	r7, sp, #0
    2492:	6078      	str	r0, [r7, #4]
    2494:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2496:	f3ef 8310 	mrs	r3, PRIMASK
    249a:	60fb      	str	r3, [r7, #12]
  return(result);
    249c:	68fb      	ldr	r3, [r7, #12]
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
    249e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    24a0:	b672      	cpsid	i
	_divas_div(0, numerator, denominator);
    24a2:	683a      	ldr	r2, [r7, #0]
    24a4:	687b      	ldr	r3, [r7, #4]
    24a6:	0019      	movs	r1, r3
    24a8:	2000      	movs	r0, #0
    24aa:	4b08      	ldr	r3, [pc, #32]	; (24cc <__aeabi_uidiv+0x40>)
    24ac:	4798      	blx	r3
	res = _divas_result32();
    24ae:	2390      	movs	r3, #144	; 0x90
    24b0:	05db      	lsls	r3, r3, #23
    24b2:	691b      	ldr	r3, [r3, #16]
    24b4:	617b      	str	r3, [r7, #20]
	_DIVAS_CRITICAL_LEAVE();
    24b6:	68bb      	ldr	r3, [r7, #8]
    24b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    24ba:	693b      	ldr	r3, [r7, #16]
    24bc:	f383 8810 	msr	PRIMASK, r3
	return res;
    24c0:	697b      	ldr	r3, [r7, #20]
}
    24c2:	0018      	movs	r0, r3
    24c4:	46bd      	mov	sp, r7
    24c6:	b006      	add	sp, #24
    24c8:	bd80      	pop	{r7, pc}
    24ca:	46c0      	nop			; (mov r8, r8)
    24cc:	00002411 	.word	0x00002411

000024d0 <__aeabi_idivmod>:

/**
 * \brief Do signed division, return result and remainder
 */
uint64_t __aeabi_idivmod(int numerator, int denominator)
{
    24d0:	b590      	push	{r4, r7, lr}
    24d2:	b089      	sub	sp, #36	; 0x24
    24d4:	af00      	add	r7, sp, #0
    24d6:	6078      	str	r0, [r7, #4]
    24d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    24da:	f3ef 8310 	mrs	r3, PRIMASK
    24de:	613b      	str	r3, [r7, #16]
  return(result);
    24e0:	693b      	ldr	r3, [r7, #16]
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
    24e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    24e4:	b672      	cpsid	i
	_divas_div(1, numerator, denominator);
    24e6:	687b      	ldr	r3, [r7, #4]
    24e8:	683a      	ldr	r2, [r7, #0]
    24ea:	0019      	movs	r1, r3
    24ec:	2001      	movs	r0, #1
    24ee:	4b09      	ldr	r3, [pc, #36]	; (2514 <__aeabi_idivmod+0x44>)
    24f0:	4798      	blx	r3
	res = _divas_result64();
    24f2:	4b09      	ldr	r3, [pc, #36]	; (2518 <__aeabi_idivmod+0x48>)
    24f4:	685c      	ldr	r4, [r3, #4]
    24f6:	681b      	ldr	r3, [r3, #0]
    24f8:	61bb      	str	r3, [r7, #24]
    24fa:	61fc      	str	r4, [r7, #28]
	_DIVAS_CRITICAL_LEAVE();
    24fc:	68fb      	ldr	r3, [r7, #12]
    24fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2500:	697b      	ldr	r3, [r7, #20]
    2502:	f383 8810 	msr	PRIMASK, r3
	return res;
    2506:	69bb      	ldr	r3, [r7, #24]
    2508:	69fc      	ldr	r4, [r7, #28]
}
    250a:	0018      	movs	r0, r3
    250c:	0021      	movs	r1, r4
    250e:	46bd      	mov	sp, r7
    2510:	b009      	add	sp, #36	; 0x24
    2512:	bd90      	pop	{r4, r7, pc}
    2514:	00002411 	.word	0x00002411
    2518:	48000010 	.word	0x48000010

0000251c <__aeabi_uidivmod>:

/**
 * \brief Do unsigned division, return result and remainder
 */
uint64_t __aeabi_uidivmod(unsigned numerator, unsigned denominator)
{
    251c:	b590      	push	{r4, r7, lr}
    251e:	b089      	sub	sp, #36	; 0x24
    2520:	af00      	add	r7, sp, #0
    2522:	6078      	str	r0, [r7, #4]
    2524:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2526:	f3ef 8310 	mrs	r3, PRIMASK
    252a:	613b      	str	r3, [r7, #16]
  return(result);
    252c:	693b      	ldr	r3, [r7, #16]
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
    252e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    2530:	b672      	cpsid	i
	_divas_div(0, numerator, denominator);
    2532:	683a      	ldr	r2, [r7, #0]
    2534:	687b      	ldr	r3, [r7, #4]
    2536:	0019      	movs	r1, r3
    2538:	2000      	movs	r0, #0
    253a:	4b09      	ldr	r3, [pc, #36]	; (2560 <__aeabi_uidivmod+0x44>)
    253c:	4798      	blx	r3
	res = _divas_result64();
    253e:	4b09      	ldr	r3, [pc, #36]	; (2564 <__aeabi_uidivmod+0x48>)
    2540:	685c      	ldr	r4, [r3, #4]
    2542:	681b      	ldr	r3, [r3, #0]
    2544:	61bb      	str	r3, [r7, #24]
    2546:	61fc      	str	r4, [r7, #28]
	_DIVAS_CRITICAL_LEAVE();
    2548:	68fb      	ldr	r3, [r7, #12]
    254a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    254c:	697b      	ldr	r3, [r7, #20]
    254e:	f383 8810 	msr	PRIMASK, r3
	return res;
    2552:	69bb      	ldr	r3, [r7, #24]
    2554:	69fc      	ldr	r4, [r7, #28]
}
    2556:	0018      	movs	r0, r3
    2558:	0021      	movs	r1, r4
    255a:	46bd      	mov	sp, r7
    255c:	b009      	add	sp, #36	; 0x24
    255e:	bd90      	pop	{r4, r7, pc}
    2560:	00002411 	.word	0x00002411
    2564:	48000010 	.word	0x48000010

00002568 <hri_gclk_wait_for_sync>:
{
    2568:	b580      	push	{r7, lr}
    256a:	b082      	sub	sp, #8
    256c:	af00      	add	r7, sp, #0
    256e:	6078      	str	r0, [r7, #4]
    2570:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	687b      	ldr	r3, [r7, #4]
    2576:	685b      	ldr	r3, [r3, #4]
    2578:	683a      	ldr	r2, [r7, #0]
    257a:	4013      	ands	r3, r2
    257c:	d1fa      	bne.n	2574 <hri_gclk_wait_for_sync+0xc>
}
    257e:	46c0      	nop			; (mov r8, r8)
    2580:	46bd      	mov	sp, r7
    2582:	b002      	add	sp, #8
    2584:	bd80      	pop	{r7, pc}
	...

00002588 <hri_gclk_write_GENCTRL_reg>:
{
    2588:	b580      	push	{r7, lr}
    258a:	b084      	sub	sp, #16
    258c:	af00      	add	r7, sp, #0
    258e:	60f8      	str	r0, [r7, #12]
    2590:	607a      	str	r2, [r7, #4]
    2592:	230b      	movs	r3, #11
    2594:	18fb      	adds	r3, r7, r3
    2596:	1c0a      	adds	r2, r1, #0
    2598:	701a      	strb	r2, [r3, #0]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    259a:	230b      	movs	r3, #11
    259c:	18fb      	adds	r3, r7, r3
    259e:	781a      	ldrb	r2, [r3, #0]
    25a0:	68fb      	ldr	r3, [r7, #12]
    25a2:	3208      	adds	r2, #8
    25a4:	0092      	lsls	r2, r2, #2
    25a6:	6879      	ldr	r1, [r7, #4]
    25a8:	50d1      	str	r1, [r2, r3]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    25aa:	4a05      	ldr	r2, [pc, #20]	; (25c0 <hri_gclk_write_GENCTRL_reg+0x38>)
    25ac:	68fb      	ldr	r3, [r7, #12]
    25ae:	0011      	movs	r1, r2
    25b0:	0018      	movs	r0, r3
    25b2:	4b04      	ldr	r3, [pc, #16]	; (25c4 <hri_gclk_write_GENCTRL_reg+0x3c>)
    25b4:	4798      	blx	r3
}
    25b6:	46c0      	nop			; (mov r8, r8)
    25b8:	46bd      	mov	sp, r7
    25ba:	b004      	add	sp, #16
    25bc:	bd80      	pop	{r7, pc}
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	000007fd 	.word	0x000007fd
    25c4:	00002569 	.word	0x00002569

000025c8 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    25c8:	b580      	push	{r7, lr}
    25ca:	b082      	sub	sp, #8
    25cc:	af00      	add	r7, sp, #0
    25ce:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    25d0:	687b      	ldr	r3, [r7, #4]
    25d2:	2201      	movs	r2, #1
    25d4:	4013      	ands	r3, r2
    25d6:	d005      	beq.n	25e4 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    25d8:	4a09      	ldr	r2, [pc, #36]	; (2600 <_gclk_init_generators_by_fref+0x38>)
    25da:	4b0a      	ldr	r3, [pc, #40]	; (2604 <_gclk_init_generators_by_fref+0x3c>)
    25dc:	2100      	movs	r1, #0
    25de:	0018      	movs	r0, r3
    25e0:	4b09      	ldr	r3, [pc, #36]	; (2608 <_gclk_init_generators_by_fref+0x40>)
    25e2:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    25e4:	687b      	ldr	r3, [r7, #4]
    25e6:	2204      	movs	r2, #4
    25e8:	4013      	ands	r3, r2
    25ea:	d005      	beq.n	25f8 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    25ec:	4a07      	ldr	r2, [pc, #28]	; (260c <_gclk_init_generators_by_fref+0x44>)
    25ee:	4b05      	ldr	r3, [pc, #20]	; (2604 <_gclk_init_generators_by_fref+0x3c>)
    25f0:	2102      	movs	r1, #2
    25f2:	0018      	movs	r0, r3
    25f4:	4b04      	ldr	r3, [pc, #16]	; (2608 <_gclk_init_generators_by_fref+0x40>)
    25f6:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    25f8:	46c0      	nop			; (mov r8, r8)
    25fa:	46bd      	mov	sp, r7
    25fc:	b002      	add	sp, #8
    25fe:	bd80      	pop	{r7, pc}
    2600:	00010106 	.word	0x00010106
    2604:	40001c00 	.word	0x40001c00
    2608:	00002589 	.word	0x00002589
    260c:	00010103 	.word	0x00010103

00002610 <hri_mclk_write_CPUDIV_reg>:
{
    2610:	b580      	push	{r7, lr}
    2612:	b082      	sub	sp, #8
    2614:	af00      	add	r7, sp, #0
    2616:	6078      	str	r0, [r7, #4]
    2618:	000a      	movs	r2, r1
    261a:	1cfb      	adds	r3, r7, #3
    261c:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->CPUDIV.reg = data;
    261e:	687b      	ldr	r3, [r7, #4]
    2620:	1cfa      	adds	r2, r7, #3
    2622:	7812      	ldrb	r2, [r2, #0]
    2624:	711a      	strb	r2, [r3, #4]
}
    2626:	46c0      	nop			; (mov r8, r8)
    2628:	46bd      	mov	sp, r7
    262a:	b002      	add	sp, #8
    262c:	bd80      	pop	{r7, pc}
	...

00002630 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    2630:	b580      	push	{r7, lr}
    2632:	b082      	sub	sp, #8
    2634:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    2636:	4b05      	ldr	r3, [pc, #20]	; (264c <_mclk_init+0x1c>)
    2638:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
    263a:	687b      	ldr	r3, [r7, #4]
    263c:	2101      	movs	r1, #1
    263e:	0018      	movs	r0, r3
    2640:	4b03      	ldr	r3, [pc, #12]	; (2650 <_mclk_init+0x20>)
    2642:	4798      	blx	r3
}
    2644:	46c0      	nop			; (mov r8, r8)
    2646:	46bd      	mov	sp, r7
    2648:	b002      	add	sp, #8
    264a:	bd80      	pop	{r7, pc}
    264c:	40000800 	.word	0x40000800
    2650:	00002611 	.word	0x00002611

00002654 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    2654:	b580      	push	{r7, lr}
    2656:	b082      	sub	sp, #8
    2658:	af00      	add	r7, sp, #0
    265a:	6078      	str	r0, [r7, #4]
    265c:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    265e:	687b      	ldr	r3, [r7, #4]
    2660:	683a      	ldr	r2, [r7, #0]
    2662:	611a      	str	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    2664:	46c0      	nop			; (mov r8, r8)
    2666:	46bd      	mov	sp, r7
    2668:	b002      	add	sp, #8
    266a:	bd80      	pop	{r7, pc}

0000266c <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    266c:	b580      	push	{r7, lr}
    266e:	b084      	sub	sp, #16
    2670:	af00      	add	r7, sp, #0
    2672:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2674:	687b      	ldr	r3, [r7, #4]
    2676:	69db      	ldr	r3, [r3, #28]
    2678:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    267a:	68fb      	ldr	r3, [r7, #12]
    267c:	0a1b      	lsrs	r3, r3, #8
    267e:	221f      	movs	r2, #31
    2680:	4013      	ands	r3, r2
    2682:	60fb      	str	r3, [r7, #12]
	return tmp;
    2684:	68fb      	ldr	r3, [r7, #12]
}
    2686:	0018      	movs	r0, r3
    2688:	46bd      	mov	sp, r7
    268a:	b004      	add	sp, #16
    268c:	bd80      	pop	{r7, pc}

0000268e <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    268e:	b580      	push	{r7, lr}
    2690:	b082      	sub	sp, #8
    2692:	af00      	add	r7, sp, #0
    2694:	6078      	str	r0, [r7, #4]
    2696:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2698:	687b      	ldr	r3, [r7, #4]
    269a:	683a      	ldr	r2, [r7, #0]
    269c:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	46bd      	mov	sp, r7
    26a2:	b002      	add	sp, #8
    26a4:	bd80      	pop	{r7, pc}
	...

000026a8 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    26a8:	b580      	push	{r7, lr}
    26aa:	b082      	sub	sp, #8
    26ac:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    26ae:	4b10      	ldr	r3, [pc, #64]	; (26f0 <_osc32kctrl_init_sources+0x48>)
    26b0:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    26b2:	1cbb      	adds	r3, r7, #2
    26b4:	2200      	movs	r2, #0
    26b6:	801a      	strh	r2, [r3, #0]
	        | (CONF_OSC32K_RUNSTDBY << OSC32KCTRL_OSC32K_RUNSTDBY_Pos)
	        | (CONF_OSC32K_EN1K << OSC32KCTRL_OSC32K_EN1K_Pos) | (CONF_OSC32K_EN32K << OSC32KCTRL_OSC32K_EN32K_Pos)
	        | (CONF_OSC32K_ENABLE << OSC32KCTRL_OSC32K_ENABLE_Pos));
#endif
#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    26b8:	687b      	ldr	r3, [r7, #4]
    26ba:	0018      	movs	r0, r3
    26bc:	4b0d      	ldr	r3, [pc, #52]	; (26f4 <_osc32kctrl_init_sources+0x4c>)
    26be:	4798      	blx	r3
    26c0:	0002      	movs	r2, r0
    26c2:	1cbb      	adds	r3, r7, #2
    26c4:	801a      	strh	r2, [r3, #0]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    26c6:	1cbb      	adds	r3, r7, #2
    26c8:	881b      	ldrh	r3, [r3, #0]
    26ca:	021b      	lsls	r3, r3, #8
    26cc:	001a      	movs	r2, r3
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    26ce:	23f8      	movs	r3, #248	; 0xf8
    26d0:	015b      	lsls	r3, r3, #5
    26d2:	401a      	ands	r2, r3
    26d4:	687b      	ldr	r3, [r7, #4]
    26d6:	0011      	movs	r1, r2
    26d8:	0018      	movs	r0, r3
    26da:	4b07      	ldr	r3, [pc, #28]	; (26f8 <_osc32kctrl_init_sources+0x50>)
    26dc:	4798      	blx	r3
#if CONF_OSC32K_ENABLE == 1 && CONF_OSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_OSC32KRDY_bit(hw))
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    26de:	687b      	ldr	r3, [r7, #4]
    26e0:	2100      	movs	r1, #0
    26e2:	0018      	movs	r0, r3
    26e4:	4b05      	ldr	r3, [pc, #20]	; (26fc <_osc32kctrl_init_sources+0x54>)
    26e6:	4798      	blx	r3
	(void)calib;
}
    26e8:	46c0      	nop			; (mov r8, r8)
    26ea:	46bd      	mov	sp, r7
    26ec:	b002      	add	sp, #8
    26ee:	bd80      	pop	{r7, pc}
    26f0:	40001400 	.word	0x40001400
    26f4:	0000266d 	.word	0x0000266d
    26f8:	0000268f 	.word	0x0000268f
    26fc:	00002655 	.word	0x00002655

00002700 <hri_oscctrl_osc48msyncbusy_wait_for_sync>:
typedef uint8_t  hri_oscctrl_osc48mctrl_reg_t;
typedef uint8_t  hri_oscctrl_osc48mdiv_reg_t;
typedef uint8_t  hri_oscctrl_osc48mstup_reg_t;

static inline void hri_oscctrl_osc48msyncbusy_wait_for_sync(const void *const hw, hri_oscctrl_osc48msyncbusy_reg_t reg)
{
    2700:	b580      	push	{r7, lr}
    2702:	b082      	sub	sp, #8
    2704:	af00      	add	r7, sp, #0
    2706:	6078      	str	r0, [r7, #4]
    2708:	6039      	str	r1, [r7, #0]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
    270a:	46c0      	nop			; (mov r8, r8)
    270c:	687b      	ldr	r3, [r7, #4]
    270e:	699b      	ldr	r3, [r3, #24]
    2710:	683a      	ldr	r2, [r7, #0]
    2712:	4013      	ands	r3, r2
    2714:	d1fa      	bne.n	270c <hri_oscctrl_osc48msyncbusy_wait_for_sync+0xc>
	};
}
    2716:	46c0      	nop			; (mov r8, r8)
    2718:	46bd      	mov	sp, r7
    271a:	b002      	add	sp, #8
    271c:	bd80      	pop	{r7, pc}

0000271e <hri_oscctrl_get_STATUS_OSC48MRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW) >> OSCCTRL_STATUS_XOSCCKSW_Pos;
}

static inline bool hri_oscctrl_get_STATUS_OSC48MRDY_bit(const void *const hw)
{
    271e:	b580      	push	{r7, lr}
    2720:	b082      	sub	sp, #8
    2722:	af00      	add	r7, sp, #0
    2724:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
    2726:	687b      	ldr	r3, [r7, #4]
    2728:	68db      	ldr	r3, [r3, #12]
    272a:	091b      	lsrs	r3, r3, #4
    272c:	2201      	movs	r2, #1
    272e:	4013      	ands	r3, r2
    2730:	1e5a      	subs	r2, r3, #1
    2732:	4193      	sbcs	r3, r2
    2734:	b2db      	uxtb	r3, r3
}
    2736:	0018      	movs	r0, r3
    2738:	46bd      	mov	sp, r7
    273a:	b002      	add	sp, #8
    273c:	bd80      	pop	{r7, pc}

0000273e <hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit>:
{
	return ((Oscctrl *)hw)->STATUS.reg;
}

static inline bool hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(const void *const hw)
{
    273e:	b580      	push	{r7, lr}
    2740:	b082      	sub	sp, #8
    2742:	af00      	add	r7, sp, #0
    2744:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
    2746:	687b      	ldr	r3, [r7, #4]
    2748:	699b      	ldr	r3, [r3, #24]
	       >> OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV_Pos;
    274a:	089b      	lsrs	r3, r3, #2
    274c:	2201      	movs	r2, #1
    274e:	4013      	ands	r3, r2
    2750:	1e5a      	subs	r2, r3, #1
    2752:	4193      	sbcs	r3, r2
    2754:	b2db      	uxtb	r3, r3
}
    2756:	0018      	movs	r0, r3
    2758:	46bd      	mov	sp, r7
    275a:	b002      	add	sp, #8
    275c:	bd80      	pop	{r7, pc}

0000275e <hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit>:
	((Oscctrl *)hw)->OSC48MCTRL.reg ^= OSCCTRL_OSC48MCTRL_RUNSTDBY;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(const void *const hw)
{
    275e:	b580      	push	{r7, lr}
    2760:	b082      	sub	sp, #8
    2762:	af00      	add	r7, sp, #0
    2764:	6078      	str	r0, [r7, #4]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
    2766:	687b      	ldr	r3, [r7, #4]
    2768:	7d1b      	ldrb	r3, [r3, #20]
    276a:	b2db      	uxtb	r3, r3
    276c:	2280      	movs	r2, #128	; 0x80
    276e:	4252      	negs	r2, r2
    2770:	4313      	orrs	r3, r2
    2772:	b2da      	uxtb	r2, r3
    2774:	687b      	ldr	r3, [r7, #4]
    2776:	751a      	strb	r2, [r3, #20]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    2778:	46c0      	nop			; (mov r8, r8)
    277a:	46bd      	mov	sp, r7
    277c:	b002      	add	sp, #8
    277e:	bd80      	pop	{r7, pc}

00002780 <hri_oscctrl_write_OSC48MCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
    2780:	b580      	push	{r7, lr}
    2782:	b082      	sub	sp, #8
    2784:	af00      	add	r7, sp, #0
    2786:	6078      	str	r0, [r7, #4]
    2788:	000a      	movs	r2, r1
    278a:	1cfb      	adds	r3, r7, #3
    278c:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
    278e:	687b      	ldr	r3, [r7, #4]
    2790:	1cfa      	adds	r2, r7, #3
    2792:	7812      	ldrb	r2, [r2, #0]
    2794:	751a      	strb	r2, [r3, #20]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    2796:	46c0      	nop			; (mov r8, r8)
    2798:	46bd      	mov	sp, r7
    279a:	b002      	add	sp, #8
    279c:	bd80      	pop	{r7, pc}
	...

000027a0 <hri_oscctrl_write_OSC48MDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
    27a0:	b580      	push	{r7, lr}
    27a2:	b082      	sub	sp, #8
    27a4:	af00      	add	r7, sp, #0
    27a6:	6078      	str	r0, [r7, #4]
    27a8:	000a      	movs	r2, r1
    27aa:	1cfb      	adds	r3, r7, #3
    27ac:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
    27ae:	687b      	ldr	r3, [r7, #4]
    27b0:	1cfa      	adds	r2, r7, #3
    27b2:	7812      	ldrb	r2, [r2, #0]
    27b4:	755a      	strb	r2, [r3, #21]
	hri_oscctrl_osc48msyncbusy_wait_for_sync(hw, OSCCTRL_OSC48MSYNCBUSY_MASK);
    27b6:	687b      	ldr	r3, [r7, #4]
    27b8:	2104      	movs	r1, #4
    27ba:	0018      	movs	r0, r3
    27bc:	4b02      	ldr	r3, [pc, #8]	; (27c8 <hri_oscctrl_write_OSC48MDIV_reg+0x28>)
    27be:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    27c0:	46c0      	nop			; (mov r8, r8)
    27c2:	46bd      	mov	sp, r7
    27c4:	b002      	add	sp, #8
    27c6:	bd80      	pop	{r7, pc}
    27c8:	00002701 	.word	0x00002701

000027cc <hri_oscctrl_write_OSC48MSTUP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
    27cc:	b580      	push	{r7, lr}
    27ce:	b082      	sub	sp, #8
    27d0:	af00      	add	r7, sp, #0
    27d2:	6078      	str	r0, [r7, #4]
    27d4:	000a      	movs	r2, r1
    27d6:	1cfb      	adds	r3, r7, #3
    27d8:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
    27da:	687b      	ldr	r3, [r7, #4]
    27dc:	1cfa      	adds	r2, r7, #3
    27de:	7812      	ldrb	r2, [r2, #0]
    27e0:	759a      	strb	r2, [r3, #22]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    27e2:	46c0      	nop			; (mov r8, r8)
    27e4:	46bd      	mov	sp, r7
    27e6:	b002      	add	sp, #8
    27e8:	bd80      	pop	{r7, pc}
	...

000027ec <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    27ec:	b580      	push	{r7, lr}
    27ee:	b082      	sub	sp, #8
    27f0:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    27f2:	4b16      	ldr	r3, [pc, #88]	; (284c <_oscctrl_init_sources+0x60>)
    27f4:	607b      	str	r3, [r7, #4]
	        | (CONF_XOSC_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));

	hri_oscctrl_write_EVCTRL_reg(hw, (CONF_XOSC_CFDEO << OSCCTRL_EVCTRL_CFDEO_Pos));
#endif
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
    27f6:	687b      	ldr	r3, [r7, #4]
    27f8:	2102      	movs	r1, #2
    27fa:	0018      	movs	r0, r3
    27fc:	4b14      	ldr	r3, [pc, #80]	; (2850 <_oscctrl_init_sources+0x64>)
    27fe:	4798      	blx	r3
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
    2800:	687b      	ldr	r3, [r7, #4]
    2802:	210b      	movs	r1, #11
    2804:	0018      	movs	r0, r3
    2806:	4b13      	ldr	r3, [pc, #76]	; (2854 <_oscctrl_init_sources+0x68>)
    2808:	4798      	blx	r3
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
    280a:	46c0      	nop			; (mov r8, r8)
    280c:	687b      	ldr	r3, [r7, #4]
    280e:	0018      	movs	r0, r3
    2810:	4b11      	ldr	r3, [pc, #68]	; (2858 <_oscctrl_init_sources+0x6c>)
    2812:	4798      	blx	r3
    2814:	1e03      	subs	r3, r0, #0
    2816:	d1f9      	bne.n	280c <_oscctrl_init_sources+0x20>
		;
	hri_oscctrl_write_OSC48MSTUP_reg(hw, OSCCTRL_OSC48MSTUP_STARTUP(CONF_OSC48M_STARTUP));
    2818:	687b      	ldr	r3, [r7, #4]
    281a:	2107      	movs	r1, #7
    281c:	0018      	movs	r0, r3
    281e:	4b0f      	ldr	r3, [pc, #60]	; (285c <_oscctrl_init_sources+0x70>)
    2820:	4798      	blx	r3
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
    2822:	46c0      	nop			; (mov r8, r8)
    2824:	687b      	ldr	r3, [r7, #4]
    2826:	0018      	movs	r0, r3
    2828:	4b0d      	ldr	r3, [pc, #52]	; (2860 <_oscctrl_init_sources+0x74>)
    282a:	4798      	blx	r3
    282c:	0003      	movs	r3, r0
    282e:	001a      	movs	r2, r3
    2830:	2301      	movs	r3, #1
    2832:	4053      	eors	r3, r2
    2834:	b2db      	uxtb	r3, r3
    2836:	2b00      	cmp	r3, #0
    2838:	d1f4      	bne.n	2824 <_oscctrl_init_sources+0x38>
		;
#endif
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
    283a:	687b      	ldr	r3, [r7, #4]
    283c:	0018      	movs	r0, r3
    283e:	4b09      	ldr	r3, [pc, #36]	; (2864 <_oscctrl_init_sources+0x78>)
    2840:	4798      	blx	r3
#endif
#endif
	(void)hw;
}
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	46bd      	mov	sp, r7
    2846:	b002      	add	sp, #8
    2848:	bd80      	pop	{r7, pc}
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	40001000 	.word	0x40001000
    2850:	00002781 	.word	0x00002781
    2854:	000027a1 	.word	0x000027a1
    2858:	0000273f 	.word	0x0000273f
    285c:	000027cd 	.word	0x000027cd
    2860:	0000271f 	.word	0x0000271f
    2864:	0000275f 	.word	0x0000275f

00002868 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    2868:	b580      	push	{r7, lr}
    286a:	b082      	sub	sp, #8
    286c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    286e:	4b03      	ldr	r3, [pc, #12]	; (287c <_oscctrl_init_referenced_generators+0x14>)
    2870:	607b      	str	r3, [r7, #4]
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    2872:	46c0      	nop			; (mov r8, r8)
    2874:	46bd      	mov	sp, r7
    2876:	b002      	add	sp, #8
    2878:	bd80      	pop	{r7, pc}
    287a:	46c0      	nop			; (mov r8, r8)
    287c:	40001000 	.word	0x40001000

00002880 <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    2880:	b580      	push	{r7, lr}
    2882:	b082      	sub	sp, #8
    2884:	af00      	add	r7, sp, #0
    2886:	6078      	str	r0, [r7, #4]
    2888:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    288a:	46c0      	nop			; (mov r8, r8)
    288c:	687b      	ldr	r3, [r7, #4]
    288e:	691b      	ldr	r3, [r3, #16]
    2890:	683a      	ldr	r2, [r7, #0]
    2892:	4013      	ands	r3, r2
    2894:	d1fa      	bne.n	288c <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	46bd      	mov	sp, r7
    289a:	b002      	add	sp, #8
    289c:	bd80      	pop	{r7, pc}

0000289e <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    289e:	b580      	push	{r7, lr}
    28a0:	b082      	sub	sp, #8
    28a2:	af00      	add	r7, sp, #0
    28a4:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    28a6:	687b      	ldr	r3, [r7, #4]
    28a8:	2280      	movs	r2, #128	; 0x80
    28aa:	0052      	lsls	r2, r2, #1
    28ac:	819a      	strh	r2, [r3, #12]
}
    28ae:	46c0      	nop			; (mov r8, r8)
    28b0:	46bd      	mov	sp, r7
    28b2:	b002      	add	sp, #8
    28b4:	bd80      	pop	{r7, pc}

000028b6 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    28b6:	b580      	push	{r7, lr}
    28b8:	b082      	sub	sp, #8
    28ba:	af00      	add	r7, sp, #0
    28bc:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    28be:	687b      	ldr	r3, [r7, #4]
    28c0:	899b      	ldrh	r3, [r3, #12]
    28c2:	b29b      	uxth	r3, r3
}
    28c4:	0018      	movs	r0, r3
    28c6:	46bd      	mov	sp, r7
    28c8:	b002      	add	sp, #8
    28ca:	bd80      	pop	{r7, pc}

000028cc <hri_rtcmode0_set_CTRLA_SWRST_bit>:
{
	return ((Rtc *)hw)->MODE2.SYNCBUSY.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    28cc:	b580      	push	{r7, lr}
    28ce:	b082      	sub	sp, #8
    28d0:	af00      	add	r7, sp, #0
    28d2:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    28d4:	687b      	ldr	r3, [r7, #4]
    28d6:	881b      	ldrh	r3, [r3, #0]
    28d8:	b29b      	uxth	r3, r3
    28da:	2201      	movs	r2, #1
    28dc:	4313      	orrs	r3, r2
    28de:	b29a      	uxth	r2, r3
    28e0:	687b      	ldr	r3, [r7, #4]
    28e2:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    28e4:	687b      	ldr	r3, [r7, #4]
    28e6:	2101      	movs	r1, #1
    28e8:	0018      	movs	r0, r3
    28ea:	4b03      	ldr	r3, [pc, #12]	; (28f8 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x2c>)
    28ec:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    28ee:	46c0      	nop			; (mov r8, r8)
    28f0:	46bd      	mov	sp, r7
    28f2:	b002      	add	sp, #8
    28f4:	bd80      	pop	{r7, pc}
    28f6:	46c0      	nop			; (mov r8, r8)
    28f8:	00002881 	.word	0x00002881

000028fc <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    28fc:	b580      	push	{r7, lr}
    28fe:	b082      	sub	sp, #8
    2900:	af00      	add	r7, sp, #0
    2902:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    2904:	687b      	ldr	r3, [r7, #4]
    2906:	881b      	ldrh	r3, [r3, #0]
    2908:	b29b      	uxth	r3, r3
    290a:	2202      	movs	r2, #2
    290c:	4313      	orrs	r3, r2
    290e:	b29a      	uxth	r2, r3
    2910:	687b      	ldr	r3, [r7, #4]
    2912:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    2914:	4a04      	ldr	r2, [pc, #16]	; (2928 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	0011      	movs	r1, r2
    291a:	0018      	movs	r0, r3
    291c:	4b03      	ldr	r3, [pc, #12]	; (292c <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x30>)
    291e:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    2920:	46c0      	nop			; (mov r8, r8)
    2922:	46bd      	mov	sp, r7
    2924:	b002      	add	sp, #8
    2926:	bd80      	pop	{r7, pc}
    2928:	00008003 	.word	0x00008003
    292c:	00002881 	.word	0x00002881

00002930 <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    2930:	b580      	push	{r7, lr}
    2932:	b084      	sub	sp, #16
    2934:	af00      	add	r7, sp, #0
    2936:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    2938:	4a0f      	ldr	r2, [pc, #60]	; (2978 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x48>)
    293a:	687b      	ldr	r3, [r7, #4]
    293c:	0011      	movs	r1, r2
    293e:	0018      	movs	r0, r3
    2940:	4b0e      	ldr	r3, [pc, #56]	; (297c <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x4c>)
    2942:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    2944:	230e      	movs	r3, #14
    2946:	18fb      	adds	r3, r7, r3
    2948:	687a      	ldr	r2, [r7, #4]
    294a:	8812      	ldrh	r2, [r2, #0]
    294c:	801a      	strh	r2, [r3, #0]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    294e:	230e      	movs	r3, #14
    2950:	18fb      	adds	r3, r7, r3
    2952:	881b      	ldrh	r3, [r3, #0]
    2954:	085b      	lsrs	r3, r3, #1
    2956:	b29a      	uxth	r2, r3
    2958:	230e      	movs	r3, #14
    295a:	18fb      	adds	r3, r7, r3
    295c:	2101      	movs	r1, #1
    295e:	400a      	ands	r2, r1
    2960:	801a      	strh	r2, [r3, #0]
	return (bool)tmp;
    2962:	230e      	movs	r3, #14
    2964:	18fb      	adds	r3, r7, r3
    2966:	881b      	ldrh	r3, [r3, #0]
    2968:	1e5a      	subs	r2, r3, #1
    296a:	4193      	sbcs	r3, r2
    296c:	b2db      	uxtb	r3, r3
}
    296e:	0018      	movs	r0, r3
    2970:	46bd      	mov	sp, r7
    2972:	b004      	add	sp, #16
    2974:	bd80      	pop	{r7, pc}
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	00008003 	.word	0x00008003
    297c:	00002881 	.word	0x00002881

00002980 <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    2980:	b580      	push	{r7, lr}
    2982:	b082      	sub	sp, #8
    2984:	af00      	add	r7, sp, #0
    2986:	6078      	str	r0, [r7, #4]
    2988:	000a      	movs	r2, r1
    298a:	1cbb      	adds	r3, r7, #2
    298c:	801a      	strh	r2, [r3, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	1cba      	adds	r2, r7, #2
    2992:	8812      	ldrh	r2, [r2, #0]
    2994:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    2996:	4a05      	ldr	r2, [pc, #20]	; (29ac <hri_rtcmode0_write_CTRLA_reg+0x2c>)
    2998:	687b      	ldr	r3, [r7, #4]
    299a:	0011      	movs	r1, r2
    299c:	0018      	movs	r0, r3
    299e:	4b04      	ldr	r3, [pc, #16]	; (29b0 <hri_rtcmode0_write_CTRLA_reg+0x30>)
    29a0:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    29a2:	46c0      	nop			; (mov r8, r8)
    29a4:	46bd      	mov	sp, r7
    29a6:	b002      	add	sp, #8
    29a8:	bd80      	pop	{r7, pc}
    29aa:	46c0      	nop			; (mov r8, r8)
    29ac:	00008003 	.word	0x00008003
    29b0:	00002881 	.word	0x00002881

000029b4 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    29b4:	b580      	push	{r7, lr}
    29b6:	b082      	sub	sp, #8
    29b8:	af00      	add	r7, sp, #0
    29ba:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    29bc:	687b      	ldr	r3, [r7, #4]
    29be:	2108      	movs	r1, #8
    29c0:	0018      	movs	r0, r3
    29c2:	4b04      	ldr	r3, [pc, #16]	; (29d4 <hri_rtcmode0_read_COUNT_reg+0x20>)
    29c4:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    29c6:	687b      	ldr	r3, [r7, #4]
    29c8:	699b      	ldr	r3, [r3, #24]
}
    29ca:	0018      	movs	r0, r3
    29cc:	46bd      	mov	sp, r7
    29ce:	b002      	add	sp, #8
    29d0:	bd80      	pop	{r7, pc}
    29d2:	46c0      	nop			; (mov r8, r8)
    29d4:	00002881 	.word	0x00002881

000029d8 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    29d8:	b580      	push	{r7, lr}
    29da:	b082      	sub	sp, #8
    29dc:	af00      	add	r7, sp, #0
    29de:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    29e0:	687b      	ldr	r3, [r7, #4]
    29e2:	2b00      	cmp	r3, #0
    29e4:	d005      	beq.n	29f2 <_calendar_init+0x1a>
    29e6:	687b      	ldr	r3, [r7, #4]
    29e8:	681b      	ldr	r3, [r3, #0]
    29ea:	2b00      	cmp	r3, #0
    29ec:	d001      	beq.n	29f2 <_calendar_init+0x1a>
    29ee:	2301      	movs	r3, #1
    29f0:	e000      	b.n	29f4 <_calendar_init+0x1c>
    29f2:	2300      	movs	r3, #0
    29f4:	1c1a      	adds	r2, r3, #0
    29f6:	2301      	movs	r3, #1
    29f8:	4013      	ands	r3, r2
    29fa:	b2db      	uxtb	r3, r3
    29fc:	4917      	ldr	r1, [pc, #92]	; (2a5c <_calendar_init+0x84>)
    29fe:	222f      	movs	r2, #47	; 0x2f
    2a00:	0018      	movs	r0, r3
    2a02:	4b17      	ldr	r3, [pc, #92]	; (2a60 <_calendar_init+0x88>)
    2a04:	4798      	blx	r3

	_rtc_dev = dev;
    2a06:	4b17      	ldr	r3, [pc, #92]	; (2a64 <_calendar_init+0x8c>)
    2a08:	687a      	ldr	r2, [r7, #4]
    2a0a:	601a      	str	r2, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2a0c:	687b      	ldr	r3, [r7, #4]
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	2101      	movs	r1, #1
    2a12:	0018      	movs	r0, r3
    2a14:	4b14      	ldr	r3, [pc, #80]	; (2a68 <_calendar_init+0x90>)
    2a16:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    2a18:	687b      	ldr	r3, [r7, #4]
    2a1a:	681b      	ldr	r3, [r3, #0]
    2a1c:	0018      	movs	r0, r3
    2a1e:	4b13      	ldr	r3, [pc, #76]	; (2a6c <_calendar_init+0x94>)
    2a20:	4798      	blx	r3
    2a22:	1e03      	subs	r3, r0, #0
    2a24:	d002      	beq.n	2a2c <_calendar_init+0x54>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
    2a26:	2311      	movs	r3, #17
    2a28:	425b      	negs	r3, r3
    2a2a:	e013      	b.n	2a54 <_calendar_init+0x7c>
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    2a2c:	687b      	ldr	r3, [r7, #4]
    2a2e:	681b      	ldr	r3, [r3, #0]
    2a30:	0018      	movs	r0, r3
    2a32:	4b0f      	ldr	r3, [pc, #60]	; (2a70 <_calendar_init+0x98>)
    2a34:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2a36:	687b      	ldr	r3, [r7, #4]
    2a38:	681b      	ldr	r3, [r3, #0]
    2a3a:	2101      	movs	r1, #1
    2a3c:	0018      	movs	r0, r3
    2a3e:	4b0a      	ldr	r3, [pc, #40]	; (2a68 <_calendar_init+0x90>)
    2a40:	4798      	blx	r3
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    2a42:	687b      	ldr	r3, [r7, #4]
    2a44:	681a      	ldr	r2, [r3, #0]
    2a46:	238b      	movs	r3, #139	; 0x8b
    2a48:	021b      	lsls	r3, r3, #8
    2a4a:	0019      	movs	r1, r3
    2a4c:	0010      	movs	r0, r2
    2a4e:	4b09      	ldr	r3, [pc, #36]	; (2a74 <_calendar_init+0x9c>)
    2a50:	4798      	blx	r3

	return ERR_NONE;
    2a52:	2300      	movs	r3, #0
}
    2a54:	0018      	movs	r0, r3
    2a56:	46bd      	mov	sp, r7
    2a58:	b002      	add	sp, #8
    2a5a:	bd80      	pop	{r7, pc}
    2a5c:	00008568 	.word	0x00008568
    2a60:	00001afd 	.word	0x00001afd
    2a64:	20000048 	.word	0x20000048
    2a68:	00002881 	.word	0x00002881
    2a6c:	00002931 	.word	0x00002931
    2a70:	000028cd 	.word	0x000028cd
    2a74:	00002981 	.word	0x00002981

00002a78 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    2a78:	b580      	push	{r7, lr}
    2a7a:	b082      	sub	sp, #8
    2a7c:	af00      	add	r7, sp, #0
    2a7e:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    2a80:	687b      	ldr	r3, [r7, #4]
    2a82:	2b00      	cmp	r3, #0
    2a84:	d005      	beq.n	2a92 <_calendar_enable+0x1a>
    2a86:	687b      	ldr	r3, [r7, #4]
    2a88:	681b      	ldr	r3, [r3, #0]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d001      	beq.n	2a92 <_calendar_enable+0x1a>
    2a8e:	2301      	movs	r3, #1
    2a90:	e000      	b.n	2a94 <_calendar_enable+0x1c>
    2a92:	2300      	movs	r3, #0
    2a94:	1c1a      	adds	r2, r3, #0
    2a96:	2301      	movs	r3, #1
    2a98:	4013      	ands	r3, r2
    2a9a:	b2db      	uxtb	r3, r3
    2a9c:	4907      	ldr	r1, [pc, #28]	; (2abc <_calendar_enable+0x44>)
    2a9e:	2263      	movs	r2, #99	; 0x63
    2aa0:	0018      	movs	r0, r3
    2aa2:	4b07      	ldr	r3, [pc, #28]	; (2ac0 <_calendar_enable+0x48>)
    2aa4:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    2aa6:	687b      	ldr	r3, [r7, #4]
    2aa8:	681b      	ldr	r3, [r3, #0]
    2aaa:	0018      	movs	r0, r3
    2aac:	4b05      	ldr	r3, [pc, #20]	; (2ac4 <_calendar_enable+0x4c>)
    2aae:	4798      	blx	r3

	return ERR_NONE;
    2ab0:	2300      	movs	r3, #0
}
    2ab2:	0018      	movs	r0, r3
    2ab4:	46bd      	mov	sp, r7
    2ab6:	b002      	add	sp, #8
    2ab8:	bd80      	pop	{r7, pc}
    2aba:	46c0      	nop			; (mov r8, r8)
    2abc:	00008568 	.word	0x00008568
    2ac0:	00001afd 	.word	0x00001afd
    2ac4:	000028fd 	.word	0x000028fd

00002ac8 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    2ac8:	b580      	push	{r7, lr}
    2aca:	b082      	sub	sp, #8
    2acc:	af00      	add	r7, sp, #0
    2ace:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    2ad0:	687b      	ldr	r3, [r7, #4]
    2ad2:	2b00      	cmp	r3, #0
    2ad4:	d005      	beq.n	2ae2 <_calendar_get_counter+0x1a>
    2ad6:	687b      	ldr	r3, [r7, #4]
    2ad8:	681b      	ldr	r3, [r3, #0]
    2ada:	2b00      	cmp	r3, #0
    2adc:	d001      	beq.n	2ae2 <_calendar_get_counter+0x1a>
    2ade:	2301      	movs	r3, #1
    2ae0:	e000      	b.n	2ae4 <_calendar_get_counter+0x1c>
    2ae2:	2300      	movs	r3, #0
    2ae4:	1c1a      	adds	r2, r3, #0
    2ae6:	2301      	movs	r3, #1
    2ae8:	4013      	ands	r3, r2
    2aea:	b2db      	uxtb	r3, r3
    2aec:	4907      	ldr	r1, [pc, #28]	; (2b0c <_calendar_get_counter+0x44>)
    2aee:	2287      	movs	r2, #135	; 0x87
    2af0:	0018      	movs	r0, r3
    2af2:	4b07      	ldr	r3, [pc, #28]	; (2b10 <_calendar_get_counter+0x48>)
    2af4:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    2af6:	687b      	ldr	r3, [r7, #4]
    2af8:	681b      	ldr	r3, [r3, #0]
    2afa:	0018      	movs	r0, r3
    2afc:	4b05      	ldr	r3, [pc, #20]	; (2b14 <_calendar_get_counter+0x4c>)
    2afe:	4798      	blx	r3
    2b00:	0003      	movs	r3, r0
}
    2b02:	0018      	movs	r0, r3
    2b04:	46bd      	mov	sp, r7
    2b06:	b002      	add	sp, #8
    2b08:	bd80      	pop	{r7, pc}
    2b0a:	46c0      	nop			; (mov r8, r8)
    2b0c:	00008568 	.word	0x00008568
    2b10:	00001afd 	.word	0x00001afd
    2b14:	000029b5 	.word	0x000029b5

00002b18 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    2b18:	b590      	push	{r4, r7, lr}
    2b1a:	b085      	sub	sp, #20
    2b1c:	af00      	add	r7, sp, #0
    2b1e:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2b20:	687b      	ldr	r3, [r7, #4]
    2b22:	681b      	ldr	r3, [r3, #0]
    2b24:	220e      	movs	r2, #14
    2b26:	18bc      	adds	r4, r7, r2
    2b28:	0018      	movs	r0, r3
    2b2a:	4b0c      	ldr	r3, [pc, #48]	; (2b5c <_rtc_interrupt_handler+0x44>)
    2b2c:	4798      	blx	r3
    2b2e:	0003      	movs	r3, r0
    2b30:	8023      	strh	r3, [r4, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    2b32:	230e      	movs	r3, #14
    2b34:	18fb      	adds	r3, r7, r3
    2b36:	881a      	ldrh	r2, [r3, #0]
    2b38:	2380      	movs	r3, #128	; 0x80
    2b3a:	005b      	lsls	r3, r3, #1
    2b3c:	4013      	ands	r3, r2
    2b3e:	d009      	beq.n	2b54 <_rtc_interrupt_handler+0x3c>
		dev->callback(dev);
    2b40:	687b      	ldr	r3, [r7, #4]
    2b42:	685b      	ldr	r3, [r3, #4]
    2b44:	687a      	ldr	r2, [r7, #4]
    2b46:	0010      	movs	r0, r2
    2b48:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2b4a:	687b      	ldr	r3, [r7, #4]
    2b4c:	681b      	ldr	r3, [r3, #0]
    2b4e:	0018      	movs	r0, r3
    2b50:	4b03      	ldr	r3, [pc, #12]	; (2b60 <_rtc_interrupt_handler+0x48>)
    2b52:	4798      	blx	r3
	}
}
    2b54:	46c0      	nop			; (mov r8, r8)
    2b56:	46bd      	mov	sp, r7
    2b58:	b005      	add	sp, #20
    2b5a:	bd90      	pop	{r4, r7, pc}
    2b5c:	000028b7 	.word	0x000028b7
    2b60:	0000289f 	.word	0x0000289f

00002b64 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2b64:	b580      	push	{r7, lr}
    2b66:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    2b68:	4b03      	ldr	r3, [pc, #12]	; (2b78 <RTC_Handler+0x14>)
    2b6a:	681b      	ldr	r3, [r3, #0]
    2b6c:	0018      	movs	r0, r3
    2b6e:	4b03      	ldr	r3, [pc, #12]	; (2b7c <RTC_Handler+0x18>)
    2b70:	4798      	blx	r3
}
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	46bd      	mov	sp, r7
    2b76:	bd80      	pop	{r7, pc}
    2b78:	20000048 	.word	0x20000048
    2b7c:	00002b19 	.word	0x00002b19

00002b80 <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    2b80:	b580      	push	{r7, lr}
    2b82:	b082      	sub	sp, #8
    2b84:	af00      	add	r7, sp, #0
    2b86:	6078      	str	r0, [r7, #4]
    2b88:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2b8a:	46c0      	nop			; (mov r8, r8)
    2b8c:	687b      	ldr	r3, [r7, #4]
    2b8e:	69db      	ldr	r3, [r3, #28]
    2b90:	683a      	ldr	r2, [r7, #0]
    2b92:	4013      	ands	r3, r2
    2b94:	d1fa      	bne.n	2b8c <hri_sercomusart_wait_for_sync+0xc>
	};
}
    2b96:	46c0      	nop			; (mov r8, r8)
    2b98:	46bd      	mov	sp, r7
    2b9a:	b002      	add	sp, #8
    2b9c:	bd80      	pop	{r7, pc}

00002b9e <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    2b9e:	b580      	push	{r7, lr}
    2ba0:	b082      	sub	sp, #8
    2ba2:	af00      	add	r7, sp, #0
    2ba4:	6078      	str	r0, [r7, #4]
    2ba6:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2ba8:	687b      	ldr	r3, [r7, #4]
    2baa:	69db      	ldr	r3, [r3, #28]
    2bac:	683a      	ldr	r2, [r7, #0]
    2bae:	4013      	ands	r3, r2
    2bb0:	1e5a      	subs	r2, r3, #1
    2bb2:	4193      	sbcs	r3, r2
    2bb4:	b2db      	uxtb	r3, r3
}
    2bb6:	0018      	movs	r0, r3
    2bb8:	46bd      	mov	sp, r7
    2bba:	b002      	add	sp, #8
    2bbc:	bd80      	pop	{r7, pc}

00002bbe <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    2bbe:	b580      	push	{r7, lr}
    2bc0:	b082      	sub	sp, #8
    2bc2:	af00      	add	r7, sp, #0
    2bc4:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2bc6:	687b      	ldr	r3, [r7, #4]
    2bc8:	7e1b      	ldrb	r3, [r3, #24]
    2bca:	b2db      	uxtb	r3, r3
    2bcc:	001a      	movs	r2, r3
    2bce:	2301      	movs	r3, #1
    2bd0:	4013      	ands	r3, r2
    2bd2:	1e5a      	subs	r2, r3, #1
    2bd4:	4193      	sbcs	r3, r2
    2bd6:	b2db      	uxtb	r3, r3
}
    2bd8:	0018      	movs	r0, r3
    2bda:	46bd      	mov	sp, r7
    2bdc:	b002      	add	sp, #8
    2bde:	bd80      	pop	{r7, pc}

00002be0 <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    2be0:	b580      	push	{r7, lr}
    2be2:	b082      	sub	sp, #8
    2be4:	af00      	add	r7, sp, #0
    2be6:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2be8:	687b      	ldr	r3, [r7, #4]
    2bea:	7e1b      	ldrb	r3, [r3, #24]
    2bec:	b2db      	uxtb	r3, r3
    2bee:	085b      	lsrs	r3, r3, #1
    2bf0:	2201      	movs	r2, #1
    2bf2:	4013      	ands	r3, r2
    2bf4:	1e5a      	subs	r2, r3, #1
    2bf6:	4193      	sbcs	r3, r2
    2bf8:	b2db      	uxtb	r3, r3
}
    2bfa:	0018      	movs	r0, r3
    2bfc:	46bd      	mov	sp, r7
    2bfe:	b002      	add	sp, #8
    2c00:	bd80      	pop	{r7, pc}

00002c02 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    2c02:	b580      	push	{r7, lr}
    2c04:	b082      	sub	sp, #8
    2c06:	af00      	add	r7, sp, #0
    2c08:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2c0a:	687b      	ldr	r3, [r7, #4]
    2c0c:	7e1b      	ldrb	r3, [r3, #24]
    2c0e:	b2db      	uxtb	r3, r3
    2c10:	089b      	lsrs	r3, r3, #2
    2c12:	2201      	movs	r2, #1
    2c14:	4013      	ands	r3, r2
    2c16:	1e5a      	subs	r2, r3, #1
    2c18:	4193      	sbcs	r3, r2
    2c1a:	b2db      	uxtb	r3, r3
}
    2c1c:	0018      	movs	r0, r3
    2c1e:	46bd      	mov	sp, r7
    2c20:	b002      	add	sp, #8
    2c22:	bd80      	pop	{r7, pc}

00002c24 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    2c24:	b580      	push	{r7, lr}
    2c26:	b082      	sub	sp, #8
    2c28:	af00      	add	r7, sp, #0
    2c2a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2c2c:	687b      	ldr	r3, [r7, #4]
    2c2e:	681b      	ldr	r3, [r3, #0]
    2c30:	2202      	movs	r2, #2
    2c32:	431a      	orrs	r2, r3
    2c34:	687b      	ldr	r3, [r7, #4]
    2c36:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2c38:	687b      	ldr	r3, [r7, #4]
    2c3a:	2103      	movs	r1, #3
    2c3c:	0018      	movs	r0, r3
    2c3e:	4b03      	ldr	r3, [pc, #12]	; (2c4c <hri_sercomusart_set_CTRLA_ENABLE_bit+0x28>)
    2c40:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2c42:	46c0      	nop			; (mov r8, r8)
    2c44:	46bd      	mov	sp, r7
    2c46:	b002      	add	sp, #8
    2c48:	bd80      	pop	{r7, pc}
    2c4a:	46c0      	nop			; (mov r8, r8)
    2c4c:	00002b81 	.word	0x00002b81

00002c50 <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2c50:	b580      	push	{r7, lr}
    2c52:	b082      	sub	sp, #8
    2c54:	af00      	add	r7, sp, #0
    2c56:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2c58:	687b      	ldr	r3, [r7, #4]
    2c5a:	681b      	ldr	r3, [r3, #0]
    2c5c:	2202      	movs	r2, #2
    2c5e:	4393      	bics	r3, r2
    2c60:	001a      	movs	r2, r3
    2c62:	687b      	ldr	r3, [r7, #4]
    2c64:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2c66:	687b      	ldr	r3, [r7, #4]
    2c68:	2103      	movs	r1, #3
    2c6a:	0018      	movs	r0, r3
    2c6c:	4b02      	ldr	r3, [pc, #8]	; (2c78 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x28>)
    2c6e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2c70:	46c0      	nop			; (mov r8, r8)
    2c72:	46bd      	mov	sp, r7
    2c74:	b002      	add	sp, #8
    2c76:	bd80      	pop	{r7, pc}
    2c78:	00002b81 	.word	0x00002b81

00002c7c <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    2c7c:	b580      	push	{r7, lr}
    2c7e:	b084      	sub	sp, #16
    2c80:	af00      	add	r7, sp, #0
    2c82:	6078      	str	r0, [r7, #4]
    2c84:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2c86:	687b      	ldr	r3, [r7, #4]
    2c88:	2103      	movs	r1, #3
    2c8a:	0018      	movs	r0, r3
    2c8c:	4b06      	ldr	r3, [pc, #24]	; (2ca8 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    2c8e:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	681b      	ldr	r3, [r3, #0]
    2c94:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2c96:	68fb      	ldr	r3, [r7, #12]
    2c98:	683a      	ldr	r2, [r7, #0]
    2c9a:	4013      	ands	r3, r2
    2c9c:	60fb      	str	r3, [r7, #12]
	return tmp;
    2c9e:	68fb      	ldr	r3, [r7, #12]
}
    2ca0:	0018      	movs	r0, r3
    2ca2:	46bd      	mov	sp, r7
    2ca4:	b004      	add	sp, #16
    2ca6:	bd80      	pop	{r7, pc}
    2ca8:	00002b81 	.word	0x00002b81

00002cac <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    2cac:	b580      	push	{r7, lr}
    2cae:	b082      	sub	sp, #8
    2cb0:	af00      	add	r7, sp, #0
    2cb2:	6078      	str	r0, [r7, #4]
    2cb4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2cb6:	687b      	ldr	r3, [r7, #4]
    2cb8:	683a      	ldr	r2, [r7, #0]
    2cba:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2cbc:	687b      	ldr	r3, [r7, #4]
    2cbe:	2103      	movs	r1, #3
    2cc0:	0018      	movs	r0, r3
    2cc2:	4b03      	ldr	r3, [pc, #12]	; (2cd0 <hri_sercomusart_write_CTRLA_reg+0x24>)
    2cc4:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	46bd      	mov	sp, r7
    2cca:	b002      	add	sp, #8
    2ccc:	bd80      	pop	{r7, pc}
    2cce:	46c0      	nop			; (mov r8, r8)
    2cd0:	00002b81 	.word	0x00002b81

00002cd4 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    2cd4:	b580      	push	{r7, lr}
    2cd6:	b082      	sub	sp, #8
    2cd8:	af00      	add	r7, sp, #0
    2cda:	6078      	str	r0, [r7, #4]
    2cdc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2cde:	687b      	ldr	r3, [r7, #4]
    2ce0:	683a      	ldr	r2, [r7, #0]
    2ce2:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    2ce4:	687b      	ldr	r3, [r7, #4]
    2ce6:	2107      	movs	r1, #7
    2ce8:	0018      	movs	r0, r3
    2cea:	4b03      	ldr	r3, [pc, #12]	; (2cf8 <hri_sercomusart_write_CTRLB_reg+0x24>)
    2cec:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	46bd      	mov	sp, r7
    2cf2:	b002      	add	sp, #8
    2cf4:	bd80      	pop	{r7, pc}
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	00002b81 	.word	0x00002b81

00002cfc <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    2cfc:	b580      	push	{r7, lr}
    2cfe:	b082      	sub	sp, #8
    2d00:	af00      	add	r7, sp, #0
    2d02:	6078      	str	r0, [r7, #4]
    2d04:	000a      	movs	r2, r1
    2d06:	1cbb      	adds	r3, r7, #2
    2d08:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    2d0a:	687b      	ldr	r3, [r7, #4]
    2d0c:	1cba      	adds	r2, r7, #2
    2d0e:	8812      	ldrh	r2, [r2, #0]
    2d10:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2d12:	46c0      	nop			; (mov r8, r8)
    2d14:	46bd      	mov	sp, r7
    2d16:	b002      	add	sp, #8
    2d18:	bd80      	pop	{r7, pc}

00002d1a <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    2d1a:	b580      	push	{r7, lr}
    2d1c:	b082      	sub	sp, #8
    2d1e:	af00      	add	r7, sp, #0
    2d20:	6078      	str	r0, [r7, #4]
    2d22:	000a      	movs	r2, r1
    2d24:	1cfb      	adds	r3, r7, #3
    2d26:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    2d28:	687b      	ldr	r3, [r7, #4]
    2d2a:	1cfa      	adds	r2, r7, #3
    2d2c:	7812      	ldrb	r2, [r2, #0]
    2d2e:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2d30:	46c0      	nop			; (mov r8, r8)
    2d32:	46bd      	mov	sp, r7
    2d34:	b002      	add	sp, #8
    2d36:	bd80      	pop	{r7, pc}

00002d38 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    2d38:	b580      	push	{r7, lr}
    2d3a:	b082      	sub	sp, #8
    2d3c:	af00      	add	r7, sp, #0
    2d3e:	6078      	str	r0, [r7, #4]
    2d40:	000a      	movs	r2, r1
    2d42:	1cbb      	adds	r3, r7, #2
    2d44:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    2d46:	687b      	ldr	r3, [r7, #4]
    2d48:	1cba      	adds	r2, r7, #2
    2d4a:	8812      	ldrh	r2, [r2, #0]
    2d4c:	851a      	strh	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2d4e:	46c0      	nop			; (mov r8, r8)
    2d50:	46bd      	mov	sp, r7
    2d52:	b002      	add	sp, #8
    2d54:	bd80      	pop	{r7, pc}

00002d56 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    2d56:	b580      	push	{r7, lr}
    2d58:	b082      	sub	sp, #8
    2d5a:	af00      	add	r7, sp, #0
    2d5c:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    2d5e:	687b      	ldr	r3, [r7, #4]
    2d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2d62:	b29b      	uxth	r3, r3
}
    2d64:	0018      	movs	r0, r3
    2d66:	46bd      	mov	sp, r7
    2d68:	b002      	add	sp, #8
    2d6a:	bd80      	pop	{r7, pc}

00002d6c <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    2d6c:	b580      	push	{r7, lr}
    2d6e:	b082      	sub	sp, #8
    2d70:	af00      	add	r7, sp, #0
    2d72:	6078      	str	r0, [r7, #4]
    2d74:	000a      	movs	r2, r1
    2d76:	1cfb      	adds	r3, r7, #3
    2d78:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2d7a:	687b      	ldr	r3, [r7, #4]
    2d7c:	1cfa      	adds	r2, r7, #3
    2d7e:	2130      	movs	r1, #48	; 0x30
    2d80:	7812      	ldrb	r2, [r2, #0]
    2d82:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2d84:	46c0      	nop			; (mov r8, r8)
    2d86:	46bd      	mov	sp, r7
    2d88:	b002      	add	sp, #8
    2d8a:	bd80      	pop	{r7, pc}

00002d8c <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    2d8c:	b580      	push	{r7, lr}
    2d8e:	b082      	sub	sp, #8
    2d90:	af00      	add	r7, sp, #0
    2d92:	6078      	str	r0, [r7, #4]
    2d94:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	1e5a      	subs	r2, r3, #1
    2d9a:	4193      	sbcs	r3, r2
    2d9c:	b2db      	uxtb	r3, r3
    2d9e:	4908      	ldr	r1, [pc, #32]	; (2dc0 <_usart_sync_init+0x34>)
    2da0:	22b4      	movs	r2, #180	; 0xb4
    2da2:	0018      	movs	r0, r3
    2da4:	4b07      	ldr	r3, [pc, #28]	; (2dc4 <_usart_sync_init+0x38>)
    2da6:	4798      	blx	r3

	device->hw = hw;
    2da8:	687b      	ldr	r3, [r7, #4]
    2daa:	683a      	ldr	r2, [r7, #0]
    2dac:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    2dae:	683b      	ldr	r3, [r7, #0]
    2db0:	0018      	movs	r0, r3
    2db2:	4b05      	ldr	r3, [pc, #20]	; (2dc8 <_usart_sync_init+0x3c>)
    2db4:	4798      	blx	r3
    2db6:	0003      	movs	r3, r0
}
    2db8:	0018      	movs	r0, r3
    2dba:	46bd      	mov	sp, r7
    2dbc:	b002      	add	sp, #8
    2dbe:	bd80      	pop	{r7, pc}
    2dc0:	00008580 	.word	0x00008580
    2dc4:	00001afd 	.word	0x00001afd
    2dc8:	00002f45 	.word	0x00002f45

00002dcc <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    2dcc:	b580      	push	{r7, lr}
    2dce:	b082      	sub	sp, #8
    2dd0:	af00      	add	r7, sp, #0
    2dd2:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	681b      	ldr	r3, [r3, #0]
    2dd8:	0018      	movs	r0, r3
    2dda:	4b03      	ldr	r3, [pc, #12]	; (2de8 <_usart_sync_enable+0x1c>)
    2ddc:	4798      	blx	r3
}
    2dde:	46c0      	nop			; (mov r8, r8)
    2de0:	46bd      	mov	sp, r7
    2de2:	b002      	add	sp, #8
    2de4:	bd80      	pop	{r7, pc}
    2de6:	46c0      	nop			; (mov r8, r8)
    2de8:	00002c25 	.word	0x00002c25

00002dec <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    2dec:	b580      	push	{r7, lr}
    2dee:	b082      	sub	sp, #8
    2df0:	af00      	add	r7, sp, #0
    2df2:	6078      	str	r0, [r7, #4]
    2df4:	000a      	movs	r2, r1
    2df6:	1cfb      	adds	r3, r7, #3
    2df8:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2dfa:	687b      	ldr	r3, [r7, #4]
    2dfc:	681a      	ldr	r2, [r3, #0]
    2dfe:	1cfb      	adds	r3, r7, #3
    2e00:	781b      	ldrb	r3, [r3, #0]
    2e02:	b29b      	uxth	r3, r3
    2e04:	0019      	movs	r1, r3
    2e06:	0010      	movs	r0, r2
    2e08:	4b02      	ldr	r3, [pc, #8]	; (2e14 <_usart_sync_write_byte+0x28>)
    2e0a:	4798      	blx	r3
}
    2e0c:	46c0      	nop			; (mov r8, r8)
    2e0e:	46bd      	mov	sp, r7
    2e10:	b002      	add	sp, #8
    2e12:	bd80      	pop	{r7, pc}
    2e14:	00002d39 	.word	0x00002d39

00002e18 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    2e18:	b580      	push	{r7, lr}
    2e1a:	b082      	sub	sp, #8
    2e1c:	af00      	add	r7, sp, #0
    2e1e:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    2e20:	687b      	ldr	r3, [r7, #4]
    2e22:	681b      	ldr	r3, [r3, #0]
    2e24:	0018      	movs	r0, r3
    2e26:	4b04      	ldr	r3, [pc, #16]	; (2e38 <_usart_sync_read_byte+0x20>)
    2e28:	4798      	blx	r3
    2e2a:	0003      	movs	r3, r0
    2e2c:	b2db      	uxtb	r3, r3
}
    2e2e:	0018      	movs	r0, r3
    2e30:	46bd      	mov	sp, r7
    2e32:	b002      	add	sp, #8
    2e34:	bd80      	pop	{r7, pc}
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	00002d57 	.word	0x00002d57

00002e3c <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    2e3c:	b580      	push	{r7, lr}
    2e3e:	b082      	sub	sp, #8
    2e40:	af00      	add	r7, sp, #0
    2e42:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    2e44:	687b      	ldr	r3, [r7, #4]
    2e46:	681b      	ldr	r3, [r3, #0]
    2e48:	0018      	movs	r0, r3
    2e4a:	4b03      	ldr	r3, [pc, #12]	; (2e58 <_usart_sync_is_ready_to_send+0x1c>)
    2e4c:	4798      	blx	r3
    2e4e:	0003      	movs	r3, r0
}
    2e50:	0018      	movs	r0, r3
    2e52:	46bd      	mov	sp, r7
    2e54:	b002      	add	sp, #8
    2e56:	bd80      	pop	{r7, pc}
    2e58:	00002bbf 	.word	0x00002bbf

00002e5c <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    2e5c:	b580      	push	{r7, lr}
    2e5e:	b082      	sub	sp, #8
    2e60:	af00      	add	r7, sp, #0
    2e62:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    2e64:	687b      	ldr	r3, [r7, #4]
    2e66:	681b      	ldr	r3, [r3, #0]
    2e68:	0018      	movs	r0, r3
    2e6a:	4b03      	ldr	r3, [pc, #12]	; (2e78 <_usart_sync_is_transmit_done+0x1c>)
    2e6c:	4798      	blx	r3
    2e6e:	0003      	movs	r3, r0
}
    2e70:	0018      	movs	r0, r3
    2e72:	46bd      	mov	sp, r7
    2e74:	b002      	add	sp, #8
    2e76:	bd80      	pop	{r7, pc}
    2e78:	00002be1 	.word	0x00002be1

00002e7c <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    2e7c:	b580      	push	{r7, lr}
    2e7e:	b082      	sub	sp, #8
    2e80:	af00      	add	r7, sp, #0
    2e82:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    2e84:	687b      	ldr	r3, [r7, #4]
    2e86:	681b      	ldr	r3, [r3, #0]
    2e88:	0018      	movs	r0, r3
    2e8a:	4b03      	ldr	r3, [pc, #12]	; (2e98 <_usart_sync_is_byte_received+0x1c>)
    2e8c:	4798      	blx	r3
    2e8e:	0003      	movs	r3, r0
}
    2e90:	0018      	movs	r0, r3
    2e92:	46bd      	mov	sp, r7
    2e94:	b002      	add	sp, #8
    2e96:	bd80      	pop	{r7, pc}
    2e98:	00002c03 	.word	0x00002c03

00002e9c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2e9c:	b580      	push	{r7, lr}
    2e9e:	b082      	sub	sp, #8
    2ea0:	af00      	add	r7, sp, #0
    2ea2:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2ea4:	687b      	ldr	r3, [r7, #4]
    2ea6:	4a04      	ldr	r2, [pc, #16]	; (2eb8 <_sercom_get_hardware_index+0x1c>)
    2ea8:	4694      	mov	ip, r2
    2eaa:	4463      	add	r3, ip
    2eac:	0a9b      	lsrs	r3, r3, #10
    2eae:	b2db      	uxtb	r3, r3
}
    2eb0:	0018      	movs	r0, r3
    2eb2:	46bd      	mov	sp, r7
    2eb4:	b002      	add	sp, #8
    2eb6:	bd80      	pop	{r7, pc}
    2eb8:	bdfffc00 	.word	0xbdfffc00

00002ebc <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    2ebc:	b590      	push	{r4, r7, lr}
    2ebe:	b085      	sub	sp, #20
    2ec0:	af00      	add	r7, sp, #0
    2ec2:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2ec4:	230e      	movs	r3, #14
    2ec6:	18fc      	adds	r4, r7, r3
    2ec8:	687b      	ldr	r3, [r7, #4]
    2eca:	0018      	movs	r0, r3
    2ecc:	4b18      	ldr	r3, [pc, #96]	; (2f30 <_get_sercom_index+0x74>)
    2ece:	4798      	blx	r3
    2ed0:	0003      	movs	r3, r0
    2ed2:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2ed4:	230f      	movs	r3, #15
    2ed6:	18fb      	adds	r3, r7, r3
    2ed8:	2200      	movs	r2, #0
    2eda:	701a      	strb	r2, [r3, #0]
    2edc:	e018      	b.n	2f10 <_get_sercom_index+0x54>
		if (_usarts[i].number == sercom_offset) {
    2ede:	230f      	movs	r3, #15
    2ee0:	18fb      	adds	r3, r7, r3
    2ee2:	781a      	ldrb	r2, [r3, #0]
    2ee4:	4913      	ldr	r1, [pc, #76]	; (2f34 <_get_sercom_index+0x78>)
    2ee6:	0013      	movs	r3, r2
    2ee8:	009b      	lsls	r3, r3, #2
    2eea:	189b      	adds	r3, r3, r2
    2eec:	009b      	lsls	r3, r3, #2
    2eee:	5c5b      	ldrb	r3, [r3, r1]
    2ef0:	220e      	movs	r2, #14
    2ef2:	18ba      	adds	r2, r7, r2
    2ef4:	7812      	ldrb	r2, [r2, #0]
    2ef6:	429a      	cmp	r2, r3
    2ef8:	d103      	bne.n	2f02 <_get_sercom_index+0x46>
			return i;
    2efa:	230f      	movs	r3, #15
    2efc:	18fb      	adds	r3, r7, r3
    2efe:	781b      	ldrb	r3, [r3, #0]
    2f00:	e012      	b.n	2f28 <_get_sercom_index+0x6c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2f02:	230f      	movs	r3, #15
    2f04:	18fb      	adds	r3, r7, r3
    2f06:	781a      	ldrb	r2, [r3, #0]
    2f08:	230f      	movs	r3, #15
    2f0a:	18fb      	adds	r3, r7, r3
    2f0c:	3201      	adds	r2, #1
    2f0e:	701a      	strb	r2, [r3, #0]
    2f10:	230f      	movs	r3, #15
    2f12:	18fb      	adds	r3, r7, r3
    2f14:	781b      	ldrb	r3, [r3, #0]
    2f16:	2b00      	cmp	r3, #0
    2f18:	d0e1      	beq.n	2ede <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    2f1a:	4a07      	ldr	r2, [pc, #28]	; (2f38 <_get_sercom_index+0x7c>)
    2f1c:	4b07      	ldr	r3, [pc, #28]	; (2f3c <_get_sercom_index+0x80>)
    2f1e:	0019      	movs	r1, r3
    2f20:	2000      	movs	r0, #0
    2f22:	4b07      	ldr	r3, [pc, #28]	; (2f40 <_get_sercom_index+0x84>)
    2f24:	4798      	blx	r3
	return 0;
    2f26:	2300      	movs	r3, #0
}
    2f28:	0018      	movs	r0, r3
    2f2a:	46bd      	mov	sp, r7
    2f2c:	b005      	add	sp, #20
    2f2e:	bd90      	pop	{r4, r7, pc}
    2f30:	00002e9d 	.word	0x00002e9d
    2f34:	20000000 	.word	0x20000000
    2f38:	0000023a 	.word	0x0000023a
    2f3c:	00008580 	.word	0x00008580
    2f40:	00001afd 	.word	0x00001afd

00002f44 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    2f44:	b590      	push	{r4, r7, lr}
    2f46:	b085      	sub	sp, #20
    2f48:	af00      	add	r7, sp, #0
    2f4a:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    2f4c:	230f      	movs	r3, #15
    2f4e:	18fc      	adds	r4, r7, r3
    2f50:	687b      	ldr	r3, [r7, #4]
    2f52:	0018      	movs	r0, r3
    2f54:	4b6f      	ldr	r3, [pc, #444]	; (3114 <_usart_init+0x1d0>)
    2f56:	4798      	blx	r3
    2f58:	0003      	movs	r3, r0
    2f5a:	7023      	strb	r3, [r4, #0]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2f5c:	687b      	ldr	r3, [r7, #4]
    2f5e:	2101      	movs	r1, #1
    2f60:	0018      	movs	r0, r3
    2f62:	4b6d      	ldr	r3, [pc, #436]	; (3118 <_usart_init+0x1d4>)
    2f64:	4798      	blx	r3
    2f66:	0003      	movs	r3, r0
    2f68:	001a      	movs	r2, r3
    2f6a:	2301      	movs	r3, #1
    2f6c:	4053      	eors	r3, r2
    2f6e:	b2db      	uxtb	r3, r3
    2f70:	2b00      	cmp	r3, #0
    2f72:	d025      	beq.n	2fc0 <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    2f74:	230f      	movs	r3, #15
    2f76:	18fb      	adds	r3, r7, r3
    2f78:	781a      	ldrb	r2, [r3, #0]
    2f7a:	4968      	ldr	r1, [pc, #416]	; (311c <_usart_init+0x1d8>)
    2f7c:	0013      	movs	r3, r2
    2f7e:	009b      	lsls	r3, r3, #2
    2f80:	189b      	adds	r3, r3, r2
    2f82:	009b      	lsls	r3, r3, #2
    2f84:	18cb      	adds	r3, r1, r3
    2f86:	3304      	adds	r3, #4
    2f88:	681b      	ldr	r3, [r3, #0]
    2f8a:	221c      	movs	r2, #28
    2f8c:	4013      	ands	r3, r2
    2f8e:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2f90:	687b      	ldr	r3, [r7, #4]
    2f92:	2102      	movs	r1, #2
    2f94:	0018      	movs	r0, r3
    2f96:	4b62      	ldr	r3, [pc, #392]	; (3120 <_usart_init+0x1dc>)
    2f98:	4798      	blx	r3
    2f9a:	1e03      	subs	r3, r0, #0
    2f9c:	d008      	beq.n	2fb0 <_usart_init+0x6c>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    2f9e:	687b      	ldr	r3, [r7, #4]
    2fa0:	0018      	movs	r0, r3
    2fa2:	4b60      	ldr	r3, [pc, #384]	; (3124 <_usart_init+0x1e0>)
    2fa4:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    2fa6:	687b      	ldr	r3, [r7, #4]
    2fa8:	2102      	movs	r1, #2
    2faa:	0018      	movs	r0, r3
    2fac:	4b5e      	ldr	r3, [pc, #376]	; (3128 <_usart_init+0x1e4>)
    2fae:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2fb0:	68bb      	ldr	r3, [r7, #8]
    2fb2:	2201      	movs	r2, #1
    2fb4:	431a      	orrs	r2, r3
    2fb6:	687b      	ldr	r3, [r7, #4]
    2fb8:	0011      	movs	r1, r2
    2fba:	0018      	movs	r0, r3
    2fbc:	4b5b      	ldr	r3, [pc, #364]	; (312c <_usart_init+0x1e8>)
    2fbe:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    2fc0:	687b      	ldr	r3, [r7, #4]
    2fc2:	2101      	movs	r1, #1
    2fc4:	0018      	movs	r0, r3
    2fc6:	4b58      	ldr	r3, [pc, #352]	; (3128 <_usart_init+0x1e4>)
    2fc8:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2fca:	230f      	movs	r3, #15
    2fcc:	18fb      	adds	r3, r7, r3
    2fce:	781a      	ldrb	r2, [r3, #0]
    2fd0:	4952      	ldr	r1, [pc, #328]	; (311c <_usart_init+0x1d8>)
    2fd2:	0013      	movs	r3, r2
    2fd4:	009b      	lsls	r3, r3, #2
    2fd6:	189b      	adds	r3, r3, r2
    2fd8:	009b      	lsls	r3, r3, #2
    2fda:	18cb      	adds	r3, r1, r3
    2fdc:	3304      	adds	r3, #4
    2fde:	681a      	ldr	r2, [r3, #0]
    2fe0:	687b      	ldr	r3, [r7, #4]
    2fe2:	0011      	movs	r1, r2
    2fe4:	0018      	movs	r0, r3
    2fe6:	4b51      	ldr	r3, [pc, #324]	; (312c <_usart_init+0x1e8>)
    2fe8:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2fea:	230f      	movs	r3, #15
    2fec:	18fb      	adds	r3, r7, r3
    2fee:	781a      	ldrb	r2, [r3, #0]
    2ff0:	494a      	ldr	r1, [pc, #296]	; (311c <_usart_init+0x1d8>)
    2ff2:	0013      	movs	r3, r2
    2ff4:	009b      	lsls	r3, r3, #2
    2ff6:	189b      	adds	r3, r3, r2
    2ff8:	009b      	lsls	r3, r3, #2
    2ffa:	18cb      	adds	r3, r1, r3
    2ffc:	3308      	adds	r3, #8
    2ffe:	681a      	ldr	r2, [r3, #0]
    3000:	687b      	ldr	r3, [r7, #4]
    3002:	0011      	movs	r1, r2
    3004:	0018      	movs	r0, r3
    3006:	4b4a      	ldr	r3, [pc, #296]	; (3130 <_usart_init+0x1ec>)
    3008:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    300a:	230f      	movs	r3, #15
    300c:	18fb      	adds	r3, r7, r3
    300e:	781a      	ldrb	r2, [r3, #0]
    3010:	4942      	ldr	r1, [pc, #264]	; (311c <_usart_init+0x1d8>)
    3012:	0013      	movs	r3, r2
    3014:	009b      	lsls	r3, r3, #2
    3016:	189b      	adds	r3, r3, r2
    3018:	009b      	lsls	r3, r3, #2
    301a:	18cb      	adds	r3, r1, r3
    301c:	3304      	adds	r3, #4
    301e:	681a      	ldr	r2, [r3, #0]
    3020:	2380      	movs	r3, #128	; 0x80
    3022:	019b      	lsls	r3, r3, #6
    3024:	4013      	ands	r3, r2
    3026:	d10e      	bne.n	3046 <_usart_init+0x102>
    3028:	230f      	movs	r3, #15
    302a:	18fb      	adds	r3, r7, r3
    302c:	781a      	ldrb	r2, [r3, #0]
    302e:	493b      	ldr	r1, [pc, #236]	; (311c <_usart_init+0x1d8>)
    3030:	0013      	movs	r3, r2
    3032:	009b      	lsls	r3, r3, #2
    3034:	189b      	adds	r3, r3, r2
    3036:	009b      	lsls	r3, r3, #2
    3038:	18cb      	adds	r3, r1, r3
    303a:	3304      	adds	r3, #4
    303c:	681a      	ldr	r2, [r3, #0]
    303e:	23c0      	movs	r3, #192	; 0xc0
    3040:	01db      	lsls	r3, r3, #7
    3042:	4013      	ands	r3, r2
    3044:	d030      	beq.n	30a8 <_usart_init+0x164>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3046:	230f      	movs	r3, #15
    3048:	18fb      	adds	r3, r7, r3
    304a:	781a      	ldrb	r2, [r3, #0]
    304c:	4933      	ldr	r1, [pc, #204]	; (311c <_usart_init+0x1d8>)
    304e:	0013      	movs	r3, r2
    3050:	009b      	lsls	r3, r3, #2
    3052:	189b      	adds	r3, r3, r2
    3054:	009b      	lsls	r3, r3, #2
    3056:	18cb      	adds	r3, r1, r3
    3058:	330c      	adds	r3, #12
    305a:	881b      	ldrh	r3, [r3, #0]
    305c:	04db      	lsls	r3, r3, #19
    305e:	0cdb      	lsrs	r3, r3, #19
    3060:	b299      	uxth	r1, r3
    3062:	687a      	ldr	r2, [r7, #4]
    3064:	8993      	ldrh	r3, [r2, #12]
    3066:	04c9      	lsls	r1, r1, #19
    3068:	0cc8      	lsrs	r0, r1, #19
    306a:	0b5b      	lsrs	r3, r3, #13
    306c:	035b      	lsls	r3, r3, #13
    306e:	1c19      	adds	r1, r3, #0
    3070:	1c03      	adds	r3, r0, #0
    3072:	430b      	orrs	r3, r1
    3074:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3076:	230f      	movs	r3, #15
    3078:	18fb      	adds	r3, r7, r3
    307a:	781a      	ldrb	r2, [r3, #0]
    307c:	4927      	ldr	r1, [pc, #156]	; (311c <_usart_init+0x1d8>)
    307e:	0013      	movs	r3, r2
    3080:	009b      	lsls	r3, r3, #2
    3082:	189b      	adds	r3, r3, r2
    3084:	009b      	lsls	r3, r3, #2
    3086:	18cb      	adds	r3, r1, r3
    3088:	330e      	adds	r3, #14
    308a:	781b      	ldrb	r3, [r3, #0]
    308c:	1c1a      	adds	r2, r3, #0
    308e:	2307      	movs	r3, #7
    3090:	4013      	ands	r3, r2
    3092:	b2d9      	uxtb	r1, r3
    3094:	687a      	ldr	r2, [r7, #4]
    3096:	8993      	ldrh	r3, [r2, #12]
    3098:	0348      	lsls	r0, r1, #13
    309a:	04db      	lsls	r3, r3, #19
    309c:	0cdb      	lsrs	r3, r3, #19
    309e:	1c19      	adds	r1, r3, #0
    30a0:	1c03      	adds	r3, r0, #0
    30a2:	430b      	orrs	r3, r1
    30a4:	8193      	strh	r3, [r2, #12]
    30a6:	e00f      	b.n	30c8 <_usart_init+0x184>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    30a8:	230f      	movs	r3, #15
    30aa:	18fb      	adds	r3, r7, r3
    30ac:	781a      	ldrb	r2, [r3, #0]
    30ae:	491b      	ldr	r1, [pc, #108]	; (311c <_usart_init+0x1d8>)
    30b0:	0013      	movs	r3, r2
    30b2:	009b      	lsls	r3, r3, #2
    30b4:	189b      	adds	r3, r3, r2
    30b6:	009b      	lsls	r3, r3, #2
    30b8:	18cb      	adds	r3, r1, r3
    30ba:	330c      	adds	r3, #12
    30bc:	881a      	ldrh	r2, [r3, #0]
    30be:	687b      	ldr	r3, [r7, #4]
    30c0:	0011      	movs	r1, r2
    30c2:	0018      	movs	r0, r3
    30c4:	4b1b      	ldr	r3, [pc, #108]	; (3134 <_usart_init+0x1f0>)
    30c6:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    30c8:	230f      	movs	r3, #15
    30ca:	18fb      	adds	r3, r7, r3
    30cc:	781a      	ldrb	r2, [r3, #0]
    30ce:	4913      	ldr	r1, [pc, #76]	; (311c <_usart_init+0x1d8>)
    30d0:	0013      	movs	r3, r2
    30d2:	009b      	lsls	r3, r3, #2
    30d4:	189b      	adds	r3, r3, r2
    30d6:	009b      	lsls	r3, r3, #2
    30d8:	18cb      	adds	r3, r1, r3
    30da:	330f      	adds	r3, #15
    30dc:	781a      	ldrb	r2, [r3, #0]
    30de:	687b      	ldr	r3, [r7, #4]
    30e0:	0011      	movs	r1, r2
    30e2:	0018      	movs	r0, r3
    30e4:	4b14      	ldr	r3, [pc, #80]	; (3138 <_usart_init+0x1f4>)
    30e6:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    30e8:	230f      	movs	r3, #15
    30ea:	18fb      	adds	r3, r7, r3
    30ec:	781a      	ldrb	r2, [r3, #0]
    30ee:	490b      	ldr	r1, [pc, #44]	; (311c <_usart_init+0x1d8>)
    30f0:	0013      	movs	r3, r2
    30f2:	009b      	lsls	r3, r3, #2
    30f4:	189b      	adds	r3, r3, r2
    30f6:	009b      	lsls	r3, r3, #2
    30f8:	18cb      	adds	r3, r1, r3
    30fa:	3310      	adds	r3, #16
    30fc:	781a      	ldrb	r2, [r3, #0]
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	0011      	movs	r1, r2
    3102:	0018      	movs	r0, r3
    3104:	4b0d      	ldr	r3, [pc, #52]	; (313c <_usart_init+0x1f8>)
    3106:	4798      	blx	r3

	return ERR_NONE;
    3108:	2300      	movs	r3, #0
}
    310a:	0018      	movs	r0, r3
    310c:	46bd      	mov	sp, r7
    310e:	b005      	add	sp, #20
    3110:	bd90      	pop	{r4, r7, pc}
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	00002ebd 	.word	0x00002ebd
    3118:	00002b9f 	.word	0x00002b9f
    311c:	20000000 	.word	0x20000000
    3120:	00002c7d 	.word	0x00002c7d
    3124:	00002c51 	.word	0x00002c51
    3128:	00002b81 	.word	0x00002b81
    312c:	00002cad 	.word	0x00002cad
    3130:	00002cd5 	.word	0x00002cd5
    3134:	00002cfd 	.word	0x00002cfd
    3138:	00002d1b 	.word	0x00002d1b
    313c:	00002d6d 	.word	0x00002d6d

00003140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    3140:	b580      	push	{r7, lr}
    3142:	b082      	sub	sp, #8
    3144:	af00      	add	r7, sp, #0
    3146:	0002      	movs	r2, r0
    3148:	1dfb      	adds	r3, r7, #7
    314a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    314c:	1dfb      	adds	r3, r7, #7
    314e:	781b      	ldrb	r3, [r3, #0]
    3150:	2b7f      	cmp	r3, #127	; 0x7f
    3152:	d809      	bhi.n	3168 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3154:	4b06      	ldr	r3, [pc, #24]	; (3170 <__NVIC_EnableIRQ+0x30>)
    3156:	1dfa      	adds	r2, r7, #7
    3158:	7812      	ldrb	r2, [r2, #0]
    315a:	0011      	movs	r1, r2
    315c:	221f      	movs	r2, #31
    315e:	400a      	ands	r2, r1
    3160:	2101      	movs	r1, #1
    3162:	4091      	lsls	r1, r2
    3164:	000a      	movs	r2, r1
    3166:	601a      	str	r2, [r3, #0]
  }
}
    3168:	46c0      	nop			; (mov r8, r8)
    316a:	46bd      	mov	sp, r7
    316c:	b002      	add	sp, #8
    316e:	bd80      	pop	{r7, pc}
    3170:	e000e100 	.word	0xe000e100

00003174 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3174:	b580      	push	{r7, lr}
    3176:	b082      	sub	sp, #8
    3178:	af00      	add	r7, sp, #0
    317a:	0002      	movs	r2, r0
    317c:	1dfb      	adds	r3, r7, #7
    317e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    3180:	1dfb      	adds	r3, r7, #7
    3182:	781b      	ldrb	r3, [r3, #0]
    3184:	2b7f      	cmp	r3, #127	; 0x7f
    3186:	d80e      	bhi.n	31a6 <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3188:	4909      	ldr	r1, [pc, #36]	; (31b0 <__NVIC_DisableIRQ+0x3c>)
    318a:	1dfb      	adds	r3, r7, #7
    318c:	781b      	ldrb	r3, [r3, #0]
    318e:	001a      	movs	r2, r3
    3190:	231f      	movs	r3, #31
    3192:	4013      	ands	r3, r2
    3194:	2201      	movs	r2, #1
    3196:	409a      	lsls	r2, r3
    3198:	0013      	movs	r3, r2
    319a:	2280      	movs	r2, #128	; 0x80
    319c:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    319e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31a2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    31a6:	46c0      	nop			; (mov r8, r8)
    31a8:	46bd      	mov	sp, r7
    31aa:	b002      	add	sp, #8
    31ac:	bd80      	pop	{r7, pc}
    31ae:	46c0      	nop			; (mov r8, r8)
    31b0:	e000e100 	.word	0xe000e100

000031b4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    31b4:	b580      	push	{r7, lr}
    31b6:	b082      	sub	sp, #8
    31b8:	af00      	add	r7, sp, #0
    31ba:	0002      	movs	r2, r0
    31bc:	1dfb      	adds	r3, r7, #7
    31be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    31c0:	1dfb      	adds	r3, r7, #7
    31c2:	781b      	ldrb	r3, [r3, #0]
    31c4:	2b7f      	cmp	r3, #127	; 0x7f
    31c6:	d80a      	bhi.n	31de <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31c8:	4907      	ldr	r1, [pc, #28]	; (31e8 <__NVIC_ClearPendingIRQ+0x34>)
    31ca:	1dfb      	adds	r3, r7, #7
    31cc:	781b      	ldrb	r3, [r3, #0]
    31ce:	001a      	movs	r2, r3
    31d0:	231f      	movs	r3, #31
    31d2:	4013      	ands	r3, r2
    31d4:	2201      	movs	r2, #1
    31d6:	409a      	lsls	r2, r3
    31d8:	23c0      	movs	r3, #192	; 0xc0
    31da:	005b      	lsls	r3, r3, #1
    31dc:	50ca      	str	r2, [r1, r3]
  }
}
    31de:	46c0      	nop			; (mov r8, r8)
    31e0:	46bd      	mov	sp, r7
    31e2:	b002      	add	sp, #8
    31e4:	bd80      	pop	{r7, pc}
    31e6:	46c0      	nop			; (mov r8, r8)
    31e8:	e000e100 	.word	0xe000e100

000031ec <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    31ec:	b580      	push	{r7, lr}
    31ee:	b082      	sub	sp, #8
    31f0:	af00      	add	r7, sp, #0
    31f2:	6078      	str	r0, [r7, #4]
    31f4:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    31f6:	46c0      	nop			; (mov r8, r8)
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	691b      	ldr	r3, [r3, #16]
    31fc:	683a      	ldr	r2, [r7, #0]
    31fe:	4013      	ands	r3, r2
    3200:	d1fa      	bne.n	31f8 <hri_tc_wait_for_sync+0xc>
	};
}
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	46bd      	mov	sp, r7
    3206:	b002      	add	sp, #8
    3208:	bd80      	pop	{r7, pc}

0000320a <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    320a:	b580      	push	{r7, lr}
    320c:	b082      	sub	sp, #8
    320e:	af00      	add	r7, sp, #0
    3210:	6078      	str	r0, [r7, #4]
    3212:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	691b      	ldr	r3, [r3, #16]
    3218:	683a      	ldr	r2, [r7, #0]
    321a:	4013      	ands	r3, r2
    321c:	1e5a      	subs	r2, r3, #1
    321e:	4193      	sbcs	r3, r2
    3220:	b2db      	uxtb	r3, r3
}
    3222:	0018      	movs	r0, r3
    3224:	46bd      	mov	sp, r7
    3226:	b002      	add	sp, #8
    3228:	bd80      	pop	{r7, pc}

0000322a <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    322a:	b580      	push	{r7, lr}
    322c:	b082      	sub	sp, #8
    322e:	af00      	add	r7, sp, #0
    3230:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    3232:	687b      	ldr	r3, [r7, #4]
    3234:	7a9b      	ldrb	r3, [r3, #10]
    3236:	b2db      	uxtb	r3, r3
    3238:	001a      	movs	r2, r3
    323a:	2301      	movs	r3, #1
    323c:	4013      	ands	r3, r2
    323e:	1e5a      	subs	r2, r3, #1
    3240:	4193      	sbcs	r3, r2
    3242:	b2db      	uxtb	r3, r3
}
    3244:	0018      	movs	r0, r3
    3246:	46bd      	mov	sp, r7
    3248:	b002      	add	sp, #8
    324a:	bd80      	pop	{r7, pc}

0000324c <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    324c:	b580      	push	{r7, lr}
    324e:	b082      	sub	sp, #8
    3250:	af00      	add	r7, sp, #0
    3252:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    3254:	687b      	ldr	r3, [r7, #4]
    3256:	2201      	movs	r2, #1
    3258:	729a      	strb	r2, [r3, #10]
}
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	46bd      	mov	sp, r7
    325e:	b002      	add	sp, #8
    3260:	bd80      	pop	{r7, pc}

00003262 <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    3262:	b580      	push	{r7, lr}
    3264:	b082      	sub	sp, #8
    3266:	af00      	add	r7, sp, #0
    3268:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    326a:	687b      	ldr	r3, [r7, #4]
    326c:	2202      	movs	r2, #2
    326e:	729a      	strb	r2, [r3, #10]
}
    3270:	46c0      	nop			; (mov r8, r8)
    3272:	46bd      	mov	sp, r7
    3274:	b002      	add	sp, #8
    3276:	bd80      	pop	{r7, pc}

00003278 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    3278:	b580      	push	{r7, lr}
    327a:	b082      	sub	sp, #8
    327c:	af00      	add	r7, sp, #0
    327e:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    3280:	687b      	ldr	r3, [r7, #4]
    3282:	7a5b      	ldrb	r3, [r3, #9]
    3284:	b2db      	uxtb	r3, r3
    3286:	085b      	lsrs	r3, r3, #1
    3288:	2201      	movs	r2, #1
    328a:	4013      	ands	r3, r2
    328c:	1e5a      	subs	r2, r3, #1
    328e:	4193      	sbcs	r3, r2
    3290:	b2db      	uxtb	r3, r3
}
    3292:	0018      	movs	r0, r3
    3294:	46bd      	mov	sp, r7
    3296:	b002      	add	sp, #8
    3298:	bd80      	pop	{r7, pc}
	...

0000329c <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    329c:	b580      	push	{r7, lr}
    329e:	b082      	sub	sp, #8
    32a0:	af00      	add	r7, sp, #0
    32a2:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    32a4:	687b      	ldr	r3, [r7, #4]
    32a6:	681b      	ldr	r3, [r3, #0]
    32a8:	2202      	movs	r2, #2
    32aa:	431a      	orrs	r2, r3
    32ac:	687b      	ldr	r3, [r7, #4]
    32ae:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    32b0:	687b      	ldr	r3, [r7, #4]
    32b2:	2103      	movs	r1, #3
    32b4:	0018      	movs	r0, r3
    32b6:	4b03      	ldr	r3, [pc, #12]	; (32c4 <hri_tc_set_CTRLA_ENABLE_bit+0x28>)
    32b8:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    32ba:	46c0      	nop			; (mov r8, r8)
    32bc:	46bd      	mov	sp, r7
    32be:	b002      	add	sp, #8
    32c0:	bd80      	pop	{r7, pc}
    32c2:	46c0      	nop			; (mov r8, r8)
    32c4:	000031ed 	.word	0x000031ed

000032c8 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    32c8:	b580      	push	{r7, lr}
    32ca:	b084      	sub	sp, #16
    32cc:	af00      	add	r7, sp, #0
    32ce:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    32d0:	687b      	ldr	r3, [r7, #4]
    32d2:	2103      	movs	r1, #3
    32d4:	0018      	movs	r0, r3
    32d6:	4b09      	ldr	r3, [pc, #36]	; (32fc <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    32d8:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    32da:	687b      	ldr	r3, [r7, #4]
    32dc:	681b      	ldr	r3, [r3, #0]
    32de:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    32e0:	68fb      	ldr	r3, [r7, #12]
    32e2:	085b      	lsrs	r3, r3, #1
    32e4:	2201      	movs	r2, #1
    32e6:	4013      	ands	r3, r2
    32e8:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    32ea:	68fb      	ldr	r3, [r7, #12]
    32ec:	1e5a      	subs	r2, r3, #1
    32ee:	4193      	sbcs	r3, r2
    32f0:	b2db      	uxtb	r3, r3
}
    32f2:	0018      	movs	r0, r3
    32f4:	46bd      	mov	sp, r7
    32f6:	b004      	add	sp, #16
    32f8:	bd80      	pop	{r7, pc}
    32fa:	46c0      	nop			; (mov r8, r8)
    32fc:	000031ed 	.word	0x000031ed

00003300 <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3300:	b580      	push	{r7, lr}
    3302:	b082      	sub	sp, #8
    3304:	af00      	add	r7, sp, #0
    3306:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3308:	687b      	ldr	r3, [r7, #4]
    330a:	681b      	ldr	r3, [r3, #0]
    330c:	2202      	movs	r2, #2
    330e:	4393      	bics	r3, r2
    3310:	001a      	movs	r2, r3
    3312:	687b      	ldr	r3, [r7, #4]
    3314:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3316:	687b      	ldr	r3, [r7, #4]
    3318:	2103      	movs	r1, #3
    331a:	0018      	movs	r0, r3
    331c:	4b02      	ldr	r3, [pc, #8]	; (3328 <hri_tc_clear_CTRLA_ENABLE_bit+0x28>)
    331e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    3320:	46c0      	nop			; (mov r8, r8)
    3322:	46bd      	mov	sp, r7
    3324:	b002      	add	sp, #8
    3326:	bd80      	pop	{r7, pc}
    3328:	000031ed 	.word	0x000031ed

0000332c <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    332c:	b580      	push	{r7, lr}
    332e:	b084      	sub	sp, #16
    3330:	af00      	add	r7, sp, #0
    3332:	6078      	str	r0, [r7, #4]
    3334:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3336:	687b      	ldr	r3, [r7, #4]
    3338:	2103      	movs	r1, #3
    333a:	0018      	movs	r0, r3
    333c:	4b06      	ldr	r3, [pc, #24]	; (3358 <hri_tc_get_CTRLA_reg+0x2c>)
    333e:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    3340:	687b      	ldr	r3, [r7, #4]
    3342:	681b      	ldr	r3, [r3, #0]
    3344:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3346:	68fb      	ldr	r3, [r7, #12]
    3348:	683a      	ldr	r2, [r7, #0]
    334a:	4013      	ands	r3, r2
    334c:	60fb      	str	r3, [r7, #12]
	return tmp;
    334e:	68fb      	ldr	r3, [r7, #12]
}
    3350:	0018      	movs	r0, r3
    3352:	46bd      	mov	sp, r7
    3354:	b004      	add	sp, #16
    3356:	bd80      	pop	{r7, pc}
    3358:	000031ed 	.word	0x000031ed

0000335c <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    335c:	b580      	push	{r7, lr}
    335e:	b082      	sub	sp, #8
    3360:	af00      	add	r7, sp, #0
    3362:	6078      	str	r0, [r7, #4]
    3364:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3366:	687b      	ldr	r3, [r7, #4]
    3368:	683a      	ldr	r2, [r7, #0]
    336a:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    336c:	687b      	ldr	r3, [r7, #4]
    336e:	2103      	movs	r1, #3
    3370:	0018      	movs	r0, r3
    3372:	4b03      	ldr	r3, [pc, #12]	; (3380 <hri_tc_write_CTRLA_reg+0x24>)
    3374:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    3376:	46c0      	nop			; (mov r8, r8)
    3378:	46bd      	mov	sp, r7
    337a:	b002      	add	sp, #8
    337c:	bd80      	pop	{r7, pc}
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	000031ed 	.word	0x000031ed

00003384 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    3384:	b580      	push	{r7, lr}
    3386:	b082      	sub	sp, #8
    3388:	af00      	add	r7, sp, #0
    338a:	6078      	str	r0, [r7, #4]
    338c:	000a      	movs	r2, r1
    338e:	1cbb      	adds	r3, r7, #2
    3390:	801a      	strh	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    3392:	687b      	ldr	r3, [r7, #4]
    3394:	1cba      	adds	r2, r7, #2
    3396:	8812      	ldrh	r2, [r2, #0]
    3398:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	46bd      	mov	sp, r7
    339e:	b002      	add	sp, #8
    33a0:	bd80      	pop	{r7, pc}

000033a2 <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    33a2:	b580      	push	{r7, lr}
    33a4:	b082      	sub	sp, #8
    33a6:	af00      	add	r7, sp, #0
    33a8:	6078      	str	r0, [r7, #4]
    33aa:	000a      	movs	r2, r1
    33ac:	1cfb      	adds	r3, r7, #3
    33ae:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    33b0:	687b      	ldr	r3, [r7, #4]
    33b2:	1cfa      	adds	r2, r7, #3
    33b4:	7812      	ldrb	r2, [r2, #0]
    33b6:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    33b8:	46c0      	nop			; (mov r8, r8)
    33ba:	46bd      	mov	sp, r7
    33bc:	b002      	add	sp, #8
    33be:	bd80      	pop	{r7, pc}

000033c0 <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    33c0:	b580      	push	{r7, lr}
    33c2:	b082      	sub	sp, #8
    33c4:	af00      	add	r7, sp, #0
    33c6:	6078      	str	r0, [r7, #4]
    33c8:	000a      	movs	r2, r1
    33ca:	1cfb      	adds	r3, r7, #3
    33cc:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    33ce:	687b      	ldr	r3, [r7, #4]
    33d0:	1cfa      	adds	r2, r7, #3
    33d2:	7812      	ldrb	r2, [r2, #0]
    33d4:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	46bd      	mov	sp, r7
    33da:	b002      	add	sp, #8
    33dc:	bd80      	pop	{r7, pc}
	...

000033e0 <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    33e0:	b580      	push	{r7, lr}
    33e2:	b082      	sub	sp, #8
    33e4:	af00      	add	r7, sp, #0
    33e6:	6078      	str	r0, [r7, #4]
    33e8:	0008      	movs	r0, r1
    33ea:	0011      	movs	r1, r2
    33ec:	1cfb      	adds	r3, r7, #3
    33ee:	1c02      	adds	r2, r0, #0
    33f0:	701a      	strb	r2, [r3, #0]
    33f2:	003b      	movs	r3, r7
    33f4:	1c0a      	adds	r2, r1, #0
    33f6:	801a      	strh	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    33f8:	1cfb      	adds	r3, r7, #3
    33fa:	781b      	ldrb	r3, [r3, #0]
    33fc:	687a      	ldr	r2, [r7, #4]
    33fe:	330c      	adds	r3, #12
    3400:	005b      	lsls	r3, r3, #1
    3402:	18d3      	adds	r3, r2, r3
    3404:	3304      	adds	r3, #4
    3406:	003a      	movs	r2, r7
    3408:	8812      	ldrh	r2, [r2, #0]
    340a:	801a      	strh	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    340c:	687b      	ldr	r3, [r7, #4]
    340e:	21c0      	movs	r1, #192	; 0xc0
    3410:	0018      	movs	r0, r3
    3412:	4b03      	ldr	r3, [pc, #12]	; (3420 <hri_tccount16_write_CC_reg+0x40>)
    3414:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    3416:	46c0      	nop			; (mov r8, r8)
    3418:	46bd      	mov	sp, r7
    341a:	b002      	add	sp, #8
    341c:	bd80      	pop	{r7, pc}
    341e:	46c0      	nop			; (mov r8, r8)
    3420:	000031ed 	.word	0x000031ed

00003424 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    3424:	b580      	push	{r7, lr}
    3426:	b084      	sub	sp, #16
    3428:	af00      	add	r7, sp, #0
    342a:	60f8      	str	r0, [r7, #12]
    342c:	607a      	str	r2, [r7, #4]
    342e:	230b      	movs	r3, #11
    3430:	18fb      	adds	r3, r7, r3
    3432:	1c0a      	adds	r2, r1, #0
    3434:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3436:	230b      	movs	r3, #11
    3438:	18fb      	adds	r3, r7, r3
    343a:	781b      	ldrb	r3, [r3, #0]
    343c:	68fa      	ldr	r2, [r7, #12]
    343e:	3306      	adds	r3, #6
    3440:	009b      	lsls	r3, r3, #2
    3442:	18d3      	adds	r3, r2, r3
    3444:	3304      	adds	r3, #4
    3446:	687a      	ldr	r2, [r7, #4]
    3448:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    344a:	68fb      	ldr	r3, [r7, #12]
    344c:	21c0      	movs	r1, #192	; 0xc0
    344e:	0018      	movs	r0, r3
    3450:	4b02      	ldr	r3, [pc, #8]	; (345c <hri_tccount32_write_CC_reg+0x38>)
    3452:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    3454:	46c0      	nop			; (mov r8, r8)
    3456:	46bd      	mov	sp, r7
    3458:	b004      	add	sp, #16
    345a:	bd80      	pop	{r7, pc}
    345c:	000031ed 	.word	0x000031ed

00003460 <_pwm_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    3460:	b590      	push	{r4, r7, lr}
    3462:	b085      	sub	sp, #20
    3464:	af00      	add	r7, sp, #0
    3466:	6078      	str	r0, [r7, #4]
    3468:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    346a:	230f      	movs	r3, #15
    346c:	18fc      	adds	r4, r7, r3
    346e:	683b      	ldr	r3, [r7, #0]
    3470:	0018      	movs	r0, r3
    3472:	4b85      	ldr	r3, [pc, #532]	; (3688 <_pwm_init+0x228>)
    3474:	4798      	blx	r3
    3476:	0003      	movs	r3, r0
    3478:	7023      	strb	r3, [r4, #0]
	device->hw = hw;
    347a:	687b      	ldr	r3, [r7, #4]
    347c:	683a      	ldr	r2, [r7, #0]
    347e:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    3480:	683b      	ldr	r3, [r7, #0]
    3482:	2101      	movs	r1, #1
    3484:	0018      	movs	r0, r3
    3486:	4b81      	ldr	r3, [pc, #516]	; (368c <_pwm_init+0x22c>)
    3488:	4798      	blx	r3
    348a:	0003      	movs	r3, r0
    348c:	001a      	movs	r2, r3
    348e:	2301      	movs	r3, #1
    3490:	4053      	eors	r3, r2
    3492:	b2db      	uxtb	r3, r3
    3494:	2b00      	cmp	r3, #0
    3496:	d014      	beq.n	34c2 <_pwm_init+0x62>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    3498:	683b      	ldr	r3, [r7, #0]
    349a:	2102      	movs	r1, #2
    349c:	0018      	movs	r0, r3
    349e:	4b7c      	ldr	r3, [pc, #496]	; (3690 <_pwm_init+0x230>)
    34a0:	4798      	blx	r3
    34a2:	1e03      	subs	r3, r0, #0
    34a4:	d008      	beq.n	34b8 <_pwm_init+0x58>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    34a6:	683b      	ldr	r3, [r7, #0]
    34a8:	0018      	movs	r0, r3
    34aa:	4b7a      	ldr	r3, [pc, #488]	; (3694 <_pwm_init+0x234>)
    34ac:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    34ae:	683b      	ldr	r3, [r7, #0]
    34b0:	2102      	movs	r1, #2
    34b2:	0018      	movs	r0, r3
    34b4:	4b78      	ldr	r3, [pc, #480]	; (3698 <_pwm_init+0x238>)
    34b6:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    34b8:	683b      	ldr	r3, [r7, #0]
    34ba:	2101      	movs	r1, #1
    34bc:	0018      	movs	r0, r3
    34be:	4b77      	ldr	r3, [pc, #476]	; (369c <_pwm_init+0x23c>)
    34c0:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    34c2:	683b      	ldr	r3, [r7, #0]
    34c4:	2101      	movs	r1, #1
    34c6:	0018      	movs	r0, r3
    34c8:	4b73      	ldr	r3, [pc, #460]	; (3698 <_pwm_init+0x238>)
    34ca:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    34cc:	230f      	movs	r3, #15
    34ce:	18fb      	adds	r3, r7, r3
    34d0:	2200      	movs	r2, #0
    34d2:	569a      	ldrsb	r2, [r3, r2]
    34d4:	4972      	ldr	r1, [pc, #456]	; (36a0 <_pwm_init+0x240>)
    34d6:	0013      	movs	r3, r2
    34d8:	009b      	lsls	r3, r3, #2
    34da:	189b      	adds	r3, r3, r2
    34dc:	009b      	lsls	r3, r3, #2
    34de:	18cb      	adds	r3, r1, r3
    34e0:	3304      	adds	r3, #4
    34e2:	681a      	ldr	r2, [r3, #0]
    34e4:	683b      	ldr	r3, [r7, #0]
    34e6:	0011      	movs	r1, r2
    34e8:	0018      	movs	r0, r3
    34ea:	4b6c      	ldr	r3, [pc, #432]	; (369c <_pwm_init+0x23c>)
    34ec:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    34ee:	230f      	movs	r3, #15
    34f0:	18fb      	adds	r3, r7, r3
    34f2:	2200      	movs	r2, #0
    34f4:	569a      	ldrsb	r2, [r3, r2]
    34f6:	496a      	ldr	r1, [pc, #424]	; (36a0 <_pwm_init+0x240>)
    34f8:	0013      	movs	r3, r2
    34fa:	009b      	lsls	r3, r3, #2
    34fc:	189b      	adds	r3, r3, r2
    34fe:	009b      	lsls	r3, r3, #2
    3500:	18cb      	adds	r3, r1, r3
    3502:	330a      	adds	r3, #10
    3504:	781a      	ldrb	r2, [r3, #0]
    3506:	683b      	ldr	r3, [r7, #0]
    3508:	0011      	movs	r1, r2
    350a:	0018      	movs	r0, r3
    350c:	4b65      	ldr	r3, [pc, #404]	; (36a4 <_pwm_init+0x244>)
    350e:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3510:	230f      	movs	r3, #15
    3512:	18fb      	adds	r3, r7, r3
    3514:	2200      	movs	r2, #0
    3516:	569a      	ldrsb	r2, [r3, r2]
    3518:	4961      	ldr	r1, [pc, #388]	; (36a0 <_pwm_init+0x240>)
    351a:	0013      	movs	r3, r2
    351c:	009b      	lsls	r3, r3, #2
    351e:	189b      	adds	r3, r3, r2
    3520:	009b      	lsls	r3, r3, #2
    3522:	18cb      	adds	r3, r1, r3
    3524:	3308      	adds	r3, #8
    3526:	881a      	ldrh	r2, [r3, #0]
    3528:	683b      	ldr	r3, [r7, #0]
    352a:	0011      	movs	r1, r2
    352c:	0018      	movs	r0, r3
    352e:	4b5e      	ldr	r3, [pc, #376]	; (36a8 <_pwm_init+0x248>)
    3530:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    3532:	683b      	ldr	r3, [r7, #0]
    3534:	2103      	movs	r1, #3
    3536:	0018      	movs	r0, r3
    3538:	4b5c      	ldr	r3, [pc, #368]	; (36ac <_pwm_init+0x24c>)
    353a:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    353c:	230f      	movs	r3, #15
    353e:	18fb      	adds	r3, r7, r3
    3540:	2200      	movs	r2, #0
    3542:	569a      	ldrsb	r2, [r3, r2]
    3544:	4956      	ldr	r1, [pc, #344]	; (36a0 <_pwm_init+0x240>)
    3546:	0013      	movs	r3, r2
    3548:	009b      	lsls	r3, r3, #2
    354a:	189b      	adds	r3, r3, r2
    354c:	009b      	lsls	r3, r3, #2
    354e:	18cb      	adds	r3, r1, r3
    3550:	3304      	adds	r3, #4
    3552:	681b      	ldr	r3, [r3, #0]
    3554:	220c      	movs	r2, #12
    3556:	4013      	ands	r3, r2
    3558:	2b08      	cmp	r3, #8
    355a:	d122      	bne.n	35a2 <_pwm_init+0x142>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    355c:	230f      	movs	r3, #15
    355e:	18fb      	adds	r3, r7, r3
    3560:	2200      	movs	r2, #0
    3562:	569a      	ldrsb	r2, [r3, r2]
    3564:	494e      	ldr	r1, [pc, #312]	; (36a0 <_pwm_init+0x240>)
    3566:	0013      	movs	r3, r2
    3568:	009b      	lsls	r3, r3, #2
    356a:	189b      	adds	r3, r3, r2
    356c:	009b      	lsls	r3, r3, #2
    356e:	18cb      	adds	r3, r1, r3
    3570:	330c      	adds	r3, #12
    3572:	681a      	ldr	r2, [r3, #0]
    3574:	683b      	ldr	r3, [r7, #0]
    3576:	2100      	movs	r1, #0
    3578:	0018      	movs	r0, r3
    357a:	4b4d      	ldr	r3, [pc, #308]	; (36b0 <_pwm_init+0x250>)
    357c:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    357e:	230f      	movs	r3, #15
    3580:	18fb      	adds	r3, r7, r3
    3582:	2200      	movs	r2, #0
    3584:	569a      	ldrsb	r2, [r3, r2]
    3586:	4946      	ldr	r1, [pc, #280]	; (36a0 <_pwm_init+0x240>)
    3588:	0013      	movs	r3, r2
    358a:	009b      	lsls	r3, r3, #2
    358c:	189b      	adds	r3, r3, r2
    358e:	009b      	lsls	r3, r3, #2
    3590:	18cb      	adds	r3, r1, r3
    3592:	3310      	adds	r3, #16
    3594:	681a      	ldr	r2, [r3, #0]
    3596:	683b      	ldr	r3, [r7, #0]
    3598:	2101      	movs	r1, #1
    359a:	0018      	movs	r0, r3
    359c:	4b44      	ldr	r3, [pc, #272]	; (36b0 <_pwm_init+0x250>)
    359e:	4798      	blx	r3
    35a0:	e036      	b.n	3610 <_pwm_init+0x1b0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    35a2:	230f      	movs	r3, #15
    35a4:	18fb      	adds	r3, r7, r3
    35a6:	2200      	movs	r2, #0
    35a8:	569a      	ldrsb	r2, [r3, r2]
    35aa:	493d      	ldr	r1, [pc, #244]	; (36a0 <_pwm_init+0x240>)
    35ac:	0013      	movs	r3, r2
    35ae:	009b      	lsls	r3, r3, #2
    35b0:	189b      	adds	r3, r3, r2
    35b2:	009b      	lsls	r3, r3, #2
    35b4:	18cb      	adds	r3, r1, r3
    35b6:	3304      	adds	r3, #4
    35b8:	681b      	ldr	r3, [r3, #0]
    35ba:	220c      	movs	r2, #12
    35bc:	4013      	ands	r3, r2
    35be:	d124      	bne.n	360a <_pwm_init+0x1aa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    35c0:	230f      	movs	r3, #15
    35c2:	18fb      	adds	r3, r7, r3
    35c4:	2200      	movs	r2, #0
    35c6:	569a      	ldrsb	r2, [r3, r2]
    35c8:	4935      	ldr	r1, [pc, #212]	; (36a0 <_pwm_init+0x240>)
    35ca:	0013      	movs	r3, r2
    35cc:	009b      	lsls	r3, r3, #2
    35ce:	189b      	adds	r3, r3, r2
    35d0:	009b      	lsls	r3, r3, #2
    35d2:	18cb      	adds	r3, r1, r3
    35d4:	330c      	adds	r3, #12
    35d6:	681b      	ldr	r3, [r3, #0]
    35d8:	b29a      	uxth	r2, r3
    35da:	683b      	ldr	r3, [r7, #0]
    35dc:	2100      	movs	r1, #0
    35de:	0018      	movs	r0, r3
    35e0:	4b34      	ldr	r3, [pc, #208]	; (36b4 <_pwm_init+0x254>)
    35e2:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    35e4:	230f      	movs	r3, #15
    35e6:	18fb      	adds	r3, r7, r3
    35e8:	2200      	movs	r2, #0
    35ea:	569a      	ldrsb	r2, [r3, r2]
    35ec:	492c      	ldr	r1, [pc, #176]	; (36a0 <_pwm_init+0x240>)
    35ee:	0013      	movs	r3, r2
    35f0:	009b      	lsls	r3, r3, #2
    35f2:	189b      	adds	r3, r3, r2
    35f4:	009b      	lsls	r3, r3, #2
    35f6:	18cb      	adds	r3, r1, r3
    35f8:	3310      	adds	r3, #16
    35fa:	681b      	ldr	r3, [r3, #0]
    35fc:	b29a      	uxth	r2, r3
    35fe:	683b      	ldr	r3, [r7, #0]
    3600:	2101      	movs	r1, #1
    3602:	0018      	movs	r0, r3
    3604:	4b2b      	ldr	r3, [pc, #172]	; (36b4 <_pwm_init+0x254>)
    3606:	4798      	blx	r3
    3608:	e002      	b.n	3610 <_pwm_init+0x1b0>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    360a:	2301      	movs	r3, #1
    360c:	425b      	negs	r3, r3
    360e:	e036      	b.n	367e <_pwm_init+0x21e>
	}

	_tc_init_irq_param(hw, (void *)device);
    3610:	687a      	ldr	r2, [r7, #4]
    3612:	683b      	ldr	r3, [r7, #0]
    3614:	0011      	movs	r1, r2
    3616:	0018      	movs	r0, r3
    3618:	4b27      	ldr	r3, [pc, #156]	; (36b8 <_pwm_init+0x258>)
    361a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    361c:	230f      	movs	r3, #15
    361e:	18fb      	adds	r3, r7, r3
    3620:	2200      	movs	r2, #0
    3622:	569a      	ldrsb	r2, [r3, r2]
    3624:	491e      	ldr	r1, [pc, #120]	; (36a0 <_pwm_init+0x240>)
    3626:	0013      	movs	r3, r2
    3628:	009b      	lsls	r3, r3, #2
    362a:	189b      	adds	r3, r3, r2
    362c:	009b      	lsls	r3, r3, #2
    362e:	18cb      	adds	r3, r1, r3
    3630:	3301      	adds	r3, #1
    3632:	781b      	ldrb	r3, [r3, #0]
    3634:	b25b      	sxtb	r3, r3
    3636:	0018      	movs	r0, r3
    3638:	4b20      	ldr	r3, [pc, #128]	; (36bc <_pwm_init+0x25c>)
    363a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    363c:	230f      	movs	r3, #15
    363e:	18fb      	adds	r3, r7, r3
    3640:	2200      	movs	r2, #0
    3642:	569a      	ldrsb	r2, [r3, r2]
    3644:	4916      	ldr	r1, [pc, #88]	; (36a0 <_pwm_init+0x240>)
    3646:	0013      	movs	r3, r2
    3648:	009b      	lsls	r3, r3, #2
    364a:	189b      	adds	r3, r3, r2
    364c:	009b      	lsls	r3, r3, #2
    364e:	18cb      	adds	r3, r1, r3
    3650:	3301      	adds	r3, #1
    3652:	781b      	ldrb	r3, [r3, #0]
    3654:	b25b      	sxtb	r3, r3
    3656:	0018      	movs	r0, r3
    3658:	4b19      	ldr	r3, [pc, #100]	; (36c0 <_pwm_init+0x260>)
    365a:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    365c:	230f      	movs	r3, #15
    365e:	18fb      	adds	r3, r7, r3
    3660:	2200      	movs	r2, #0
    3662:	569a      	ldrsb	r2, [r3, r2]
    3664:	490e      	ldr	r1, [pc, #56]	; (36a0 <_pwm_init+0x240>)
    3666:	0013      	movs	r3, r2
    3668:	009b      	lsls	r3, r3, #2
    366a:	189b      	adds	r3, r3, r2
    366c:	009b      	lsls	r3, r3, #2
    366e:	18cb      	adds	r3, r1, r3
    3670:	3301      	adds	r3, #1
    3672:	781b      	ldrb	r3, [r3, #0]
    3674:	b25b      	sxtb	r3, r3
    3676:	0018      	movs	r0, r3
    3678:	4b12      	ldr	r3, [pc, #72]	; (36c4 <_pwm_init+0x264>)
    367a:	4798      	blx	r3

	return 0;
    367c:	2300      	movs	r3, #0
}
    367e:	0018      	movs	r0, r3
    3680:	46bd      	mov	sp, r7
    3682:	b005      	add	sp, #20
    3684:	bd90      	pop	{r4, r7, pc}
    3686:	46c0      	nop			; (mov r8, r8)
    3688:	000038e1 	.word	0x000038e1
    368c:	0000320b 	.word	0x0000320b
    3690:	0000332d 	.word	0x0000332d
    3694:	00003301 	.word	0x00003301
    3698:	000031ed 	.word	0x000031ed
    369c:	0000335d 	.word	0x0000335d
    36a0:	20000014 	.word	0x20000014
    36a4:	000033c1 	.word	0x000033c1
    36a8:	00003385 	.word	0x00003385
    36ac:	000033a3 	.word	0x000033a3
    36b0:	00003425 	.word	0x00003425
    36b4:	000033e1 	.word	0x000033e1
    36b8:	0000396d 	.word	0x0000396d
    36bc:	00003175 	.word	0x00003175
    36c0:	000031b5 	.word	0x000031b5
    36c4:	00003141 	.word	0x00003141

000036c8 <_pwm_enable>:
}
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    36c8:	b580      	push	{r7, lr}
    36ca:	b082      	sub	sp, #8
    36cc:	af00      	add	r7, sp, #0
    36ce:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    36d0:	687b      	ldr	r3, [r7, #4]
    36d2:	691b      	ldr	r3, [r3, #16]
    36d4:	0018      	movs	r0, r3
    36d6:	4b03      	ldr	r3, [pc, #12]	; (36e4 <_pwm_enable+0x1c>)
    36d8:	4798      	blx	r3
}
    36da:	46c0      	nop			; (mov r8, r8)
    36dc:	46bd      	mov	sp, r7
    36de:	b002      	add	sp, #8
    36e0:	bd80      	pop	{r7, pc}
    36e2:	46c0      	nop			; (mov r8, r8)
    36e4:	0000329d 	.word	0x0000329d

000036e8 <_pwm_disable>:
/**
 * \brief Stop PWM
 */
void _pwm_disable(struct _pwm_device *const device)
{
    36e8:	b580      	push	{r7, lr}
    36ea:	b082      	sub	sp, #8
    36ec:	af00      	add	r7, sp, #0
    36ee:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    36f0:	687b      	ldr	r3, [r7, #4]
    36f2:	691b      	ldr	r3, [r3, #16]
    36f4:	0018      	movs	r0, r3
    36f6:	4b03      	ldr	r3, [pc, #12]	; (3704 <_pwm_disable+0x1c>)
    36f8:	4798      	blx	r3
}
    36fa:	46c0      	nop			; (mov r8, r8)
    36fc:	46bd      	mov	sp, r7
    36fe:	b002      	add	sp, #8
    3700:	bd80      	pop	{r7, pc}
    3702:	46c0      	nop			; (mov r8, r8)
    3704:	00003301 	.word	0x00003301

00003708 <_pwm_set_param>:
/**
 * \brief Set PWM parameter
 */
void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
    3708:	b590      	push	{r4, r7, lr}
    370a:	b087      	sub	sp, #28
    370c:	af00      	add	r7, sp, #0
    370e:	60f8      	str	r0, [r7, #12]
    3710:	60b9      	str	r1, [r7, #8]
    3712:	607a      	str	r2, [r7, #4]
	void *const hw = device->hw;
    3714:	68fb      	ldr	r3, [r7, #12]
    3716:	691b      	ldr	r3, [r3, #16]
    3718:	617b      	str	r3, [r7, #20]
	int8_t      i  = get_tc_index(hw);
    371a:	2313      	movs	r3, #19
    371c:	18fc      	adds	r4, r7, r3
    371e:	697b      	ldr	r3, [r7, #20]
    3720:	0018      	movs	r0, r3
    3722:	4b3c      	ldr	r3, [pc, #240]	; (3814 <_pwm_set_param+0x10c>)
    3724:	4798      	blx	r3
    3726:	0003      	movs	r3, r0
    3728:	7023      	strb	r3, [r4, #0]

	_tcs[i].cc0 = period;
    372a:	2313      	movs	r3, #19
    372c:	18fb      	adds	r3, r7, r3
    372e:	2200      	movs	r2, #0
    3730:	569a      	ldrsb	r2, [r3, r2]
    3732:	4939      	ldr	r1, [pc, #228]	; (3818 <_pwm_set_param+0x110>)
    3734:	0013      	movs	r3, r2
    3736:	009b      	lsls	r3, r3, #2
    3738:	189b      	adds	r3, r3, r2
    373a:	009b      	lsls	r3, r3, #2
    373c:	18cb      	adds	r3, r1, r3
    373e:	330c      	adds	r3, #12
    3740:	68ba      	ldr	r2, [r7, #8]
    3742:	601a      	str	r2, [r3, #0]
	_tcs[i].cc1 = duty_cycle;
    3744:	2313      	movs	r3, #19
    3746:	18fb      	adds	r3, r7, r3
    3748:	2200      	movs	r2, #0
    374a:	569a      	ldrsb	r2, [r3, r2]
    374c:	4932      	ldr	r1, [pc, #200]	; (3818 <_pwm_set_param+0x110>)
    374e:	0013      	movs	r3, r2
    3750:	009b      	lsls	r3, r3, #2
    3752:	189b      	adds	r3, r3, r2
    3754:	009b      	lsls	r3, r3, #2
    3756:	18cb      	adds	r3, r1, r3
    3758:	3310      	adds	r3, #16
    375a:	687a      	ldr	r2, [r7, #4]
    375c:	601a      	str	r2, [r3, #0]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    375e:	2313      	movs	r3, #19
    3760:	18fb      	adds	r3, r7, r3
    3762:	2200      	movs	r2, #0
    3764:	569a      	ldrsb	r2, [r3, r2]
    3766:	492c      	ldr	r1, [pc, #176]	; (3818 <_pwm_set_param+0x110>)
    3768:	0013      	movs	r3, r2
    376a:	009b      	lsls	r3, r3, #2
    376c:	189b      	adds	r3, r3, r2
    376e:	009b      	lsls	r3, r3, #2
    3770:	18cb      	adds	r3, r1, r3
    3772:	3304      	adds	r3, #4
    3774:	681b      	ldr	r3, [r3, #0]
    3776:	220c      	movs	r2, #12
    3778:	4013      	ands	r3, r2
    377a:	2b08      	cmp	r3, #8
    377c:	d122      	bne.n	37c4 <_pwm_set_param+0xbc>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    377e:	2313      	movs	r3, #19
    3780:	18fb      	adds	r3, r7, r3
    3782:	2200      	movs	r2, #0
    3784:	569a      	ldrsb	r2, [r3, r2]
    3786:	4924      	ldr	r1, [pc, #144]	; (3818 <_pwm_set_param+0x110>)
    3788:	0013      	movs	r3, r2
    378a:	009b      	lsls	r3, r3, #2
    378c:	189b      	adds	r3, r3, r2
    378e:	009b      	lsls	r3, r3, #2
    3790:	18cb      	adds	r3, r1, r3
    3792:	330c      	adds	r3, #12
    3794:	681a      	ldr	r2, [r3, #0]
    3796:	697b      	ldr	r3, [r7, #20]
    3798:	2100      	movs	r1, #0
    379a:	0018      	movs	r0, r3
    379c:	4b1f      	ldr	r3, [pc, #124]	; (381c <_pwm_set_param+0x114>)
    379e:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    37a0:	2313      	movs	r3, #19
    37a2:	18fb      	adds	r3, r7, r3
    37a4:	2200      	movs	r2, #0
    37a6:	569a      	ldrsb	r2, [r3, r2]
    37a8:	491b      	ldr	r1, [pc, #108]	; (3818 <_pwm_set_param+0x110>)
    37aa:	0013      	movs	r3, r2
    37ac:	009b      	lsls	r3, r3, #2
    37ae:	189b      	adds	r3, r3, r2
    37b0:	009b      	lsls	r3, r3, #2
    37b2:	18cb      	adds	r3, r1, r3
    37b4:	3310      	adds	r3, #16
    37b6:	681a      	ldr	r2, [r3, #0]
    37b8:	697b      	ldr	r3, [r7, #20]
    37ba:	2101      	movs	r1, #1
    37bc:	0018      	movs	r0, r3
    37be:	4b17      	ldr	r3, [pc, #92]	; (381c <_pwm_set_param+0x114>)
    37c0:	4798      	blx	r3
	} else {
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
	}
}
    37c2:	e023      	b.n	380c <_pwm_set_param+0x104>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    37c4:	2313      	movs	r3, #19
    37c6:	18fb      	adds	r3, r7, r3
    37c8:	2200      	movs	r2, #0
    37ca:	569a      	ldrsb	r2, [r3, r2]
    37cc:	4912      	ldr	r1, [pc, #72]	; (3818 <_pwm_set_param+0x110>)
    37ce:	0013      	movs	r3, r2
    37d0:	009b      	lsls	r3, r3, #2
    37d2:	189b      	adds	r3, r3, r2
    37d4:	009b      	lsls	r3, r3, #2
    37d6:	18cb      	adds	r3, r1, r3
    37d8:	330c      	adds	r3, #12
    37da:	681b      	ldr	r3, [r3, #0]
    37dc:	b29a      	uxth	r2, r3
    37de:	697b      	ldr	r3, [r7, #20]
    37e0:	2100      	movs	r1, #0
    37e2:	0018      	movs	r0, r3
    37e4:	4b0e      	ldr	r3, [pc, #56]	; (3820 <_pwm_set_param+0x118>)
    37e6:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    37e8:	2313      	movs	r3, #19
    37ea:	18fb      	adds	r3, r7, r3
    37ec:	2200      	movs	r2, #0
    37ee:	569a      	ldrsb	r2, [r3, r2]
    37f0:	4909      	ldr	r1, [pc, #36]	; (3818 <_pwm_set_param+0x110>)
    37f2:	0013      	movs	r3, r2
    37f4:	009b      	lsls	r3, r3, #2
    37f6:	189b      	adds	r3, r3, r2
    37f8:	009b      	lsls	r3, r3, #2
    37fa:	18cb      	adds	r3, r1, r3
    37fc:	3310      	adds	r3, #16
    37fe:	681b      	ldr	r3, [r3, #0]
    3800:	b29a      	uxth	r2, r3
    3802:	697b      	ldr	r3, [r7, #20]
    3804:	2101      	movs	r1, #1
    3806:	0018      	movs	r0, r3
    3808:	4b05      	ldr	r3, [pc, #20]	; (3820 <_pwm_set_param+0x118>)
    380a:	4798      	blx	r3
}
    380c:	46c0      	nop			; (mov r8, r8)
    380e:	46bd      	mov	sp, r7
    3810:	b007      	add	sp, #28
    3812:	bd90      	pop	{r4, r7, pc}
    3814:	000038e1 	.word	0x000038e1
    3818:	20000014 	.word	0x20000014
    381c:	00003425 	.word	0x00003425
    3820:	000033e1 	.word	0x000033e1

00003824 <_pwm_is_enabled>:
}
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    3824:	b580      	push	{r7, lr}
    3826:	b082      	sub	sp, #8
    3828:	af00      	add	r7, sp, #0
    382a:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    382c:	687b      	ldr	r3, [r7, #4]
    382e:	691b      	ldr	r3, [r3, #16]
    3830:	0018      	movs	r0, r3
    3832:	4b03      	ldr	r3, [pc, #12]	; (3840 <_pwm_is_enabled+0x1c>)
    3834:	4798      	blx	r3
    3836:	0003      	movs	r3, r0
}
    3838:	0018      	movs	r0, r3
    383a:	46bd      	mov	sp, r7
    383c:	b002      	add	sp, #8
    383e:	bd80      	pop	{r7, pc}
    3840:	000032c9 	.word	0x000032c9

00003844 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    3844:	b580      	push	{r7, lr}
    3846:	af00      	add	r7, sp, #0
	return NULL;
    3848:	2300      	movs	r3, #0
}
    384a:	0018      	movs	r0, r3
    384c:	46bd      	mov	sp, r7
    384e:	bd80      	pop	{r7, pc}

00003850 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    3850:	b580      	push	{r7, lr}
    3852:	b084      	sub	sp, #16
    3854:	af00      	add	r7, sp, #0
    3856:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    3858:	687b      	ldr	r3, [r7, #4]
    385a:	691b      	ldr	r3, [r3, #16]
    385c:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    385e:	68fb      	ldr	r3, [r7, #12]
    3860:	0018      	movs	r0, r3
    3862:	4b14      	ldr	r3, [pc, #80]	; (38b4 <tc_pwm_interrupt_handler+0x64>)
    3864:	4798      	blx	r3
    3866:	1e03      	subs	r3, r0, #0
    3868:	d00c      	beq.n	3884 <tc_pwm_interrupt_handler+0x34>
		hri_tc_clear_interrupt_OVF_bit(hw);
    386a:	68fb      	ldr	r3, [r7, #12]
    386c:	0018      	movs	r0, r3
    386e:	4b12      	ldr	r3, [pc, #72]	; (38b8 <tc_pwm_interrupt_handler+0x68>)
    3870:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    3872:	687b      	ldr	r3, [r7, #4]
    3874:	681b      	ldr	r3, [r3, #0]
    3876:	2b00      	cmp	r3, #0
    3878:	d004      	beq.n	3884 <tc_pwm_interrupt_handler+0x34>
			device->callback.pwm_period_cb(device);
    387a:	687b      	ldr	r3, [r7, #4]
    387c:	681b      	ldr	r3, [r3, #0]
    387e:	687a      	ldr	r2, [r7, #4]
    3880:	0010      	movs	r0, r2
    3882:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    3884:	68fb      	ldr	r3, [r7, #12]
    3886:	0018      	movs	r0, r3
    3888:	4b0c      	ldr	r3, [pc, #48]	; (38bc <tc_pwm_interrupt_handler+0x6c>)
    388a:	4798      	blx	r3
    388c:	1e03      	subs	r3, r0, #0
    388e:	d00c      	beq.n	38aa <tc_pwm_interrupt_handler+0x5a>
		hri_tc_clear_interrupt_ERR_bit(hw);
    3890:	68fb      	ldr	r3, [r7, #12]
    3892:	0018      	movs	r0, r3
    3894:	4b0a      	ldr	r3, [pc, #40]	; (38c0 <tc_pwm_interrupt_handler+0x70>)
    3896:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    3898:	687b      	ldr	r3, [r7, #4]
    389a:	685b      	ldr	r3, [r3, #4]
    389c:	2b00      	cmp	r3, #0
    389e:	d004      	beq.n	38aa <tc_pwm_interrupt_handler+0x5a>
			device->callback.pwm_error_cb(device);
    38a0:	687b      	ldr	r3, [r7, #4]
    38a2:	685b      	ldr	r3, [r3, #4]
    38a4:	687a      	ldr	r2, [r7, #4]
    38a6:	0010      	movs	r0, r2
    38a8:	4798      	blx	r3
		}
	}
}
    38aa:	46c0      	nop			; (mov r8, r8)
    38ac:	46bd      	mov	sp, r7
    38ae:	b004      	add	sp, #16
    38b0:	bd80      	pop	{r7, pc}
    38b2:	46c0      	nop			; (mov r8, r8)
    38b4:	0000322b 	.word	0x0000322b
    38b8:	0000324d 	.word	0x0000324d
    38bc:	00003279 	.word	0x00003279
    38c0:	00003263 	.word	0x00003263

000038c4 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    38c4:	b580      	push	{r7, lr}
    38c6:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc0_dev);
    38c8:	4b03      	ldr	r3, [pc, #12]	; (38d8 <TC0_Handler+0x14>)
    38ca:	681b      	ldr	r3, [r3, #0]
    38cc:	0018      	movs	r0, r3
    38ce:	4b03      	ldr	r3, [pc, #12]	; (38dc <TC0_Handler+0x18>)
    38d0:	4798      	blx	r3
}
    38d2:	46c0      	nop			; (mov r8, r8)
    38d4:	46bd      	mov	sp, r7
    38d6:	bd80      	pop	{r7, pc}
    38d8:	2000004c 	.word	0x2000004c
    38dc:	00003851 	.word	0x00003851

000038e0 <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    38e0:	b590      	push	{r4, r7, lr}
    38e2:	b085      	sub	sp, #20
    38e4:	af00      	add	r7, sp, #0
    38e6:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    38e8:	230e      	movs	r3, #14
    38ea:	18fc      	adds	r4, r7, r3
    38ec:	687b      	ldr	r3, [r7, #4]
    38ee:	0018      	movs	r0, r3
    38f0:	4b1a      	ldr	r3, [pc, #104]	; (395c <get_tc_index+0x7c>)
    38f2:	4798      	blx	r3
    38f4:	0003      	movs	r3, r0
    38f6:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    38f8:	230f      	movs	r3, #15
    38fa:	18fb      	adds	r3, r7, r3
    38fc:	2200      	movs	r2, #0
    38fe:	701a      	strb	r2, [r3, #0]
    3900:	e019      	b.n	3936 <get_tc_index+0x56>
		if (_tcs[i].number == index) {
    3902:	230f      	movs	r3, #15
    3904:	18fb      	adds	r3, r7, r3
    3906:	781a      	ldrb	r2, [r3, #0]
    3908:	4915      	ldr	r1, [pc, #84]	; (3960 <get_tc_index+0x80>)
    390a:	0013      	movs	r3, r2
    390c:	009b      	lsls	r3, r3, #2
    390e:	189b      	adds	r3, r3, r2
    3910:	009b      	lsls	r3, r3, #2
    3912:	5c5b      	ldrb	r3, [r3, r1]
    3914:	220e      	movs	r2, #14
    3916:	18ba      	adds	r2, r7, r2
    3918:	7812      	ldrb	r2, [r2, #0]
    391a:	429a      	cmp	r2, r3
    391c:	d104      	bne.n	3928 <get_tc_index+0x48>
			return i;
    391e:	230f      	movs	r3, #15
    3920:	18fb      	adds	r3, r7, r3
    3922:	781b      	ldrb	r3, [r3, #0]
    3924:	b25b      	sxtb	r3, r3
    3926:	e014      	b.n	3952 <get_tc_index+0x72>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3928:	230f      	movs	r3, #15
    392a:	18fb      	adds	r3, r7, r3
    392c:	781a      	ldrb	r2, [r3, #0]
    392e:	230f      	movs	r3, #15
    3930:	18fb      	adds	r3, r7, r3
    3932:	3201      	adds	r2, #1
    3934:	701a      	strb	r2, [r3, #0]
    3936:	230f      	movs	r3, #15
    3938:	18fb      	adds	r3, r7, r3
    393a:	781b      	ldrb	r3, [r3, #0]
    393c:	2b00      	cmp	r3, #0
    393e:	d0e0      	beq.n	3902 <get_tc_index+0x22>
		}
	}

	ASSERT(false);
    3940:	23a9      	movs	r3, #169	; 0xa9
    3942:	005a      	lsls	r2, r3, #1
    3944:	4b07      	ldr	r3, [pc, #28]	; (3964 <get_tc_index+0x84>)
    3946:	0019      	movs	r1, r3
    3948:	2000      	movs	r0, #0
    394a:	4b07      	ldr	r3, [pc, #28]	; (3968 <get_tc_index+0x88>)
    394c:	4798      	blx	r3
	return -1;
    394e:	2301      	movs	r3, #1
    3950:	425b      	negs	r3, r3
}
    3952:	0018      	movs	r0, r3
    3954:	46bd      	mov	sp, r7
    3956:	b005      	add	sp, #20
    3958:	bd90      	pop	{r4, r7, pc}
    395a:	46c0      	nop			; (mov r8, r8)
    395c:	00003995 	.word	0x00003995
    3960:	20000014 	.word	0x20000014
    3964:	000085b0 	.word	0x000085b0
    3968:	00001afd 	.word	0x00001afd

0000396c <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    396c:	b580      	push	{r7, lr}
    396e:	b082      	sub	sp, #8
    3970:	af00      	add	r7, sp, #0
    3972:	6078      	str	r0, [r7, #4]
    3974:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    3976:	687b      	ldr	r3, [r7, #4]
    3978:	4a04      	ldr	r2, [pc, #16]	; (398c <_tc_init_irq_param+0x20>)
    397a:	4293      	cmp	r3, r2
    397c:	d102      	bne.n	3984 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _pwm_device *)dev;
    397e:	4b04      	ldr	r3, [pc, #16]	; (3990 <_tc_init_irq_param+0x24>)
    3980:	683a      	ldr	r2, [r7, #0]
    3982:	601a      	str	r2, [r3, #0]
	}
}
    3984:	46c0      	nop			; (mov r8, r8)
    3986:	46bd      	mov	sp, r7
    3988:	b002      	add	sp, #8
    398a:	bd80      	pop	{r7, pc}
    398c:	42003000 	.word	0x42003000
    3990:	2000004c 	.word	0x2000004c

00003994 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    3994:	b580      	push	{r7, lr}
    3996:	b082      	sub	sp, #8
    3998:	af00      	add	r7, sp, #0
    399a:	6078      	str	r0, [r7, #4]
	if ((uint32_t)TC4 == (uint32_t)hw) {
    399c:	687b      	ldr	r3, [r7, #4]
    399e:	4a07      	ldr	r2, [pc, #28]	; (39bc <_get_hardware_offset+0x28>)
    39a0:	4293      	cmp	r3, r2
    39a2:	d101      	bne.n	39a8 <_get_hardware_offset+0x14>
		return 4;
    39a4:	2304      	movs	r3, #4
    39a6:	e005      	b.n	39b4 <_get_hardware_offset+0x20>
	}
	return (((uint32_t)hw - (uint32_t)TC0) >> 10);
    39a8:	687b      	ldr	r3, [r7, #4]
    39aa:	4a05      	ldr	r2, [pc, #20]	; (39c0 <_get_hardware_offset+0x2c>)
    39ac:	4694      	mov	ip, r2
    39ae:	4463      	add	r3, ip
    39b0:	0a9b      	lsrs	r3, r3, #10
    39b2:	b2db      	uxtb	r3, r3
}
    39b4:	0018      	movs	r0, r3
    39b6:	46bd      	mov	sp, r7
    39b8:	b002      	add	sp, #8
    39ba:	bd80      	pop	{r7, pc}
    39bc:	42004000 	.word	0x42004000
    39c0:	bdffd000 	.word	0xbdffd000

000039c4 <main>:
#include <atmel_start.h>
#include "mytasks.h"
int main(void)
{
    39c4:	b580      	push	{r7, lr}
    39c6:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    39c8:	4b02      	ldr	r3, [pc, #8]	; (39d4 <main+0x10>)
    39ca:	4798      	blx	r3
	Create_all_tasks();
    39cc:	4b02      	ldr	r3, [pc, #8]	; (39d8 <main+0x14>)
    39ce:	4798      	blx	r3
	/* Replace with your application code */
	while (1) {
    39d0:	e7fe      	b.n	39d0 <main+0xc>
    39d2:	46c0      	nop			; (mov r8, r8)
    39d4:	0000011d 	.word	0x0000011d
    39d8:	00003dad 	.word	0x00003dad

000039dc <hri_port_read_DIR_reg>:
{
    39dc:	b580      	push	{r7, lr}
    39de:	b082      	sub	sp, #8
    39e0:	af00      	add	r7, sp, #0
    39e2:	6078      	str	r0, [r7, #4]
    39e4:	000a      	movs	r2, r1
    39e6:	1cfb      	adds	r3, r7, #3
    39e8:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    39ea:	1cfb      	adds	r3, r7, #3
    39ec:	781a      	ldrb	r2, [r3, #0]
    39ee:	687b      	ldr	r3, [r7, #4]
    39f0:	01d2      	lsls	r2, r2, #7
    39f2:	58d3      	ldr	r3, [r2, r3]
}
    39f4:	0018      	movs	r0, r3
    39f6:	46bd      	mov	sp, r7
    39f8:	b002      	add	sp, #8
    39fa:	bd80      	pop	{r7, pc}

000039fc <hri_port_set_OUT_reg>:
{
    39fc:	b580      	push	{r7, lr}
    39fe:	b084      	sub	sp, #16
    3a00:	af00      	add	r7, sp, #0
    3a02:	60f8      	str	r0, [r7, #12]
    3a04:	607a      	str	r2, [r7, #4]
    3a06:	230b      	movs	r3, #11
    3a08:	18fb      	adds	r3, r7, r3
    3a0a:	1c0a      	adds	r2, r1, #0
    3a0c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3a0e:	230b      	movs	r3, #11
    3a10:	18fb      	adds	r3, r7, r3
    3a12:	781b      	ldrb	r3, [r3, #0]
    3a14:	68fa      	ldr	r2, [r7, #12]
    3a16:	01db      	lsls	r3, r3, #7
    3a18:	18d3      	adds	r3, r2, r3
    3a1a:	3318      	adds	r3, #24
    3a1c:	687a      	ldr	r2, [r7, #4]
    3a1e:	601a      	str	r2, [r3, #0]
}
    3a20:	46c0      	nop			; (mov r8, r8)
    3a22:	46bd      	mov	sp, r7
    3a24:	b004      	add	sp, #16
    3a26:	bd80      	pop	{r7, pc}

00003a28 <hri_port_read_OUT_reg>:
{
    3a28:	b580      	push	{r7, lr}
    3a2a:	b082      	sub	sp, #8
    3a2c:	af00      	add	r7, sp, #0
    3a2e:	6078      	str	r0, [r7, #4]
    3a30:	000a      	movs	r2, r1
    3a32:	1cfb      	adds	r3, r7, #3
    3a34:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3a36:	1cfb      	adds	r3, r7, #3
    3a38:	781b      	ldrb	r3, [r3, #0]
    3a3a:	687a      	ldr	r2, [r7, #4]
    3a3c:	01db      	lsls	r3, r3, #7
    3a3e:	18d3      	adds	r3, r2, r3
    3a40:	3310      	adds	r3, #16
    3a42:	681b      	ldr	r3, [r3, #0]
}
    3a44:	0018      	movs	r0, r3
    3a46:	46bd      	mov	sp, r7
    3a48:	b002      	add	sp, #8
    3a4a:	bd80      	pop	{r7, pc}

00003a4c <hri_port_clear_OUT_reg>:
{
    3a4c:	b580      	push	{r7, lr}
    3a4e:	b084      	sub	sp, #16
    3a50:	af00      	add	r7, sp, #0
    3a52:	60f8      	str	r0, [r7, #12]
    3a54:	607a      	str	r2, [r7, #4]
    3a56:	230b      	movs	r3, #11
    3a58:	18fb      	adds	r3, r7, r3
    3a5a:	1c0a      	adds	r2, r1, #0
    3a5c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3a5e:	230b      	movs	r3, #11
    3a60:	18fb      	adds	r3, r7, r3
    3a62:	781b      	ldrb	r3, [r3, #0]
    3a64:	68fa      	ldr	r2, [r7, #12]
    3a66:	01db      	lsls	r3, r3, #7
    3a68:	18d3      	adds	r3, r2, r3
    3a6a:	3314      	adds	r3, #20
    3a6c:	687a      	ldr	r2, [r7, #4]
    3a6e:	601a      	str	r2, [r3, #0]
}
    3a70:	46c0      	nop			; (mov r8, r8)
    3a72:	46bd      	mov	sp, r7
    3a74:	b004      	add	sp, #16
    3a76:	bd80      	pop	{r7, pc}

00003a78 <hri_port_read_IN_reg>:
{
    3a78:	b580      	push	{r7, lr}
    3a7a:	b082      	sub	sp, #8
    3a7c:	af00      	add	r7, sp, #0
    3a7e:	6078      	str	r0, [r7, #4]
    3a80:	000a      	movs	r2, r1
    3a82:	1cfb      	adds	r3, r7, #3
    3a84:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3a86:	1cfb      	adds	r3, r7, #3
    3a88:	781b      	ldrb	r3, [r3, #0]
    3a8a:	687a      	ldr	r2, [r7, #4]
    3a8c:	01db      	lsls	r3, r3, #7
    3a8e:	18d3      	adds	r3, r2, r3
    3a90:	3320      	adds	r3, #32
    3a92:	681b      	ldr	r3, [r3, #0]
}
    3a94:	0018      	movs	r0, r3
    3a96:	46bd      	mov	sp, r7
    3a98:	b002      	add	sp, #8
    3a9a:	bd80      	pop	{r7, pc}

00003a9c <_gpio_set_level>:
{
    3a9c:	b580      	push	{r7, lr}
    3a9e:	b082      	sub	sp, #8
    3aa0:	af00      	add	r7, sp, #0
    3aa2:	6039      	str	r1, [r7, #0]
    3aa4:	0011      	movs	r1, r2
    3aa6:	1dfb      	adds	r3, r7, #7
    3aa8:	1c02      	adds	r2, r0, #0
    3aaa:	701a      	strb	r2, [r3, #0]
    3aac:	1dbb      	adds	r3, r7, #6
    3aae:	1c0a      	adds	r2, r1, #0
    3ab0:	701a      	strb	r2, [r3, #0]
	if (level) {
    3ab2:	1dbb      	adds	r3, r7, #6
    3ab4:	781b      	ldrb	r3, [r3, #0]
    3ab6:	2b00      	cmp	r3, #0
    3ab8:	d008      	beq.n	3acc <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    3aba:	683a      	ldr	r2, [r7, #0]
    3abc:	1dfb      	adds	r3, r7, #7
    3abe:	7819      	ldrb	r1, [r3, #0]
    3ac0:	23c0      	movs	r3, #192	; 0xc0
    3ac2:	05db      	lsls	r3, r3, #23
    3ac4:	0018      	movs	r0, r3
    3ac6:	4b07      	ldr	r3, [pc, #28]	; (3ae4 <_gpio_set_level+0x48>)
    3ac8:	4798      	blx	r3
}
    3aca:	e007      	b.n	3adc <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    3acc:	683a      	ldr	r2, [r7, #0]
    3ace:	1dfb      	adds	r3, r7, #7
    3ad0:	7819      	ldrb	r1, [r3, #0]
    3ad2:	23c0      	movs	r3, #192	; 0xc0
    3ad4:	05db      	lsls	r3, r3, #23
    3ad6:	0018      	movs	r0, r3
    3ad8:	4b03      	ldr	r3, [pc, #12]	; (3ae8 <_gpio_set_level+0x4c>)
    3ada:	4798      	blx	r3
}
    3adc:	46c0      	nop			; (mov r8, r8)
    3ade:	46bd      	mov	sp, r7
    3ae0:	b002      	add	sp, #8
    3ae2:	bd80      	pop	{r7, pc}
    3ae4:	000039fd 	.word	0x000039fd
    3ae8:	00003a4d 	.word	0x00003a4d

00003aec <_gpio_get_level>:
{
    3aec:	b580      	push	{r7, lr}
    3aee:	b086      	sub	sp, #24
    3af0:	af00      	add	r7, sp, #0
    3af2:	0002      	movs	r2, r0
    3af4:	1dfb      	adds	r3, r7, #7
    3af6:	701a      	strb	r2, [r3, #0]
	CRITICAL_SECTION_ENTER();
    3af8:	230c      	movs	r3, #12
    3afa:	18fb      	adds	r3, r7, r3
    3afc:	0018      	movs	r0, r3
    3afe:	4b18      	ldr	r3, [pc, #96]	; (3b60 <_gpio_get_level+0x74>)
    3b00:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);
    3b02:	1dfb      	adds	r3, r7, #7
    3b04:	781a      	ldrb	r2, [r3, #0]
    3b06:	23c0      	movs	r3, #192	; 0xc0
    3b08:	05db      	lsls	r3, r3, #23
    3b0a:	0011      	movs	r1, r2
    3b0c:	0018      	movs	r0, r3
    3b0e:	4b15      	ldr	r3, [pc, #84]	; (3b64 <_gpio_get_level+0x78>)
    3b10:	4798      	blx	r3
    3b12:	0003      	movs	r3, r0
    3b14:	617b      	str	r3, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    3b16:	1dfb      	adds	r3, r7, #7
    3b18:	781a      	ldrb	r2, [r3, #0]
    3b1a:	2382      	movs	r3, #130	; 0x82
    3b1c:	05db      	lsls	r3, r3, #23
    3b1e:	0011      	movs	r1, r2
    3b20:	0018      	movs	r0, r3
    3b22:	4b11      	ldr	r3, [pc, #68]	; (3b68 <_gpio_get_level+0x7c>)
    3b24:	4798      	blx	r3
    3b26:	0002      	movs	r2, r0
    3b28:	697b      	ldr	r3, [r7, #20]
    3b2a:	43db      	mvns	r3, r3
    3b2c:	4013      	ands	r3, r2
    3b2e:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3b30:	1dfb      	adds	r3, r7, #7
    3b32:	781a      	ldrb	r2, [r3, #0]
    3b34:	23c0      	movs	r3, #192	; 0xc0
    3b36:	05db      	lsls	r3, r3, #23
    3b38:	0011      	movs	r1, r2
    3b3a:	0018      	movs	r0, r3
    3b3c:	4b0b      	ldr	r3, [pc, #44]	; (3b6c <_gpio_get_level+0x80>)
    3b3e:	4798      	blx	r3
    3b40:	0002      	movs	r2, r0
    3b42:	697b      	ldr	r3, [r7, #20]
    3b44:	4013      	ands	r3, r2
    3b46:	693a      	ldr	r2, [r7, #16]
    3b48:	4313      	orrs	r3, r2
    3b4a:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
    3b4c:	230c      	movs	r3, #12
    3b4e:	18fb      	adds	r3, r7, r3
    3b50:	0018      	movs	r0, r3
    3b52:	4b07      	ldr	r3, [pc, #28]	; (3b70 <_gpio_get_level+0x84>)
    3b54:	4798      	blx	r3
	return tmp;
    3b56:	693b      	ldr	r3, [r7, #16]
}
    3b58:	0018      	movs	r0, r3
    3b5a:	46bd      	mov	sp, r7
    3b5c:	b006      	add	sp, #24
    3b5e:	bd80      	pop	{r7, pc}
    3b60:	00000fed 	.word	0x00000fed
    3b64:	000039dd 	.word	0x000039dd
    3b68:	00003a79 	.word	0x00003a79
    3b6c:	00003a29 	.word	0x00003a29
    3b70:	0000100f 	.word	0x0000100f

00003b74 <gpio_set_pin_level>:
{
    3b74:	b580      	push	{r7, lr}
    3b76:	b082      	sub	sp, #8
    3b78:	af00      	add	r7, sp, #0
    3b7a:	0002      	movs	r2, r0
    3b7c:	1dfb      	adds	r3, r7, #7
    3b7e:	701a      	strb	r2, [r3, #0]
    3b80:	1dbb      	adds	r3, r7, #6
    3b82:	1c0a      	adds	r2, r1, #0
    3b84:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3b86:	1dfb      	adds	r3, r7, #7
    3b88:	781b      	ldrb	r3, [r3, #0]
    3b8a:	095b      	lsrs	r3, r3, #5
    3b8c:	b2d8      	uxtb	r0, r3
    3b8e:	1dfb      	adds	r3, r7, #7
    3b90:	781b      	ldrb	r3, [r3, #0]
    3b92:	221f      	movs	r2, #31
    3b94:	4013      	ands	r3, r2
    3b96:	2201      	movs	r2, #1
    3b98:	409a      	lsls	r2, r3
    3b9a:	0011      	movs	r1, r2
    3b9c:	1dbb      	adds	r3, r7, #6
    3b9e:	781b      	ldrb	r3, [r3, #0]
    3ba0:	001a      	movs	r2, r3
    3ba2:	4b03      	ldr	r3, [pc, #12]	; (3bb0 <gpio_set_pin_level+0x3c>)
    3ba4:	4798      	blx	r3
}
    3ba6:	46c0      	nop			; (mov r8, r8)
    3ba8:	46bd      	mov	sp, r7
    3baa:	b002      	add	sp, #8
    3bac:	bd80      	pop	{r7, pc}
    3bae:	46c0      	nop			; (mov r8, r8)
    3bb0:	00003a9d 	.word	0x00003a9d

00003bb4 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    3bb4:	b580      	push	{r7, lr}
    3bb6:	b082      	sub	sp, #8
    3bb8:	af00      	add	r7, sp, #0
    3bba:	0002      	movs	r2, r0
    3bbc:	1dfb      	adds	r3, r7, #7
    3bbe:	701a      	strb	r2, [r3, #0]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    3bc0:	1dfb      	adds	r3, r7, #7
    3bc2:	781b      	ldrb	r3, [r3, #0]
    3bc4:	095b      	lsrs	r3, r3, #5
    3bc6:	b2db      	uxtb	r3, r3
    3bc8:	0018      	movs	r0, r3
    3bca:	4b09      	ldr	r3, [pc, #36]	; (3bf0 <gpio_get_pin_level+0x3c>)
    3bcc:	4798      	blx	r3
    3bce:	0001      	movs	r1, r0
    3bd0:	1dfb      	adds	r3, r7, #7
    3bd2:	781b      	ldrb	r3, [r3, #0]
    3bd4:	221f      	movs	r2, #31
    3bd6:	4013      	ands	r3, r2
    3bd8:	2201      	movs	r2, #1
    3bda:	409a      	lsls	r2, r3
    3bdc:	0013      	movs	r3, r2
    3bde:	400b      	ands	r3, r1
    3be0:	1e5a      	subs	r2, r3, #1
    3be2:	4193      	sbcs	r3, r2
    3be4:	b2db      	uxtb	r3, r3
}
    3be6:	0018      	movs	r0, r3
    3be8:	46bd      	mov	sp, r7
    3bea:	b002      	add	sp, #8
    3bec:	bd80      	pop	{r7, pc}
    3bee:	46c0      	nop			; (mov r8, r8)
    3bf0:	00003aed 	.word	0x00003aed

00003bf4 <STATE_task>:
uint8_t UART_Buffer[100];
uint8_t UART_Send_Buffer[100];
int UART_Length = 0;
*/
void STATE_task(void *p)
{
    3bf4:	b580      	push	{r7, lr}
    3bf6:	b08a      	sub	sp, #40	; 0x28
    3bf8:	af00      	add	r7, sp, #0
    3bfa:	6078      	str	r0, [r7, #4]
	int responce = 0;
    3bfc:	2300      	movs	r3, #0
    3bfe:	617b      	str	r3, [r7, #20]
	int sensor_failure = 0;
    3c00:	2300      	movs	r3, #0
    3c02:	613b      	str	r3, [r7, #16]
	int low_bat = 0;
    3c04:	2300      	movs	r3, #0
    3c06:	627b      	str	r3, [r7, #36]	; 0x24
	int continuing = 0;
    3c08:	2300      	movs	r3, #0
    3c0a:	623b      	str	r3, [r7, #32]
	int done = 0;
    3c0c:	2300      	movs	r3, #0
    3c0e:	61fb      	str	r3, [r7, #28]
	int dir = RIGHT;
    3c10:	2301      	movs	r3, #1
    3c12:	61bb      	str	r3, [r7, #24]
	//setup
	usart_sync_get_io_descriptor(&UART, &io);
    3c14:	4a57      	ldr	r2, [pc, #348]	; (3d74 <STATE_task+0x180>)
    3c16:	4b58      	ldr	r3, [pc, #352]	; (3d78 <STATE_task+0x184>)
    3c18:	0011      	movs	r1, r2
    3c1a:	0018      	movs	r0, r3
    3c1c:	4b57      	ldr	r3, [pc, #348]	; (3d7c <STATE_task+0x188>)
    3c1e:	4798      	blx	r3
	usart_sync_enable(&UART);
    3c20:	4b55      	ldr	r3, [pc, #340]	; (3d78 <STATE_task+0x184>)
    3c22:	0018      	movs	r0, r3
    3c24:	4b56      	ldr	r3, [pc, #344]	; (3d80 <STATE_task+0x18c>)
    3c26:	4798      	blx	r3
	
	while(1)
	{
		////////
		idle(sensor_failure, low_bat);
    3c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3c2a:	693b      	ldr	r3, [r7, #16]
    3c2c:	0011      	movs	r1, r2
    3c2e:	0018      	movs	r0, r3
    3c30:	4b54      	ldr	r3, [pc, #336]	; (3d84 <STATE_task+0x190>)
    3c32:	4798      	blx	r3
		int sensor_failure = check_sensors();
    3c34:	4b54      	ldr	r3, [pc, #336]	; (3d88 <STATE_task+0x194>)
    3c36:	4798      	blx	r3
    3c38:	0003      	movs	r3, r0
    3c3a:	60fb      	str	r3, [r7, #12]
		if(sensor_failure == 0)
    3c3c:	68fb      	ldr	r3, [r7, #12]
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d1f2      	bne.n	3c28 <STATE_task+0x34>
		{
			UART_Send_Buffer[0] = 's';
    3c42:	4b52      	ldr	r3, [pc, #328]	; (3d8c <STATE_task+0x198>)
    3c44:	2273      	movs	r2, #115	; 0x73
    3c46:	701a      	strb	r2, [r3, #0]
			UART_Send_Buffer[1] = '1';
    3c48:	4b50      	ldr	r3, [pc, #320]	; (3d8c <STATE_task+0x198>)
    3c4a:	2231      	movs	r2, #49	; 0x31
    3c4c:	705a      	strb	r2, [r3, #1]
			UART_Send_Buffer[2] = '\0';
    3c4e:	4b4f      	ldr	r3, [pc, #316]	; (3d8c <STATE_task+0x198>)
    3c50:	2200      	movs	r2, #0
    3c52:	709a      	strb	r2, [r3, #2]
			send_message(3); //************************************************************************************* UNDOCK
    3c54:	2003      	movs	r0, #3
    3c56:	4b4e      	ldr	r3, [pc, #312]	; (3d90 <STATE_task+0x19c>)
    3c58:	4798      	blx	r3
			//send message to RCU move down(92308 steps) 1khz out on pwm for os_sleep(9230)       *************************************************************************************************
			// 6154 steps/inch
			wait_for_responce();
    3c5a:	4b4e      	ldr	r3, [pc, #312]	; (3d94 <STATE_task+0x1a0>)
    3c5c:	4798      	blx	r3
			UART_Send_Buffer[0] = 's';
    3c5e:	4b4b      	ldr	r3, [pc, #300]	; (3d8c <STATE_task+0x198>)
    3c60:	2273      	movs	r2, #115	; 0x73
    3c62:	701a      	strb	r2, [r3, #0]
			UART_Send_Buffer[1] = '2';
    3c64:	4b49      	ldr	r3, [pc, #292]	; (3d8c <STATE_task+0x198>)
    3c66:	2232      	movs	r2, #50	; 0x32
    3c68:	705a      	strb	r2, [r3, #1]
			UART_Send_Buffer[2] = '\0';
    3c6a:	4b48      	ldr	r3, [pc, #288]	; (3d8c <STATE_task+0x198>)
    3c6c:	2200      	movs	r2, #0
    3c6e:	709a      	strb	r2, [r3, #2]
			send_message(3); //************************************************************************************* BRUSHON
    3c70:	2003      	movs	r0, #3
    3c72:	4b47      	ldr	r3, [pc, #284]	; (3d90 <STATE_task+0x19c>)
    3c74:	4798      	blx	r3
			wait_for_responce();
    3c76:	4b47      	ldr	r3, [pc, #284]	; (3d94 <STATE_task+0x1a0>)
    3c78:	4798      	blx	r3
			if(continuing)
    3c7a:	6a3b      	ldr	r3, [r7, #32]
    3c7c:	2b00      	cmp	r3, #0
    3c7e:	d100      	bne.n	3c82 <STATE_task+0x8e>
    3c80:	e073      	b.n	3d6a <STATE_task+0x176>
			{
				UART_Send_Buffer[0] = 's';
    3c82:	4b42      	ldr	r3, [pc, #264]	; (3d8c <STATE_task+0x198>)
    3c84:	2273      	movs	r2, #115	; 0x73
    3c86:	701a      	strb	r2, [r3, #0]
				UART_Send_Buffer[1] = '3';
    3c88:	4b40      	ldr	r3, [pc, #256]	; (3d8c <STATE_task+0x198>)
    3c8a:	2233      	movs	r2, #51	; 0x33
    3c8c:	705a      	strb	r2, [r3, #1]
				UART_Send_Buffer[2] = '\0';
    3c8e:	4b3f      	ldr	r3, [pc, #252]	; (3d8c <STATE_task+0x198>)
    3c90:	2200      	movs	r2, #0
    3c92:	709a      	strb	r2, [r3, #2]
				send_message(3);//************************************************************************ CONTINUE
    3c94:	2003      	movs	r0, #3
    3c96:	4b3e      	ldr	r3, [pc, #248]	; (3d90 <STATE_task+0x19c>)
    3c98:	4798      	blx	r3
				wait_for_responce();
    3c9a:	4b3e      	ldr	r3, [pc, #248]	; (3d94 <STATE_task+0x1a0>)
    3c9c:	4798      	blx	r3
			}
			while(done == 0)
    3c9e:	e064      	b.n	3d6a <STATE_task+0x176>
			{
				pwm(dir);
    3ca0:	69bb      	ldr	r3, [r7, #24]
    3ca2:	0018      	movs	r0, r3
    3ca4:	4b3c      	ldr	r3, [pc, #240]	; (3d98 <STATE_task+0x1a4>)
    3ca6:	4798      	blx	r3
				if(dir == RIGHT)
    3ca8:	69bb      	ldr	r3, [r7, #24]
    3caa:	2b01      	cmp	r3, #1
    3cac:	d10a      	bne.n	3cc4 <STATE_task+0xd0>
				{
					while(readbtn(Right) == 1 )
    3cae:	e002      	b.n	3cb6 <STATE_task+0xc2>
					{
						os_sleep(100);
    3cb0:	2064      	movs	r0, #100	; 0x64
    3cb2:	4b3a      	ldr	r3, [pc, #232]	; (3d9c <STATE_task+0x1a8>)
    3cb4:	4798      	blx	r3
					while(readbtn(Right) == 1 )
    3cb6:	2014      	movs	r0, #20
    3cb8:	4b39      	ldr	r3, [pc, #228]	; (3da0 <STATE_task+0x1ac>)
    3cba:	4798      	blx	r3
    3cbc:	0003      	movs	r3, r0
    3cbe:	2b01      	cmp	r3, #1
    3cc0:	d0f6      	beq.n	3cb0 <STATE_task+0xbc>
    3cc2:	e00c      	b.n	3cde <STATE_task+0xea>
					}
				}
				else if(dir == LEFT)
    3cc4:	69bb      	ldr	r3, [r7, #24]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d109      	bne.n	3cde <STATE_task+0xea>
				{
					while(readbtn(Left) == 1 )
    3cca:	e002      	b.n	3cd2 <STATE_task+0xde>
					{
						os_sleep(100);
    3ccc:	2064      	movs	r0, #100	; 0x64
    3cce:	4b33      	ldr	r3, [pc, #204]	; (3d9c <STATE_task+0x1a8>)
    3cd0:	4798      	blx	r3
					while(readbtn(Left) == 1 )
    3cd2:	2015      	movs	r0, #21
    3cd4:	4b32      	ldr	r3, [pc, #200]	; (3da0 <STATE_task+0x1ac>)
    3cd6:	4798      	blx	r3
    3cd8:	0003      	movs	r3, r0
    3cda:	2b01      	cmp	r3, #1
    3cdc:	d0f6      	beq.n	3ccc <STATE_task+0xd8>
					}
				}
				pwm(OFF);
    3cde:	2002      	movs	r0, #2
    3ce0:	4b2d      	ldr	r3, [pc, #180]	; (3d98 <STATE_task+0x1a4>)
    3ce2:	4798      	blx	r3
				UART_Send_Buffer[0] = 's';
    3ce4:	4b29      	ldr	r3, [pc, #164]	; (3d8c <STATE_task+0x198>)
    3ce6:	2273      	movs	r2, #115	; 0x73
    3ce8:	701a      	strb	r2, [r3, #0]
				UART_Send_Buffer[1] = '4';
    3cea:	4b28      	ldr	r3, [pc, #160]	; (3d8c <STATE_task+0x198>)
    3cec:	2234      	movs	r2, #52	; 0x34
    3cee:	705a      	strb	r2, [r3, #1]
				UART_Send_Buffer[2] = '\0';
    3cf0:	4b26      	ldr	r3, [pc, #152]	; (3d8c <STATE_task+0x198>)
    3cf2:	2200      	movs	r2, #0
    3cf4:	709a      	strb	r2, [r3, #2]
				send_message(3);//************************************************************************ MOVEDOWN
    3cf6:	2003      	movs	r0, #3
    3cf8:	4b25      	ldr	r3, [pc, #148]	; (3d90 <STATE_task+0x19c>)
    3cfa:	4798      	blx	r3
				wait_for_responce();
    3cfc:	4b25      	ldr	r3, [pc, #148]	; (3d94 <STATE_task+0x1a0>)
    3cfe:	4798      	blx	r3
				if(UART_Buffer[0] == '1')
    3d00:	4b28      	ldr	r3, [pc, #160]	; (3da4 <STATE_task+0x1b0>)
    3d02:	781b      	ldrb	r3, [r3, #0]
    3d04:	2b31      	cmp	r3, #49	; 0x31
    3d06:	d108      	bne.n	3d1a <STATE_task+0x126>
				{
					if(dir == LEFT) dir = RIGHT;
    3d08:	69bb      	ldr	r3, [r7, #24]
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	d102      	bne.n	3d14 <STATE_task+0x120>
    3d0e:	2301      	movs	r3, #1
    3d10:	61bb      	str	r3, [r7, #24]
    3d12:	e02a      	b.n	3d6a <STATE_task+0x176>
					else dir = LEFT;
    3d14:	2300      	movs	r3, #0
    3d16:	61bb      	str	r3, [r7, #24]
    3d18:	e027      	b.n	3d6a <STATE_task+0x176>
				}
				else if(UART_Buffer[0] == '2')
    3d1a:	4b22      	ldr	r3, [pc, #136]	; (3da4 <STATE_task+0x1b0>)
    3d1c:	781b      	ldrb	r3, [r3, #0]
    3d1e:	2b32      	cmp	r3, #50	; 0x32
    3d20:	d117      	bne.n	3d52 <STATE_task+0x15e>
				{
					done = 1;
    3d22:	2301      	movs	r3, #1
    3d24:	61fb      	str	r3, [r7, #28]
					if(dir == RIGHT)
    3d26:	69bb      	ldr	r3, [r7, #24]
    3d28:	2b01      	cmp	r3, #1
    3d2a:	d10f      	bne.n	3d4c <STATE_task+0x158>
					{
						dir = LEFT;
    3d2c:	2300      	movs	r3, #0
    3d2e:	61bb      	str	r3, [r7, #24]
						pwm(dir);
    3d30:	69bb      	ldr	r3, [r7, #24]
    3d32:	0018      	movs	r0, r3
    3d34:	4b18      	ldr	r3, [pc, #96]	; (3d98 <STATE_task+0x1a4>)
    3d36:	4798      	blx	r3
						while(readbtn(Left) == 1 )
    3d38:	e002      	b.n	3d40 <STATE_task+0x14c>
						{
							os_sleep(100);
    3d3a:	2064      	movs	r0, #100	; 0x64
    3d3c:	4b17      	ldr	r3, [pc, #92]	; (3d9c <STATE_task+0x1a8>)
    3d3e:	4798      	blx	r3
						while(readbtn(Left) == 1 )
    3d40:	2015      	movs	r0, #21
    3d42:	4b17      	ldr	r3, [pc, #92]	; (3da0 <STATE_task+0x1ac>)
    3d44:	4798      	blx	r3
    3d46:	0003      	movs	r3, r0
    3d48:	2b01      	cmp	r3, #1
    3d4a:	d0f6      	beq.n	3d3a <STATE_task+0x146>
						}
					}
					dock();
    3d4c:	4b16      	ldr	r3, [pc, #88]	; (3da8 <STATE_task+0x1b4>)
    3d4e:	4798      	blx	r3
    3d50:	e00b      	b.n	3d6a <STATE_task+0x176>
					
				}
				else if(UART_Buffer[0] == '3')
    3d52:	4b14      	ldr	r3, [pc, #80]	; (3da4 <STATE_task+0x1b0>)
    3d54:	781b      	ldrb	r3, [r3, #0]
    3d56:	2b33      	cmp	r3, #51	; 0x33
    3d58:	d107      	bne.n	3d6a <STATE_task+0x176>
				{
					continuing = 1;
    3d5a:	2301      	movs	r3, #1
    3d5c:	623b      	str	r3, [r7, #32]
					low_bat = 1;
    3d5e:	2301      	movs	r3, #1
    3d60:	627b      	str	r3, [r7, #36]	; 0x24
					dir = RIGHT;
    3d62:	2301      	movs	r3, #1
    3d64:	61bb      	str	r3, [r7, #24]
					dock();
    3d66:	4b10      	ldr	r3, [pc, #64]	; (3da8 <STATE_task+0x1b4>)
    3d68:	4798      	blx	r3
			while(done == 0)
    3d6a:	69fb      	ldr	r3, [r7, #28]
    3d6c:	2b00      	cmp	r3, #0
    3d6e:	d097      	beq.n	3ca0 <STATE_task+0xac>
	{
    3d70:	e75a      	b.n	3c28 <STATE_task+0x34>
    3d72:	46c0      	nop			; (mov r8, r8)
    3d74:	200027f0 	.word	0x200027f0
    3d78:	200027a8 	.word	0x200027a8
    3d7c:	00001909 	.word	0x00001909
    3d80:	000018cd 	.word	0x000018cd
    3d84:	00003df5 	.word	0x00003df5
    3d88:	00003ea1 	.word	0x00003ea1
    3d8c:	20002858 	.word	0x20002858
    3d90:	000040b5 	.word	0x000040b5
    3d94:	00004145 	.word	0x00004145
    3d98:	00004229 	.word	0x00004229
    3d9c:	00005725 	.word	0x00005725
    3da0:	0000427d 	.word	0x0000427d
    3da4:	200027f4 	.word	0x200027f4
    3da8:	0000406d 	.word	0x0000406d

00003dac <Create_all_tasks>:
	
	
}

void Create_all_tasks()
{
    3dac:	b590      	push	{r4, r7, lr}
    3dae:	b083      	sub	sp, #12
    3db0:	af02      	add	r7, sp, #8
		
		if (xTaskCreate(
		STATE_task, "STATE", TASK_STACK_SIZE*20, NULL, TASK_STACK_PRIORITY, xCreatedTask[3])
    3db2:	4b0b      	ldr	r3, [pc, #44]	; (3de0 <Create_all_tasks+0x34>)
    3db4:	68db      	ldr	r3, [r3, #12]
		if (xTaskCreate(
    3db6:	22a0      	movs	r2, #160	; 0xa0
    3db8:	0092      	lsls	r2, r2, #2
    3dba:	490a      	ldr	r1, [pc, #40]	; (3de4 <Create_all_tasks+0x38>)
    3dbc:	480a      	ldr	r0, [pc, #40]	; (3de8 <Create_all_tasks+0x3c>)
    3dbe:	9301      	str	r3, [sp, #4]
    3dc0:	2301      	movs	r3, #1
    3dc2:	9300      	str	r3, [sp, #0]
    3dc4:	2300      	movs	r3, #0
    3dc6:	4c09      	ldr	r4, [pc, #36]	; (3dec <Create_all_tasks+0x40>)
    3dc8:	47a0      	blx	r4
    3dca:	0003      	movs	r3, r0
    3dcc:	2b01      	cmp	r3, #1
    3dce:	d000      	beq.n	3dd2 <Create_all_tasks+0x26>
		!= pdPASS) {
			while (1) {
    3dd0:	e7fe      	b.n	3dd0 <Create_all_tasks+0x24>
				;
			}
		}

		vTaskStartScheduler();
    3dd2:	4b07      	ldr	r3, [pc, #28]	; (3df0 <Create_all_tasks+0x44>)
    3dd4:	4798      	blx	r3

		return;
    3dd6:	46c0      	nop			; (mov r8, r8)
}
    3dd8:	46bd      	mov	sp, r7
    3dda:	b001      	add	sp, #4
    3ddc:	bd90      	pop	{r4, r7, pc}
    3dde:	46c0      	nop			; (mov r8, r8)
    3de0:	20000050 	.word	0x20000050
    3de4:	000085c4 	.word	0x000085c4
    3de8:	00003bf5 	.word	0x00003bf5
    3dec:	0000549d 	.word	0x0000549d
    3df0:	00005781 	.word	0x00005781

00003df4 <idle>:
void idle(int sf, int lb)//sf= sensor failure, lb = low battery
{
    3df4:	b580      	push	{r7, lr}
    3df6:	b084      	sub	sp, #16
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
    3dfc:	6039      	str	r1, [r7, #0]
	if(lb)
    3dfe:	683b      	ldr	r3, [r7, #0]
    3e00:	2b00      	cmp	r3, #0
    3e02:	d00f      	beq.n	3e24 <idle+0x30>
	{
		//low battery sleep 1 hour
		for(int i = 0; i < 3600; i ++)
    3e04:	2300      	movs	r3, #0
    3e06:	60fb      	str	r3, [r7, #12]
    3e08:	e007      	b.n	3e1a <idle+0x26>
		{
			os_sleep(2000);
    3e0a:	23fa      	movs	r3, #250	; 0xfa
    3e0c:	00db      	lsls	r3, r3, #3
    3e0e:	0018      	movs	r0, r3
    3e10:	4b1c      	ldr	r3, [pc, #112]	; (3e84 <idle+0x90>)
    3e12:	4798      	blx	r3
		for(int i = 0; i < 3600; i ++)
    3e14:	68fb      	ldr	r3, [r7, #12]
    3e16:	3301      	adds	r3, #1
    3e18:	60fb      	str	r3, [r7, #12]
    3e1a:	68fb      	ldr	r3, [r7, #12]
    3e1c:	4a1a      	ldr	r2, [pc, #104]	; (3e88 <idle+0x94>)
    3e1e:	4293      	cmp	r3, r2
    3e20:	ddf3      	ble.n	3e0a <idle+0x16>
		}
		return;	
    3e22:	e02b      	b.n	3e7c <idle+0x88>
	}
	if(sf)
    3e24:	687b      	ldr	r3, [r7, #4]
    3e26:	2b00      	cmp	r3, #0
    3e28:	d00a      	beq.n	3e40 <idle+0x4c>
	{
		while(check_sensors() == 1);
    3e2a:	46c0      	nop			; (mov r8, r8)
    3e2c:	4b17      	ldr	r3, [pc, #92]	; (3e8c <idle+0x98>)
    3e2e:	4798      	blx	r3
    3e30:	0003      	movs	r3, r0
    3e32:	2b01      	cmp	r3, #1
    3e34:	d0fa      	beq.n	3e2c <idle+0x38>
		os_sleep(5000);
    3e36:	4b16      	ldr	r3, [pc, #88]	; (3e90 <idle+0x9c>)
    3e38:	0018      	movs	r0, r3
    3e3a:	4b12      	ldr	r3, [pc, #72]	; (3e84 <idle+0x90>)
    3e3c:	4798      	blx	r3
		return;
    3e3e:	e01d      	b.n	3e7c <idle+0x88>
	}
	while(1)
	{ 
		if(readbtn(Manual_7) == 0)
    3e40:	2030      	movs	r0, #48	; 0x30
    3e42:	4b14      	ldr	r3, [pc, #80]	; (3e94 <idle+0xa0>)
    3e44:	4798      	blx	r3
    3e46:	1e03      	subs	r3, r0, #0
    3e48:	d107      	bne.n	3e5a <idle+0x66>
		{
			while(readbtn(Manual_7) == 0);
    3e4a:	46c0      	nop			; (mov r8, r8)
    3e4c:	2030      	movs	r0, #48	; 0x30
    3e4e:	4b11      	ldr	r3, [pc, #68]	; (3e94 <idle+0xa0>)
    3e50:	4798      	blx	r3
    3e52:	1e03      	subs	r3, r0, #0
    3e54:	d0fa      	beq.n	3e4c <idle+0x58>
			manual_mode();
    3e56:	4b10      	ldr	r3, [pc, #64]	; (3e98 <idle+0xa4>)
    3e58:	4798      	blx	r3
		}
		if(check_schedule() == 1)
    3e5a:	4b10      	ldr	r3, [pc, #64]	; (3e9c <idle+0xa8>)
    3e5c:	4798      	blx	r3
    3e5e:	0003      	movs	r3, r0
    3e60:	2b01      	cmp	r3, #1
    3e62:	d008      	beq.n	3e76 <idle+0x82>
		{
			return;
		}
		if(readbtn(Start_Cleaning) == 0)
    3e64:	2028      	movs	r0, #40	; 0x28
    3e66:	4b0b      	ldr	r3, [pc, #44]	; (3e94 <idle+0xa0>)
    3e68:	4798      	blx	r3
    3e6a:	1e03      	subs	r3, r0, #0
    3e6c:	d005      	beq.n	3e7a <idle+0x86>
		{
			return;
		}
		os_sleep(10);
    3e6e:	200a      	movs	r0, #10
    3e70:	4b04      	ldr	r3, [pc, #16]	; (3e84 <idle+0x90>)
    3e72:	4798      	blx	r3
		if(readbtn(Manual_7) == 0)
    3e74:	e7e4      	b.n	3e40 <idle+0x4c>
			return;
    3e76:	46c0      	nop			; (mov r8, r8)
    3e78:	e000      	b.n	3e7c <idle+0x88>
			return;
    3e7a:	46c0      	nop			; (mov r8, r8)
	}
}
    3e7c:	46bd      	mov	sp, r7
    3e7e:	b004      	add	sp, #16
    3e80:	bd80      	pop	{r7, pc}
    3e82:	46c0      	nop			; (mov r8, r8)
    3e84:	00005725 	.word	0x00005725
    3e88:	00000e0f 	.word	0x00000e0f
    3e8c:	00003ea1 	.word	0x00003ea1
    3e90:	00001388 	.word	0x00001388
    3e94:	0000427d 	.word	0x0000427d
    3e98:	000043c9 	.word	0x000043c9
    3e9c:	000045a5 	.word	0x000045a5

00003ea0 <check_sensors>:
int check_sensors() //DONE
{
    3ea0:	b590      	push	{r4, r7, lr}
    3ea2:	b089      	sub	sp, #36	; 0x24
    3ea4:	af00      	add	r7, sp, #0
		uint8_t temp[2];
		uint8_t wind[2];
		
		adc_sync_enable_channel(&WindSensor, 0);
    3ea6:	4b58      	ldr	r3, [pc, #352]	; (4008 <check_sensors+0x168>)
    3ea8:	2100      	movs	r1, #0
    3eaa:	0018      	movs	r0, r3
    3eac:	4b57      	ldr	r3, [pc, #348]	; (400c <check_sensors+0x16c>)
    3eae:	4798      	blx	r3
		adc_sync_read_channel(&WindSensor, 0, wind, 2);
    3eb0:	003a      	movs	r2, r7
    3eb2:	4855      	ldr	r0, [pc, #340]	; (4008 <check_sensors+0x168>)
    3eb4:	2302      	movs	r3, #2
    3eb6:	2100      	movs	r1, #0
    3eb8:	4c55      	ldr	r4, [pc, #340]	; (4010 <check_sensors+0x170>)
    3eba:	47a0      	blx	r4
		double w = ((uint16_t)wind[1] << 8) | wind[0];
    3ebc:	003b      	movs	r3, r7
    3ebe:	785b      	ldrb	r3, [r3, #1]
    3ec0:	021b      	lsls	r3, r3, #8
    3ec2:	003a      	movs	r2, r7
    3ec4:	7812      	ldrb	r2, [r2, #0]
    3ec6:	431a      	orrs	r2, r3
    3ec8:	4b52      	ldr	r3, [pc, #328]	; (4014 <check_sensors+0x174>)
    3eca:	0010      	movs	r0, r2
    3ecc:	4798      	blx	r3
    3ece:	0003      	movs	r3, r0
    3ed0:	000c      	movs	r4, r1
    3ed2:	61bb      	str	r3, [r7, #24]
    3ed4:	61fc      	str	r4, [r7, #28]
		w = (((w * 3300.0 / 4095.0) - 400) / 1600) * 50;
    3ed6:	4c50      	ldr	r4, [pc, #320]	; (4018 <check_sensors+0x178>)
    3ed8:	2200      	movs	r2, #0
    3eda:	4b50      	ldr	r3, [pc, #320]	; (401c <check_sensors+0x17c>)
    3edc:	69b8      	ldr	r0, [r7, #24]
    3ede:	69f9      	ldr	r1, [r7, #28]
    3ee0:	47a0      	blx	r4
    3ee2:	0003      	movs	r3, r0
    3ee4:	000c      	movs	r4, r1
    3ee6:	0018      	movs	r0, r3
    3ee8:	0021      	movs	r1, r4
    3eea:	4c4d      	ldr	r4, [pc, #308]	; (4020 <check_sensors+0x180>)
    3eec:	2200      	movs	r2, #0
    3eee:	4b4d      	ldr	r3, [pc, #308]	; (4024 <check_sensors+0x184>)
    3ef0:	47a0      	blx	r4
    3ef2:	0003      	movs	r3, r0
    3ef4:	000c      	movs	r4, r1
    3ef6:	0018      	movs	r0, r3
    3ef8:	0021      	movs	r1, r4
    3efa:	4c4b      	ldr	r4, [pc, #300]	; (4028 <check_sensors+0x188>)
    3efc:	2200      	movs	r2, #0
    3efe:	4b4b      	ldr	r3, [pc, #300]	; (402c <check_sensors+0x18c>)
    3f00:	47a0      	blx	r4
    3f02:	0003      	movs	r3, r0
    3f04:	000c      	movs	r4, r1
    3f06:	0018      	movs	r0, r3
    3f08:	0021      	movs	r1, r4
    3f0a:	4c45      	ldr	r4, [pc, #276]	; (4020 <check_sensors+0x180>)
    3f0c:	2200      	movs	r2, #0
    3f0e:	4b48      	ldr	r3, [pc, #288]	; (4030 <check_sensors+0x190>)
    3f10:	47a0      	blx	r4
    3f12:	0003      	movs	r3, r0
    3f14:	000c      	movs	r4, r1
    3f16:	0018      	movs	r0, r3
    3f18:	0021      	movs	r1, r4
    3f1a:	4c3f      	ldr	r4, [pc, #252]	; (4018 <check_sensors+0x178>)
    3f1c:	2200      	movs	r2, #0
    3f1e:	4b45      	ldr	r3, [pc, #276]	; (4034 <check_sensors+0x194>)
    3f20:	47a0      	blx	r4
    3f22:	0003      	movs	r3, r0
    3f24:	000c      	movs	r4, r1
    3f26:	61bb      	str	r3, [r7, #24]
    3f28:	61fc      	str	r4, [r7, #28]
		adc_sync_disable_channel(&WindSensor, 0);
    3f2a:	4b37      	ldr	r3, [pc, #220]	; (4008 <check_sensors+0x168>)
    3f2c:	2100      	movs	r1, #0
    3f2e:	0018      	movs	r0, r3
    3f30:	4b41      	ldr	r3, [pc, #260]	; (4038 <check_sensors+0x198>)
    3f32:	4798      	blx	r3
		
		adc_sync_enable_channel(&TempSensor, 0);
    3f34:	4b41      	ldr	r3, [pc, #260]	; (403c <check_sensors+0x19c>)
    3f36:	2100      	movs	r1, #0
    3f38:	0018      	movs	r0, r3
    3f3a:	4b34      	ldr	r3, [pc, #208]	; (400c <check_sensors+0x16c>)
    3f3c:	4798      	blx	r3
		adc_sync_read_channel(&TempSensor, 0, temp, 2);
    3f3e:	1d3a      	adds	r2, r7, #4
    3f40:	483e      	ldr	r0, [pc, #248]	; (403c <check_sensors+0x19c>)
    3f42:	2302      	movs	r3, #2
    3f44:	2100      	movs	r1, #0
    3f46:	4c32      	ldr	r4, [pc, #200]	; (4010 <check_sensors+0x170>)
    3f48:	47a0      	blx	r4
		double c = ((uint16_t)temp[1] << 8) | temp[0];
    3f4a:	1d3b      	adds	r3, r7, #4
    3f4c:	785b      	ldrb	r3, [r3, #1]
    3f4e:	021b      	lsls	r3, r3, #8
    3f50:	1d3a      	adds	r2, r7, #4
    3f52:	7812      	ldrb	r2, [r2, #0]
    3f54:	431a      	orrs	r2, r3
    3f56:	4b2f      	ldr	r3, [pc, #188]	; (4014 <check_sensors+0x174>)
    3f58:	0010      	movs	r0, r2
    3f5a:	4798      	blx	r3
    3f5c:	0003      	movs	r3, r0
    3f5e:	000c      	movs	r4, r1
    3f60:	613b      	str	r3, [r7, #16]
    3f62:	617c      	str	r4, [r7, #20]
		c  = c  * (3300/4095.0);
    3f64:	4c2c      	ldr	r4, [pc, #176]	; (4018 <check_sensors+0x178>)
    3f66:	4a36      	ldr	r2, [pc, #216]	; (4040 <check_sensors+0x1a0>)
    3f68:	4b36      	ldr	r3, [pc, #216]	; (4044 <check_sensors+0x1a4>)
    3f6a:	6938      	ldr	r0, [r7, #16]
    3f6c:	6979      	ldr	r1, [r7, #20]
    3f6e:	47a0      	blx	r4
    3f70:	0003      	movs	r3, r0
    3f72:	000c      	movs	r4, r1
    3f74:	613b      	str	r3, [r7, #16]
    3f76:	617c      	str	r4, [r7, #20]
		c  = ( c  - 500) / 10;
    3f78:	4c2b      	ldr	r4, [pc, #172]	; (4028 <check_sensors+0x188>)
    3f7a:	2200      	movs	r2, #0
    3f7c:	4b32      	ldr	r3, [pc, #200]	; (4048 <check_sensors+0x1a8>)
    3f7e:	6938      	ldr	r0, [r7, #16]
    3f80:	6979      	ldr	r1, [r7, #20]
    3f82:	47a0      	blx	r4
    3f84:	0003      	movs	r3, r0
    3f86:	000c      	movs	r4, r1
    3f88:	0018      	movs	r0, r3
    3f8a:	0021      	movs	r1, r4
    3f8c:	4c24      	ldr	r4, [pc, #144]	; (4020 <check_sensors+0x180>)
    3f8e:	2200      	movs	r2, #0
    3f90:	4b2e      	ldr	r3, [pc, #184]	; (404c <check_sensors+0x1ac>)
    3f92:	47a0      	blx	r4
    3f94:	0003      	movs	r3, r0
    3f96:	000c      	movs	r4, r1
    3f98:	613b      	str	r3, [r7, #16]
    3f9a:	617c      	str	r4, [r7, #20]
		double f = (c *9 / 5)+32;
    3f9c:	4c1e      	ldr	r4, [pc, #120]	; (4018 <check_sensors+0x178>)
    3f9e:	2200      	movs	r2, #0
    3fa0:	4b2b      	ldr	r3, [pc, #172]	; (4050 <check_sensors+0x1b0>)
    3fa2:	6938      	ldr	r0, [r7, #16]
    3fa4:	6979      	ldr	r1, [r7, #20]
    3fa6:	47a0      	blx	r4
    3fa8:	0003      	movs	r3, r0
    3faa:	000c      	movs	r4, r1
    3fac:	0018      	movs	r0, r3
    3fae:	0021      	movs	r1, r4
    3fb0:	4c1b      	ldr	r4, [pc, #108]	; (4020 <check_sensors+0x180>)
    3fb2:	2200      	movs	r2, #0
    3fb4:	4b27      	ldr	r3, [pc, #156]	; (4054 <check_sensors+0x1b4>)
    3fb6:	47a0      	blx	r4
    3fb8:	0003      	movs	r3, r0
    3fba:	000c      	movs	r4, r1
    3fbc:	0018      	movs	r0, r3
    3fbe:	0021      	movs	r1, r4
    3fc0:	4c25      	ldr	r4, [pc, #148]	; (4058 <check_sensors+0x1b8>)
    3fc2:	2200      	movs	r2, #0
    3fc4:	4b25      	ldr	r3, [pc, #148]	; (405c <check_sensors+0x1bc>)
    3fc6:	47a0      	blx	r4
    3fc8:	0003      	movs	r3, r0
    3fca:	000c      	movs	r4, r1
    3fcc:	60bb      	str	r3, [r7, #8]
    3fce:	60fc      	str	r4, [r7, #12]
		adc_sync_disable_channel(&TempSensor, 0);
    3fd0:	4b1a      	ldr	r3, [pc, #104]	; (403c <check_sensors+0x19c>)
    3fd2:	2100      	movs	r1, #0
    3fd4:	0018      	movs	r0, r3
    3fd6:	4b18      	ldr	r3, [pc, #96]	; (4038 <check_sensors+0x198>)
    3fd8:	4798      	blx	r3
		if(f < 80 && w < 8)
    3fda:	4c21      	ldr	r4, [pc, #132]	; (4060 <check_sensors+0x1c0>)
    3fdc:	2200      	movs	r2, #0
    3fde:	4b21      	ldr	r3, [pc, #132]	; (4064 <check_sensors+0x1c4>)
    3fe0:	68b8      	ldr	r0, [r7, #8]
    3fe2:	68f9      	ldr	r1, [r7, #12]
    3fe4:	47a0      	blx	r4
    3fe6:	1e03      	subs	r3, r0, #0
    3fe8:	d009      	beq.n	3ffe <check_sensors+0x15e>
    3fea:	4c1d      	ldr	r4, [pc, #116]	; (4060 <check_sensors+0x1c0>)
    3fec:	2200      	movs	r2, #0
    3fee:	4b1e      	ldr	r3, [pc, #120]	; (4068 <check_sensors+0x1c8>)
    3ff0:	69b8      	ldr	r0, [r7, #24]
    3ff2:	69f9      	ldr	r1, [r7, #28]
    3ff4:	47a0      	blx	r4
    3ff6:	1e03      	subs	r3, r0, #0
    3ff8:	d001      	beq.n	3ffe <check_sensors+0x15e>
			return 0;
    3ffa:	2300      	movs	r3, #0
    3ffc:	e000      	b.n	4000 <check_sensors+0x160>
		else
			return 1;
    3ffe:	2301      	movs	r3, #1
}
    4000:	0018      	movs	r0, r3
    4002:	46bd      	mov	sp, r7
    4004:	b009      	add	sp, #36	; 0x24
    4006:	bd90      	pop	{r4, r7, pc}
    4008:	200027b4 	.word	0x200027b4
    400c:	00000e15 	.word	0x00000e15
    4010:	00000e9d 	.word	0x00000e9d
    4014:	000082b1 	.word	0x000082b1
    4018:	00007785 	.word	0x00007785
    401c:	40a9c800 	.word	0x40a9c800
    4020:	00006f1d 	.word	0x00006f1d
    4024:	40affe00 	.word	0x40affe00
    4028:	00007c85 	.word	0x00007c85
    402c:	40790000 	.word	0x40790000
    4030:	40990000 	.word	0x40990000
    4034:	40490000 	.word	0x40490000
    4038:	00000e59 	.word	0x00000e59
    403c:	200027b8 	.word	0x200027b8
    4040:	99c99c9a 	.word	0x99c99c9a
    4044:	3fe9c99c 	.word	0x3fe9c99c
    4048:	407f4000 	.word	0x407f4000
    404c:	40240000 	.word	0x40240000
    4050:	40220000 	.word	0x40220000
    4054:	40140000 	.word	0x40140000
    4058:	000068fd 	.word	0x000068fd
    405c:	40400000 	.word	0x40400000
    4060:	000068ad 	.word	0x000068ad
    4064:	40540000 	.word	0x40540000
    4068:	40200000 	.word	0x40200000

0000406c <dock>:
void dock()
{
    406c:	b580      	push	{r7, lr}
    406e:	af00      	add	r7, sp, #0
	pwm(LEFT);
    4070:	2000      	movs	r0, #0
    4072:	4b0c      	ldr	r3, [pc, #48]	; (40a4 <dock+0x38>)
    4074:	4798      	blx	r3
	while(readbtn(LEFT) == 1);
    4076:	46c0      	nop			; (mov r8, r8)
    4078:	2000      	movs	r0, #0
    407a:	4b0b      	ldr	r3, [pc, #44]	; (40a8 <dock+0x3c>)
    407c:	4798      	blx	r3
    407e:	0003      	movs	r3, r0
    4080:	2b01      	cmp	r3, #1
    4082:	d0f9      	beq.n	4078 <dock+0xc>
	UART_Send_Buffer[0] = 's';
    4084:	4b09      	ldr	r3, [pc, #36]	; (40ac <dock+0x40>)
    4086:	2273      	movs	r2, #115	; 0x73
    4088:	701a      	strb	r2, [r3, #0]
	UART_Send_Buffer[1] = '5';
    408a:	4b08      	ldr	r3, [pc, #32]	; (40ac <dock+0x40>)
    408c:	2235      	movs	r2, #53	; 0x35
    408e:	705a      	strb	r2, [r3, #1]
	UART_Send_Buffer[2] = '\0';
    4090:	4b06      	ldr	r3, [pc, #24]	; (40ac <dock+0x40>)
    4092:	2200      	movs	r2, #0
    4094:	709a      	strb	r2, [r3, #2]
	send_message(3);//************************************************************************ DOCK
    4096:	2003      	movs	r0, #3
    4098:	4b05      	ldr	r3, [pc, #20]	; (40b0 <dock+0x44>)
    409a:	4798      	blx	r3
	
}
    409c:	46c0      	nop			; (mov r8, r8)
    409e:	46bd      	mov	sp, r7
    40a0:	bd80      	pop	{r7, pc}
    40a2:	46c0      	nop			; (mov r8, r8)
    40a4:	00004229 	.word	0x00004229
    40a8:	0000427d 	.word	0x0000427d
    40ac:	20002858 	.word	0x20002858
    40b0:	000040b5 	.word	0x000040b5

000040b4 <send_message>:
void send_message(int length)
{
    40b4:	b580      	push	{r7, lr}
    40b6:	b082      	sub	sp, #8
    40b8:	af00      	add	r7, sp, #0
    40ba:	6078      	str	r0, [r7, #4]
	io_write(io, (uint8_t *)&UART_Send_Buffer, length);
    40bc:	4b17      	ldr	r3, [pc, #92]	; (411c <send_message+0x68>)
    40be:	681b      	ldr	r3, [r3, #0]
    40c0:	687a      	ldr	r2, [r7, #4]
    40c2:	b292      	uxth	r2, r2
    40c4:	4916      	ldr	r1, [pc, #88]	; (4120 <send_message+0x6c>)
    40c6:	0018      	movs	r0, r3
    40c8:	4b16      	ldr	r3, [pc, #88]	; (4124 <send_message+0x70>)
    40ca:	4798      	blx	r3
	os_sleep(100);
    40cc:	2064      	movs	r0, #100	; 0x64
    40ce:	4b16      	ldr	r3, [pc, #88]	; (4128 <send_message+0x74>)
    40d0:	4798      	blx	r3
	
	do 
	{
		if(usart_sync_is_rx_not_empty(&UART) !=0)
    40d2:	4b16      	ldr	r3, [pc, #88]	; (412c <send_message+0x78>)
    40d4:	0018      	movs	r0, r3
    40d6:	4b16      	ldr	r3, [pc, #88]	; (4130 <send_message+0x7c>)
    40d8:	4798      	blx	r3
    40da:	1e03      	subs	r3, r0, #0
    40dc:	d009      	beq.n	40f2 <send_message+0x3e>
		{
			UART_Length = io_read(io, (uint8_t *)&UART_Buffer, 1);
    40de:	4b0f      	ldr	r3, [pc, #60]	; (411c <send_message+0x68>)
    40e0:	681b      	ldr	r3, [r3, #0]
    40e2:	4914      	ldr	r1, [pc, #80]	; (4134 <send_message+0x80>)
    40e4:	2201      	movs	r2, #1
    40e6:	0018      	movs	r0, r3
    40e8:	4b13      	ldr	r3, [pc, #76]	; (4138 <send_message+0x84>)
    40ea:	4798      	blx	r3
    40ec:	0002      	movs	r2, r0
    40ee:	4b13      	ldr	r3, [pc, #76]	; (413c <send_message+0x88>)
    40f0:	601a      	str	r2, [r3, #0]
		}
		os_sleep(500);
    40f2:	23fa      	movs	r3, #250	; 0xfa
    40f4:	005b      	lsls	r3, r3, #1
    40f6:	0018      	movs	r0, r3
    40f8:	4b0b      	ldr	r3, [pc, #44]	; (4128 <send_message+0x74>)
    40fa:	4798      	blx	r3
	} while (UART_Buffer[0] != 's');
    40fc:	4b0d      	ldr	r3, [pc, #52]	; (4134 <send_message+0x80>)
    40fe:	781b      	ldrb	r3, [r3, #0]
    4100:	2b73      	cmp	r3, #115	; 0x73
    4102:	d1e6      	bne.n	40d2 <send_message+0x1e>
	reset_buffer(UART_Buffer, UART_Length);
    4104:	4b0d      	ldr	r3, [pc, #52]	; (413c <send_message+0x88>)
    4106:	681a      	ldr	r2, [r3, #0]
    4108:	4b0a      	ldr	r3, [pc, #40]	; (4134 <send_message+0x80>)
    410a:	0011      	movs	r1, r2
    410c:	0018      	movs	r0, r3
    410e:	4b0c      	ldr	r3, [pc, #48]	; (4140 <send_message+0x8c>)
    4110:	4798      	blx	r3
}
    4112:	46c0      	nop			; (mov r8, r8)
    4114:	46bd      	mov	sp, r7
    4116:	b002      	add	sp, #8
    4118:	bd80      	pop	{r7, pc}
    411a:	46c0      	nop			; (mov r8, r8)
    411c:	200027f0 	.word	0x200027f0
    4120:	20002858 	.word	0x20002858
    4124:	00001611 	.word	0x00001611
    4128:	00005725 	.word	0x00005725
    412c:	200027a8 	.word	0x200027a8
    4130:	00001951 	.word	0x00001951
    4134:	200027f4 	.word	0x200027f4
    4138:	00001665 	.word	0x00001665
    413c:	200000dc 	.word	0x200000dc
    4140:	000045b1 	.word	0x000045b1

00004144 <wait_for_responce>:
void wait_for_responce()
{
    4144:	b580      	push	{r7, lr}
    4146:	b084      	sub	sp, #16
    4148:	af00      	add	r7, sp, #0
	UART_Length = 0;
    414a:	4b2c      	ldr	r3, [pc, #176]	; (41fc <wait_for_responce+0xb8>)
    414c:	2200      	movs	r2, #0
    414e:	601a      	str	r2, [r3, #0]
	int offset = 0;
    4150:	2300      	movs	r3, #0
    4152:	60fb      	str	r3, [r7, #12]
	UART_Buffer[0] = '0';
    4154:	4b2a      	ldr	r3, [pc, #168]	; (4200 <wait_for_responce+0xbc>)
    4156:	2230      	movs	r2, #48	; 0x30
    4158:	701a      	strb	r2, [r3, #0]
	while(UART_Buffer[0] == '0' || UART_Buffer[0] == '\0')
    415a:	e042      	b.n	41e2 <wait_for_responce+0x9e>
	{
		uint8_t temp[2] = "r\0";
    415c:	1d3b      	adds	r3, r7, #4
    415e:	4a29      	ldr	r2, [pc, #164]	; (4204 <wait_for_responce+0xc0>)
    4160:	8812      	ldrh	r2, [r2, #0]
    4162:	801a      	strh	r2, [r3, #0]
		io_write(io, (uint8_t *)&temp, 2);
    4164:	4b28      	ldr	r3, [pc, #160]	; (4208 <wait_for_responce+0xc4>)
    4166:	681b      	ldr	r3, [r3, #0]
    4168:	1d39      	adds	r1, r7, #4
    416a:	2202      	movs	r2, #2
    416c:	0018      	movs	r0, r3
    416e:	4b27      	ldr	r3, [pc, #156]	; (420c <wait_for_responce+0xc8>)
    4170:	4798      	blx	r3
		while(usart_sync_is_rx_not_empty(&UART) ==0);
    4172:	46c0      	nop			; (mov r8, r8)
    4174:	4b26      	ldr	r3, [pc, #152]	; (4210 <wait_for_responce+0xcc>)
    4176:	0018      	movs	r0, r3
    4178:	4b26      	ldr	r3, [pc, #152]	; (4214 <wait_for_responce+0xd0>)
    417a:	4798      	blx	r3
    417c:	1e03      	subs	r3, r0, #0
    417e:	d0f9      	beq.n	4174 <wait_for_responce+0x30>
		for(int i = 0; i < 1000; i++)
    4180:	2300      	movs	r3, #0
    4182:	60bb      	str	r3, [r7, #8]
    4184:	e01c      	b.n	41c0 <wait_for_responce+0x7c>
		{
			if(usart_sync_is_rx_not_empty(&UART) !=0)
    4186:	4b22      	ldr	r3, [pc, #136]	; (4210 <wait_for_responce+0xcc>)
    4188:	0018      	movs	r0, r3
    418a:	4b22      	ldr	r3, [pc, #136]	; (4214 <wait_for_responce+0xd0>)
    418c:	4798      	blx	r3
    418e:	1e03      	subs	r3, r0, #0
    4190:	d010      	beq.n	41b4 <wait_for_responce+0x70>
			{
				UART_Length = io_read(io, (uint8_t *)&UART_Buffer + offset, 1);
    4192:	4b1d      	ldr	r3, [pc, #116]	; (4208 <wait_for_responce+0xc4>)
    4194:	6818      	ldr	r0, [r3, #0]
    4196:	68fa      	ldr	r2, [r7, #12]
    4198:	4b19      	ldr	r3, [pc, #100]	; (4200 <wait_for_responce+0xbc>)
    419a:	18d3      	adds	r3, r2, r3
    419c:	2201      	movs	r2, #1
    419e:	0019      	movs	r1, r3
    41a0:	4b1d      	ldr	r3, [pc, #116]	; (4218 <wait_for_responce+0xd4>)
    41a2:	4798      	blx	r3
    41a4:	0002      	movs	r2, r0
    41a6:	4b15      	ldr	r3, [pc, #84]	; (41fc <wait_for_responce+0xb8>)
    41a8:	601a      	str	r2, [r3, #0]
				offset++;
    41aa:	68fb      	ldr	r3, [r7, #12]
    41ac:	3301      	adds	r3, #1
    41ae:	60fb      	str	r3, [r7, #12]
				i = 0;
    41b0:	2300      	movs	r3, #0
    41b2:	60bb      	str	r3, [r7, #8]
			}
			os_sleep(1);			
    41b4:	2001      	movs	r0, #1
    41b6:	4b19      	ldr	r3, [pc, #100]	; (421c <wait_for_responce+0xd8>)
    41b8:	4798      	blx	r3
		for(int i = 0; i < 1000; i++)
    41ba:	68bb      	ldr	r3, [r7, #8]
    41bc:	3301      	adds	r3, #1
    41be:	60bb      	str	r3, [r7, #8]
    41c0:	68bb      	ldr	r3, [r7, #8]
    41c2:	4a17      	ldr	r2, [pc, #92]	; (4220 <wait_for_responce+0xdc>)
    41c4:	4293      	cmp	r3, r2
    41c6:	ddde      	ble.n	4186 <wait_for_responce+0x42>
		}
		offset = 0;
    41c8:	2300      	movs	r3, #0
    41ca:	60fb      	str	r3, [r7, #12]
		if(UART_Buffer[0] == '0')
    41cc:	4b0c      	ldr	r3, [pc, #48]	; (4200 <wait_for_responce+0xbc>)
    41ce:	781b      	ldrb	r3, [r3, #0]
    41d0:	2b30      	cmp	r3, #48	; 0x30
    41d2:	d106      	bne.n	41e2 <wait_for_responce+0x9e>
			reset_buffer(&UART_Buffer, UART_Length);
    41d4:	4b09      	ldr	r3, [pc, #36]	; (41fc <wait_for_responce+0xb8>)
    41d6:	681a      	ldr	r2, [r3, #0]
    41d8:	4b09      	ldr	r3, [pc, #36]	; (4200 <wait_for_responce+0xbc>)
    41da:	0011      	movs	r1, r2
    41dc:	0018      	movs	r0, r3
    41de:	4b11      	ldr	r3, [pc, #68]	; (4224 <wait_for_responce+0xe0>)
    41e0:	4798      	blx	r3
	while(UART_Buffer[0] == '0' || UART_Buffer[0] == '\0')
    41e2:	4b07      	ldr	r3, [pc, #28]	; (4200 <wait_for_responce+0xbc>)
    41e4:	781b      	ldrb	r3, [r3, #0]
    41e6:	2b30      	cmp	r3, #48	; 0x30
    41e8:	d0b8      	beq.n	415c <wait_for_responce+0x18>
    41ea:	4b05      	ldr	r3, [pc, #20]	; (4200 <wait_for_responce+0xbc>)
    41ec:	781b      	ldrb	r3, [r3, #0]
    41ee:	2b00      	cmp	r3, #0
    41f0:	d0b4      	beq.n	415c <wait_for_responce+0x18>
	}
}
    41f2:	46c0      	nop			; (mov r8, r8)
    41f4:	46bd      	mov	sp, r7
    41f6:	b004      	add	sp, #16
    41f8:	bd80      	pop	{r7, pc}
    41fa:	46c0      	nop			; (mov r8, r8)
    41fc:	200000dc 	.word	0x200000dc
    4200:	200027f4 	.word	0x200027f4
    4204:	000085cc 	.word	0x000085cc
    4208:	200027f0 	.word	0x200027f0
    420c:	00001611 	.word	0x00001611
    4210:	200027a8 	.word	0x200027a8
    4214:	00001951 	.word	0x00001951
    4218:	00001665 	.word	0x00001665
    421c:	00005725 	.word	0x00005725
    4220:	000003e7 	.word	0x000003e7
    4224:	000045b1 	.word	0x000045b1

00004228 <pwm>:
void pwm(int dir)
{
    4228:	b580      	push	{r7, lr}
    422a:	b082      	sub	sp, #8
    422c:	af00      	add	r7, sp, #0
    422e:	6078      	str	r0, [r7, #4]
	if(dir == 2)
    4230:	687b      	ldr	r3, [r7, #4]
    4232:	2b02      	cmp	r3, #2
    4234:	d104      	bne.n	4240 <pwm+0x18>
	{
		pwm_disable(&StepperDriver);
    4236:	4b0c      	ldr	r3, [pc, #48]	; (4268 <pwm+0x40>)
    4238:	0018      	movs	r0, r3
    423a:	4b0c      	ldr	r3, [pc, #48]	; (426c <pwm+0x44>)
    423c:	4798      	blx	r3
		return;
    423e:	e010      	b.n	4262 <pwm+0x3a>
	}
		pwm_disable(&StepperDriver);
    4240:	4b09      	ldr	r3, [pc, #36]	; (4268 <pwm+0x40>)
    4242:	0018      	movs	r0, r3
    4244:	4b09      	ldr	r3, [pc, #36]	; (426c <pwm+0x44>)
    4246:	4798      	blx	r3
		os_sleep(100);
    4248:	2064      	movs	r0, #100	; 0x64
    424a:	4b09      	ldr	r3, [pc, #36]	; (4270 <pwm+0x48>)
    424c:	4798      	blx	r3
		gpio_set_pin_level(Direction, dir);
    424e:	687b      	ldr	r3, [r7, #4]
    4250:	1e5a      	subs	r2, r3, #1
    4252:	4193      	sbcs	r3, r2
    4254:	b2db      	uxtb	r3, r3
    4256:	0019      	movs	r1, r3
    4258:	2031      	movs	r0, #49	; 0x31
    425a:	4b06      	ldr	r3, [pc, #24]	; (4274 <pwm+0x4c>)
    425c:	4798      	blx	r3
		pwm_ramp();
    425e:	4b06      	ldr	r3, [pc, #24]	; (4278 <pwm+0x50>)
    4260:	4798      	blx	r3
}
    4262:	46bd      	mov	sp, r7
    4264:	b002      	add	sp, #8
    4266:	bd80      	pop	{r7, pc}
    4268:	200027d4 	.word	0x200027d4
    426c:	00001771 	.word	0x00001771
    4270:	00005725 	.word	0x00005725
    4274:	00003b75 	.word	0x00003b75
    4278:	0000429d 	.word	0x0000429d

0000427c <readbtn>:
int readbtn(int btn)
{
    427c:	b580      	push	{r7, lr}
    427e:	b082      	sub	sp, #8
    4280:	af00      	add	r7, sp, #0
    4282:	6078      	str	r0, [r7, #4]
	return gpio_get_pin_level(btn);
    4284:	687b      	ldr	r3, [r7, #4]
    4286:	b2db      	uxtb	r3, r3
    4288:	0018      	movs	r0, r3
    428a:	4b03      	ldr	r3, [pc, #12]	; (4298 <readbtn+0x1c>)
    428c:	4798      	blx	r3
    428e:	0003      	movs	r3, r0
	
}
    4290:	0018      	movs	r0, r3
    4292:	46bd      	mov	sp, r7
    4294:	b002      	add	sp, #8
    4296:	bd80      	pop	{r7, pc}
    4298:	00003bb5 	.word	0x00003bb5

0000429c <pwm_ramp>:
void pwm_ramp()
{
    429c:	b580      	push	{r7, lr}
    429e:	b090      	sub	sp, #64	; 0x40
    42a0:	af00      	add	r7, sp, #0
	int pwm_params[16] = {2000, 1333, 1000, 800, 667, 571, 500, 444, 400, 364, 333, 308, 286, 267, 250, 235};
    42a2:	003a      	movs	r2, r7
    42a4:	4b42      	ldr	r3, [pc, #264]	; (43b0 <pwm_ramp+0x114>)
    42a6:	0010      	movs	r0, r2
    42a8:	0019      	movs	r1, r3
    42aa:	2340      	movs	r3, #64	; 0x40
    42ac:	001a      	movs	r2, r3
    42ae:	4b41      	ldr	r3, [pc, #260]	; (43b4 <pwm_ramp+0x118>)
    42b0:	4798      	blx	r3
		pwm_set_parameters(&StepperDriver, pwm_params[3], pwm_params[3]/2);
    42b2:	003b      	movs	r3, r7
    42b4:	68db      	ldr	r3, [r3, #12]
    42b6:	0019      	movs	r1, r3
    42b8:	003b      	movs	r3, r7
    42ba:	68db      	ldr	r3, [r3, #12]
    42bc:	2b00      	cmp	r3, #0
    42be:	da00      	bge.n	42c2 <pwm_ramp+0x26>
    42c0:	3301      	adds	r3, #1
    42c2:	105b      	asrs	r3, r3, #1
    42c4:	001a      	movs	r2, r3
    42c6:	4b3c      	ldr	r3, [pc, #240]	; (43b8 <pwm_ramp+0x11c>)
    42c8:	0018      	movs	r0, r3
    42ca:	4b3c      	ldr	r3, [pc, #240]	; (43bc <pwm_ramp+0x120>)
    42cc:	4798      	blx	r3
		pwm_enable(&StepperDriver);
    42ce:	4b3a      	ldr	r3, [pc, #232]	; (43b8 <pwm_ramp+0x11c>)
    42d0:	0018      	movs	r0, r3
    42d2:	4b3b      	ldr	r3, [pc, #236]	; (43c0 <pwm_ramp+0x124>)
    42d4:	4798      	blx	r3
		os_sleep(10);
    42d6:	200a      	movs	r0, #10
    42d8:	4b3a      	ldr	r3, [pc, #232]	; (43c4 <pwm_ramp+0x128>)
    42da:	4798      	blx	r3
		pwm_set_parameters(&StepperDriver, pwm_params[4], pwm_params[4]/2);		
    42dc:	003b      	movs	r3, r7
    42de:	691b      	ldr	r3, [r3, #16]
    42e0:	0019      	movs	r1, r3
    42e2:	003b      	movs	r3, r7
    42e4:	691b      	ldr	r3, [r3, #16]
    42e6:	2b00      	cmp	r3, #0
    42e8:	da00      	bge.n	42ec <pwm_ramp+0x50>
    42ea:	3301      	adds	r3, #1
    42ec:	105b      	asrs	r3, r3, #1
    42ee:	001a      	movs	r2, r3
    42f0:	4b31      	ldr	r3, [pc, #196]	; (43b8 <pwm_ramp+0x11c>)
    42f2:	0018      	movs	r0, r3
    42f4:	4b31      	ldr	r3, [pc, #196]	; (43bc <pwm_ramp+0x120>)
    42f6:	4798      	blx	r3
		os_sleep(10);
    42f8:	200a      	movs	r0, #10
    42fa:	4b32      	ldr	r3, [pc, #200]	; (43c4 <pwm_ramp+0x128>)
    42fc:	4798      	blx	r3
		pwm_set_parameters(&StepperDriver, pwm_params[5], pwm_params[5]/2);
    42fe:	003b      	movs	r3, r7
    4300:	695b      	ldr	r3, [r3, #20]
    4302:	0019      	movs	r1, r3
    4304:	003b      	movs	r3, r7
    4306:	695b      	ldr	r3, [r3, #20]
    4308:	2b00      	cmp	r3, #0
    430a:	da00      	bge.n	430e <pwm_ramp+0x72>
    430c:	3301      	adds	r3, #1
    430e:	105b      	asrs	r3, r3, #1
    4310:	001a      	movs	r2, r3
    4312:	4b29      	ldr	r3, [pc, #164]	; (43b8 <pwm_ramp+0x11c>)
    4314:	0018      	movs	r0, r3
    4316:	4b29      	ldr	r3, [pc, #164]	; (43bc <pwm_ramp+0x120>)
    4318:	4798      	blx	r3
		os_sleep(10);
    431a:	200a      	movs	r0, #10
    431c:	4b29      	ldr	r3, [pc, #164]	; (43c4 <pwm_ramp+0x128>)
    431e:	4798      	blx	r3
		pwm_set_parameters(&StepperDriver, pwm_params[6], pwm_params[6]/2);
    4320:	003b      	movs	r3, r7
    4322:	699b      	ldr	r3, [r3, #24]
    4324:	0019      	movs	r1, r3
    4326:	003b      	movs	r3, r7
    4328:	699b      	ldr	r3, [r3, #24]
    432a:	2b00      	cmp	r3, #0
    432c:	da00      	bge.n	4330 <pwm_ramp+0x94>
    432e:	3301      	adds	r3, #1
    4330:	105b      	asrs	r3, r3, #1
    4332:	001a      	movs	r2, r3
    4334:	4b20      	ldr	r3, [pc, #128]	; (43b8 <pwm_ramp+0x11c>)
    4336:	0018      	movs	r0, r3
    4338:	4b20      	ldr	r3, [pc, #128]	; (43bc <pwm_ramp+0x120>)
    433a:	4798      	blx	r3
		os_sleep(10);
    433c:	200a      	movs	r0, #10
    433e:	4b21      	ldr	r3, [pc, #132]	; (43c4 <pwm_ramp+0x128>)
    4340:	4798      	blx	r3
		pwm_set_parameters(&StepperDriver, pwm_params[7], pwm_params[7]/2);
    4342:	003b      	movs	r3, r7
    4344:	69db      	ldr	r3, [r3, #28]
    4346:	0019      	movs	r1, r3
    4348:	003b      	movs	r3, r7
    434a:	69db      	ldr	r3, [r3, #28]
    434c:	2b00      	cmp	r3, #0
    434e:	da00      	bge.n	4352 <pwm_ramp+0xb6>
    4350:	3301      	adds	r3, #1
    4352:	105b      	asrs	r3, r3, #1
    4354:	001a      	movs	r2, r3
    4356:	4b18      	ldr	r3, [pc, #96]	; (43b8 <pwm_ramp+0x11c>)
    4358:	0018      	movs	r0, r3
    435a:	4b18      	ldr	r3, [pc, #96]	; (43bc <pwm_ramp+0x120>)
    435c:	4798      	blx	r3
		os_sleep(10);//*/
    435e:	200a      	movs	r0, #10
    4360:	4b18      	ldr	r3, [pc, #96]	; (43c4 <pwm_ramp+0x128>)
    4362:	4798      	blx	r3
		pwm_set_parameters(&StepperDriver, pwm_params[8], pwm_params[8]/2);
    4364:	003b      	movs	r3, r7
    4366:	6a1b      	ldr	r3, [r3, #32]
    4368:	0019      	movs	r1, r3
    436a:	003b      	movs	r3, r7
    436c:	6a1b      	ldr	r3, [r3, #32]
    436e:	2b00      	cmp	r3, #0
    4370:	da00      	bge.n	4374 <pwm_ramp+0xd8>
    4372:	3301      	adds	r3, #1
    4374:	105b      	asrs	r3, r3, #1
    4376:	001a      	movs	r2, r3
    4378:	4b0f      	ldr	r3, [pc, #60]	; (43b8 <pwm_ramp+0x11c>)
    437a:	0018      	movs	r0, r3
    437c:	4b0f      	ldr	r3, [pc, #60]	; (43bc <pwm_ramp+0x120>)
    437e:	4798      	blx	r3
		os_sleep(10);//*/
    4380:	200a      	movs	r0, #10
    4382:	4b10      	ldr	r3, [pc, #64]	; (43c4 <pwm_ramp+0x128>)
    4384:	4798      	blx	r3
		pwm_set_parameters(&StepperDriver, pwm_params[9], pwm_params[9]/2);
    4386:	003b      	movs	r3, r7
    4388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    438a:	0019      	movs	r1, r3
    438c:	003b      	movs	r3, r7
    438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4390:	2b00      	cmp	r3, #0
    4392:	da00      	bge.n	4396 <pwm_ramp+0xfa>
    4394:	3301      	adds	r3, #1
    4396:	105b      	asrs	r3, r3, #1
    4398:	001a      	movs	r2, r3
    439a:	4b07      	ldr	r3, [pc, #28]	; (43b8 <pwm_ramp+0x11c>)
    439c:	0018      	movs	r0, r3
    439e:	4b07      	ldr	r3, [pc, #28]	; (43bc <pwm_ramp+0x120>)
    43a0:	4798      	blx	r3
		os_sleep(10);
    43a2:	200a      	movs	r0, #10
    43a4:	4b07      	ldr	r3, [pc, #28]	; (43c4 <pwm_ramp+0x128>)
    43a6:	4798      	blx	r3
}
    43a8:	46c0      	nop			; (mov r8, r8)
    43aa:	46bd      	mov	sp, r7
    43ac:	b010      	add	sp, #64	; 0x40
    43ae:	bd80      	pop	{r7, pc}
    43b0:	000085d0 	.word	0x000085d0
    43b4:	000083b9 	.word	0x000083b9
    43b8:	200027d4 	.word	0x200027d4
    43bc:	000017c9 	.word	0x000017c9
    43c0:	00001721 	.word	0x00001721
    43c4:	00005725 	.word	0x00005725

000043c8 <manual_mode>:
void manual_mode()
{
    43c8:	b580      	push	{r7, lr}
    43ca:	af00      	add	r7, sp, #0
		Manual_5	Brush on/off
		Manual_6	Dock
		Manual_7	Manual on
	
	*/
	while(gpio_get_pin_level(Manual_6) != 0)
    43cc:	e0c6      	b.n	455c <manual_mode+0x194>
	{
		if(gpio_get_pin_level(Right) == 0 || gpio_get_pin_level(Left)== 0) pwm(OFF);
    43ce:	2014      	movs	r0, #20
    43d0:	4b6f      	ldr	r3, [pc, #444]	; (4590 <manual_mode+0x1c8>)
    43d2:	4798      	blx	r3
    43d4:	0003      	movs	r3, r0
    43d6:	001a      	movs	r2, r3
    43d8:	2301      	movs	r3, #1
    43da:	4053      	eors	r3, r2
    43dc:	b2db      	uxtb	r3, r3
    43de:	2b00      	cmp	r3, #0
    43e0:	d109      	bne.n	43f6 <manual_mode+0x2e>
    43e2:	2015      	movs	r0, #21
    43e4:	4b6a      	ldr	r3, [pc, #424]	; (4590 <manual_mode+0x1c8>)
    43e6:	4798      	blx	r3
    43e8:	0003      	movs	r3, r0
    43ea:	001a      	movs	r2, r3
    43ec:	2301      	movs	r3, #1
    43ee:	4053      	eors	r3, r2
    43f0:	b2db      	uxtb	r3, r3
    43f2:	2b00      	cmp	r3, #0
    43f4:	d002      	beq.n	43fc <manual_mode+0x34>
    43f6:	2002      	movs	r0, #2
    43f8:	4b66      	ldr	r3, [pc, #408]	; (4594 <manual_mode+0x1cc>)
    43fa:	4798      	blx	r3
		if(gpio_get_pin_level(Manual_1) == 0 && gpio_get_pin_level(Left)== 1)
    43fc:	2009      	movs	r0, #9
    43fe:	4b64      	ldr	r3, [pc, #400]	; (4590 <manual_mode+0x1c8>)
    4400:	4798      	blx	r3
    4402:	0003      	movs	r3, r0
    4404:	001a      	movs	r2, r3
    4406:	2301      	movs	r3, #1
    4408:	4053      	eors	r3, r2
    440a:	b2db      	uxtb	r3, r3
    440c:	2b00      	cmp	r3, #0
    440e:	d016      	beq.n	443e <manual_mode+0x76>
    4410:	2015      	movs	r0, #21
    4412:	4b5f      	ldr	r3, [pc, #380]	; (4590 <manual_mode+0x1c8>)
    4414:	4798      	blx	r3
    4416:	1e03      	subs	r3, r0, #0
    4418:	d011      	beq.n	443e <manual_mode+0x76>
		{
			pwm(OFF);
    441a:	2002      	movs	r0, #2
    441c:	4b5d      	ldr	r3, [pc, #372]	; (4594 <manual_mode+0x1cc>)
    441e:	4798      	blx	r3
			pwm(LEFT);
    4420:	2000      	movs	r0, #0
    4422:	4b5c      	ldr	r3, [pc, #368]	; (4594 <manual_mode+0x1cc>)
    4424:	4798      	blx	r3
			while(gpio_get_pin_level(Manual_1) == 0);
    4426:	46c0      	nop			; (mov r8, r8)
    4428:	2009      	movs	r0, #9
    442a:	4b59      	ldr	r3, [pc, #356]	; (4590 <manual_mode+0x1c8>)
    442c:	4798      	blx	r3
    442e:	0003      	movs	r3, r0
    4430:	001a      	movs	r2, r3
    4432:	2301      	movs	r3, #1
    4434:	4053      	eors	r3, r2
    4436:	b2db      	uxtb	r3, r3
    4438:	2b00      	cmp	r3, #0
    443a:	d1f5      	bne.n	4428 <manual_mode+0x60>
		if(gpio_get_pin_level(Manual_1) == 0 && gpio_get_pin_level(Left)== 1)
    443c:	e08e      	b.n	455c <manual_mode+0x194>
		}
		else if(gpio_get_pin_level(Manual_2) == 0 && gpio_get_pin_level(Right) == 1)
    443e:	200a      	movs	r0, #10
    4440:	4b53      	ldr	r3, [pc, #332]	; (4590 <manual_mode+0x1c8>)
    4442:	4798      	blx	r3
    4444:	0003      	movs	r3, r0
    4446:	001a      	movs	r2, r3
    4448:	2301      	movs	r3, #1
    444a:	4053      	eors	r3, r2
    444c:	b2db      	uxtb	r3, r3
    444e:	2b00      	cmp	r3, #0
    4450:	d016      	beq.n	4480 <manual_mode+0xb8>
    4452:	2014      	movs	r0, #20
    4454:	4b4e      	ldr	r3, [pc, #312]	; (4590 <manual_mode+0x1c8>)
    4456:	4798      	blx	r3
    4458:	1e03      	subs	r3, r0, #0
    445a:	d011      	beq.n	4480 <manual_mode+0xb8>
		{
			pwm(OFF);
    445c:	2002      	movs	r0, #2
    445e:	4b4d      	ldr	r3, [pc, #308]	; (4594 <manual_mode+0x1cc>)
    4460:	4798      	blx	r3
			pwm(RIGHT);
    4462:	2001      	movs	r0, #1
    4464:	4b4b      	ldr	r3, [pc, #300]	; (4594 <manual_mode+0x1cc>)
    4466:	4798      	blx	r3
			while(gpio_get_pin_level(Manual_2) == 0);
    4468:	46c0      	nop			; (mov r8, r8)
    446a:	200a      	movs	r0, #10
    446c:	4b48      	ldr	r3, [pc, #288]	; (4590 <manual_mode+0x1c8>)
    446e:	4798      	blx	r3
    4470:	0003      	movs	r3, r0
    4472:	001a      	movs	r2, r3
    4474:	2301      	movs	r3, #1
    4476:	4053      	eors	r3, r2
    4478:	b2db      	uxtb	r3, r3
    447a:	2b00      	cmp	r3, #0
    447c:	d1f5      	bne.n	446a <manual_mode+0xa2>
		else if(gpio_get_pin_level(Manual_2) == 0 && gpio_get_pin_level(Right) == 1)
    447e:	e06d      	b.n	455c <manual_mode+0x194>
		}
		else if(gpio_get_pin_level(Manual_3) == 0)
    4480:	200b      	movs	r0, #11
    4482:	4b43      	ldr	r3, [pc, #268]	; (4590 <manual_mode+0x1c8>)
    4484:	4798      	blx	r3
    4486:	0003      	movs	r3, r0
    4488:	001a      	movs	r2, r3
    448a:	2301      	movs	r3, #1
    448c:	4053      	eors	r3, r2
    448e:	b2db      	uxtb	r3, r3
    4490:	2b00      	cmp	r3, #0
    4492:	d01a      	beq.n	44ca <manual_mode+0x102>
		{
			pwm(OFF);
    4494:	2002      	movs	r0, #2
    4496:	4b3f      	ldr	r3, [pc, #252]	; (4594 <manual_mode+0x1cc>)
    4498:	4798      	blx	r3
			UART_Send_Buffer[0] = 's';
    449a:	4b3f      	ldr	r3, [pc, #252]	; (4598 <manual_mode+0x1d0>)
    449c:	2273      	movs	r2, #115	; 0x73
    449e:	701a      	strb	r2, [r3, #0]
			UART_Send_Buffer[1] = '5';
    44a0:	4b3d      	ldr	r3, [pc, #244]	; (4598 <manual_mode+0x1d0>)
    44a2:	2235      	movs	r2, #53	; 0x35
    44a4:	705a      	strb	r2, [r3, #1]
			UART_Send_Buffer[2] = '\0';
    44a6:	4b3c      	ldr	r3, [pc, #240]	; (4598 <manual_mode+0x1d0>)
    44a8:	2200      	movs	r2, #0
    44aa:	709a      	strb	r2, [r3, #2]
			send_message(3);//************************************************************************ MOVEUP_INFINITE	
    44ac:	2003      	movs	r0, #3
    44ae:	4b3b      	ldr	r3, [pc, #236]	; (459c <manual_mode+0x1d4>)
    44b0:	4798      	blx	r3
			while(gpio_get_pin_level(Manual_3) == 0);
    44b2:	46c0      	nop			; (mov r8, r8)
    44b4:	200b      	movs	r0, #11
    44b6:	4b36      	ldr	r3, [pc, #216]	; (4590 <manual_mode+0x1c8>)
    44b8:	4798      	blx	r3
    44ba:	0003      	movs	r3, r0
    44bc:	001a      	movs	r2, r3
    44be:	2301      	movs	r3, #1
    44c0:	4053      	eors	r3, r2
    44c2:	b2db      	uxtb	r3, r3
    44c4:	2b00      	cmp	r3, #0
    44c6:	d1f5      	bne.n	44b4 <manual_mode+0xec>
    44c8:	e048      	b.n	455c <manual_mode+0x194>
		}
		else if(gpio_get_pin_level(Manual_4) == 0)
    44ca:	203e      	movs	r0, #62	; 0x3e
    44cc:	4b30      	ldr	r3, [pc, #192]	; (4590 <manual_mode+0x1c8>)
    44ce:	4798      	blx	r3
    44d0:	0003      	movs	r3, r0
    44d2:	001a      	movs	r2, r3
    44d4:	2301      	movs	r3, #1
    44d6:	4053      	eors	r3, r2
    44d8:	b2db      	uxtb	r3, r3
    44da:	2b00      	cmp	r3, #0
    44dc:	d01a      	beq.n	4514 <manual_mode+0x14c>
		{
			pwm(OFF);
    44de:	2002      	movs	r0, #2
    44e0:	4b2c      	ldr	r3, [pc, #176]	; (4594 <manual_mode+0x1cc>)
    44e2:	4798      	blx	r3
			UART_Send_Buffer[0] = 's';
    44e4:	4b2c      	ldr	r3, [pc, #176]	; (4598 <manual_mode+0x1d0>)
    44e6:	2273      	movs	r2, #115	; 0x73
    44e8:	701a      	strb	r2, [r3, #0]
			UART_Send_Buffer[1] = '6';
    44ea:	4b2b      	ldr	r3, [pc, #172]	; (4598 <manual_mode+0x1d0>)
    44ec:	2236      	movs	r2, #54	; 0x36
    44ee:	705a      	strb	r2, [r3, #1]
			UART_Send_Buffer[2] = '\0';
    44f0:	4b29      	ldr	r3, [pc, #164]	; (4598 <manual_mode+0x1d0>)
    44f2:	2200      	movs	r2, #0
    44f4:	709a      	strb	r2, [r3, #2]
			send_message(3);//************************************************************************ MOVEDOWN_INFINITE
    44f6:	2003      	movs	r0, #3
    44f8:	4b28      	ldr	r3, [pc, #160]	; (459c <manual_mode+0x1d4>)
    44fa:	4798      	blx	r3
			while(gpio_get_pin_level(Manual_4) == 0);
    44fc:	46c0      	nop			; (mov r8, r8)
    44fe:	203e      	movs	r0, #62	; 0x3e
    4500:	4b23      	ldr	r3, [pc, #140]	; (4590 <manual_mode+0x1c8>)
    4502:	4798      	blx	r3
    4504:	0003      	movs	r3, r0
    4506:	001a      	movs	r2, r3
    4508:	2301      	movs	r3, #1
    450a:	4053      	eors	r3, r2
    450c:	b2db      	uxtb	r3, r3
    450e:	2b00      	cmp	r3, #0
    4510:	d1f5      	bne.n	44fe <manual_mode+0x136>
    4512:	e023      	b.n	455c <manual_mode+0x194>
		}
		else if(gpio_get_pin_level(Manual_5) == 0)
    4514:	203f      	movs	r0, #63	; 0x3f
    4516:	4b1e      	ldr	r3, [pc, #120]	; (4590 <manual_mode+0x1c8>)
    4518:	4798      	blx	r3
    451a:	0003      	movs	r3, r0
    451c:	001a      	movs	r2, r3
    451e:	2301      	movs	r3, #1
    4520:	4053      	eors	r3, r2
    4522:	b2db      	uxtb	r3, r3
    4524:	2b00      	cmp	r3, #0
    4526:	d019      	beq.n	455c <manual_mode+0x194>
		{
			pwm(OFF);
    4528:	2002      	movs	r0, #2
    452a:	4b1a      	ldr	r3, [pc, #104]	; (4594 <manual_mode+0x1cc>)
    452c:	4798      	blx	r3
			UART_Send_Buffer[0] = 's';
    452e:	4b1a      	ldr	r3, [pc, #104]	; (4598 <manual_mode+0x1d0>)
    4530:	2273      	movs	r2, #115	; 0x73
    4532:	701a      	strb	r2, [r3, #0]
			UART_Send_Buffer[1] = '7';
    4534:	4b18      	ldr	r3, [pc, #96]	; (4598 <manual_mode+0x1d0>)
    4536:	2237      	movs	r2, #55	; 0x37
    4538:	705a      	strb	r2, [r3, #1]
			UART_Send_Buffer[2] = '\0';
    453a:	4b17      	ldr	r3, [pc, #92]	; (4598 <manual_mode+0x1d0>)
    453c:	2200      	movs	r2, #0
    453e:	709a      	strb	r2, [r3, #2]
			send_message(3);//************************************************************************ ToggleBrush
    4540:	2003      	movs	r0, #3
    4542:	4b16      	ldr	r3, [pc, #88]	; (459c <manual_mode+0x1d4>)
    4544:	4798      	blx	r3
			while(gpio_get_pin_level(Manual_5) == 0);
    4546:	46c0      	nop			; (mov r8, r8)
    4548:	203f      	movs	r0, #63	; 0x3f
    454a:	4b11      	ldr	r3, [pc, #68]	; (4590 <manual_mode+0x1c8>)
    454c:	4798      	blx	r3
    454e:	0003      	movs	r3, r0
    4550:	001a      	movs	r2, r3
    4552:	2301      	movs	r3, #1
    4554:	4053      	eors	r3, r2
    4556:	b2db      	uxtb	r3, r3
    4558:	2b00      	cmp	r3, #0
    455a:	d1f5      	bne.n	4548 <manual_mode+0x180>
	while(gpio_get_pin_level(Manual_6) != 0)
    455c:	2023      	movs	r0, #35	; 0x23
    455e:	4b0c      	ldr	r3, [pc, #48]	; (4590 <manual_mode+0x1c8>)
    4560:	4798      	blx	r3
    4562:	1e03      	subs	r3, r0, #0
    4564:	d000      	beq.n	4568 <manual_mode+0x1a0>
    4566:	e732      	b.n	43ce <manual_mode+0x6>
		}
	}
	pwm(OFF);
    4568:	2002      	movs	r0, #2
    456a:	4b0a      	ldr	r3, [pc, #40]	; (4594 <manual_mode+0x1cc>)
    456c:	4798      	blx	r3
	UART_Send_Buffer[0] = 's';
    456e:	4b0a      	ldr	r3, [pc, #40]	; (4598 <manual_mode+0x1d0>)
    4570:	2273      	movs	r2, #115	; 0x73
    4572:	701a      	strb	r2, [r3, #0]
	UART_Send_Buffer[1] = '8';
    4574:	4b08      	ldr	r3, [pc, #32]	; (4598 <manual_mode+0x1d0>)
    4576:	2238      	movs	r2, #56	; 0x38
    4578:	705a      	strb	r2, [r3, #1]
	UART_Send_Buffer[2] = '\0';
    457a:	4b07      	ldr	r3, [pc, #28]	; (4598 <manual_mode+0x1d0>)
    457c:	2200      	movs	r2, #0
    457e:	709a      	strb	r2, [r3, #2]
	send_message(3);//************************************************************************ FULL_STOP
    4580:	2003      	movs	r0, #3
    4582:	4b06      	ldr	r3, [pc, #24]	; (459c <manual_mode+0x1d4>)
    4584:	4798      	blx	r3
	dock();
    4586:	4b06      	ldr	r3, [pc, #24]	; (45a0 <manual_mode+0x1d8>)
    4588:	4798      	blx	r3
}
    458a:	46c0      	nop			; (mov r8, r8)
    458c:	46bd      	mov	sp, r7
    458e:	bd80      	pop	{r7, pc}
    4590:	00003bb5 	.word	0x00003bb5
    4594:	00004229 	.word	0x00004229
    4598:	20002858 	.word	0x20002858
    459c:	000040b5 	.word	0x000040b5
    45a0:	0000406d 	.word	0x0000406d

000045a4 <check_schedule>:
int check_schedule()
{
    45a4:	b580      	push	{r7, lr}
    45a6:	af00      	add	r7, sp, #0
	
	return 0;
    45a8:	2300      	movs	r3, #0
}
    45aa:	0018      	movs	r0, r3
    45ac:	46bd      	mov	sp, r7
    45ae:	bd80      	pop	{r7, pc}

000045b0 <reset_buffer>:
void reset_buffer(uint8_t *buffer, int length)
{
    45b0:	b580      	push	{r7, lr}
    45b2:	b084      	sub	sp, #16
    45b4:	af00      	add	r7, sp, #0
    45b6:	6078      	str	r0, [r7, #4]
    45b8:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < length; i++)
    45ba:	2300      	movs	r3, #0
    45bc:	60fb      	str	r3, [r7, #12]
    45be:	e007      	b.n	45d0 <reset_buffer+0x20>
	{
		buffer[i] = '\0';
    45c0:	68fb      	ldr	r3, [r7, #12]
    45c2:	687a      	ldr	r2, [r7, #4]
    45c4:	18d3      	adds	r3, r2, r3
    45c6:	2200      	movs	r2, #0
    45c8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < length; i++)
    45ca:	68fb      	ldr	r3, [r7, #12]
    45cc:	3301      	adds	r3, #1
    45ce:	60fb      	str	r3, [r7, #12]
    45d0:	68fa      	ldr	r2, [r7, #12]
    45d2:	683b      	ldr	r3, [r7, #0]
    45d4:	429a      	cmp	r2, r3
    45d6:	dbf3      	blt.n	45c0 <reset_buffer+0x10>
	}
}
    45d8:	46c0      	nop			; (mov r8, r8)
    45da:	46bd      	mov	sp, r7
    45dc:	b004      	add	sp, #16
    45de:	bd80      	pop	{r7, pc}

000045e0 <sem_init>:

/**
 * \brief Semaphore initialization
 */
int32_t sem_init(sem_t *sem, uint32_t count)
{
    45e0:	b580      	push	{r7, lr}
    45e2:	b082      	sub	sp, #8
    45e4:	af00      	add	r7, sp, #0
    45e6:	6078      	str	r0, [r7, #4]
    45e8:	6039      	str	r1, [r7, #0]
	ASSERT(count <= SEMAPHORE_MAX_COUNT);
    45ea:	683a      	ldr	r2, [r7, #0]
    45ec:	2101      	movs	r1, #1
    45ee:	2300      	movs	r3, #0
    45f0:	4291      	cmp	r1, r2
    45f2:	415b      	adcs	r3, r3
    45f4:	b2db      	uxtb	r3, r3
    45f6:	490c      	ldr	r1, [pc, #48]	; (4628 <sem_init+0x48>)
    45f8:	222b      	movs	r2, #43	; 0x2b
    45fa:	0018      	movs	r0, r3
    45fc:	4b0b      	ldr	r3, [pc, #44]	; (462c <sem_init+0x4c>)
    45fe:	4798      	blx	r3

	*sem = xSemaphoreCreateCounting((uint32_t)SEMAPHORE_MAX_COUNT, count);
    4600:	683b      	ldr	r3, [r7, #0]
    4602:	0019      	movs	r1, r3
    4604:	2001      	movs	r0, #1
    4606:	4b0a      	ldr	r3, [pc, #40]	; (4630 <sem_init+0x50>)
    4608:	4798      	blx	r3
    460a:	0002      	movs	r2, r0
    460c:	687b      	ldr	r3, [r7, #4]
    460e:	601a      	str	r2, [r3, #0]

	return *sem ? ERR_NONE : ERR_NOT_INITIALIZED;
    4610:	687b      	ldr	r3, [r7, #4]
    4612:	681b      	ldr	r3, [r3, #0]
    4614:	2b00      	cmp	r3, #0
    4616:	d001      	beq.n	461c <sem_init+0x3c>
    4618:	2300      	movs	r3, #0
    461a:	e001      	b.n	4620 <sem_init+0x40>
    461c:	2314      	movs	r3, #20
    461e:	425b      	negs	r3, r3
}
    4620:	0018      	movs	r0, r3
    4622:	46bd      	mov	sp, r7
    4624:	b002      	add	sp, #8
    4626:	bd80      	pop	{r7, pc}
    4628:	00008610 	.word	0x00008610
    462c:	00001afd 	.word	0x00001afd
    4630:	00004c2d 	.word	0x00004c2d

00004634 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise(List_t *const pxList)
{
    4634:	b580      	push	{r7, lr}
    4636:	b082      	sub	sp, #8
    4638:	af00      	add	r7, sp, #0
    463a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    463c:	687b      	ldr	r3, [r7, #4]
    463e:	3308      	adds	r3, #8
    4640:	001a      	movs	r2, r3
    4642:	687b      	ldr	r3, [r7, #4]
    4644:	605a      	str	r2, [r3, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    4646:	687b      	ldr	r3, [r7, #4]
    4648:	2201      	movs	r2, #1
    464a:	4252      	negs	r2, r2
    464c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    464e:	687b      	ldr	r3, [r7, #4]
    4650:	3308      	adds	r3, #8
    4652:	001a      	movs	r2, r3
    4654:	687b      	ldr	r3, [r7, #4]
    4656:	60da      	str	r2, [r3, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    4658:	687b      	ldr	r3, [r7, #4]
    465a:	3308      	adds	r3, #8
    465c:	001a      	movs	r2, r3
    465e:	687b      	ldr	r3, [r7, #4]
    4660:	611a      	str	r2, [r3, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    4662:	687b      	ldr	r3, [r7, #4]
    4664:	2200      	movs	r2, #0
    4666:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE(pxList);
	listSET_LIST_INTEGRITY_CHECK_2_VALUE(pxList);
}
    4668:	46c0      	nop			; (mov r8, r8)
    466a:	46bd      	mov	sp, r7
    466c:	b002      	add	sp, #8
    466e:	bd80      	pop	{r7, pc}

00004670 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
    4670:	b580      	push	{r7, lr}
    4672:	b082      	sub	sp, #8
    4674:	af00      	add	r7, sp, #0
    4676:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4678:	687b      	ldr	r3, [r7, #4]
    467a:	2200      	movs	r2, #0
    467c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
}
    467e:	46c0      	nop			; (mov r8, r8)
    4680:	46bd      	mov	sp, r7
    4682:	b002      	add	sp, #8
    4684:	bd80      	pop	{r7, pc}

00004686 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    4686:	b580      	push	{r7, lr}
    4688:	b084      	sub	sp, #16
    468a:	af00      	add	r7, sp, #0
    468c:	6078      	str	r0, [r7, #4]
    468e:	6039      	str	r1, [r7, #0]
	ListItem_t *const pxIndex = pxList->pxIndex;
    4690:	687b      	ldr	r3, [r7, #4]
    4692:	685b      	ldr	r3, [r3, #4]
    4694:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    4696:	683b      	ldr	r3, [r7, #0]
    4698:	68fa      	ldr	r2, [r7, #12]
    469a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    469c:	68fb      	ldr	r3, [r7, #12]
    469e:	689a      	ldr	r2, [r3, #8]
    46a0:	683b      	ldr	r3, [r7, #0]
    46a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    46a4:	68fb      	ldr	r3, [r7, #12]
    46a6:	689b      	ldr	r3, [r3, #8]
    46a8:	683a      	ldr	r2, [r7, #0]
    46aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    46ac:	68fb      	ldr	r3, [r7, #12]
    46ae:	683a      	ldr	r2, [r7, #0]
    46b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    46b2:	683b      	ldr	r3, [r7, #0]
    46b4:	687a      	ldr	r2, [r7, #4]
    46b6:	611a      	str	r2, [r3, #16]

	(pxList->uxNumberOfItems)++;
    46b8:	687b      	ldr	r3, [r7, #4]
    46ba:	681b      	ldr	r3, [r3, #0]
    46bc:	1c5a      	adds	r2, r3, #1
    46be:	687b      	ldr	r3, [r7, #4]
    46c0:	601a      	str	r2, [r3, #0]
}
    46c2:	46c0      	nop			; (mov r8, r8)
    46c4:	46bd      	mov	sp, r7
    46c6:	b004      	add	sp, #16
    46c8:	bd80      	pop	{r7, pc}

000046ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    46ca:	b580      	push	{r7, lr}
    46cc:	b084      	sub	sp, #16
    46ce:	af00      	add	r7, sp, #0
    46d0:	6078      	str	r0, [r7, #4]
    46d2:	6039      	str	r1, [r7, #0]
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    46d4:	683b      	ldr	r3, [r7, #0]
    46d6:	681b      	ldr	r3, [r3, #0]
    46d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    46da:	68bb      	ldr	r3, [r7, #8]
    46dc:	3301      	adds	r3, #1
    46de:	d103      	bne.n	46e8 <vListInsert+0x1e>
		pxIterator = pxList->xListEnd.pxPrevious;
    46e0:	687b      	ldr	r3, [r7, #4]
    46e2:	691b      	ldr	r3, [r3, #16]
    46e4:	60fb      	str	r3, [r7, #12]
    46e6:	e00c      	b.n	4702 <vListInsert+0x38>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    46e8:	687b      	ldr	r3, [r7, #4]
    46ea:	3308      	adds	r3, #8
    46ec:	60fb      	str	r3, [r7, #12]
    46ee:	e002      	b.n	46f6 <vListInsert+0x2c>
		     pxIterator
		     = pxIterator
    46f0:	68fb      	ldr	r3, [r7, #12]
    46f2:	685b      	ldr	r3, [r3, #4]
    46f4:	60fb      	str	r3, [r7, #12]
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    46f6:	68fb      	ldr	r3, [r7, #12]
    46f8:	685b      	ldr	r3, [r3, #4]
    46fa:	681a      	ldr	r2, [r3, #0]
    46fc:	68bb      	ldr	r3, [r7, #8]
    46fe:	429a      	cmp	r2, r3
    4700:	d9f6      	bls.n	46f0 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    4702:	68fb      	ldr	r3, [r7, #12]
    4704:	685a      	ldr	r2, [r3, #4]
    4706:	683b      	ldr	r3, [r7, #0]
    4708:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    470a:	683b      	ldr	r3, [r7, #0]
    470c:	685b      	ldr	r3, [r3, #4]
    470e:	683a      	ldr	r2, [r7, #0]
    4710:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    4712:	683b      	ldr	r3, [r7, #0]
    4714:	68fa      	ldr	r2, [r7, #12]
    4716:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext                = pxNewListItem;
    4718:	68fb      	ldr	r3, [r7, #12]
    471a:	683a      	ldr	r2, [r7, #0]
    471c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    471e:	683b      	ldr	r3, [r7, #0]
    4720:	687a      	ldr	r2, [r7, #4]
    4722:	611a      	str	r2, [r3, #16]

	(pxList->uxNumberOfItems)++;
    4724:	687b      	ldr	r3, [r7, #4]
    4726:	681b      	ldr	r3, [r3, #0]
    4728:	1c5a      	adds	r2, r3, #1
    472a:	687b      	ldr	r3, [r7, #4]
    472c:	601a      	str	r2, [r3, #0]
}
    472e:	46c0      	nop			; (mov r8, r8)
    4730:	46bd      	mov	sp, r7
    4732:	b004      	add	sp, #16
    4734:	bd80      	pop	{r7, pc}

00004736 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
    4736:	b580      	push	{r7, lr}
    4738:	b084      	sub	sp, #16
    473a:	af00      	add	r7, sp, #0
    473c:	6078      	str	r0, [r7, #4]
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    473e:	687b      	ldr	r3, [r7, #4]
    4740:	691b      	ldr	r3, [r3, #16]
    4742:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	685b      	ldr	r3, [r3, #4]
    4748:	687a      	ldr	r2, [r7, #4]
    474a:	6892      	ldr	r2, [r2, #8]
    474c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    474e:	687b      	ldr	r3, [r7, #4]
    4750:	689b      	ldr	r3, [r3, #8]
    4752:	687a      	ldr	r2, [r7, #4]
    4754:	6852      	ldr	r2, [r2, #4]
    4756:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    4758:	68fb      	ldr	r3, [r7, #12]
    475a:	685a      	ldr	r2, [r3, #4]
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	429a      	cmp	r2, r3
    4760:	d103      	bne.n	476a <uxListRemove+0x34>
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    4762:	687b      	ldr	r3, [r7, #4]
    4764:	689a      	ldr	r2, [r3, #8]
    4766:	68fb      	ldr	r3, [r7, #12]
    4768:	605a      	str	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    476a:	687b      	ldr	r3, [r7, #4]
    476c:	2200      	movs	r2, #0
    476e:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    4770:	68fb      	ldr	r3, [r7, #12]
    4772:	681b      	ldr	r3, [r3, #0]
    4774:	1e5a      	subs	r2, r3, #1
    4776:	68fb      	ldr	r3, [r7, #12]
    4778:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    477a:	68fb      	ldr	r3, [r7, #12]
    477c:	681b      	ldr	r3, [r3, #0]
}
    477e:	0018      	movs	r0, r3
    4780:	46bd      	mov	sp, r7
    4782:	b004      	add	sp, #16
    4784:	bd80      	pop	{r7, pc}
	...

00004788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack(StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters)
{
    4788:	b580      	push	{r7, lr}
    478a:	b084      	sub	sp, #16
    478c:	af00      	add	r7, sp, #0
    478e:	60f8      	str	r0, [r7, #12]
    4790:	60b9      	str	r1, [r7, #8]
    4792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    4794:	68fb      	ldr	r3, [r7, #12]
    4796:	3b04      	subs	r3, #4
    4798:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    479a:	68fb      	ldr	r3, [r7, #12]
    479c:	2280      	movs	r2, #128	; 0x80
    479e:	0452      	lsls	r2, r2, #17
    47a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    47a2:	68fb      	ldr	r3, [r7, #12]
    47a4:	3b04      	subs	r3, #4
    47a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t)pxCode; /* PC */
    47a8:	68ba      	ldr	r2, [r7, #8]
    47aa:	68fb      	ldr	r3, [r7, #12]
    47ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    47ae:	68fb      	ldr	r3, [r7, #12]
    47b0:	3b04      	subs	r3, #4
    47b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    47b4:	4a08      	ldr	r2, [pc, #32]	; (47d8 <pxPortInitialiseStack+0x50>)
    47b6:	68fb      	ldr	r3, [r7, #12]
    47b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;                                    /* R12, R3, R2 and R1. */
    47ba:	68fb      	ldr	r3, [r7, #12]
    47bc:	3b14      	subs	r3, #20
    47be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t)pvParameters;            /* R0 */
    47c0:	687a      	ldr	r2, [r7, #4]
    47c2:	68fb      	ldr	r3, [r7, #12]
    47c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;                                    /* R11..R4. */
    47c6:	68fb      	ldr	r3, [r7, #12]
    47c8:	3b20      	subs	r3, #32
    47ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    47cc:	68fb      	ldr	r3, [r7, #12]
}
    47ce:	0018      	movs	r0, r3
    47d0:	46bd      	mov	sp, r7
    47d2:	b004      	add	sp, #16
    47d4:	bd80      	pop	{r7, pc}
    47d6:	46c0      	nop			; (mov r8, r8)
    47d8:	000047dd 	.word	0x000047dd

000047dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    47dc:	b580      	push	{r7, lr}
    47de:	b082      	sub	sp, #8
    47e0:	af00      	add	r7, sp, #0
	volatile uint32_t ulDummy = 0UL;
    47e2:	2300      	movs	r3, #0
    47e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    47e6:	4b07      	ldr	r3, [pc, #28]	; (4804 <prvTaskExitError+0x28>)
    47e8:	681b      	ldr	r3, [r3, #0]
    47ea:	3301      	adds	r3, #1
    47ec:	d001      	beq.n	47f2 <prvTaskExitError+0x16>
    47ee:	b672      	cpsid	i
    47f0:	e7fe      	b.n	47f0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    47f2:	b672      	cpsid	i
	while (ulDummy == 0) {
    47f4:	46c0      	nop			; (mov r8, r8)
    47f6:	687b      	ldr	r3, [r7, #4]
    47f8:	2b00      	cmp	r3, #0
    47fa:	d0fc      	beq.n	47f6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    47fc:	46c0      	nop			; (mov r8, r8)
    47fe:	46bd      	mov	sp, r7
    4800:	b002      	add	sp, #8
    4802:	bd80      	pop	{r7, pc}
    4804:	20000028 	.word	0x20000028

00004808 <SVCall_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void)
{
    4808:	b580      	push	{r7, lr}
    480a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    480c:	46c0      	nop			; (mov r8, r8)
    480e:	46bd      	mov	sp, r7
    4810:	bd80      	pop	{r7, pc}
	...

00004820 <vPortStartFirstTask>:
void vPortStartFirstTask(void)
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    4820:	4a0b      	ldr	r2, [pc, #44]	; (4850 <pxCurrentTCBConst2>)
    4822:	6813      	ldr	r3, [r2, #0]
    4824:	6818      	ldr	r0, [r3, #0]
    4826:	3020      	adds	r0, #32
    4828:	f380 8809 	msr	PSP, r0
    482c:	2002      	movs	r0, #2
    482e:	f380 8814 	msr	CONTROL, r0
    4832:	f3bf 8f6f 	isb	sy
    4836:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    4838:	46ae      	mov	lr, r5
    483a:	bc08      	pop	{r3}
    483c:	bc04      	pop	{r2}
    483e:	b662      	cpsie	i
    4840:	4718      	bx	r3
    4842:	46c0      	nop			; (mov r8, r8)
    4844:	46c0      	nop			; (mov r8, r8)
    4846:	46c0      	nop			; (mov r8, r8)
    4848:	46c0      	nop			; (mov r8, r8)
    484a:	46c0      	nop			; (mov r8, r8)
    484c:	46c0      	nop			; (mov r8, r8)
    484e:	46c0      	nop			; (mov r8, r8)

00004850 <pxCurrentTCBConst2>:
    4850:	20002668 	.word	0x20002668
	    "	cpsie i						\n"     /* The first task has its context and interrupts can be enabled. */
	    "	bx   r3						\n"     /* Finally, jump to the user defined task code. */
	    "								\n"
	    "	.align 4					\n"
	    "pxCurrentTCBConst2: .word pxCurrentTCB	  ");
}
    4854:	46c0      	nop			; (mov r8, r8)
    4856:	46c0      	nop			; (mov r8, r8)

00004858 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void)
{
    4858:	b580      	push	{r7, lr}
    485a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    485c:	4b0e      	ldr	r3, [pc, #56]	; (4898 <xPortStartScheduler+0x40>)
    485e:	4a0e      	ldr	r2, [pc, #56]	; (4898 <xPortStartScheduler+0x40>)
    4860:	6812      	ldr	r2, [r2, #0]
    4862:	21ff      	movs	r1, #255	; 0xff
    4864:	0409      	lsls	r1, r1, #16
    4866:	430a      	orrs	r2, r1
    4868:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    486a:	4b0b      	ldr	r3, [pc, #44]	; (4898 <xPortStartScheduler+0x40>)
    486c:	4a0a      	ldr	r2, [pc, #40]	; (4898 <xPortStartScheduler+0x40>)
    486e:	6812      	ldr	r2, [r2, #0]
    4870:	21ff      	movs	r1, #255	; 0xff
    4872:	0609      	lsls	r1, r1, #24
    4874:	430a      	orrs	r2, r1
    4876:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    4878:	4b08      	ldr	r3, [pc, #32]	; (489c <xPortStartScheduler+0x44>)
    487a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    487c:	4b08      	ldr	r3, [pc, #32]	; (48a0 <xPortStartScheduler+0x48>)
    487e:	2200      	movs	r2, #0
    4880:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    4882:	4b08      	ldr	r3, [pc, #32]	; (48a4 <xPortStartScheduler+0x4c>)
    4884:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    4886:	4b08      	ldr	r3, [pc, #32]	; (48a8 <xPortStartScheduler+0x50>)
    4888:	4798      	blx	r3
	prvTaskExitError();
    488a:	4b08      	ldr	r3, [pc, #32]	; (48ac <xPortStartScheduler+0x54>)
    488c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    488e:	2300      	movs	r3, #0
}
    4890:	0018      	movs	r0, r3
    4892:	46bd      	mov	sp, r7
    4894:	bd80      	pop	{r7, pc}
    4896:	46c0      	nop			; (mov r8, r8)
    4898:	e000ed20 	.word	0xe000ed20
    489c:	000049c9 	.word	0x000049c9
    48a0:	20000028 	.word	0x20000028
    48a4:	00004821 	.word	0x00004821
    48a8:	00005ae5 	.word	0x00005ae5
    48ac:	000047dd 	.word	0x000047dd

000048b0 <vPortYield>:
	configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortYield(void)
{
    48b0:	b580      	push	{r7, lr}
    48b2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    48b4:	4b05      	ldr	r3, [pc, #20]	; (48cc <vPortYield+0x1c>)
    48b6:	2280      	movs	r2, #128	; 0x80
    48b8:	0552      	lsls	r2, r2, #21
    48ba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile("dsb" ::: "memory");
    48bc:	f3bf 8f4f 	dsb	sy
	__asm volatile("isb");
    48c0:	f3bf 8f6f 	isb	sy
}
    48c4:	46c0      	nop			; (mov r8, r8)
    48c6:	46bd      	mov	sp, r7
    48c8:	bd80      	pop	{r7, pc}
    48ca:	46c0      	nop			; (mov r8, r8)
    48cc:	e000ed04 	.word	0xe000ed04

000048d0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical(void)
{
    48d0:	b580      	push	{r7, lr}
    48d2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    48d4:	b672      	cpsid	i
	uxCriticalNesting++;
    48d6:	4b06      	ldr	r3, [pc, #24]	; (48f0 <vPortEnterCritical+0x20>)
    48d8:	681b      	ldr	r3, [r3, #0]
    48da:	1c5a      	adds	r2, r3, #1
    48dc:	4b04      	ldr	r3, [pc, #16]	; (48f0 <vPortEnterCritical+0x20>)
    48de:	601a      	str	r2, [r3, #0]
	__asm volatile("dsb" ::: "memory");
    48e0:	f3bf 8f4f 	dsb	sy
	__asm volatile("isb");
    48e4:	f3bf 8f6f 	isb	sy
}
    48e8:	46c0      	nop			; (mov r8, r8)
    48ea:	46bd      	mov	sp, r7
    48ec:	bd80      	pop	{r7, pc}
    48ee:	46c0      	nop			; (mov r8, r8)
    48f0:	20000028 	.word	0x20000028

000048f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void)
{
    48f4:	b580      	push	{r7, lr}
    48f6:	af00      	add	r7, sp, #0
	configASSERT(uxCriticalNesting);
    48f8:	4b09      	ldr	r3, [pc, #36]	; (4920 <vPortExitCritical+0x2c>)
    48fa:	681b      	ldr	r3, [r3, #0]
    48fc:	2b00      	cmp	r3, #0
    48fe:	d101      	bne.n	4904 <vPortExitCritical+0x10>
    4900:	b672      	cpsid	i
    4902:	e7fe      	b.n	4902 <vPortExitCritical+0xe>
	uxCriticalNesting--;
    4904:	4b06      	ldr	r3, [pc, #24]	; (4920 <vPortExitCritical+0x2c>)
    4906:	681b      	ldr	r3, [r3, #0]
    4908:	1e5a      	subs	r2, r3, #1
    490a:	4b05      	ldr	r3, [pc, #20]	; (4920 <vPortExitCritical+0x2c>)
    490c:	601a      	str	r2, [r3, #0]
	if (uxCriticalNesting == 0) {
    490e:	4b04      	ldr	r3, [pc, #16]	; (4920 <vPortExitCritical+0x2c>)
    4910:	681b      	ldr	r3, [r3, #0]
    4912:	2b00      	cmp	r3, #0
    4914:	d100      	bne.n	4918 <vPortExitCritical+0x24>
		portENABLE_INTERRUPTS();
    4916:	b662      	cpsie	i
	}
}
    4918:	46c0      	nop			; (mov r8, r8)
    491a:	46bd      	mov	sp, r7
    491c:	bd80      	pop	{r7, pc}
    491e:	46c0      	nop			; (mov r8, r8)
    4920:	20000028 	.word	0x20000028

00004924 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR(void)
{
	__asm volatile(" mrs r0, PRIMASK	\n"
    4924:	f3ef 8010 	mrs	r0, PRIMASK
    4928:	b672      	cpsid	i
    492a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    492c:	46c0      	nop			; (mov r8, r8)
    492e:	0018      	movs	r0, r3

00004930 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR(__attribute__((unused)) uint32_t ulMask)
{
	__asm volatile(" msr PRIMASK, r0	\n"
    4930:	f380 8810 	msr	PRIMASK, r0
    4934:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	(void)ulMask;
#endif
}
    4936:	46c0      	nop			; (mov r8, r8)
	...

00004940 <PendSV_Handler>:

void xPortPendSVHandler(void)
{
	/* This is a naked function. */

	__asm volatile(
    4940:	f3ef 8009 	mrs	r0, PSP
    4944:	4b0e      	ldr	r3, [pc, #56]	; (4980 <pxCurrentTCBConst>)
    4946:	681a      	ldr	r2, [r3, #0]
    4948:	3820      	subs	r0, #32
    494a:	6010      	str	r0, [r2, #0]
    494c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    494e:	4644      	mov	r4, r8
    4950:	464d      	mov	r5, r9
    4952:	4656      	mov	r6, sl
    4954:	465f      	mov	r7, fp
    4956:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    4958:	b508      	push	{r3, lr}
    495a:	b672      	cpsid	i
    495c:	f001 f8c2 	bl	5ae4 <vTaskSwitchContext>
    4960:	b662      	cpsie	i
    4962:	bc0c      	pop	{r2, r3}
    4964:	6811      	ldr	r1, [r2, #0]
    4966:	6808      	ldr	r0, [r1, #0]
    4968:	3010      	adds	r0, #16
    496a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    496c:	46a0      	mov	r8, r4
    496e:	46a9      	mov	r9, r5
    4970:	46b2      	mov	sl, r6
    4972:	46bb      	mov	fp, r7
    4974:	f380 8809 	msr	PSP, r0
    4978:	3820      	subs	r0, #32
    497a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    497c:	4718      	bx	r3
    497e:	46c0      	nop			; (mov r8, r8)

00004980 <pxCurrentTCBConst>:
    4980:	20002668 	.word	0x20002668
	    "										\n"
	    "	bx r3								\n"
	    "										\n"
	    "	.align 4							\n"
	    "pxCurrentTCBConst: .word pxCurrentTCB	  ");
}
    4984:	46c0      	nop			; (mov r8, r8)
    4986:	46c0      	nop			; (mov r8, r8)

00004988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void)
{
    4988:	b580      	push	{r7, lr}
    498a:	b082      	sub	sp, #8
    498c:	af00      	add	r7, sp, #0
	uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    498e:	4b0a      	ldr	r3, [pc, #40]	; (49b8 <SysTick_Handler+0x30>)
    4990:	4798      	blx	r3
    4992:	0003      	movs	r3, r0
    4994:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
    4996:	4b09      	ldr	r3, [pc, #36]	; (49bc <SysTick_Handler+0x34>)
    4998:	4798      	blx	r3
    499a:	1e03      	subs	r3, r0, #0
    499c:	d003      	beq.n	49a6 <SysTick_Handler+0x1e>
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    499e:	4b08      	ldr	r3, [pc, #32]	; (49c0 <SysTick_Handler+0x38>)
    49a0:	2280      	movs	r2, #128	; 0x80
    49a2:	0552      	lsls	r2, r2, #21
    49a4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(ulPreviousMask);
    49a6:	687b      	ldr	r3, [r7, #4]
    49a8:	0018      	movs	r0, r3
    49aa:	4b06      	ldr	r3, [pc, #24]	; (49c4 <SysTick_Handler+0x3c>)
    49ac:	4798      	blx	r3
}
    49ae:	46c0      	nop			; (mov r8, r8)
    49b0:	46bd      	mov	sp, r7
    49b2:	b002      	add	sp, #8
    49b4:	bd80      	pop	{r7, pc}
    49b6:	46c0      	nop			; (mov r8, r8)
    49b8:	00004925 	.word	0x00004925
    49bc:	00005971 	.word	0x00005971
    49c0:	e000ed04 	.word	0xe000ed04
    49c4:	00004931 	.word	0x00004931

000049c8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt(void)
{
    49c8:	b580      	push	{r7, lr}
    49ca:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL)          = 0UL;
    49cc:	4b07      	ldr	r3, [pc, #28]	; (49ec <prvSetupTimerInterrupt+0x24>)
    49ce:	2200      	movs	r2, #0
    49d0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    49d2:	4b07      	ldr	r3, [pc, #28]	; (49f0 <prvSetupTimerInterrupt+0x28>)
    49d4:	2200      	movs	r2, #0
    49d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = (configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    49d8:	4b06      	ldr	r3, [pc, #24]	; (49f4 <prvSetupTimerInterrupt+0x2c>)
    49da:	4a07      	ldr	r2, [pc, #28]	; (49f8 <prvSetupTimerInterrupt+0x30>)
    49dc:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    49de:	4b03      	ldr	r3, [pc, #12]	; (49ec <prvSetupTimerInterrupt+0x24>)
    49e0:	2207      	movs	r2, #7
    49e2:	601a      	str	r2, [r3, #0]
}
    49e4:	46c0      	nop			; (mov r8, r8)
    49e6:	46bd      	mov	sp, r7
    49e8:	bd80      	pop	{r7, pc}
    49ea:	46c0      	nop			; (mov r8, r8)
    49ec:	e000e010 	.word	0xe000e010
    49f0:	e000e018 	.word	0xe000e018
    49f4:	e000e014 	.word	0xe000e014
    49f8:	00000f9f 	.word	0x00000f9f

000049fc <pvPortMalloc>:
static size_t xNextFreeByte = (size_t)0;

/*-----------------------------------------------------------*/

void *pvPortMalloc(size_t xWantedSize)
{
    49fc:	b580      	push	{r7, lr}
    49fe:	b084      	sub	sp, #16
    4a00:	af00      	add	r7, sp, #0
    4a02:	6078      	str	r0, [r7, #4]
	void *          pvReturn       = NULL;
    4a04:	2300      	movs	r3, #0
    4a06:	60fb      	str	r3, [r7, #12]
	static uint8_t *pucAlignedHeap = NULL;

/* Ensure that blocks are always aligned to the required number of bytes. */
#if (portBYTE_ALIGNMENT != 1)
	{
		if (xWantedSize & portBYTE_ALIGNMENT_MASK) {
    4a08:	687b      	ldr	r3, [r7, #4]
    4a0a:	2207      	movs	r2, #7
    4a0c:	4013      	ands	r3, r2
    4a0e:	d004      	beq.n	4a1a <pvPortMalloc+0x1e>
			/* Byte alignment required. */
			xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
    4a10:	687b      	ldr	r3, [r7, #4]
    4a12:	2207      	movs	r2, #7
    4a14:	4393      	bics	r3, r2
    4a16:	3308      	adds	r3, #8
    4a18:	607b      	str	r3, [r7, #4]
		}
	}
#endif

	vTaskSuspendAll();
    4a1a:	4b17      	ldr	r3, [pc, #92]	; (4a78 <pvPortMalloc+0x7c>)
    4a1c:	4798      	blx	r3
	{
		if (pucAlignedHeap == NULL) {
    4a1e:	4b17      	ldr	r3, [pc, #92]	; (4a7c <pvPortMalloc+0x80>)
    4a20:	681b      	ldr	r3, [r3, #0]
    4a22:	2b00      	cmp	r3, #0
    4a24:	d105      	bne.n	4a32 <pvPortMalloc+0x36>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    4a26:	4b16      	ldr	r3, [pc, #88]	; (4a80 <pvPortMalloc+0x84>)
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
    4a28:	2207      	movs	r2, #7
    4a2a:	4393      	bics	r3, r2
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    4a2c:	001a      	movs	r2, r3
    4a2e:	4b13      	ldr	r3, [pc, #76]	; (4a7c <pvPortMalloc+0x80>)
    4a30:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if (((xNextFreeByte + xWantedSize) < configADJUSTED_HEAP_SIZE)
    4a32:	4b14      	ldr	r3, [pc, #80]	; (4a84 <pvPortMalloc+0x88>)
    4a34:	681a      	ldr	r2, [r3, #0]
    4a36:	687b      	ldr	r3, [r7, #4]
    4a38:	18d3      	adds	r3, r2, r3
    4a3a:	4a13      	ldr	r2, [pc, #76]	; (4a88 <pvPortMalloc+0x8c>)
    4a3c:	4293      	cmp	r3, r2
    4a3e:	d813      	bhi.n	4a68 <pvPortMalloc+0x6c>
		    && ((xNextFreeByte + xWantedSize) > xNextFreeByte)) /* Check for overflow. */
    4a40:	4b10      	ldr	r3, [pc, #64]	; (4a84 <pvPortMalloc+0x88>)
    4a42:	681a      	ldr	r2, [r3, #0]
    4a44:	687b      	ldr	r3, [r7, #4]
    4a46:	18d2      	adds	r2, r2, r3
    4a48:	4b0e      	ldr	r3, [pc, #56]	; (4a84 <pvPortMalloc+0x88>)
    4a4a:	681b      	ldr	r3, [r3, #0]
    4a4c:	429a      	cmp	r2, r3
    4a4e:	d90b      	bls.n	4a68 <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    4a50:	4b0a      	ldr	r3, [pc, #40]	; (4a7c <pvPortMalloc+0x80>)
    4a52:	681a      	ldr	r2, [r3, #0]
    4a54:	4b0b      	ldr	r3, [pc, #44]	; (4a84 <pvPortMalloc+0x88>)
    4a56:	681b      	ldr	r3, [r3, #0]
    4a58:	18d3      	adds	r3, r2, r3
    4a5a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    4a5c:	4b09      	ldr	r3, [pc, #36]	; (4a84 <pvPortMalloc+0x88>)
    4a5e:	681a      	ldr	r2, [r3, #0]
    4a60:	687b      	ldr	r3, [r7, #4]
    4a62:	18d2      	adds	r2, r2, r3
    4a64:	4b07      	ldr	r3, [pc, #28]	; (4a84 <pvPortMalloc+0x88>)
    4a66:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC(pvReturn, xWantedSize);
	}
	(void)xTaskResumeAll();
    4a68:	4b08      	ldr	r3, [pc, #32]	; (4a8c <pvPortMalloc+0x90>)
    4a6a:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
#endif

	return pvReturn;
    4a6c:	68fb      	ldr	r3, [r7, #12]
}
    4a6e:	0018      	movs	r0, r3
    4a70:	46bd      	mov	sp, r7
    4a72:	b004      	add	sp, #16
    4a74:	bd80      	pop	{r7, pc}
    4a76:	46c0      	nop			; (mov r8, r8)
    4a78:	00005809 	.word	0x00005809
    4a7c:	20002664 	.word	0x20002664
    4a80:	200000e8 	.word	0x200000e8
    4a84:	20002660 	.word	0x20002660
    4a88:	00002577 	.word	0x00002577
    4a8c:	00005821 	.word	0x00005821

00004a90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree(void *pv)
{
    4a90:	b580      	push	{r7, lr}
    4a92:	b082      	sub	sp, #8
    4a94:	af00      	add	r7, sp, #0
    4a96:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	(void)pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT(pv == NULL);
    4a98:	687b      	ldr	r3, [r7, #4]
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d001      	beq.n	4aa2 <vPortFree+0x12>
    4a9e:	b672      	cpsid	i
    4aa0:	e7fe      	b.n	4aa0 <vPortFree+0x10>
}
    4aa2:	46c0      	nop			; (mov r8, r8)
    4aa4:	46bd      	mov	sp, r7
    4aa6:	b002      	add	sp, #8
    4aa8:	bd80      	pop	{r7, pc}
	...

00004aac <xQueueGenericReset>:
	}                                                                                                                  \
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset(QueueHandle_t xQueue, BaseType_t xNewQueue)
{
    4aac:	b580      	push	{r7, lr}
    4aae:	b084      	sub	sp, #16
    4ab0:	af00      	add	r7, sp, #0
    4ab2:	6078      	str	r0, [r7, #4]
    4ab4:	6039      	str	r1, [r7, #0]
	Queue_t *const pxQueue = (Queue_t *)xQueue;
    4ab6:	687b      	ldr	r3, [r7, #4]
    4ab8:	60fb      	str	r3, [r7, #12]

	configASSERT(pxQueue);
    4aba:	68fb      	ldr	r3, [r7, #12]
    4abc:	2b00      	cmp	r3, #0
    4abe:	d101      	bne.n	4ac4 <xQueueGenericReset+0x18>
    4ac0:	b672      	cpsid	i
    4ac2:	e7fe      	b.n	4ac2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    4ac4:	4b23      	ldr	r3, [pc, #140]	; (4b54 <xQueueGenericReset+0xa8>)
    4ac6:	4798      	blx	r3
	{
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    4ac8:	68fb      	ldr	r3, [r7, #12]
    4aca:	681a      	ldr	r2, [r3, #0]
    4acc:	68fb      	ldr	r3, [r7, #12]
    4ace:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    4ad0:	68fb      	ldr	r3, [r7, #12]
    4ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4ad4:	434b      	muls	r3, r1
    4ad6:	18d2      	adds	r2, r2, r3
    4ad8:	68fb      	ldr	r3, [r7, #12]
    4ada:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    4adc:	68fb      	ldr	r3, [r7, #12]
    4ade:	2200      	movs	r2, #0
    4ae0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    4ae2:	68fb      	ldr	r3, [r7, #12]
    4ae4:	681a      	ldr	r2, [r3, #0]
    4ae6:	68fb      	ldr	r3, [r7, #12]
    4ae8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    4aea:	68fb      	ldr	r3, [r7, #12]
    4aec:	681a      	ldr	r2, [r3, #0]
    4aee:	68fb      	ldr	r3, [r7, #12]
    4af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4af2:	1e59      	subs	r1, r3, #1
    4af4:	68fb      	ldr	r3, [r7, #12]
    4af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4af8:	434b      	muls	r3, r1
    4afa:	18d2      	adds	r2, r2, r3
    4afc:	68fb      	ldr	r3, [r7, #12]
    4afe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    4b00:	68fb      	ldr	r3, [r7, #12]
    4b02:	2244      	movs	r2, #68	; 0x44
    4b04:	21ff      	movs	r1, #255	; 0xff
    4b06:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock           = queueUNLOCKED;
    4b08:	68fb      	ldr	r3, [r7, #12]
    4b0a:	2245      	movs	r2, #69	; 0x45
    4b0c:	21ff      	movs	r1, #255	; 0xff
    4b0e:	5499      	strb	r1, [r3, r2]

		if (xNewQueue == pdFALSE) {
    4b10:	683b      	ldr	r3, [r7, #0]
    4b12:	2b00      	cmp	r3, #0
    4b14:	d10d      	bne.n	4b32 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4b16:	68fb      	ldr	r3, [r7, #12]
    4b18:	691b      	ldr	r3, [r3, #16]
    4b1a:	2b00      	cmp	r3, #0
    4b1c:	d013      	beq.n	4b46 <xQueueGenericReset+0x9a>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4b1e:	68fb      	ldr	r3, [r7, #12]
    4b20:	3310      	adds	r3, #16
    4b22:	0018      	movs	r0, r3
    4b24:	4b0c      	ldr	r3, [pc, #48]	; (4b58 <xQueueGenericReset+0xac>)
    4b26:	4798      	blx	r3
    4b28:	1e03      	subs	r3, r0, #0
    4b2a:	d00c      	beq.n	4b46 <xQueueGenericReset+0x9a>
					queueYIELD_IF_USING_PREEMPTION();
    4b2c:	4b0b      	ldr	r3, [pc, #44]	; (4b5c <xQueueGenericReset+0xb0>)
    4b2e:	4798      	blx	r3
    4b30:	e009      	b.n	4b46 <xQueueGenericReset+0x9a>
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		} else {
			/* Ensure the event queues start in the correct state. */
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    4b32:	68fb      	ldr	r3, [r7, #12]
    4b34:	3310      	adds	r3, #16
    4b36:	0018      	movs	r0, r3
    4b38:	4b09      	ldr	r3, [pc, #36]	; (4b60 <xQueueGenericReset+0xb4>)
    4b3a:	4798      	blx	r3
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    4b3c:	68fb      	ldr	r3, [r7, #12]
    4b3e:	3324      	adds	r3, #36	; 0x24
    4b40:	0018      	movs	r0, r3
    4b42:	4b07      	ldr	r3, [pc, #28]	; (4b60 <xQueueGenericReset+0xb4>)
    4b44:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    4b46:	4b07      	ldr	r3, [pc, #28]	; (4b64 <xQueueGenericReset+0xb8>)
    4b48:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    4b4a:	2301      	movs	r3, #1
}
    4b4c:	0018      	movs	r0, r3
    4b4e:	46bd      	mov	sp, r7
    4b50:	b004      	add	sp, #16
    4b52:	bd80      	pop	{r7, pc}
    4b54:	000048d1 	.word	0x000048d1
    4b58:	00005c21 	.word	0x00005c21
    4b5c:	000048b1 	.word	0x000048b1
    4b60:	00004635 	.word	0x00004635
    4b64:	000048f5 	.word	0x000048f5

00004b68 <xQueueGenericCreate>:

#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)

QueueHandle_t xQueueGenericCreate(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize,
                                  const uint8_t ucQueueType)
{
    4b68:	b590      	push	{r4, r7, lr}
    4b6a:	b08b      	sub	sp, #44	; 0x2c
    4b6c:	af02      	add	r7, sp, #8
    4b6e:	60f8      	str	r0, [r7, #12]
    4b70:	60b9      	str	r1, [r7, #8]
    4b72:	1dfb      	adds	r3, r7, #7
    4b74:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t   xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

	configASSERT(uxQueueLength > (UBaseType_t)0);
    4b76:	68fb      	ldr	r3, [r7, #12]
    4b78:	2b00      	cmp	r3, #0
    4b7a:	d101      	bne.n	4b80 <xQueueGenericCreate+0x18>
    4b7c:	b672      	cpsid	i
    4b7e:	e7fe      	b.n	4b7e <xQueueGenericCreate+0x16>

	if (uxItemSize == (UBaseType_t)0) {
    4b80:	68bb      	ldr	r3, [r7, #8]
    4b82:	2b00      	cmp	r3, #0
    4b84:	d102      	bne.n	4b8c <xQueueGenericCreate+0x24>
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = (size_t)0;
    4b86:	2300      	movs	r3, #0
    4b88:	61fb      	str	r3, [r7, #28]
    4b8a:	e003      	b.n	4b94 <xQueueGenericCreate+0x2c>
	} else {
		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time. */
		xQueueSizeInBytes = (size_t)(
    4b8c:	68fb      	ldr	r3, [r7, #12]
    4b8e:	68ba      	ldr	r2, [r7, #8]
    4b90:	4353      	muls	r3, r2
    4b92:	61fb      	str	r3, [r7, #28]
		    uxQueueLength * uxItemSize); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    4b94:	69fb      	ldr	r3, [r7, #28]
    4b96:	3354      	adds	r3, #84	; 0x54
    4b98:	0018      	movs	r0, r3
    4b9a:	4b0c      	ldr	r3, [pc, #48]	; (4bcc <xQueueGenericCreate+0x64>)
    4b9c:	4798      	blx	r3
    4b9e:	0003      	movs	r3, r0
    4ba0:	61bb      	str	r3, [r7, #24]

	if (pxNewQueue != NULL) {
    4ba2:	69bb      	ldr	r3, [r7, #24]
    4ba4:	2b00      	cmp	r3, #0
    4ba6:	d00c      	beq.n	4bc2 <xQueueGenericCreate+0x5a>
		/* Jump past the queue structure to find the location of the queue
		storage area. */
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    4ba8:	69bb      	ldr	r3, [r7, #24]
    4baa:	3354      	adds	r3, #84	; 0x54
    4bac:	617b      	str	r3, [r7, #20]
			deleted. */
			pxNewQueue->ucStaticallyAllocated = pdFALSE;
		}
#endif /* configSUPPORT_STATIC_ALLOCATION */

		prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue);
    4bae:	1dfb      	adds	r3, r7, #7
    4bb0:	781c      	ldrb	r4, [r3, #0]
    4bb2:	697a      	ldr	r2, [r7, #20]
    4bb4:	68b9      	ldr	r1, [r7, #8]
    4bb6:	68f8      	ldr	r0, [r7, #12]
    4bb8:	69bb      	ldr	r3, [r7, #24]
    4bba:	9300      	str	r3, [sp, #0]
    4bbc:	0023      	movs	r3, r4
    4bbe:	4c04      	ldr	r4, [pc, #16]	; (4bd0 <xQueueGenericCreate+0x68>)
    4bc0:	47a0      	blx	r4
	} else {
		traceQUEUE_CREATE_FAILED(ucQueueType);
	}

	return pxNewQueue;
    4bc2:	69bb      	ldr	r3, [r7, #24]
}
    4bc4:	0018      	movs	r0, r3
    4bc6:	46bd      	mov	sp, r7
    4bc8:	b009      	add	sp, #36	; 0x24
    4bca:	bd90      	pop	{r4, r7, pc}
    4bcc:	000049fd 	.word	0x000049fd
    4bd0:	00004bd5 	.word	0x00004bd5

00004bd4 <prvInitialiseNewQueue>:
#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize,
                                  uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue)
{
    4bd4:	b580      	push	{r7, lr}
    4bd6:	b084      	sub	sp, #16
    4bd8:	af00      	add	r7, sp, #0
    4bda:	60f8      	str	r0, [r7, #12]
    4bdc:	60b9      	str	r1, [r7, #8]
    4bde:	607a      	str	r2, [r7, #4]
    4be0:	001a      	movs	r2, r3
    4be2:	1cfb      	adds	r3, r7, #3
    4be4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	(void)ucQueueType;

	if (uxItemSize == (UBaseType_t)0) {
    4be6:	68bb      	ldr	r3, [r7, #8]
    4be8:	2b00      	cmp	r3, #0
    4bea:	d103      	bne.n	4bf4 <prvInitialiseNewQueue+0x20>
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    4bec:	69bb      	ldr	r3, [r7, #24]
    4bee:	69ba      	ldr	r2, [r7, #24]
    4bf0:	601a      	str	r2, [r3, #0]
    4bf2:	e002      	b.n	4bfa <prvInitialiseNewQueue+0x26>
	} else {
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    4bf4:	69bb      	ldr	r3, [r7, #24]
    4bf6:	687a      	ldr	r2, [r7, #4]
    4bf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength   = uxQueueLength;
    4bfa:	69bb      	ldr	r3, [r7, #24]
    4bfc:	68fa      	ldr	r2, [r7, #12]
    4bfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    4c00:	69bb      	ldr	r3, [r7, #24]
    4c02:	68ba      	ldr	r2, [r7, #8]
    4c04:	641a      	str	r2, [r3, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    4c06:	69bb      	ldr	r3, [r7, #24]
    4c08:	2101      	movs	r1, #1
    4c0a:	0018      	movs	r0, r3
    4c0c:	4b06      	ldr	r3, [pc, #24]	; (4c28 <prvInitialiseNewQueue+0x54>)
    4c0e:	4798      	blx	r3

#if (configUSE_TRACE_FACILITY == 1)
	{
		pxNewQueue->ucQueueType = ucQueueType;
    4c10:	69bb      	ldr	r3, [r7, #24]
    4c12:	1cfa      	adds	r2, r7, #3
    4c14:	2150      	movs	r1, #80	; 0x50
    4c16:	7812      	ldrb	r2, [r2, #0]
    4c18:	545a      	strb	r2, [r3, r1]
	}
#endif /* configUSE_TRACE_FACILITY */

#if (configUSE_QUEUE_SETS == 1)
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    4c1a:	69bb      	ldr	r3, [r7, #24]
    4c1c:	2200      	movs	r2, #0
    4c1e:	649a      	str	r2, [r3, #72]	; 0x48
	}
#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE(pxNewQueue);
}
    4c20:	46c0      	nop			; (mov r8, r8)
    4c22:	46bd      	mov	sp, r7
    4c24:	b004      	add	sp, #16
    4c26:	bd80      	pop	{r7, pc}
    4c28:	00004aad 	.word	0x00004aad

00004c2c <xQueueCreateCountingSemaphore>:
	/*-----------------------------------------------------------*/

#if ((configUSE_COUNTING_SEMAPHORES == 1) && (configSUPPORT_DYNAMIC_ALLOCATION == 1))

QueueHandle_t xQueueCreateCountingSemaphore(const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount)
{
    4c2c:	b580      	push	{r7, lr}
    4c2e:	b084      	sub	sp, #16
    4c30:	af00      	add	r7, sp, #0
    4c32:	6078      	str	r0, [r7, #4]
    4c34:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

	configASSERT(uxMaxCount != 0);
    4c36:	687b      	ldr	r3, [r7, #4]
    4c38:	2b00      	cmp	r3, #0
    4c3a:	d101      	bne.n	4c40 <xQueueCreateCountingSemaphore+0x14>
    4c3c:	b672      	cpsid	i
    4c3e:	e7fe      	b.n	4c3e <xQueueCreateCountingSemaphore+0x12>
	configASSERT(uxInitialCount <= uxMaxCount);
    4c40:	683a      	ldr	r2, [r7, #0]
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	429a      	cmp	r2, r3
    4c46:	d901      	bls.n	4c4c <xQueueCreateCountingSemaphore+0x20>
    4c48:	b672      	cpsid	i
    4c4a:	e7fe      	b.n	4c4a <xQueueCreateCountingSemaphore+0x1e>

	xHandle = xQueueGenericCreate(uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE);
    4c4c:	687b      	ldr	r3, [r7, #4]
    4c4e:	2202      	movs	r2, #2
    4c50:	2100      	movs	r1, #0
    4c52:	0018      	movs	r0, r3
    4c54:	4b07      	ldr	r3, [pc, #28]	; (4c74 <xQueueCreateCountingSemaphore+0x48>)
    4c56:	4798      	blx	r3
    4c58:	0003      	movs	r3, r0
    4c5a:	60fb      	str	r3, [r7, #12]

	if (xHandle != NULL) {
    4c5c:	68fb      	ldr	r3, [r7, #12]
    4c5e:	2b00      	cmp	r3, #0
    4c60:	d002      	beq.n	4c68 <xQueueCreateCountingSemaphore+0x3c>
		((Queue_t *)xHandle)->uxMessagesWaiting = uxInitialCount;
    4c62:	68fb      	ldr	r3, [r7, #12]
    4c64:	683a      	ldr	r2, [r7, #0]
    4c66:	639a      	str	r2, [r3, #56]	; 0x38
		traceCREATE_COUNTING_SEMAPHORE();
	} else {
		traceCREATE_COUNTING_SEMAPHORE_FAILED();
	}

	return xHandle;
    4c68:	68fb      	ldr	r3, [r7, #12]
}
    4c6a:	0018      	movs	r0, r3
    4c6c:	46bd      	mov	sp, r7
    4c6e:	b004      	add	sp, #16
    4c70:	bd80      	pop	{r7, pc}
    4c72:	46c0      	nop			; (mov r8, r8)
    4c74:	00004b69 	.word	0x00004b69

00004c78 <xQueueGenericSend>:
#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend(QueueHandle_t xQueue, const void *const pvItemToQueue, TickType_t xTicksToWait,
                             const BaseType_t xCopyPosition)
{
    4c78:	b580      	push	{r7, lr}
    4c7a:	b08a      	sub	sp, #40	; 0x28
    4c7c:	af00      	add	r7, sp, #0
    4c7e:	60f8      	str	r0, [r7, #12]
    4c80:	60b9      	str	r1, [r7, #8]
    4c82:	607a      	str	r2, [r7, #4]
    4c84:	603b      	str	r3, [r7, #0]
	BaseType_t     xEntryTimeSet = pdFALSE, xYieldRequired;
    4c86:	2300      	movs	r3, #0
    4c88:	627b      	str	r3, [r7, #36]	; 0x24
	TimeOut_t      xTimeOut;
	Queue_t *const pxQueue = (Queue_t *)xQueue;
    4c8a:	68fb      	ldr	r3, [r7, #12]
    4c8c:	623b      	str	r3, [r7, #32]

	configASSERT(pxQueue);
    4c8e:	6a3b      	ldr	r3, [r7, #32]
    4c90:	2b00      	cmp	r3, #0
    4c92:	d101      	bne.n	4c98 <xQueueGenericSend+0x20>
    4c94:	b672      	cpsid	i
    4c96:	e7fe      	b.n	4c96 <xQueueGenericSend+0x1e>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4c98:	68bb      	ldr	r3, [r7, #8]
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d103      	bne.n	4ca6 <xQueueGenericSend+0x2e>
    4c9e:	6a3b      	ldr	r3, [r7, #32]
    4ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4ca2:	2b00      	cmp	r3, #0
    4ca4:	d101      	bne.n	4caa <xQueueGenericSend+0x32>
    4ca6:	2301      	movs	r3, #1
    4ca8:	e000      	b.n	4cac <xQueueGenericSend+0x34>
    4caa:	2300      	movs	r3, #0
    4cac:	2b00      	cmp	r3, #0
    4cae:	d101      	bne.n	4cb4 <xQueueGenericSend+0x3c>
    4cb0:	b672      	cpsid	i
    4cb2:	e7fe      	b.n	4cb2 <xQueueGenericSend+0x3a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4cb4:	683b      	ldr	r3, [r7, #0]
    4cb6:	2b02      	cmp	r3, #2
    4cb8:	d103      	bne.n	4cc2 <xQueueGenericSend+0x4a>
    4cba:	6a3b      	ldr	r3, [r7, #32]
    4cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4cbe:	2b01      	cmp	r3, #1
    4cc0:	d101      	bne.n	4cc6 <xQueueGenericSend+0x4e>
    4cc2:	2301      	movs	r3, #1
    4cc4:	e000      	b.n	4cc8 <xQueueGenericSend+0x50>
    4cc6:	2300      	movs	r3, #0
    4cc8:	2b00      	cmp	r3, #0
    4cca:	d101      	bne.n	4cd0 <xQueueGenericSend+0x58>
    4ccc:	b672      	cpsid	i
    4cce:	e7fe      	b.n	4cce <xQueueGenericSend+0x56>
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
	{
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4cd0:	4b53      	ldr	r3, [pc, #332]	; (4e20 <xQueueGenericSend+0x1a8>)
    4cd2:	4798      	blx	r3
    4cd4:	1e03      	subs	r3, r0, #0
    4cd6:	d102      	bne.n	4cde <xQueueGenericSend+0x66>
    4cd8:	687b      	ldr	r3, [r7, #4]
    4cda:	2b00      	cmp	r3, #0
    4cdc:	d101      	bne.n	4ce2 <xQueueGenericSend+0x6a>
    4cde:	2301      	movs	r3, #1
    4ce0:	e000      	b.n	4ce4 <xQueueGenericSend+0x6c>
    4ce2:	2300      	movs	r3, #0
    4ce4:	2b00      	cmp	r3, #0
    4ce6:	d101      	bne.n	4cec <xQueueGenericSend+0x74>
    4ce8:	b672      	cpsid	i
    4cea:	e7fe      	b.n	4cea <xQueueGenericSend+0x72>

	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for (;;) {
		taskENTER_CRITICAL();
    4cec:	4b4d      	ldr	r3, [pc, #308]	; (4e24 <xQueueGenericSend+0x1ac>)
    4cee:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    4cf0:	6a3b      	ldr	r3, [r7, #32]
    4cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4cf4:	6a3b      	ldr	r3, [r7, #32]
    4cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4cf8:	429a      	cmp	r2, r3
    4cfa:	d302      	bcc.n	4d02 <xQueueGenericSend+0x8a>
    4cfc:	683b      	ldr	r3, [r7, #0]
    4cfe:	2b02      	cmp	r3, #2
    4d00:	d12d      	bne.n	4d5e <xQueueGenericSend+0xe6>
				traceQUEUE_SEND(pxQueue);
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    4d02:	683a      	ldr	r2, [r7, #0]
    4d04:	68b9      	ldr	r1, [r7, #8]
    4d06:	6a3b      	ldr	r3, [r7, #32]
    4d08:	0018      	movs	r0, r3
    4d0a:	4b47      	ldr	r3, [pc, #284]	; (4e28 <xQueueGenericSend+0x1b0>)
    4d0c:	4798      	blx	r3
    4d0e:	0003      	movs	r3, r0
    4d10:	61fb      	str	r3, [r7, #28]

#if (configUSE_QUEUE_SETS == 1)
				{
					if (pxQueue->pxQueueSetContainer != NULL) {
    4d12:	6a3b      	ldr	r3, [r7, #32]
    4d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4d16:	2b00      	cmp	r3, #0
    4d18:	d00a      	beq.n	4d30 <xQueueGenericSend+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    4d1a:	683a      	ldr	r2, [r7, #0]
    4d1c:	6a3b      	ldr	r3, [r7, #32]
    4d1e:	0011      	movs	r1, r2
    4d20:	0018      	movs	r0, r3
    4d22:	4b42      	ldr	r3, [pc, #264]	; (4e2c <xQueueGenericSend+0x1b4>)
    4d24:	4798      	blx	r3
    4d26:	1e03      	subs	r3, r0, #0
    4d28:	d015      	beq.n	4d56 <xQueueGenericSend+0xde>
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    4d2a:	4b41      	ldr	r3, [pc, #260]	; (4e30 <xQueueGenericSend+0x1b8>)
    4d2c:	4798      	blx	r3
    4d2e:	e012      	b.n	4d56 <xQueueGenericSend+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					} else {
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    4d30:	6a3b      	ldr	r3, [r7, #32]
    4d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4d34:	2b00      	cmp	r3, #0
    4d36:	d009      	beq.n	4d4c <xQueueGenericSend+0xd4>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4d38:	6a3b      	ldr	r3, [r7, #32]
    4d3a:	3324      	adds	r3, #36	; 0x24
    4d3c:	0018      	movs	r0, r3
    4d3e:	4b3d      	ldr	r3, [pc, #244]	; (4e34 <xQueueGenericSend+0x1bc>)
    4d40:	4798      	blx	r3
    4d42:	1e03      	subs	r3, r0, #0
    4d44:	d007      	beq.n	4d56 <xQueueGenericSend+0xde>
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    4d46:	4b3a      	ldr	r3, [pc, #232]	; (4e30 <xQueueGenericSend+0x1b8>)
    4d48:	4798      	blx	r3
    4d4a:	e004      	b.n	4d56 <xQueueGenericSend+0xde>
							} else {
								mtCOVERAGE_TEST_MARKER();
							}
						} else if (xYieldRequired != pdFALSE) {
    4d4c:	69fb      	ldr	r3, [r7, #28]
    4d4e:	2b00      	cmp	r3, #0
    4d50:	d001      	beq.n	4d56 <xQueueGenericSend+0xde>
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    4d52:	4b37      	ldr	r3, [pc, #220]	; (4e30 <xQueueGenericSend+0x1b8>)
    4d54:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    4d56:	4b38      	ldr	r3, [pc, #224]	; (4e38 <xQueueGenericSend+0x1c0>)
    4d58:	4798      	blx	r3
				return pdPASS;
    4d5a:	2301      	movs	r3, #1
    4d5c:	e05c      	b.n	4e18 <xQueueGenericSend+0x1a0>
			} else {
				if (xTicksToWait == (TickType_t)0) {
    4d5e:	687b      	ldr	r3, [r7, #4]
    4d60:	2b00      	cmp	r3, #0
    4d62:	d103      	bne.n	4d6c <xQueueGenericSend+0xf4>
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4d64:	4b34      	ldr	r3, [pc, #208]	; (4e38 <xQueueGenericSend+0x1c0>)
    4d66:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED(pxQueue);
					return errQUEUE_FULL;
    4d68:	2300      	movs	r3, #0
    4d6a:	e055      	b.n	4e18 <xQueueGenericSend+0x1a0>
				} else if (xEntryTimeSet == pdFALSE) {
    4d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d6e:	2b00      	cmp	r3, #0
    4d70:	d106      	bne.n	4d80 <xQueueGenericSend+0x108>
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState(&xTimeOut);
    4d72:	2314      	movs	r3, #20
    4d74:	18fb      	adds	r3, r7, r3
    4d76:	0018      	movs	r0, r3
    4d78:	4b30      	ldr	r3, [pc, #192]	; (4e3c <xQueueGenericSend+0x1c4>)
    4d7a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    4d7c:	2301      	movs	r3, #1
    4d7e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    4d80:	4b2d      	ldr	r3, [pc, #180]	; (4e38 <xQueueGenericSend+0x1c0>)
    4d82:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4d84:	4b2e      	ldr	r3, [pc, #184]	; (4e40 <xQueueGenericSend+0x1c8>)
    4d86:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4d88:	4b26      	ldr	r3, [pc, #152]	; (4e24 <xQueueGenericSend+0x1ac>)
    4d8a:	4798      	blx	r3
    4d8c:	6a3b      	ldr	r3, [r7, #32]
    4d8e:	2244      	movs	r2, #68	; 0x44
    4d90:	5c9b      	ldrb	r3, [r3, r2]
    4d92:	b25b      	sxtb	r3, r3
    4d94:	3301      	adds	r3, #1
    4d96:	d103      	bne.n	4da0 <xQueueGenericSend+0x128>
    4d98:	6a3b      	ldr	r3, [r7, #32]
    4d9a:	2244      	movs	r2, #68	; 0x44
    4d9c:	2100      	movs	r1, #0
    4d9e:	5499      	strb	r1, [r3, r2]
    4da0:	6a3b      	ldr	r3, [r7, #32]
    4da2:	2245      	movs	r2, #69	; 0x45
    4da4:	5c9b      	ldrb	r3, [r3, r2]
    4da6:	b25b      	sxtb	r3, r3
    4da8:	3301      	adds	r3, #1
    4daa:	d103      	bne.n	4db4 <xQueueGenericSend+0x13c>
    4dac:	6a3b      	ldr	r3, [r7, #32]
    4dae:	2245      	movs	r2, #69	; 0x45
    4db0:	2100      	movs	r1, #0
    4db2:	5499      	strb	r1, [r3, r2]
    4db4:	4b20      	ldr	r3, [pc, #128]	; (4e38 <xQueueGenericSend+0x1c0>)
    4db6:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    4db8:	1d3a      	adds	r2, r7, #4
    4dba:	2314      	movs	r3, #20
    4dbc:	18fb      	adds	r3, r7, r3
    4dbe:	0011      	movs	r1, r2
    4dc0:	0018      	movs	r0, r3
    4dc2:	4b20      	ldr	r3, [pc, #128]	; (4e44 <xQueueGenericSend+0x1cc>)
    4dc4:	4798      	blx	r3
    4dc6:	1e03      	subs	r3, r0, #0
    4dc8:	d11f      	bne.n	4e0a <xQueueGenericSend+0x192>
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    4dca:	6a3b      	ldr	r3, [r7, #32]
    4dcc:	0018      	movs	r0, r3
    4dce:	4b1e      	ldr	r3, [pc, #120]	; (4e48 <xQueueGenericSend+0x1d0>)
    4dd0:	4798      	blx	r3
    4dd2:	1e03      	subs	r3, r0, #0
    4dd4:	d012      	beq.n	4dfc <xQueueGenericSend+0x184>
				traceBLOCKING_ON_QUEUE_SEND(pxQueue);
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    4dd6:	6a3b      	ldr	r3, [r7, #32]
    4dd8:	3310      	adds	r3, #16
    4dda:	687a      	ldr	r2, [r7, #4]
    4ddc:	0011      	movs	r1, r2
    4dde:	0018      	movs	r0, r3
    4de0:	4b1a      	ldr	r3, [pc, #104]	; (4e4c <xQueueGenericSend+0x1d4>)
    4de2:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue(pxQueue);
    4de4:	6a3b      	ldr	r3, [r7, #32]
    4de6:	0018      	movs	r0, r3
    4de8:	4b19      	ldr	r3, [pc, #100]	; (4e50 <xQueueGenericSend+0x1d8>)
    4dea:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if (xTaskResumeAll() == pdFALSE) {
    4dec:	4b19      	ldr	r3, [pc, #100]	; (4e54 <xQueueGenericSend+0x1dc>)
    4dee:	4798      	blx	r3
    4df0:	1e03      	subs	r3, r0, #0
    4df2:	d000      	beq.n	4df6 <xQueueGenericSend+0x17e>
    4df4:	e77a      	b.n	4cec <xQueueGenericSend+0x74>
					portYIELD_WITHIN_API();
    4df6:	4b0e      	ldr	r3, [pc, #56]	; (4e30 <xQueueGenericSend+0x1b8>)
    4df8:	4798      	blx	r3
    4dfa:	e777      	b.n	4cec <xQueueGenericSend+0x74>
				}
			} else {
				/* Try again. */
				prvUnlockQueue(pxQueue);
    4dfc:	6a3b      	ldr	r3, [r7, #32]
    4dfe:	0018      	movs	r0, r3
    4e00:	4b13      	ldr	r3, [pc, #76]	; (4e50 <xQueueGenericSend+0x1d8>)
    4e02:	4798      	blx	r3
				(void)xTaskResumeAll();
    4e04:	4b13      	ldr	r3, [pc, #76]	; (4e54 <xQueueGenericSend+0x1dc>)
    4e06:	4798      	blx	r3
    4e08:	e770      	b.n	4cec <xQueueGenericSend+0x74>
			}
		} else {
			/* The timeout has expired. */
			prvUnlockQueue(pxQueue);
    4e0a:	6a3b      	ldr	r3, [r7, #32]
    4e0c:	0018      	movs	r0, r3
    4e0e:	4b10      	ldr	r3, [pc, #64]	; (4e50 <xQueueGenericSend+0x1d8>)
    4e10:	4798      	blx	r3
			(void)xTaskResumeAll();
    4e12:	4b10      	ldr	r3, [pc, #64]	; (4e54 <xQueueGenericSend+0x1dc>)
    4e14:	4798      	blx	r3

			traceQUEUE_SEND_FAILED(pxQueue);
			return errQUEUE_FULL;
    4e16:	2300      	movs	r3, #0
		}
	}
}
    4e18:	0018      	movs	r0, r3
    4e1a:	46bd      	mov	sp, r7
    4e1c:	b00a      	add	sp, #40	; 0x28
    4e1e:	bd80      	pop	{r7, pc}
    4e20:	00005f59 	.word	0x00005f59
    4e24:	000048d1 	.word	0x000048d1
    4e28:	00005119 	.word	0x00005119
    4e2c:	000053f9 	.word	0x000053f9
    4e30:	000048b1 	.word	0x000048b1
    4e34:	00005c21 	.word	0x00005c21
    4e38:	000048f5 	.word	0x000048f5
    4e3c:	00005ce1 	.word	0x00005ce1
    4e40:	00005809 	.word	0x00005809
    4e44:	00005d09 	.word	0x00005d09
    4e48:	00005349 	.word	0x00005349
    4e4c:	00005b89 	.word	0x00005b89
    4e50:	00005225 	.word	0x00005225
    4e54:	00005821 	.word	0x00005821

00004e58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR(QueueHandle_t xQueue, const void *const pvItemToQueue,
                                    BaseType_t *const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition)
{
    4e58:	b580      	push	{r7, lr}
    4e5a:	b088      	sub	sp, #32
    4e5c:	af00      	add	r7, sp, #0
    4e5e:	60f8      	str	r0, [r7, #12]
    4e60:	60b9      	str	r1, [r7, #8]
    4e62:	607a      	str	r2, [r7, #4]
    4e64:	603b      	str	r3, [r7, #0]
	BaseType_t     xReturn;
	UBaseType_t    uxSavedInterruptStatus;
	Queue_t *const pxQueue = (Queue_t *)xQueue;
    4e66:	68fb      	ldr	r3, [r7, #12]
    4e68:	61bb      	str	r3, [r7, #24]

	configASSERT(pxQueue);
    4e6a:	69bb      	ldr	r3, [r7, #24]
    4e6c:	2b00      	cmp	r3, #0
    4e6e:	d101      	bne.n	4e74 <xQueueGenericSendFromISR+0x1c>
    4e70:	b672      	cpsid	i
    4e72:	e7fe      	b.n	4e72 <xQueueGenericSendFromISR+0x1a>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4e74:	68bb      	ldr	r3, [r7, #8]
    4e76:	2b00      	cmp	r3, #0
    4e78:	d103      	bne.n	4e82 <xQueueGenericSendFromISR+0x2a>
    4e7a:	69bb      	ldr	r3, [r7, #24]
    4e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4e7e:	2b00      	cmp	r3, #0
    4e80:	d101      	bne.n	4e86 <xQueueGenericSendFromISR+0x2e>
    4e82:	2301      	movs	r3, #1
    4e84:	e000      	b.n	4e88 <xQueueGenericSendFromISR+0x30>
    4e86:	2300      	movs	r3, #0
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d101      	bne.n	4e90 <xQueueGenericSendFromISR+0x38>
    4e8c:	b672      	cpsid	i
    4e8e:	e7fe      	b.n	4e8e <xQueueGenericSendFromISR+0x36>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4e90:	683b      	ldr	r3, [r7, #0]
    4e92:	2b02      	cmp	r3, #2
    4e94:	d103      	bne.n	4e9e <xQueueGenericSendFromISR+0x46>
    4e96:	69bb      	ldr	r3, [r7, #24]
    4e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4e9a:	2b01      	cmp	r3, #1
    4e9c:	d101      	bne.n	4ea2 <xQueueGenericSendFromISR+0x4a>
    4e9e:	2301      	movs	r3, #1
    4ea0:	e000      	b.n	4ea4 <xQueueGenericSendFromISR+0x4c>
    4ea2:	2300      	movs	r3, #0
    4ea4:	2b00      	cmp	r3, #0
    4ea6:	d101      	bne.n	4eac <xQueueGenericSendFromISR+0x54>
    4ea8:	b672      	cpsid	i
    4eaa:	e7fe      	b.n	4eaa <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4eac:	4b2d      	ldr	r3, [pc, #180]	; (4f64 <xQueueGenericSendFromISR+0x10c>)
    4eae:	4798      	blx	r3
    4eb0:	0003      	movs	r3, r0
    4eb2:	617b      	str	r3, [r7, #20]
	{
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    4eb4:	69bb      	ldr	r3, [r7, #24]
    4eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4eb8:	69bb      	ldr	r3, [r7, #24]
    4eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4ebc:	429a      	cmp	r2, r3
    4ebe:	d302      	bcc.n	4ec6 <xQueueGenericSendFromISR+0x6e>
    4ec0:	683b      	ldr	r3, [r7, #0]
    4ec2:	2b02      	cmp	r3, #2
    4ec4:	d142      	bne.n	4f4c <xQueueGenericSendFromISR+0xf4>
			const int8_t cTxLock = pxQueue->cTxLock;
    4ec6:	2313      	movs	r3, #19
    4ec8:	18fb      	adds	r3, r7, r3
    4eca:	69ba      	ldr	r2, [r7, #24]
    4ecc:	2145      	movs	r1, #69	; 0x45
    4ece:	5c52      	ldrb	r2, [r2, r1]
    4ed0:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    4ed2:	683a      	ldr	r2, [r7, #0]
    4ed4:	68b9      	ldr	r1, [r7, #8]
    4ed6:	69bb      	ldr	r3, [r7, #24]
    4ed8:	0018      	movs	r0, r3
    4eda:	4b23      	ldr	r3, [pc, #140]	; (4f68 <xQueueGenericSendFromISR+0x110>)
    4edc:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if (cTxLock == queueUNLOCKED) {
    4ede:	2313      	movs	r3, #19
    4ee0:	18fb      	adds	r3, r7, r3
    4ee2:	781b      	ldrb	r3, [r3, #0]
    4ee4:	b25b      	sxtb	r3, r3
    4ee6:	3301      	adds	r3, #1
    4ee8:	d124      	bne.n	4f34 <xQueueGenericSendFromISR+0xdc>
#if (configUSE_QUEUE_SETS == 1)
				{
					if (pxQueue->pxQueueSetContainer != NULL) {
    4eea:	69bb      	ldr	r3, [r7, #24]
    4eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4eee:	2b00      	cmp	r3, #0
    4ef0:	d00e      	beq.n	4f10 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    4ef2:	683a      	ldr	r2, [r7, #0]
    4ef4:	69bb      	ldr	r3, [r7, #24]
    4ef6:	0011      	movs	r1, r2
    4ef8:	0018      	movs	r0, r3
    4efa:	4b1c      	ldr	r3, [pc, #112]	; (4f6c <xQueueGenericSendFromISR+0x114>)
    4efc:	4798      	blx	r3
    4efe:	1e03      	subs	r3, r0, #0
    4f00:	d021      	beq.n	4f46 <xQueueGenericSendFromISR+0xee>
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if (pxHigherPriorityTaskWoken != NULL) {
    4f02:	687b      	ldr	r3, [r7, #4]
    4f04:	2b00      	cmp	r3, #0
    4f06:	d01e      	beq.n	4f46 <xQueueGenericSendFromISR+0xee>
								*pxHigherPriorityTaskWoken = pdTRUE;
    4f08:	687b      	ldr	r3, [r7, #4]
    4f0a:	2201      	movs	r2, #1
    4f0c:	601a      	str	r2, [r3, #0]
    4f0e:	e01a      	b.n	4f46 <xQueueGenericSendFromISR+0xee>
							}
						} else {
							mtCOVERAGE_TEST_MARKER();
						}
					} else {
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    4f10:	69bb      	ldr	r3, [r7, #24]
    4f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f14:	2b00      	cmp	r3, #0
    4f16:	d016      	beq.n	4f46 <xQueueGenericSendFromISR+0xee>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4f18:	69bb      	ldr	r3, [r7, #24]
    4f1a:	3324      	adds	r3, #36	; 0x24
    4f1c:	0018      	movs	r0, r3
    4f1e:	4b14      	ldr	r3, [pc, #80]	; (4f70 <xQueueGenericSendFromISR+0x118>)
    4f20:	4798      	blx	r3
    4f22:	1e03      	subs	r3, r0, #0
    4f24:	d00f      	beq.n	4f46 <xQueueGenericSendFromISR+0xee>
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if (pxHigherPriorityTaskWoken != NULL) {
    4f26:	687b      	ldr	r3, [r7, #4]
    4f28:	2b00      	cmp	r3, #0
    4f2a:	d00c      	beq.n	4f46 <xQueueGenericSendFromISR+0xee>
									*pxHigherPriorityTaskWoken = pdTRUE;
    4f2c:	687b      	ldr	r3, [r7, #4]
    4f2e:	2201      	movs	r2, #1
    4f30:	601a      	str	r2, [r3, #0]
    4f32:	e008      	b.n	4f46 <xQueueGenericSendFromISR+0xee>
				}
#endif /* configUSE_QUEUE_SETS */
			} else {
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    4f34:	2313      	movs	r3, #19
    4f36:	18fb      	adds	r3, r7, r3
    4f38:	781b      	ldrb	r3, [r3, #0]
    4f3a:	3301      	adds	r3, #1
    4f3c:	b2db      	uxtb	r3, r3
    4f3e:	b259      	sxtb	r1, r3
    4f40:	69bb      	ldr	r3, [r7, #24]
    4f42:	2245      	movs	r2, #69	; 0x45
    4f44:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    4f46:	2301      	movs	r3, #1
    4f48:	61fb      	str	r3, [r7, #28]
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    4f4a:	e001      	b.n	4f50 <xQueueGenericSendFromISR+0xf8>
		} else {
			traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue);
			xReturn = errQUEUE_FULL;
    4f4c:	2300      	movs	r3, #0
    4f4e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
    4f50:	697b      	ldr	r3, [r7, #20]
    4f52:	0018      	movs	r0, r3
    4f54:	4b07      	ldr	r3, [pc, #28]	; (4f74 <xQueueGenericSendFromISR+0x11c>)
    4f56:	4798      	blx	r3

	return xReturn;
    4f58:	69fb      	ldr	r3, [r7, #28]
}
    4f5a:	0018      	movs	r0, r3
    4f5c:	46bd      	mov	sp, r7
    4f5e:	b008      	add	sp, #32
    4f60:	bd80      	pop	{r7, pc}
    4f62:	46c0      	nop			; (mov r8, r8)
    4f64:	00004925 	.word	0x00004925
    4f68:	00005119 	.word	0x00005119
    4f6c:	000053f9 	.word	0x000053f9
    4f70:	00005c21 	.word	0x00005c21
    4f74:	00004931 	.word	0x00004931

00004f78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive(QueueHandle_t xQueue, void *const pvBuffer, TickType_t xTicksToWait)
{
    4f78:	b580      	push	{r7, lr}
    4f7a:	b08a      	sub	sp, #40	; 0x28
    4f7c:	af00      	add	r7, sp, #0
    4f7e:	60f8      	str	r0, [r7, #12]
    4f80:	60b9      	str	r1, [r7, #8]
    4f82:	607a      	str	r2, [r7, #4]
	BaseType_t     xEntryTimeSet = pdFALSE;
    4f84:	2300      	movs	r3, #0
    4f86:	627b      	str	r3, [r7, #36]	; 0x24
	TimeOut_t      xTimeOut;
	Queue_t *const pxQueue = (Queue_t *)xQueue;
    4f88:	68fb      	ldr	r3, [r7, #12]
    4f8a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT((pxQueue));
    4f8c:	6a3b      	ldr	r3, [r7, #32]
    4f8e:	2b00      	cmp	r3, #0
    4f90:	d101      	bne.n	4f96 <xQueueReceive+0x1e>
    4f92:	b672      	cpsid	i
    4f94:	e7fe      	b.n	4f94 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    4f96:	68bb      	ldr	r3, [r7, #8]
    4f98:	2b00      	cmp	r3, #0
    4f9a:	d103      	bne.n	4fa4 <xQueueReceive+0x2c>
    4f9c:	6a3b      	ldr	r3, [r7, #32]
    4f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4fa0:	2b00      	cmp	r3, #0
    4fa2:	d101      	bne.n	4fa8 <xQueueReceive+0x30>
    4fa4:	2301      	movs	r3, #1
    4fa6:	e000      	b.n	4faa <xQueueReceive+0x32>
    4fa8:	2300      	movs	r3, #0
    4faa:	2b00      	cmp	r3, #0
    4fac:	d101      	bne.n	4fb2 <xQueueReceive+0x3a>
    4fae:	b672      	cpsid	i
    4fb0:	e7fe      	b.n	4fb0 <xQueueReceive+0x38>

/* Cannot block if the scheduler is suspended. */
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
	{
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4fb2:	4b4c      	ldr	r3, [pc, #304]	; (50e4 <xQueueReceive+0x16c>)
    4fb4:	4798      	blx	r3
    4fb6:	1e03      	subs	r3, r0, #0
    4fb8:	d102      	bne.n	4fc0 <xQueueReceive+0x48>
    4fba:	687b      	ldr	r3, [r7, #4]
    4fbc:	2b00      	cmp	r3, #0
    4fbe:	d101      	bne.n	4fc4 <xQueueReceive+0x4c>
    4fc0:	2301      	movs	r3, #1
    4fc2:	e000      	b.n	4fc6 <xQueueReceive+0x4e>
    4fc4:	2300      	movs	r3, #0
    4fc6:	2b00      	cmp	r3, #0
    4fc8:	d101      	bne.n	4fce <xQueueReceive+0x56>
    4fca:	b672      	cpsid	i
    4fcc:	e7fe      	b.n	4fcc <xQueueReceive+0x54>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for (;;) {
		taskENTER_CRITICAL();
    4fce:	4b46      	ldr	r3, [pc, #280]	; (50e8 <xQueueReceive+0x170>)
    4fd0:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4fd2:	6a3b      	ldr	r3, [r7, #32]
    4fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4fd6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if (uxMessagesWaiting > (UBaseType_t)0) {
    4fd8:	69fb      	ldr	r3, [r7, #28]
    4fda:	2b00      	cmp	r3, #0
    4fdc:	d01a      	beq.n	5014 <xQueueReceive+0x9c>
				/* Data available, remove one item. */
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    4fde:	68ba      	ldr	r2, [r7, #8]
    4fe0:	6a3b      	ldr	r3, [r7, #32]
    4fe2:	0011      	movs	r1, r2
    4fe4:	0018      	movs	r0, r3
    4fe6:	4b41      	ldr	r3, [pc, #260]	; (50ec <xQueueReceive+0x174>)
    4fe8:	4798      	blx	r3
				traceQUEUE_RECEIVE(pxQueue);
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    4fea:	69fb      	ldr	r3, [r7, #28]
    4fec:	1e5a      	subs	r2, r3, #1
    4fee:	6a3b      	ldr	r3, [r7, #32]
    4ff0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4ff2:	6a3b      	ldr	r3, [r7, #32]
    4ff4:	691b      	ldr	r3, [r3, #16]
    4ff6:	2b00      	cmp	r3, #0
    4ff8:	d008      	beq.n	500c <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4ffa:	6a3b      	ldr	r3, [r7, #32]
    4ffc:	3310      	adds	r3, #16
    4ffe:	0018      	movs	r0, r3
    5000:	4b3b      	ldr	r3, [pc, #236]	; (50f0 <xQueueReceive+0x178>)
    5002:	4798      	blx	r3
    5004:	1e03      	subs	r3, r0, #0
    5006:	d001      	beq.n	500c <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    5008:	4b3a      	ldr	r3, [pc, #232]	; (50f4 <xQueueReceive+0x17c>)
    500a:	4798      	blx	r3
					}
				} else {
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    500c:	4b3a      	ldr	r3, [pc, #232]	; (50f8 <xQueueReceive+0x180>)
    500e:	4798      	blx	r3
				return pdPASS;
    5010:	2301      	movs	r3, #1
    5012:	e062      	b.n	50da <xQueueReceive+0x162>
			} else {
				if (xTicksToWait == (TickType_t)0) {
    5014:	687b      	ldr	r3, [r7, #4]
    5016:	2b00      	cmp	r3, #0
    5018:	d103      	bne.n	5022 <xQueueReceive+0xaa>
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    501a:	4b37      	ldr	r3, [pc, #220]	; (50f8 <xQueueReceive+0x180>)
    501c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED(pxQueue);
					return errQUEUE_EMPTY;
    501e:	2300      	movs	r3, #0
    5020:	e05b      	b.n	50da <xQueueReceive+0x162>
				} else if (xEntryTimeSet == pdFALSE) {
    5022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5024:	2b00      	cmp	r3, #0
    5026:	d106      	bne.n	5036 <xQueueReceive+0xbe>
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState(&xTimeOut);
    5028:	2314      	movs	r3, #20
    502a:	18fb      	adds	r3, r7, r3
    502c:	0018      	movs	r0, r3
    502e:	4b33      	ldr	r3, [pc, #204]	; (50fc <xQueueReceive+0x184>)
    5030:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    5032:	2301      	movs	r3, #1
    5034:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    5036:	4b30      	ldr	r3, [pc, #192]	; (50f8 <xQueueReceive+0x180>)
    5038:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    503a:	4b31      	ldr	r3, [pc, #196]	; (5100 <xQueueReceive+0x188>)
    503c:	4798      	blx	r3
		prvLockQueue(pxQueue);
    503e:	4b2a      	ldr	r3, [pc, #168]	; (50e8 <xQueueReceive+0x170>)
    5040:	4798      	blx	r3
    5042:	6a3b      	ldr	r3, [r7, #32]
    5044:	2244      	movs	r2, #68	; 0x44
    5046:	5c9b      	ldrb	r3, [r3, r2]
    5048:	b25b      	sxtb	r3, r3
    504a:	3301      	adds	r3, #1
    504c:	d103      	bne.n	5056 <xQueueReceive+0xde>
    504e:	6a3b      	ldr	r3, [r7, #32]
    5050:	2244      	movs	r2, #68	; 0x44
    5052:	2100      	movs	r1, #0
    5054:	5499      	strb	r1, [r3, r2]
    5056:	6a3b      	ldr	r3, [r7, #32]
    5058:	2245      	movs	r2, #69	; 0x45
    505a:	5c9b      	ldrb	r3, [r3, r2]
    505c:	b25b      	sxtb	r3, r3
    505e:	3301      	adds	r3, #1
    5060:	d103      	bne.n	506a <xQueueReceive+0xf2>
    5062:	6a3b      	ldr	r3, [r7, #32]
    5064:	2245      	movs	r2, #69	; 0x45
    5066:	2100      	movs	r1, #0
    5068:	5499      	strb	r1, [r3, r2]
    506a:	4b23      	ldr	r3, [pc, #140]	; (50f8 <xQueueReceive+0x180>)
    506c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    506e:	1d3a      	adds	r2, r7, #4
    5070:	2314      	movs	r3, #20
    5072:	18fb      	adds	r3, r7, r3
    5074:	0011      	movs	r1, r2
    5076:	0018      	movs	r0, r3
    5078:	4b22      	ldr	r3, [pc, #136]	; (5104 <xQueueReceive+0x18c>)
    507a:	4798      	blx	r3
    507c:	1e03      	subs	r3, r0, #0
    507e:	d11e      	bne.n	50be <xQueueReceive+0x146>
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    5080:	6a3b      	ldr	r3, [r7, #32]
    5082:	0018      	movs	r0, r3
    5084:	4b20      	ldr	r3, [pc, #128]	; (5108 <xQueueReceive+0x190>)
    5086:	4798      	blx	r3
    5088:	1e03      	subs	r3, r0, #0
    508a:	d011      	beq.n	50b0 <xQueueReceive+0x138>
				traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue);
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    508c:	6a3b      	ldr	r3, [r7, #32]
    508e:	3324      	adds	r3, #36	; 0x24
    5090:	687a      	ldr	r2, [r7, #4]
    5092:	0011      	movs	r1, r2
    5094:	0018      	movs	r0, r3
    5096:	4b1d      	ldr	r3, [pc, #116]	; (510c <xQueueReceive+0x194>)
    5098:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    509a:	6a3b      	ldr	r3, [r7, #32]
    509c:	0018      	movs	r0, r3
    509e:	4b1c      	ldr	r3, [pc, #112]	; (5110 <xQueueReceive+0x198>)
    50a0:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    50a2:	4b1c      	ldr	r3, [pc, #112]	; (5114 <xQueueReceive+0x19c>)
    50a4:	4798      	blx	r3
    50a6:	1e03      	subs	r3, r0, #0
    50a8:	d191      	bne.n	4fce <xQueueReceive+0x56>
					portYIELD_WITHIN_API();
    50aa:	4b12      	ldr	r3, [pc, #72]	; (50f4 <xQueueReceive+0x17c>)
    50ac:	4798      	blx	r3
    50ae:	e78e      	b.n	4fce <xQueueReceive+0x56>
					mtCOVERAGE_TEST_MARKER();
				}
			} else {
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue(pxQueue);
    50b0:	6a3b      	ldr	r3, [r7, #32]
    50b2:	0018      	movs	r0, r3
    50b4:	4b16      	ldr	r3, [pc, #88]	; (5110 <xQueueReceive+0x198>)
    50b6:	4798      	blx	r3
				(void)xTaskResumeAll();
    50b8:	4b16      	ldr	r3, [pc, #88]	; (5114 <xQueueReceive+0x19c>)
    50ba:	4798      	blx	r3
    50bc:	e787      	b.n	4fce <xQueueReceive+0x56>
			}
		} else {
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue(pxQueue);
    50be:	6a3b      	ldr	r3, [r7, #32]
    50c0:	0018      	movs	r0, r3
    50c2:	4b13      	ldr	r3, [pc, #76]	; (5110 <xQueueReceive+0x198>)
    50c4:	4798      	blx	r3
			(void)xTaskResumeAll();
    50c6:	4b13      	ldr	r3, [pc, #76]	; (5114 <xQueueReceive+0x19c>)
    50c8:	4798      	blx	r3

			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    50ca:	6a3b      	ldr	r3, [r7, #32]
    50cc:	0018      	movs	r0, r3
    50ce:	4b0e      	ldr	r3, [pc, #56]	; (5108 <xQueueReceive+0x190>)
    50d0:	4798      	blx	r3
    50d2:	1e03      	subs	r3, r0, #0
    50d4:	d100      	bne.n	50d8 <xQueueReceive+0x160>
    50d6:	e77a      	b.n	4fce <xQueueReceive+0x56>
				traceQUEUE_RECEIVE_FAILED(pxQueue);
				return errQUEUE_EMPTY;
    50d8:	2300      	movs	r3, #0
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    50da:	0018      	movs	r0, r3
    50dc:	46bd      	mov	sp, r7
    50de:	b00a      	add	sp, #40	; 0x28
    50e0:	bd80      	pop	{r7, pc}
    50e2:	46c0      	nop			; (mov r8, r8)
    50e4:	00005f59 	.word	0x00005f59
    50e8:	000048d1 	.word	0x000048d1
    50ec:	000051d5 	.word	0x000051d5
    50f0:	00005c21 	.word	0x00005c21
    50f4:	000048b1 	.word	0x000048b1
    50f8:	000048f5 	.word	0x000048f5
    50fc:	00005ce1 	.word	0x00005ce1
    5100:	00005809 	.word	0x00005809
    5104:	00005d09 	.word	0x00005d09
    5108:	00005315 	.word	0x00005315
    510c:	00005b89 	.word	0x00005b89
    5110:	00005225 	.word	0x00005225
    5114:	00005821 	.word	0x00005821

00005118 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue(Queue_t *const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition)
{
    5118:	b580      	push	{r7, lr}
    511a:	b086      	sub	sp, #24
    511c:	af00      	add	r7, sp, #0
    511e:	60f8      	str	r0, [r7, #12]
    5120:	60b9      	str	r1, [r7, #8]
    5122:	607a      	str	r2, [r7, #4]
	BaseType_t  xReturn = pdFALSE;
    5124:	2300      	movs	r3, #0
    5126:	613b      	str	r3, [r7, #16]
	UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    5128:	68fb      	ldr	r3, [r7, #12]
    512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    512c:	617b      	str	r3, [r7, #20]

	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    512e:	68fb      	ldr	r3, [r7, #12]
    5130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5132:	2b00      	cmp	r3, #0
    5134:	d043      	beq.n	51be <prvCopyDataToQueue+0xa6>
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}
#endif /* configUSE_MUTEXES */
	} else if (xPosition == queueSEND_TO_BACK) {
    5136:	687b      	ldr	r3, [r7, #4]
    5138:	2b00      	cmp	r3, #0
    513a:	d119      	bne.n	5170 <prvCopyDataToQueue+0x58>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    513c:	68fb      	ldr	r3, [r7, #12]
    513e:	6898      	ldr	r0, [r3, #8]
		             pvItemToQueue,
		             (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 MISRA exception as the casts are only redundant
    5140:	68fb      	ldr	r3, [r7, #12]
    5142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		(void)memcpy((void *)pxQueue->pcWriteTo,
    5144:	68bb      	ldr	r3, [r7, #8]
    5146:	0019      	movs	r1, r3
    5148:	4b21      	ldr	r3, [pc, #132]	; (51d0 <prvCopyDataToQueue+0xb8>)
    514a:	4798      	blx	r3
		                                              for some ports, plus previous logic ensures a null pointer can
		                                              only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    514c:	68fb      	ldr	r3, [r7, #12]
    514e:	689a      	ldr	r2, [r3, #8]
    5150:	68fb      	ldr	r3, [r7, #12]
    5152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5154:	18d2      	adds	r2, r2, r3
    5156:	68fb      	ldr	r3, [r7, #12]
    5158:	609a      	str	r2, [r3, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    515a:	68fb      	ldr	r3, [r7, #12]
    515c:	689a      	ldr	r2, [r3, #8]
    515e:	68fb      	ldr	r3, [r7, #12]
    5160:	685b      	ldr	r3, [r3, #4]
    5162:	429a      	cmp	r2, r3
    5164:	d32b      	bcc.n	51be <prvCopyDataToQueue+0xa6>
		                                              the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    5166:	68fb      	ldr	r3, [r7, #12]
    5168:	681a      	ldr	r2, [r3, #0]
    516a:	68fb      	ldr	r3, [r7, #12]
    516c:	609a      	str	r2, [r3, #8]
    516e:	e026      	b.n	51be <prvCopyDataToQueue+0xa6>
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	} else {
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    5170:	68fb      	ldr	r3, [r7, #12]
    5172:	68d8      	ldr	r0, [r3, #12]
		             pvItemToQueue,
		             (size_t)pxQueue
		                 ->uxItemSize); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5174:	68fb      	ldr	r3, [r7, #12]
    5176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    5178:	68bb      	ldr	r3, [r7, #8]
    517a:	0019      	movs	r1, r3
    517c:	4b14      	ldr	r3, [pc, #80]	; (51d0 <prvCopyDataToQueue+0xb8>)
    517e:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    5180:	68fb      	ldr	r3, [r7, #12]
    5182:	68da      	ldr	r2, [r3, #12]
    5184:	68fb      	ldr	r3, [r7, #12]
    5186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5188:	425b      	negs	r3, r3
    518a:	18d2      	adds	r2, r2, r3
    518c:	68fb      	ldr	r3, [r7, #12]
    518e:	60da      	str	r2, [r3, #12]
		if (pxQueue->u.pcReadFrom
    5190:	68fb      	ldr	r3, [r7, #12]
    5192:	68da      	ldr	r2, [r3, #12]
		    < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest
    5194:	68fb      	ldr	r3, [r7, #12]
    5196:	681b      	ldr	r3, [r3, #0]
		if (pxQueue->u.pcReadFrom
    5198:	429a      	cmp	r2, r3
    519a:	d207      	bcs.n	51ac <prvCopyDataToQueue+0x94>
		                          solution. */
		{
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    519c:	68fb      	ldr	r3, [r7, #12]
    519e:	685a      	ldr	r2, [r3, #4]
    51a0:	68fb      	ldr	r3, [r7, #12]
    51a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    51a4:	425b      	negs	r3, r3
    51a6:	18d2      	adds	r2, r2, r3
    51a8:	68fb      	ldr	r3, [r7, #12]
    51aa:	60da      	str	r2, [r3, #12]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}

		if (xPosition == queueOVERWRITE) {
    51ac:	687b      	ldr	r3, [r7, #4]
    51ae:	2b02      	cmp	r3, #2
    51b0:	d105      	bne.n	51be <prvCopyDataToQueue+0xa6>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    51b2:	697b      	ldr	r3, [r7, #20]
    51b4:	2b00      	cmp	r3, #0
    51b6:	d002      	beq.n	51be <prvCopyDataToQueue+0xa6>
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    51b8:	697b      	ldr	r3, [r7, #20]
    51ba:	3b01      	subs	r3, #1
    51bc:	617b      	str	r3, [r7, #20]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    51be:	697b      	ldr	r3, [r7, #20]
    51c0:	1c5a      	adds	r2, r3, #1
    51c2:	68fb      	ldr	r3, [r7, #12]
    51c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    51c6:	693b      	ldr	r3, [r7, #16]
}
    51c8:	0018      	movs	r0, r3
    51ca:	46bd      	mov	sp, r7
    51cc:	b006      	add	sp, #24
    51ce:	bd80      	pop	{r7, pc}
    51d0:	000083b9 	.word	0x000083b9

000051d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue(Queue_t *const pxQueue, void *const pvBuffer)
{
    51d4:	b580      	push	{r7, lr}
    51d6:	b082      	sub	sp, #8
    51d8:	af00      	add	r7, sp, #0
    51da:	6078      	str	r0, [r7, #4]
    51dc:	6039      	str	r1, [r7, #0]
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    51de:	687b      	ldr	r3, [r7, #4]
    51e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    51e2:	2b00      	cmp	r3, #0
    51e4:	d018      	beq.n	5218 <prvCopyDataFromQueue+0x44>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    51e6:	687b      	ldr	r3, [r7, #4]
    51e8:	68da      	ldr	r2, [r3, #12]
    51ea:	687b      	ldr	r3, [r7, #4]
    51ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    51ee:	18d2      	adds	r2, r2, r3
    51f0:	687b      	ldr	r3, [r7, #4]
    51f2:	60da      	str	r2, [r3, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    51f4:	687b      	ldr	r3, [r7, #4]
    51f6:	68da      	ldr	r2, [r3, #12]
    51f8:	687b      	ldr	r3, [r7, #4]
    51fa:	685b      	ldr	r3, [r3, #4]
    51fc:	429a      	cmp	r2, r3
    51fe:	d303      	bcc.n	5208 <prvCopyDataFromQueue+0x34>
		                                                 operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    5200:	687b      	ldr	r3, [r7, #4]
    5202:	681a      	ldr	r2, [r3, #0]
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	60da      	str	r2, [r3, #12]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
		(void)memcpy((void *)pvBuffer,
		             (void *)pxQueue->u.pcReadFrom,
    5208:	687b      	ldr	r3, [r7, #4]
    520a:	68d9      	ldr	r1, [r3, #12]
		             (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 MISRA exception as the casts are only redundant
    520c:	687b      	ldr	r3, [r7, #4]
    520e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		(void)memcpy((void *)pvBuffer,
    5210:	683b      	ldr	r3, [r7, #0]
    5212:	0018      	movs	r0, r3
    5214:	4b02      	ldr	r3, [pc, #8]	; (5220 <prvCopyDataFromQueue+0x4c>)
    5216:	4798      	blx	r3
		                                              for some ports.  Also previous logic ensures a null pointer can
		                                              only be passed to memcpy() when the count is 0. */
	}
}
    5218:	46c0      	nop			; (mov r8, r8)
    521a:	46bd      	mov	sp, r7
    521c:	b002      	add	sp, #8
    521e:	bd80      	pop	{r7, pc}
    5220:	000083b9 	.word	0x000083b9

00005224 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue(Queue_t *const pxQueue)
{
    5224:	b580      	push	{r7, lr}
    5226:	b084      	sub	sp, #16
    5228:	af00      	add	r7, sp, #0
    522a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    522c:	4b34      	ldr	r3, [pc, #208]	; (5300 <prvUnlockQueue+0xdc>)
    522e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    5230:	230f      	movs	r3, #15
    5232:	18fb      	adds	r3, r7, r3
    5234:	687a      	ldr	r2, [r7, #4]
    5236:	2145      	movs	r1, #69	; 0x45
    5238:	5c52      	ldrb	r2, [r2, r1]
    523a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    523c:	e022      	b.n	5284 <prvUnlockQueue+0x60>
/* Data was posted while the queue was locked.  Are any tasks
blocked waiting for data to become available? */
#if (configUSE_QUEUE_SETS == 1)
			{
				if (pxQueue->pxQueueSetContainer != NULL) {
    523e:	687b      	ldr	r3, [r7, #4]
    5240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5242:	2b00      	cmp	r3, #0
    5244:	d009      	beq.n	525a <prvUnlockQueue+0x36>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    5246:	687b      	ldr	r3, [r7, #4]
    5248:	2100      	movs	r1, #0
    524a:	0018      	movs	r0, r3
    524c:	4b2d      	ldr	r3, [pc, #180]	; (5304 <prvUnlockQueue+0xe0>)
    524e:	4798      	blx	r3
    5250:	1e03      	subs	r3, r0, #0
    5252:	d00f      	beq.n	5274 <prvUnlockQueue+0x50>
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    5254:	4b2c      	ldr	r3, [pc, #176]	; (5308 <prvUnlockQueue+0xe4>)
    5256:	4798      	blx	r3
    5258:	e00c      	b.n	5274 <prvUnlockQueue+0x50>
					}
				} else {
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    525a:	687b      	ldr	r3, [r7, #4]
    525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    525e:	2b00      	cmp	r3, #0
    5260:	d017      	beq.n	5292 <prvUnlockQueue+0x6e>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    5262:	687b      	ldr	r3, [r7, #4]
    5264:	3324      	adds	r3, #36	; 0x24
    5266:	0018      	movs	r0, r3
    5268:	4b28      	ldr	r3, [pc, #160]	; (530c <prvUnlockQueue+0xe8>)
    526a:	4798      	blx	r3
    526c:	1e03      	subs	r3, r0, #0
    526e:	d001      	beq.n	5274 <prvUnlockQueue+0x50>
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    5270:	4b25      	ldr	r3, [pc, #148]	; (5308 <prvUnlockQueue+0xe4>)
    5272:	4798      	blx	r3
					break;
				}
			}
#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    5274:	230f      	movs	r3, #15
    5276:	18fb      	adds	r3, r7, r3
    5278:	781b      	ldrb	r3, [r3, #0]
    527a:	3b01      	subs	r3, #1
    527c:	b2da      	uxtb	r2, r3
    527e:	230f      	movs	r3, #15
    5280:	18fb      	adds	r3, r7, r3
    5282:	701a      	strb	r2, [r3, #0]
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    5284:	230f      	movs	r3, #15
    5286:	18fb      	adds	r3, r7, r3
    5288:	781b      	ldrb	r3, [r3, #0]
    528a:	b25b      	sxtb	r3, r3
    528c:	2b00      	cmp	r3, #0
    528e:	dcd6      	bgt.n	523e <prvUnlockQueue+0x1a>
    5290:	e000      	b.n	5294 <prvUnlockQueue+0x70>
						break;
    5292:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    5294:	687b      	ldr	r3, [r7, #4]
    5296:	2245      	movs	r2, #69	; 0x45
    5298:	21ff      	movs	r1, #255	; 0xff
    529a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    529c:	4b1c      	ldr	r3, [pc, #112]	; (5310 <prvUnlockQueue+0xec>)
    529e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    52a0:	4b17      	ldr	r3, [pc, #92]	; (5300 <prvUnlockQueue+0xdc>)
    52a2:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    52a4:	230e      	movs	r3, #14
    52a6:	18fb      	adds	r3, r7, r3
    52a8:	687a      	ldr	r2, [r7, #4]
    52aa:	2144      	movs	r1, #68	; 0x44
    52ac:	5c52      	ldrb	r2, [r2, r1]
    52ae:	701a      	strb	r2, [r3, #0]

		while (cRxLock > queueLOCKED_UNMODIFIED) {
    52b0:	e014      	b.n	52dc <prvUnlockQueue+0xb8>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    52b2:	687b      	ldr	r3, [r7, #4]
    52b4:	691b      	ldr	r3, [r3, #16]
    52b6:	2b00      	cmp	r3, #0
    52b8:	d017      	beq.n	52ea <prvUnlockQueue+0xc6>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    52ba:	687b      	ldr	r3, [r7, #4]
    52bc:	3310      	adds	r3, #16
    52be:	0018      	movs	r0, r3
    52c0:	4b12      	ldr	r3, [pc, #72]	; (530c <prvUnlockQueue+0xe8>)
    52c2:	4798      	blx	r3
    52c4:	1e03      	subs	r3, r0, #0
    52c6:	d001      	beq.n	52cc <prvUnlockQueue+0xa8>
					vTaskMissedYield();
    52c8:	4b0f      	ldr	r3, [pc, #60]	; (5308 <prvUnlockQueue+0xe4>)
    52ca:	4798      	blx	r3
				} else {
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    52cc:	230e      	movs	r3, #14
    52ce:	18fb      	adds	r3, r7, r3
    52d0:	781b      	ldrb	r3, [r3, #0]
    52d2:	3b01      	subs	r3, #1
    52d4:	b2da      	uxtb	r2, r3
    52d6:	230e      	movs	r3, #14
    52d8:	18fb      	adds	r3, r7, r3
    52da:	701a      	strb	r2, [r3, #0]
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    52dc:	230e      	movs	r3, #14
    52de:	18fb      	adds	r3, r7, r3
    52e0:	781b      	ldrb	r3, [r3, #0]
    52e2:	b25b      	sxtb	r3, r3
    52e4:	2b00      	cmp	r3, #0
    52e6:	dce4      	bgt.n	52b2 <prvUnlockQueue+0x8e>
    52e8:	e000      	b.n	52ec <prvUnlockQueue+0xc8>
			} else {
				break;
    52ea:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    52ec:	687b      	ldr	r3, [r7, #4]
    52ee:	2244      	movs	r2, #68	; 0x44
    52f0:	21ff      	movs	r1, #255	; 0xff
    52f2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    52f4:	4b06      	ldr	r3, [pc, #24]	; (5310 <prvUnlockQueue+0xec>)
    52f6:	4798      	blx	r3
}
    52f8:	46c0      	nop			; (mov r8, r8)
    52fa:	46bd      	mov	sp, r7
    52fc:	b004      	add	sp, #16
    52fe:	bd80      	pop	{r7, pc}
    5300:	000048d1 	.word	0x000048d1
    5304:	000053f9 	.word	0x000053f9
    5308:	00005db5 	.word	0x00005db5
    530c:	00005c21 	.word	0x00005c21
    5310:	000048f5 	.word	0x000048f5

00005314 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    5314:	b580      	push	{r7, lr}
    5316:	b084      	sub	sp, #16
    5318:	af00      	add	r7, sp, #0
    531a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    531c:	4b08      	ldr	r3, [pc, #32]	; (5340 <prvIsQueueEmpty+0x2c>)
    531e:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    5320:	687b      	ldr	r3, [r7, #4]
    5322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5324:	2b00      	cmp	r3, #0
    5326:	d102      	bne.n	532e <prvIsQueueEmpty+0x1a>
			xReturn = pdTRUE;
    5328:	2301      	movs	r3, #1
    532a:	60fb      	str	r3, [r7, #12]
    532c:	e001      	b.n	5332 <prvIsQueueEmpty+0x1e>
		} else {
			xReturn = pdFALSE;
    532e:	2300      	movs	r3, #0
    5330:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    5332:	4b04      	ldr	r3, [pc, #16]	; (5344 <prvIsQueueEmpty+0x30>)
    5334:	4798      	blx	r3

	return xReturn;
    5336:	68fb      	ldr	r3, [r7, #12]
}
    5338:	0018      	movs	r0, r3
    533a:	46bd      	mov	sp, r7
    533c:	b004      	add	sp, #16
    533e:	bd80      	pop	{r7, pc}
    5340:	000048d1 	.word	0x000048d1
    5344:	000048f5 	.word	0x000048f5

00005348 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t *pxQueue)
{
    5348:	b580      	push	{r7, lr}
    534a:	b084      	sub	sp, #16
    534c:	af00      	add	r7, sp, #0
    534e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    5350:	4b09      	ldr	r3, [pc, #36]	; (5378 <prvIsQueueFull+0x30>)
    5352:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    5354:	687b      	ldr	r3, [r7, #4]
    5356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5358:	687b      	ldr	r3, [r7, #4]
    535a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    535c:	429a      	cmp	r2, r3
    535e:	d102      	bne.n	5366 <prvIsQueueFull+0x1e>
			xReturn = pdTRUE;
    5360:	2301      	movs	r3, #1
    5362:	60fb      	str	r3, [r7, #12]
    5364:	e001      	b.n	536a <prvIsQueueFull+0x22>
		} else {
			xReturn = pdFALSE;
    5366:	2300      	movs	r3, #0
    5368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    536a:	4b04      	ldr	r3, [pc, #16]	; (537c <prvIsQueueFull+0x34>)
    536c:	4798      	blx	r3

	return xReturn;
    536e:	68fb      	ldr	r3, [r7, #12]
}
    5370:	0018      	movs	r0, r3
    5372:	46bd      	mov	sp, r7
    5374:	b004      	add	sp, #16
    5376:	bd80      	pop	{r7, pc}
    5378:	000048d1 	.word	0x000048d1
    537c:	000048f5 	.word	0x000048f5

00005380 <vQueueWaitForMessageRestricted>:
	/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vQueueWaitForMessageRestricted(QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely)
{
    5380:	b580      	push	{r7, lr}
    5382:	b086      	sub	sp, #24
    5384:	af00      	add	r7, sp, #0
    5386:	60f8      	str	r0, [r7, #12]
    5388:	60b9      	str	r1, [r7, #8]
    538a:	607a      	str	r2, [r7, #4]
	Queue_t *const pxQueue = (Queue_t *)xQueue;
    538c:	68fb      	ldr	r3, [r7, #12]
    538e:	617b      	str	r3, [r7, #20]
	will not actually cause the task to block, just place it on a blocked
	list.  It will not block until the scheduler is unlocked - at which
	time a yield will be performed.  If an item is added to the queue while
	the queue is locked, and the calling task blocks on the queue, then the
	calling task will be immediately unblocked when the queue is unlocked. */
	prvLockQueue(pxQueue);
    5390:	4b15      	ldr	r3, [pc, #84]	; (53e8 <vQueueWaitForMessageRestricted+0x68>)
    5392:	4798      	blx	r3
    5394:	697b      	ldr	r3, [r7, #20]
    5396:	2244      	movs	r2, #68	; 0x44
    5398:	5c9b      	ldrb	r3, [r3, r2]
    539a:	b25b      	sxtb	r3, r3
    539c:	3301      	adds	r3, #1
    539e:	d103      	bne.n	53a8 <vQueueWaitForMessageRestricted+0x28>
    53a0:	697b      	ldr	r3, [r7, #20]
    53a2:	2244      	movs	r2, #68	; 0x44
    53a4:	2100      	movs	r1, #0
    53a6:	5499      	strb	r1, [r3, r2]
    53a8:	697b      	ldr	r3, [r7, #20]
    53aa:	2245      	movs	r2, #69	; 0x45
    53ac:	5c9b      	ldrb	r3, [r3, r2]
    53ae:	b25b      	sxtb	r3, r3
    53b0:	3301      	adds	r3, #1
    53b2:	d103      	bne.n	53bc <vQueueWaitForMessageRestricted+0x3c>
    53b4:	697b      	ldr	r3, [r7, #20]
    53b6:	2245      	movs	r2, #69	; 0x45
    53b8:	2100      	movs	r1, #0
    53ba:	5499      	strb	r1, [r3, r2]
    53bc:	4b0b      	ldr	r3, [pc, #44]	; (53ec <vQueueWaitForMessageRestricted+0x6c>)
    53be:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    53c0:	697b      	ldr	r3, [r7, #20]
    53c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    53c4:	2b00      	cmp	r3, #0
    53c6:	d106      	bne.n	53d6 <vQueueWaitForMessageRestricted+0x56>
		/* There is nothing in the queue, block for the specified period. */
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    53c8:	697b      	ldr	r3, [r7, #20]
    53ca:	3324      	adds	r3, #36	; 0x24
    53cc:	687a      	ldr	r2, [r7, #4]
    53ce:	68b9      	ldr	r1, [r7, #8]
    53d0:	0018      	movs	r0, r3
    53d2:	4b07      	ldr	r3, [pc, #28]	; (53f0 <vQueueWaitForMessageRestricted+0x70>)
    53d4:	4798      	blx	r3
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
	prvUnlockQueue(pxQueue);
    53d6:	697b      	ldr	r3, [r7, #20]
    53d8:	0018      	movs	r0, r3
    53da:	4b06      	ldr	r3, [pc, #24]	; (53f4 <vQueueWaitForMessageRestricted+0x74>)
    53dc:	4798      	blx	r3
}
    53de:	46c0      	nop			; (mov r8, r8)
    53e0:	46bd      	mov	sp, r7
    53e2:	b006      	add	sp, #24
    53e4:	bd80      	pop	{r7, pc}
    53e6:	46c0      	nop			; (mov r8, r8)
    53e8:	000048d1 	.word	0x000048d1
    53ec:	000048f5 	.word	0x000048f5
    53f0:	00005bcd 	.word	0x00005bcd
    53f4:	00005225 	.word	0x00005225

000053f8 <prvNotifyQueueSetContainer>:
	/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    53f8:	b580      	push	{r7, lr}
    53fa:	b086      	sub	sp, #24
    53fc:	af00      	add	r7, sp, #0
    53fe:	6078      	str	r0, [r7, #4]
    5400:	6039      	str	r1, [r7, #0]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    5402:	687b      	ldr	r3, [r7, #4]
    5404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5406:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn             = pdFALSE;
    5408:	2300      	movs	r3, #0
    540a:	617b      	str	r3, [r7, #20]

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    540c:	693b      	ldr	r3, [r7, #16]
    540e:	2b00      	cmp	r3, #0
    5410:	d101      	bne.n	5416 <prvNotifyQueueSetContainer+0x1e>
    5412:	b672      	cpsid	i
    5414:	e7fe      	b.n	5414 <prvNotifyQueueSetContainer+0x1c>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    5416:	693b      	ldr	r3, [r7, #16]
    5418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    541a:	693b      	ldr	r3, [r7, #16]
    541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    541e:	429a      	cmp	r2, r3
    5420:	d301      	bcc.n	5426 <prvNotifyQueueSetContainer+0x2e>
    5422:	b672      	cpsid	i
    5424:	e7fe      	b.n	5424 <prvNotifyQueueSetContainer+0x2c>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    5426:	693b      	ldr	r3, [r7, #16]
    5428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    542a:	693b      	ldr	r3, [r7, #16]
    542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    542e:	429a      	cmp	r2, r3
    5430:	d22a      	bcs.n	5488 <prvNotifyQueueSetContainer+0x90>
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    5432:	230f      	movs	r3, #15
    5434:	18fb      	adds	r3, r7, r3
    5436:	693a      	ldr	r2, [r7, #16]
    5438:	2145      	movs	r1, #69	; 0x45
    543a:	5c52      	ldrb	r2, [r2, r1]
    543c:	701a      	strb	r2, [r3, #0]

		traceQUEUE_SEND(pxQueueSetContainer);

		/* The data copied is the handle of the queue that contains data. */
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    543e:	683a      	ldr	r2, [r7, #0]
    5440:	1d39      	adds	r1, r7, #4
    5442:	693b      	ldr	r3, [r7, #16]
    5444:	0018      	movs	r0, r3
    5446:	4b13      	ldr	r3, [pc, #76]	; (5494 <prvNotifyQueueSetContainer+0x9c>)
    5448:	4798      	blx	r3
    544a:	0003      	movs	r3, r0
    544c:	617b      	str	r3, [r7, #20]

		if (cTxLock == queueUNLOCKED) {
    544e:	230f      	movs	r3, #15
    5450:	18fb      	adds	r3, r7, r3
    5452:	781b      	ldrb	r3, [r3, #0]
    5454:	b25b      	sxtb	r3, r3
    5456:	3301      	adds	r3, #1
    5458:	d10d      	bne.n	5476 <prvNotifyQueueSetContainer+0x7e>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    545a:	693b      	ldr	r3, [r7, #16]
    545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    545e:	2b00      	cmp	r3, #0
    5460:	d012      	beq.n	5488 <prvNotifyQueueSetContainer+0x90>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    5462:	693b      	ldr	r3, [r7, #16]
    5464:	3324      	adds	r3, #36	; 0x24
    5466:	0018      	movs	r0, r3
    5468:	4b0b      	ldr	r3, [pc, #44]	; (5498 <prvNotifyQueueSetContainer+0xa0>)
    546a:	4798      	blx	r3
    546c:	1e03      	subs	r3, r0, #0
    546e:	d00b      	beq.n	5488 <prvNotifyQueueSetContainer+0x90>
					/* The task waiting has a higher priority. */
					xReturn = pdTRUE;
    5470:	2301      	movs	r3, #1
    5472:	617b      	str	r3, [r7, #20]
    5474:	e008      	b.n	5488 <prvNotifyQueueSetContainer+0x90>
				}
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		} else {
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    5476:	230f      	movs	r3, #15
    5478:	18fb      	adds	r3, r7, r3
    547a:	781b      	ldrb	r3, [r3, #0]
    547c:	3301      	adds	r3, #1
    547e:	b2db      	uxtb	r3, r3
    5480:	b259      	sxtb	r1, r3
    5482:	693b      	ldr	r3, [r7, #16]
    5484:	2245      	movs	r2, #69	; 0x45
    5486:	5499      	strb	r1, [r3, r2]
		}
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    5488:	697b      	ldr	r3, [r7, #20]
}
    548a:	0018      	movs	r0, r3
    548c:	46bd      	mov	sp, r7
    548e:	b006      	add	sp, #24
    5490:	bd80      	pop	{r7, pc}
    5492:	46c0      	nop			; (mov r8, r8)
    5494:	00005119 	.word	0x00005119
    5498:	00005c21 	.word	0x00005c21

0000549c <xTaskCreate>:
BaseType_t xTaskCreate(
    TaskFunction_t    pxTaskCode,
    const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    const configSTACK_DEPTH_TYPE usStackDepth, void *const pvParameters, UBaseType_t uxPriority,
    TaskHandle_t *const pxCreatedTask)
{
    549c:	b590      	push	{r4, r7, lr}
    549e:	b08d      	sub	sp, #52	; 0x34
    54a0:	af04      	add	r7, sp, #16
    54a2:	60f8      	str	r0, [r7, #12]
    54a4:	60b9      	str	r1, [r7, #8]
    54a6:	603b      	str	r3, [r7, #0]
    54a8:	1dbb      	adds	r3, r7, #6
    54aa:	801a      	strh	r2, [r3, #0]
	{
		StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = (StackType_t *)pvPortMalloc(
		    (((size_t)usStackDepth)
    54ac:	1dbb      	adds	r3, r7, #6
    54ae:	881b      	ldrh	r3, [r3, #0]
		pxStack = (StackType_t *)pvPortMalloc(
    54b0:	009b      	lsls	r3, r3, #2
    54b2:	0018      	movs	r0, r3
    54b4:	4b1d      	ldr	r3, [pc, #116]	; (552c <xTaskCreate+0x90>)
    54b6:	4798      	blx	r3
    54b8:	0003      	movs	r3, r0
    54ba:	617b      	str	r3, [r7, #20]
		     * sizeof(StackType_t))); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

		if (pxStack != NULL) {
    54bc:	697b      	ldr	r3, [r7, #20]
    54be:	2b00      	cmp	r3, #0
    54c0:	d010      	beq.n	54e4 <xTaskCreate+0x48>
			/* Allocate space for the TCB. */
			pxNewTCB = (TCB_t *)pvPortMalloc(
    54c2:	204c      	movs	r0, #76	; 0x4c
    54c4:	4b19      	ldr	r3, [pc, #100]	; (552c <xTaskCreate+0x90>)
    54c6:	4798      	blx	r3
    54c8:	0003      	movs	r3, r0
    54ca:	61fb      	str	r3, [r7, #28]
			    sizeof(TCB_t)); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */

			if (pxNewTCB != NULL) {
    54cc:	69fb      	ldr	r3, [r7, #28]
    54ce:	2b00      	cmp	r3, #0
    54d0:	d003      	beq.n	54da <xTaskCreate+0x3e>
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
    54d2:	69fb      	ldr	r3, [r7, #28]
    54d4:	697a      	ldr	r2, [r7, #20]
    54d6:	631a      	str	r2, [r3, #48]	; 0x30
    54d8:	e006      	b.n	54e8 <xTaskCreate+0x4c>
			} else {
				/* The stack cannot be used as the TCB was not created.  Free
				it again. */
				vPortFree(pxStack);
    54da:	697b      	ldr	r3, [r7, #20]
    54dc:	0018      	movs	r0, r3
    54de:	4b14      	ldr	r3, [pc, #80]	; (5530 <xTaskCreate+0x94>)
    54e0:	4798      	blx	r3
    54e2:	e001      	b.n	54e8 <xTaskCreate+0x4c>
			}
		} else {
			pxNewTCB = NULL;
    54e4:	2300      	movs	r3, #0
    54e6:	61fb      	str	r3, [r7, #28]
		}
	}
#endif /* portSTACK_GROWTH */

	if (pxNewTCB != NULL) {
    54e8:	69fb      	ldr	r3, [r7, #28]
    54ea:	2b00      	cmp	r3, #0
    54ec:	d016      	beq.n	551c <xTaskCreate+0x80>
			task was created dynamically in case it is later deleted. */
			pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
		}
#endif /* configSUPPORT_STATIC_ALLOCATION */

		prvInitialiseNewTask(
    54ee:	1dbb      	adds	r3, r7, #6
    54f0:	881a      	ldrh	r2, [r3, #0]
    54f2:	683c      	ldr	r4, [r7, #0]
    54f4:	68b9      	ldr	r1, [r7, #8]
    54f6:	68f8      	ldr	r0, [r7, #12]
    54f8:	2300      	movs	r3, #0
    54fa:	9303      	str	r3, [sp, #12]
    54fc:	69fb      	ldr	r3, [r7, #28]
    54fe:	9302      	str	r3, [sp, #8]
    5500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5502:	9301      	str	r3, [sp, #4]
    5504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5506:	9300      	str	r3, [sp, #0]
    5508:	0023      	movs	r3, r4
    550a:	4c0a      	ldr	r4, [pc, #40]	; (5534 <xTaskCreate+0x98>)
    550c:	47a0      	blx	r4
		    pxTaskCode, pcName, (uint32_t)usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
		prvAddNewTaskToReadyList(pxNewTCB);
    550e:	69fb      	ldr	r3, [r7, #28]
    5510:	0018      	movs	r0, r3
    5512:	4b09      	ldr	r3, [pc, #36]	; (5538 <xTaskCreate+0x9c>)
    5514:	4798      	blx	r3
		xReturn = pdPASS;
    5516:	2301      	movs	r3, #1
    5518:	61bb      	str	r3, [r7, #24]
    551a:	e002      	b.n	5522 <xTaskCreate+0x86>
	} else {
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    551c:	2301      	movs	r3, #1
    551e:	425b      	negs	r3, r3
    5520:	61bb      	str	r3, [r7, #24]
	}

	return xReturn;
    5522:	69bb      	ldr	r3, [r7, #24]
}
    5524:	0018      	movs	r0, r3
    5526:	46bd      	mov	sp, r7
    5528:	b009      	add	sp, #36	; 0x24
    552a:	bd90      	pop	{r4, r7, pc}
    552c:	000049fd 	.word	0x000049fd
    5530:	00004a91 	.word	0x00004a91
    5534:	0000553d 	.word	0x0000553d
    5538:	00005641 	.word	0x00005641

0000553c <prvInitialiseNewTask>:
static void prvInitialiseNewTask(
    TaskFunction_t    pxTaskCode,
    const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    const uint32_t ulStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask,
    TCB_t *pxNewTCB, const MemoryRegion_t *const xRegions)
{
    553c:	b580      	push	{r7, lr}
    553e:	b086      	sub	sp, #24
    5540:	af00      	add	r7, sp, #0
    5542:	60f8      	str	r0, [r7, #12]
    5544:	60b9      	str	r1, [r7, #8]
    5546:	607a      	str	r2, [r7, #4]
    5548:	603b      	str	r3, [r7, #0]

/* Avoid dependency on memset() if it is not required. */
#if (tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1)
	{
		/* Fill the stack with a known value to assist debugging. */
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    554c:	6b18      	ldr	r0, [r3, #48]	; 0x30
    554e:	687b      	ldr	r3, [r7, #4]
    5550:	009b      	lsls	r3, r3, #2
    5552:	001a      	movs	r2, r3
    5554:	21a5      	movs	r1, #165	; 0xa5
    5556:	4b36      	ldr	r3, [pc, #216]	; (5630 <prvInitialiseNewTask+0xf4>)
    5558:	4798      	blx	r3
grows from high memory to low (as per the 80x86) or vice versa.
portSTACK_GROWTH is used to make the result positive or negative as required
by the port. */
#if (portSTACK_GROWTH < 0)
	{
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    555c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    555e:	687b      	ldr	r3, [r7, #4]
    5560:	4934      	ldr	r1, [pc, #208]	; (5634 <prvInitialiseNewTask+0xf8>)
    5562:	468c      	mov	ip, r1
    5564:	4463      	add	r3, ip
    5566:	009b      	lsls	r3, r3, #2
    5568:	18d3      	adds	r3, r2, r3
    556a:	613b      	str	r3, [r7, #16]
		pxTopOfStack
		    = (StackType_t *)(((portPOINTER_SIZE_TYPE)pxTopOfStack)
    556c:	693b      	ldr	r3, [r7, #16]
		                      & (~(
    556e:	2207      	movs	r2, #7
    5570:	4393      	bics	r3, r2
		    = (StackType_t *)(((portPOINTER_SIZE_TYPE)pxTopOfStack)
    5572:	613b      	str	r3, [r7, #16]
		                                                                                  practical.  Size differences
		                                                                                  accounted for using
		                                                                                  portPOINTER_SIZE_TYPE type. */

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT((((portPOINTER_SIZE_TYPE)pxTopOfStack & (portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK) == 0UL));
    5574:	693b      	ldr	r3, [r7, #16]
    5576:	2207      	movs	r2, #7
    5578:	4013      	ands	r3, r2
    557a:	d001      	beq.n	5580 <prvInitialiseNewTask+0x44>
    557c:	b672      	cpsid	i
    557e:	e7fe      	b.n	557e <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
	}
#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    5580:	2300      	movs	r3, #0
    5582:	617b      	str	r3, [r7, #20]
    5584:	e013      	b.n	55ae <prvInitialiseNewTask+0x72>
		pxNewTCB->pcTaskName[x] = pcName[x];
    5586:	68ba      	ldr	r2, [r7, #8]
    5588:	697b      	ldr	r3, [r7, #20]
    558a:	18d3      	adds	r3, r2, r3
    558c:	7818      	ldrb	r0, [r3, #0]
    558e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5590:	2134      	movs	r1, #52	; 0x34
    5592:	697b      	ldr	r3, [r7, #20]
    5594:	18d3      	adds	r3, r2, r3
    5596:	185b      	adds	r3, r3, r1
    5598:	1c02      	adds	r2, r0, #0
    559a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if (pcName[x] == 0x00) {
    559c:	68ba      	ldr	r2, [r7, #8]
    559e:	697b      	ldr	r3, [r7, #20]
    55a0:	18d3      	adds	r3, r2, r3
    55a2:	781b      	ldrb	r3, [r3, #0]
    55a4:	2b00      	cmp	r3, #0
    55a6:	d006      	beq.n	55b6 <prvInitialiseNewTask+0x7a>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    55a8:	697b      	ldr	r3, [r7, #20]
    55aa:	3301      	adds	r3, #1
    55ac:	617b      	str	r3, [r7, #20]
    55ae:	697b      	ldr	r3, [r7, #20]
    55b0:	2b07      	cmp	r3, #7
    55b2:	d9e8      	bls.n	5586 <prvInitialiseNewTask+0x4a>
    55b4:	e000      	b.n	55b8 <prvInitialiseNewTask+0x7c>
			break;
    55b6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    55b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55ba:	223b      	movs	r2, #59	; 0x3b
    55bc:	2100      	movs	r1, #0
    55be:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES) {
    55c0:	6a3b      	ldr	r3, [r7, #32]
    55c2:	2b04      	cmp	r3, #4
    55c4:	d901      	bls.n	55ca <prvInitialiseNewTask+0x8e>
		uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
    55c6:	2304      	movs	r3, #4
    55c8:	623b      	str	r3, [r7, #32]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    55ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55cc:	6a3a      	ldr	r2, [r7, #32]
    55ce:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld  = 0;
	}
#endif /* configUSE_MUTEXES */

	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    55d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55d2:	3304      	adds	r3, #4
    55d4:	0018      	movs	r0, r3
    55d6:	4b18      	ldr	r3, [pc, #96]	; (5638 <prvInitialiseNewTask+0xfc>)
    55d8:	4798      	blx	r3
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    55da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55dc:	3318      	adds	r3, #24
    55de:	0018      	movs	r0, r3
    55e0:	4b15      	ldr	r3, [pc, #84]	; (5638 <prvInitialiseNewTask+0xfc>)
    55e2:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    55e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    55e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE(
    55ea:	6a3b      	ldr	r3, [r7, #32]
    55ec:	2205      	movs	r2, #5
    55ee:	1ad2      	subs	r2, r2, r3
    55f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55f2:	619a      	str	r2, [r3, #24]
	    &(pxNewTCB->xEventListItem),
	    (TickType_t)configMAX_PRIORITIES
	        - (TickType_t)uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    55f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    55f8:	625a      	str	r2, [r3, #36]	; 0x24
	}
#endif

#if (configUSE_TASK_NOTIFICATIONS == 1)
	{
		pxNewTCB->ulNotifiedValue = 0;
    55fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55fc:	2200      	movs	r2, #0
    55fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    5600:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5602:	2248      	movs	r2, #72	; 0x48
    5604:	2100      	movs	r1, #0
    5606:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged);
	}
#else  /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    5608:	683a      	ldr	r2, [r7, #0]
    560a:	68f9      	ldr	r1, [r7, #12]
    560c:	693b      	ldr	r3, [r7, #16]
    560e:	0018      	movs	r0, r3
    5610:	4b0a      	ldr	r3, [pc, #40]	; (563c <prvInitialiseNewTask+0x100>)
    5612:	4798      	blx	r3
    5614:	0002      	movs	r2, r0
    5616:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5618:	601a      	str	r2, [r3, #0]
	}
#endif /* portUSING_MPU_WRAPPERS */

	if ((void *)pxCreatedTask != NULL) {
    561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    561c:	2b00      	cmp	r3, #0
    561e:	d002      	beq.n	5626 <prvInitialiseNewTask+0xea>
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    5620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5622:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5624:	601a      	str	r2, [r3, #0]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
    5626:	46c0      	nop			; (mov r8, r8)
    5628:	46bd      	mov	sp, r7
    562a:	b006      	add	sp, #24
    562c:	bd80      	pop	{r7, pc}
    562e:	46c0      	nop			; (mov r8, r8)
    5630:	000083cb 	.word	0x000083cb
    5634:	3fffffff 	.word	0x3fffffff
    5638:	00004671 	.word	0x00004671
    563c:	00004789 	.word	0x00004789

00005640 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList(TCB_t *pxNewTCB)
{
    5640:	b580      	push	{r7, lr}
    5642:	b082      	sub	sp, #8
    5644:	af00      	add	r7, sp, #0
    5646:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    5648:	4b2b      	ldr	r3, [pc, #172]	; (56f8 <prvAddNewTaskToReadyList+0xb8>)
    564a:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    564c:	4b2b      	ldr	r3, [pc, #172]	; (56fc <prvAddNewTaskToReadyList+0xbc>)
    564e:	681b      	ldr	r3, [r3, #0]
    5650:	1c5a      	adds	r2, r3, #1
    5652:	4b2a      	ldr	r3, [pc, #168]	; (56fc <prvAddNewTaskToReadyList+0xbc>)
    5654:	601a      	str	r2, [r3, #0]
		if (pxCurrentTCB == NULL) {
    5656:	4b2a      	ldr	r3, [pc, #168]	; (5700 <prvAddNewTaskToReadyList+0xc0>)
    5658:	681b      	ldr	r3, [r3, #0]
    565a:	2b00      	cmp	r3, #0
    565c:	d109      	bne.n	5672 <prvAddNewTaskToReadyList+0x32>
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    565e:	4b28      	ldr	r3, [pc, #160]	; (5700 <prvAddNewTaskToReadyList+0xc0>)
    5660:	687a      	ldr	r2, [r7, #4]
    5662:	601a      	str	r2, [r3, #0]

			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    5664:	4b25      	ldr	r3, [pc, #148]	; (56fc <prvAddNewTaskToReadyList+0xbc>)
    5666:	681b      	ldr	r3, [r3, #0]
    5668:	2b01      	cmp	r3, #1
    566a:	d110      	bne.n	568e <prvAddNewTaskToReadyList+0x4e>
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    566c:	4b25      	ldr	r3, [pc, #148]	; (5704 <prvAddNewTaskToReadyList+0xc4>)
    566e:	4798      	blx	r3
    5670:	e00d      	b.n	568e <prvAddNewTaskToReadyList+0x4e>
			}
		} else {
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if (xSchedulerRunning == pdFALSE) {
    5672:	4b25      	ldr	r3, [pc, #148]	; (5708 <prvAddNewTaskToReadyList+0xc8>)
    5674:	681b      	ldr	r3, [r3, #0]
    5676:	2b00      	cmp	r3, #0
    5678:	d109      	bne.n	568e <prvAddNewTaskToReadyList+0x4e>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    567a:	4b21      	ldr	r3, [pc, #132]	; (5700 <prvAddNewTaskToReadyList+0xc0>)
    567c:	681b      	ldr	r3, [r3, #0]
    567e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5680:	687b      	ldr	r3, [r7, #4]
    5682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5684:	429a      	cmp	r2, r3
    5686:	d802      	bhi.n	568e <prvAddNewTaskToReadyList+0x4e>
					pxCurrentTCB = pxNewTCB;
    5688:	4b1d      	ldr	r3, [pc, #116]	; (5700 <prvAddNewTaskToReadyList+0xc0>)
    568a:	687a      	ldr	r2, [r7, #4]
    568c:	601a      	str	r2, [r3, #0]
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    568e:	4b1f      	ldr	r3, [pc, #124]	; (570c <prvAddNewTaskToReadyList+0xcc>)
    5690:	681b      	ldr	r3, [r3, #0]
    5692:	1c5a      	adds	r2, r3, #1
    5694:	4b1d      	ldr	r3, [pc, #116]	; (570c <prvAddNewTaskToReadyList+0xcc>)
    5696:	601a      	str	r2, [r3, #0]

#if (configUSE_TRACE_FACILITY == 1)
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    5698:	4b1c      	ldr	r3, [pc, #112]	; (570c <prvAddNewTaskToReadyList+0xcc>)
    569a:	681a      	ldr	r2, [r3, #0]
    569c:	687b      	ldr	r3, [r7, #4]
    569e:	63da      	str	r2, [r3, #60]	; 0x3c
		}
#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE(pxNewTCB);

		prvAddTaskToReadyList(pxNewTCB);
    56a0:	687b      	ldr	r3, [r7, #4]
    56a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56a4:	4b1a      	ldr	r3, [pc, #104]	; (5710 <prvAddNewTaskToReadyList+0xd0>)
    56a6:	681b      	ldr	r3, [r3, #0]
    56a8:	429a      	cmp	r2, r3
    56aa:	d903      	bls.n	56b4 <prvAddNewTaskToReadyList+0x74>
    56ac:	687b      	ldr	r3, [r7, #4]
    56ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56b0:	4b17      	ldr	r3, [pc, #92]	; (5710 <prvAddNewTaskToReadyList+0xd0>)
    56b2:	601a      	str	r2, [r3, #0]
    56b4:	687b      	ldr	r3, [r7, #4]
    56b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56b8:	0013      	movs	r3, r2
    56ba:	009b      	lsls	r3, r3, #2
    56bc:	189b      	adds	r3, r3, r2
    56be:	009b      	lsls	r3, r3, #2
    56c0:	4a14      	ldr	r2, [pc, #80]	; (5714 <prvAddNewTaskToReadyList+0xd4>)
    56c2:	189a      	adds	r2, r3, r2
    56c4:	687b      	ldr	r3, [r7, #4]
    56c6:	3304      	adds	r3, #4
    56c8:	0019      	movs	r1, r3
    56ca:	0010      	movs	r0, r2
    56cc:	4b12      	ldr	r3, [pc, #72]	; (5718 <prvAddNewTaskToReadyList+0xd8>)
    56ce:	4798      	blx	r3

		portSETUP_TCB(pxNewTCB);
	}
	taskEXIT_CRITICAL();
    56d0:	4b12      	ldr	r3, [pc, #72]	; (571c <prvAddNewTaskToReadyList+0xdc>)
    56d2:	4798      	blx	r3

	if (xSchedulerRunning != pdFALSE) {
    56d4:	4b0c      	ldr	r3, [pc, #48]	; (5708 <prvAddNewTaskToReadyList+0xc8>)
    56d6:	681b      	ldr	r3, [r3, #0]
    56d8:	2b00      	cmp	r3, #0
    56da:	d008      	beq.n	56ee <prvAddNewTaskToReadyList+0xae>
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    56dc:	4b08      	ldr	r3, [pc, #32]	; (5700 <prvAddNewTaskToReadyList+0xc0>)
    56de:	681b      	ldr	r3, [r3, #0]
    56e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56e2:	687b      	ldr	r3, [r7, #4]
    56e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    56e6:	429a      	cmp	r2, r3
    56e8:	d201      	bcs.n	56ee <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
    56ea:	4b0d      	ldr	r3, [pc, #52]	; (5720 <prvAddNewTaskToReadyList+0xe0>)
    56ec:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
    56ee:	46c0      	nop			; (mov r8, r8)
    56f0:	46bd      	mov	sp, r7
    56f2:	b002      	add	sp, #8
    56f4:	bd80      	pop	{r7, pc}
    56f6:	46c0      	nop			; (mov r8, r8)
    56f8:	000048d1 	.word	0x000048d1
    56fc:	20002740 	.word	0x20002740
    5700:	20002668 	.word	0x20002668
    5704:	00005df1 	.word	0x00005df1
    5708:	2000274c 	.word	0x2000274c
    570c:	2000275c 	.word	0x2000275c
    5710:	20002748 	.word	0x20002748
    5714:	2000266c 	.word	0x2000266c
    5718:	00004687 	.word	0x00004687
    571c:	000048f5 	.word	0x000048f5
    5720:	000048b1 	.word	0x000048b1

00005724 <vTaskDelay>:
	/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelay == 1)

void vTaskDelay(const TickType_t xTicksToDelay)
{
    5724:	b580      	push	{r7, lr}
    5726:	b084      	sub	sp, #16
    5728:	af00      	add	r7, sp, #0
    572a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    572c:	2300      	movs	r3, #0
    572e:	60fb      	str	r3, [r7, #12]

	/* A delay time of zero just forces a reschedule. */
	if (xTicksToDelay > (TickType_t)0U) {
    5730:	687b      	ldr	r3, [r7, #4]
    5732:	2b00      	cmp	r3, #0
    5734:	d010      	beq.n	5758 <vTaskDelay+0x34>
		configASSERT(uxSchedulerSuspended == 0);
    5736:	4b0d      	ldr	r3, [pc, #52]	; (576c <vTaskDelay+0x48>)
    5738:	681b      	ldr	r3, [r3, #0]
    573a:	2b00      	cmp	r3, #0
    573c:	d001      	beq.n	5742 <vTaskDelay+0x1e>
    573e:	b672      	cpsid	i
    5740:	e7fe      	b.n	5740 <vTaskDelay+0x1c>
		vTaskSuspendAll();
    5742:	4b0b      	ldr	r3, [pc, #44]	; (5770 <vTaskDelay+0x4c>)
    5744:	4798      	blx	r3
			list or removed from the blocked list until the scheduler
			is resumed.

			This task cannot be in an event list as it is the currently
			executing task. */
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    5746:	687b      	ldr	r3, [r7, #4]
    5748:	2100      	movs	r1, #0
    574a:	0018      	movs	r0, r3
    574c:	4b09      	ldr	r3, [pc, #36]	; (5774 <vTaskDelay+0x50>)
    574e:	4798      	blx	r3
		}
		xAlreadyYielded = xTaskResumeAll();
    5750:	4b09      	ldr	r3, [pc, #36]	; (5778 <vTaskDelay+0x54>)
    5752:	4798      	blx	r3
    5754:	0003      	movs	r3, r0
    5756:	60fb      	str	r3, [r7, #12]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Force a reschedule if xTaskResumeAll has not already done so, we may
	have put ourselves to sleep. */
	if (xAlreadyYielded == pdFALSE) {
    5758:	68fb      	ldr	r3, [r7, #12]
    575a:	2b00      	cmp	r3, #0
    575c:	d101      	bne.n	5762 <vTaskDelay+0x3e>
		portYIELD_WITHIN_API();
    575e:	4b07      	ldr	r3, [pc, #28]	; (577c <vTaskDelay+0x58>)
    5760:	4798      	blx	r3
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
    5762:	46c0      	nop			; (mov r8, r8)
    5764:	46bd      	mov	sp, r7
    5766:	b004      	add	sp, #16
    5768:	bd80      	pop	{r7, pc}
    576a:	46c0      	nop			; (mov r8, r8)
    576c:	20002768 	.word	0x20002768
    5770:	00005809 	.word	0x00005809
    5774:	00006221 	.word	0x00006221
    5778:	00005821 	.word	0x00005821
    577c:	000048b1 	.word	0x000048b1

00005780 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler(void)
{
    5780:	b590      	push	{r4, r7, lr}
    5782:	b085      	sub	sp, #20
    5784:	af02      	add	r7, sp, #8
		}
	}
#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(prvIdleTask,
    5786:	2380      	movs	r3, #128	; 0x80
    5788:	009a      	lsls	r2, r3, #2
    578a:	4916      	ldr	r1, [pc, #88]	; (57e4 <vTaskStartScheduler+0x64>)
    578c:	4816      	ldr	r0, [pc, #88]	; (57e8 <vTaskStartScheduler+0x68>)
    578e:	4b17      	ldr	r3, [pc, #92]	; (57ec <vTaskStartScheduler+0x6c>)
    5790:	9301      	str	r3, [sp, #4]
    5792:	2300      	movs	r3, #0
    5794:	9300      	str	r3, [sp, #0]
    5796:	2300      	movs	r3, #0
    5798:	4c15      	ldr	r4, [pc, #84]	; (57f0 <vTaskStartScheduler+0x70>)
    579a:	47a0      	blx	r4
    579c:	0003      	movs	r3, r0
    579e:	607b      	str	r3, [r7, #4]
	}
#endif /* configSUPPORT_STATIC_ALLOCATION */

#if (configUSE_TIMERS == 1)
	{
		if (xReturn == pdPASS) {
    57a0:	687b      	ldr	r3, [r7, #4]
    57a2:	2b01      	cmp	r3, #1
    57a4:	d103      	bne.n	57ae <vTaskStartScheduler+0x2e>
			xReturn = xTimerCreateTimerTask();
    57a6:	4b13      	ldr	r3, [pc, #76]	; (57f4 <vTaskStartScheduler+0x74>)
    57a8:	4798      	blx	r3
    57aa:	0003      	movs	r3, r0
    57ac:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
#endif /* configUSE_TIMERS */

	if (xReturn == pdPASS) {
    57ae:	687b      	ldr	r3, [r7, #4]
    57b0:	2b01      	cmp	r3, #1
    57b2:	d10d      	bne.n	57d0 <vTaskStartScheduler+0x50>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    57b4:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &(pxCurrentTCB->xNewLib_reent);
		}
#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    57b6:	4b10      	ldr	r3, [pc, #64]	; (57f8 <vTaskStartScheduler+0x78>)
    57b8:	2201      	movs	r2, #1
    57ba:	4252      	negs	r2, r2
    57bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning    = pdTRUE;
    57be:	4b0f      	ldr	r3, [pc, #60]	; (57fc <vTaskStartScheduler+0x7c>)
    57c0:	2201      	movs	r2, #1
    57c2:	601a      	str	r2, [r3, #0]
		xTickCount           = (TickType_t)0U;
    57c4:	4b0e      	ldr	r3, [pc, #56]	; (5800 <vTaskStartScheduler+0x80>)
    57c6:	2200      	movs	r2, #0
    57c8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if (xPortStartScheduler() != pdFALSE) {
    57ca:	4b0e      	ldr	r3, [pc, #56]	; (5804 <vTaskStartScheduler+0x84>)
    57cc:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	(void)xIdleTaskHandle;
}
    57ce:	e004      	b.n	57da <vTaskStartScheduler+0x5a>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    57d0:	687b      	ldr	r3, [r7, #4]
    57d2:	3301      	adds	r3, #1
    57d4:	d101      	bne.n	57da <vTaskStartScheduler+0x5a>
    57d6:	b672      	cpsid	i
    57d8:	e7fe      	b.n	57d8 <vTaskStartScheduler+0x58>
}
    57da:	46c0      	nop			; (mov r8, r8)
    57dc:	46bd      	mov	sp, r7
    57de:	b003      	add	sp, #12
    57e0:	bd90      	pop	{r4, r7, pc}
    57e2:	46c0      	nop			; (mov r8, r8)
    57e4:	00008648 	.word	0x00008648
    57e8:	00005dc9 	.word	0x00005dc9
    57ec:	20002764 	.word	0x20002764
    57f0:	0000549d 	.word	0x0000549d
    57f4:	000062d5 	.word	0x000062d5
    57f8:	20002760 	.word	0x20002760
    57fc:	2000274c 	.word	0x2000274c
    5800:	20002744 	.word	0x20002744
    5804:	00004859 	.word	0x00004859

00005808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll(void)
{
    5808:	b580      	push	{r7, lr}
    580a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    580c:	4b03      	ldr	r3, [pc, #12]	; (581c <vTaskSuspendAll+0x14>)
    580e:	681b      	ldr	r3, [r3, #0]
    5810:	1c5a      	adds	r2, r3, #1
    5812:	4b02      	ldr	r3, [pc, #8]	; (581c <vTaskSuspendAll+0x14>)
    5814:	601a      	str	r2, [r3, #0]
}
    5816:	46c0      	nop			; (mov r8, r8)
    5818:	46bd      	mov	sp, r7
    581a:	bd80      	pop	{r7, pc}
    581c:	20002768 	.word	0x20002768

00005820 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll(void)
{
    5820:	b580      	push	{r7, lr}
    5822:	b084      	sub	sp, #16
    5824:	af00      	add	r7, sp, #0
	TCB_t *    pxTCB           = NULL;
    5826:	2300      	movs	r3, #0
    5828:	60fb      	str	r3, [r7, #12]
	BaseType_t xAlreadyYielded = pdFALSE;
    582a:	2300      	movs	r3, #0
    582c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT(uxSchedulerSuspended);
    582e:	4b3a      	ldr	r3, [pc, #232]	; (5918 <xTaskResumeAll+0xf8>)
    5830:	681b      	ldr	r3, [r3, #0]
    5832:	2b00      	cmp	r3, #0
    5834:	d101      	bne.n	583a <xTaskResumeAll+0x1a>
    5836:	b672      	cpsid	i
    5838:	e7fe      	b.n	5838 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    583a:	4b38      	ldr	r3, [pc, #224]	; (591c <xTaskResumeAll+0xfc>)
    583c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    583e:	4b36      	ldr	r3, [pc, #216]	; (5918 <xTaskResumeAll+0xf8>)
    5840:	681b      	ldr	r3, [r3, #0]
    5842:	1e5a      	subs	r2, r3, #1
    5844:	4b34      	ldr	r3, [pc, #208]	; (5918 <xTaskResumeAll+0xf8>)
    5846:	601a      	str	r2, [r3, #0]

		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5848:	4b33      	ldr	r3, [pc, #204]	; (5918 <xTaskResumeAll+0xf8>)
    584a:	681b      	ldr	r3, [r3, #0]
    584c:	2b00      	cmp	r3, #0
    584e:	d15b      	bne.n	5908 <xTaskResumeAll+0xe8>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    5850:	4b33      	ldr	r3, [pc, #204]	; (5920 <xTaskResumeAll+0x100>)
    5852:	681b      	ldr	r3, [r3, #0]
    5854:	2b00      	cmp	r3, #0
    5856:	d057      	beq.n	5908 <xTaskResumeAll+0xe8>
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    5858:	e02f      	b.n	58ba <xTaskResumeAll+0x9a>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    585a:	4b32      	ldr	r3, [pc, #200]	; (5924 <xTaskResumeAll+0x104>)
    585c:	68db      	ldr	r3, [r3, #12]
    585e:	68db      	ldr	r3, [r3, #12]
    5860:	60fb      	str	r3, [r7, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    5862:	68fb      	ldr	r3, [r7, #12]
    5864:	3318      	adds	r3, #24
    5866:	0018      	movs	r0, r3
    5868:	4b2f      	ldr	r3, [pc, #188]	; (5928 <xTaskResumeAll+0x108>)
    586a:	4798      	blx	r3
					(void)uxListRemove(&(pxTCB->xStateListItem));
    586c:	68fb      	ldr	r3, [r7, #12]
    586e:	3304      	adds	r3, #4
    5870:	0018      	movs	r0, r3
    5872:	4b2d      	ldr	r3, [pc, #180]	; (5928 <xTaskResumeAll+0x108>)
    5874:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    5876:	68fb      	ldr	r3, [r7, #12]
    5878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    587a:	4b2c      	ldr	r3, [pc, #176]	; (592c <xTaskResumeAll+0x10c>)
    587c:	681b      	ldr	r3, [r3, #0]
    587e:	429a      	cmp	r2, r3
    5880:	d903      	bls.n	588a <xTaskResumeAll+0x6a>
    5882:	68fb      	ldr	r3, [r7, #12]
    5884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5886:	4b29      	ldr	r3, [pc, #164]	; (592c <xTaskResumeAll+0x10c>)
    5888:	601a      	str	r2, [r3, #0]
    588a:	68fb      	ldr	r3, [r7, #12]
    588c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    588e:	0013      	movs	r3, r2
    5890:	009b      	lsls	r3, r3, #2
    5892:	189b      	adds	r3, r3, r2
    5894:	009b      	lsls	r3, r3, #2
    5896:	4a26      	ldr	r2, [pc, #152]	; (5930 <xTaskResumeAll+0x110>)
    5898:	189a      	adds	r2, r3, r2
    589a:	68fb      	ldr	r3, [r7, #12]
    589c:	3304      	adds	r3, #4
    589e:	0019      	movs	r1, r3
    58a0:	0010      	movs	r0, r2
    58a2:	4b24      	ldr	r3, [pc, #144]	; (5934 <xTaskResumeAll+0x114>)
    58a4:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    58a6:	68fb      	ldr	r3, [r7, #12]
    58a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58aa:	4b23      	ldr	r3, [pc, #140]	; (5938 <xTaskResumeAll+0x118>)
    58ac:	681b      	ldr	r3, [r3, #0]
    58ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    58b0:	429a      	cmp	r2, r3
    58b2:	d302      	bcc.n	58ba <xTaskResumeAll+0x9a>
						xYieldPending = pdTRUE;
    58b4:	4b21      	ldr	r3, [pc, #132]	; (593c <xTaskResumeAll+0x11c>)
    58b6:	2201      	movs	r2, #1
    58b8:	601a      	str	r2, [r3, #0]
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    58ba:	4b1a      	ldr	r3, [pc, #104]	; (5924 <xTaskResumeAll+0x104>)
    58bc:	681b      	ldr	r3, [r3, #0]
    58be:	2b00      	cmp	r3, #0
    58c0:	d1cb      	bne.n	585a <xTaskResumeAll+0x3a>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if (pxTCB != NULL) {
    58c2:	68fb      	ldr	r3, [r7, #12]
    58c4:	2b00      	cmp	r3, #0
    58c6:	d001      	beq.n	58cc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    58c8:	4b1d      	ldr	r3, [pc, #116]	; (5940 <xTaskResumeAll+0x120>)
    58ca:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    58cc:	4b1d      	ldr	r3, [pc, #116]	; (5944 <xTaskResumeAll+0x124>)
    58ce:	681b      	ldr	r3, [r3, #0]
    58d0:	607b      	str	r3, [r7, #4]

					if (uxPendedCounts > (UBaseType_t)0U) {
    58d2:	687b      	ldr	r3, [r7, #4]
    58d4:	2b00      	cmp	r3, #0
    58d6:	d00f      	beq.n	58f8 <xTaskResumeAll+0xd8>
						do {
							if (xTaskIncrementTick() != pdFALSE) {
    58d8:	4b1b      	ldr	r3, [pc, #108]	; (5948 <xTaskResumeAll+0x128>)
    58da:	4798      	blx	r3
    58dc:	1e03      	subs	r3, r0, #0
    58de:	d002      	beq.n	58e6 <xTaskResumeAll+0xc6>
								xYieldPending = pdTRUE;
    58e0:	4b16      	ldr	r3, [pc, #88]	; (593c <xTaskResumeAll+0x11c>)
    58e2:	2201      	movs	r2, #1
    58e4:	601a      	str	r2, [r3, #0]
							} else {
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    58e6:	687b      	ldr	r3, [r7, #4]
    58e8:	3b01      	subs	r3, #1
    58ea:	607b      	str	r3, [r7, #4]
						} while (uxPendedCounts > (UBaseType_t)0U);
    58ec:	687b      	ldr	r3, [r7, #4]
    58ee:	2b00      	cmp	r3, #0
    58f0:	d1f2      	bne.n	58d8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    58f2:	4b14      	ldr	r3, [pc, #80]	; (5944 <xTaskResumeAll+0x124>)
    58f4:	2200      	movs	r2, #0
    58f6:	601a      	str	r2, [r3, #0]
					} else {
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if (xYieldPending != pdFALSE) {
    58f8:	4b10      	ldr	r3, [pc, #64]	; (593c <xTaskResumeAll+0x11c>)
    58fa:	681b      	ldr	r3, [r3, #0]
    58fc:	2b00      	cmp	r3, #0
    58fe:	d003      	beq.n	5908 <xTaskResumeAll+0xe8>
#if (configUSE_PREEMPTION != 0)
					{
						xAlreadyYielded = pdTRUE;
    5900:	2301      	movs	r3, #1
    5902:	60bb      	str	r3, [r7, #8]
					}
#endif
					taskYIELD_IF_USING_PREEMPTION();
    5904:	4b11      	ldr	r3, [pc, #68]	; (594c <xTaskResumeAll+0x12c>)
    5906:	4798      	blx	r3
			}
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    5908:	4b11      	ldr	r3, [pc, #68]	; (5950 <xTaskResumeAll+0x130>)
    590a:	4798      	blx	r3

	return xAlreadyYielded;
    590c:	68bb      	ldr	r3, [r7, #8]
}
    590e:	0018      	movs	r0, r3
    5910:	46bd      	mov	sp, r7
    5912:	b004      	add	sp, #16
    5914:	bd80      	pop	{r7, pc}
    5916:	46c0      	nop			; (mov r8, r8)
    5918:	20002768 	.word	0x20002768
    591c:	000048d1 	.word	0x000048d1
    5920:	20002740 	.word	0x20002740
    5924:	20002700 	.word	0x20002700
    5928:	00004737 	.word	0x00004737
    592c:	20002748 	.word	0x20002748
    5930:	2000266c 	.word	0x2000266c
    5934:	00004687 	.word	0x00004687
    5938:	20002668 	.word	0x20002668
    593c:	20002754 	.word	0x20002754
    5940:	00005f11 	.word	0x00005f11
    5944:	20002750 	.word	0x20002750
    5948:	00005971 	.word	0x00005971
    594c:	000048b1 	.word	0x000048b1
    5950:	000048f5 	.word	0x000048f5

00005954 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount(void)
{
    5954:	b580      	push	{r7, lr}
    5956:	b082      	sub	sp, #8
    5958:	af00      	add	r7, sp, #0
	TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    595a:	4b04      	ldr	r3, [pc, #16]	; (596c <xTaskGetTickCount+0x18>)
    595c:	681b      	ldr	r3, [r3, #0]
    595e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    5960:	687b      	ldr	r3, [r7, #4]
}
    5962:	0018      	movs	r0, r3
    5964:	46bd      	mov	sp, r7
    5966:	b002      	add	sp, #8
    5968:	bd80      	pop	{r7, pc}
    596a:	46c0      	nop			; (mov r8, r8)
    596c:	20002744 	.word	0x20002744

00005970 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick(void)
{
    5970:	b580      	push	{r7, lr}
    5972:	b086      	sub	sp, #24
    5974:	af00      	add	r7, sp, #0
	TCB_t *    pxTCB;
	TickType_t xItemValue;
	BaseType_t xSwitchRequired = pdFALSE;
    5976:	2300      	movs	r3, #0
    5978:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK(xTickCount);
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    597a:	4b4c      	ldr	r3, [pc, #304]	; (5aac <xTaskIncrementTick+0x13c>)
    597c:	681b      	ldr	r3, [r3, #0]
    597e:	2b00      	cmp	r3, #0
    5980:	d000      	beq.n	5984 <xTaskIncrementTick+0x14>
    5982:	e083      	b.n	5a8c <xTaskIncrementTick+0x11c>
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    5984:	4b4a      	ldr	r3, [pc, #296]	; (5ab0 <xTaskIncrementTick+0x140>)
    5986:	681b      	ldr	r3, [r3, #0]
    5988:	3301      	adds	r3, #1
    598a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    598c:	4b48      	ldr	r3, [pc, #288]	; (5ab0 <xTaskIncrementTick+0x140>)
    598e:	693a      	ldr	r2, [r7, #16]
    5990:	601a      	str	r2, [r3, #0]

		if (xConstTickCount
    5992:	693b      	ldr	r3, [r7, #16]
    5994:	2b00      	cmp	r3, #0
    5996:	d117      	bne.n	59c8 <xTaskIncrementTick+0x58>
		    == (TickType_t)0U) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
		{
			taskSWITCH_DELAYED_LISTS();
    5998:	4b46      	ldr	r3, [pc, #280]	; (5ab4 <xTaskIncrementTick+0x144>)
    599a:	681b      	ldr	r3, [r3, #0]
    599c:	681b      	ldr	r3, [r3, #0]
    599e:	2b00      	cmp	r3, #0
    59a0:	d001      	beq.n	59a6 <xTaskIncrementTick+0x36>
    59a2:	b672      	cpsid	i
    59a4:	e7fe      	b.n	59a4 <xTaskIncrementTick+0x34>
    59a6:	4b43      	ldr	r3, [pc, #268]	; (5ab4 <xTaskIncrementTick+0x144>)
    59a8:	681b      	ldr	r3, [r3, #0]
    59aa:	60fb      	str	r3, [r7, #12]
    59ac:	4b42      	ldr	r3, [pc, #264]	; (5ab8 <xTaskIncrementTick+0x148>)
    59ae:	681a      	ldr	r2, [r3, #0]
    59b0:	4b40      	ldr	r3, [pc, #256]	; (5ab4 <xTaskIncrementTick+0x144>)
    59b2:	601a      	str	r2, [r3, #0]
    59b4:	4b40      	ldr	r3, [pc, #256]	; (5ab8 <xTaskIncrementTick+0x148>)
    59b6:	68fa      	ldr	r2, [r7, #12]
    59b8:	601a      	str	r2, [r3, #0]
    59ba:	4b40      	ldr	r3, [pc, #256]	; (5abc <xTaskIncrementTick+0x14c>)
    59bc:	681b      	ldr	r3, [r3, #0]
    59be:	1c5a      	adds	r2, r3, #1
    59c0:	4b3e      	ldr	r3, [pc, #248]	; (5abc <xTaskIncrementTick+0x14c>)
    59c2:	601a      	str	r2, [r3, #0]
    59c4:	4b3e      	ldr	r3, [pc, #248]	; (5ac0 <xTaskIncrementTick+0x150>)
    59c6:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if (xConstTickCount >= xNextTaskUnblockTime) {
    59c8:	4b3e      	ldr	r3, [pc, #248]	; (5ac4 <xTaskIncrementTick+0x154>)
    59ca:	681b      	ldr	r3, [r3, #0]
    59cc:	693a      	ldr	r2, [r7, #16]
    59ce:	429a      	cmp	r2, r3
    59d0:	d34e      	bcc.n	5a70 <xTaskIncrementTick+0x100>
			for (;;) {
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    59d2:	4b38      	ldr	r3, [pc, #224]	; (5ab4 <xTaskIncrementTick+0x144>)
    59d4:	681b      	ldr	r3, [r3, #0]
    59d6:	681b      	ldr	r3, [r3, #0]
    59d8:	2b00      	cmp	r3, #0
    59da:	d101      	bne.n	59e0 <xTaskIncrementTick+0x70>
    59dc:	2301      	movs	r3, #1
    59de:	e000      	b.n	59e2 <xTaskIncrementTick+0x72>
    59e0:	2300      	movs	r3, #0
    59e2:	2b00      	cmp	r3, #0
    59e4:	d004      	beq.n	59f0 <xTaskIncrementTick+0x80>
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    59e6:	4b37      	ldr	r3, [pc, #220]	; (5ac4 <xTaskIncrementTick+0x154>)
    59e8:	2201      	movs	r2, #1
    59ea:	4252      	negs	r2, r2
    59ec:	601a      	str	r2, [r3, #0]
					break;
    59ee:	e03f      	b.n	5a70 <xTaskIncrementTick+0x100>
				} else {
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    59f0:	4b30      	ldr	r3, [pc, #192]	; (5ab4 <xTaskIncrementTick+0x144>)
    59f2:	681b      	ldr	r3, [r3, #0]
    59f4:	68db      	ldr	r3, [r3, #12]
    59f6:	68db      	ldr	r3, [r3, #12]
    59f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    59fa:	68bb      	ldr	r3, [r7, #8]
    59fc:	685b      	ldr	r3, [r3, #4]
    59fe:	607b      	str	r3, [r7, #4]

					if (xConstTickCount < xItemValue) {
    5a00:	693a      	ldr	r2, [r7, #16]
    5a02:	687b      	ldr	r3, [r7, #4]
    5a04:	429a      	cmp	r2, r3
    5a06:	d203      	bcs.n	5a10 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    5a08:	4b2e      	ldr	r3, [pc, #184]	; (5ac4 <xTaskIncrementTick+0x154>)
    5a0a:	687a      	ldr	r2, [r7, #4]
    5a0c:	601a      	str	r2, [r3, #0]
						break;
    5a0e:	e02f      	b.n	5a70 <xTaskIncrementTick+0x100>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5a10:	68bb      	ldr	r3, [r7, #8]
    5a12:	3304      	adds	r3, #4
    5a14:	0018      	movs	r0, r3
    5a16:	4b2c      	ldr	r3, [pc, #176]	; (5ac8 <xTaskIncrementTick+0x158>)
    5a18:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    5a1a:	68bb      	ldr	r3, [r7, #8]
    5a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a1e:	2b00      	cmp	r3, #0
    5a20:	d004      	beq.n	5a2c <xTaskIncrementTick+0xbc>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    5a22:	68bb      	ldr	r3, [r7, #8]
    5a24:	3318      	adds	r3, #24
    5a26:	0018      	movs	r0, r3
    5a28:	4b27      	ldr	r3, [pc, #156]	; (5ac8 <xTaskIncrementTick+0x158>)
    5a2a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList(pxTCB);
    5a2c:	68bb      	ldr	r3, [r7, #8]
    5a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a30:	4b26      	ldr	r3, [pc, #152]	; (5acc <xTaskIncrementTick+0x15c>)
    5a32:	681b      	ldr	r3, [r3, #0]
    5a34:	429a      	cmp	r2, r3
    5a36:	d903      	bls.n	5a40 <xTaskIncrementTick+0xd0>
    5a38:	68bb      	ldr	r3, [r7, #8]
    5a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a3c:	4b23      	ldr	r3, [pc, #140]	; (5acc <xTaskIncrementTick+0x15c>)
    5a3e:	601a      	str	r2, [r3, #0]
    5a40:	68bb      	ldr	r3, [r7, #8]
    5a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a44:	0013      	movs	r3, r2
    5a46:	009b      	lsls	r3, r3, #2
    5a48:	189b      	adds	r3, r3, r2
    5a4a:	009b      	lsls	r3, r3, #2
    5a4c:	4a20      	ldr	r2, [pc, #128]	; (5ad0 <xTaskIncrementTick+0x160>)
    5a4e:	189a      	adds	r2, r3, r2
    5a50:	68bb      	ldr	r3, [r7, #8]
    5a52:	3304      	adds	r3, #4
    5a54:	0019      	movs	r1, r3
    5a56:	0010      	movs	r0, r2
    5a58:	4b1e      	ldr	r3, [pc, #120]	; (5ad4 <xTaskIncrementTick+0x164>)
    5a5a:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    5a5c:	68bb      	ldr	r3, [r7, #8]
    5a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a60:	4b1d      	ldr	r3, [pc, #116]	; (5ad8 <xTaskIncrementTick+0x168>)
    5a62:	681b      	ldr	r3, [r3, #0]
    5a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5a66:	429a      	cmp	r2, r3
    5a68:	d3b3      	bcc.n	59d2 <xTaskIncrementTick+0x62>
							xSwitchRequired = pdTRUE;
    5a6a:	2301      	movs	r3, #1
    5a6c:	617b      	str	r3, [r7, #20]
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5a6e:	e7b0      	b.n	59d2 <xTaskIncrementTick+0x62>
/* Tasks of equal priority to the currently running task will share
processing time (time slice) if preemption is on, and the application
writer has not explicitly turned time slicing off. */
#if ((configUSE_PREEMPTION == 1) && (configUSE_TIME_SLICING == 1))
		{
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    5a70:	4b19      	ldr	r3, [pc, #100]	; (5ad8 <xTaskIncrementTick+0x168>)
    5a72:	681b      	ldr	r3, [r3, #0]
    5a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a76:	4916      	ldr	r1, [pc, #88]	; (5ad0 <xTaskIncrementTick+0x160>)
    5a78:	0013      	movs	r3, r2
    5a7a:	009b      	lsls	r3, r3, #2
    5a7c:	189b      	adds	r3, r3, r2
    5a7e:	009b      	lsls	r3, r3, #2
    5a80:	585b      	ldr	r3, [r3, r1]
    5a82:	2b01      	cmp	r3, #1
    5a84:	d907      	bls.n	5a96 <xTaskIncrementTick+0x126>
				xSwitchRequired = pdTRUE;
    5a86:	2301      	movs	r3, #1
    5a88:	617b      	str	r3, [r7, #20]
    5a8a:	e004      	b.n	5a96 <xTaskIncrementTick+0x126>
				mtCOVERAGE_TEST_MARKER();
			}
		}
#endif /* configUSE_TICK_HOOK */
	} else {
		++uxPendedTicks;
    5a8c:	4b13      	ldr	r3, [pc, #76]	; (5adc <xTaskIncrementTick+0x16c>)
    5a8e:	681b      	ldr	r3, [r3, #0]
    5a90:	1c5a      	adds	r2, r3, #1
    5a92:	4b12      	ldr	r3, [pc, #72]	; (5adc <xTaskIncrementTick+0x16c>)
    5a94:	601a      	str	r2, [r3, #0]
#endif
	}

#if (configUSE_PREEMPTION == 1)
	{
		if (xYieldPending != pdFALSE) {
    5a96:	4b12      	ldr	r3, [pc, #72]	; (5ae0 <xTaskIncrementTick+0x170>)
    5a98:	681b      	ldr	r3, [r3, #0]
    5a9a:	2b00      	cmp	r3, #0
    5a9c:	d001      	beq.n	5aa2 <xTaskIncrementTick+0x132>
			xSwitchRequired = pdTRUE;
    5a9e:	2301      	movs	r3, #1
    5aa0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    5aa2:	697b      	ldr	r3, [r7, #20]
}
    5aa4:	0018      	movs	r0, r3
    5aa6:	46bd      	mov	sp, r7
    5aa8:	b006      	add	sp, #24
    5aaa:	bd80      	pop	{r7, pc}
    5aac:	20002768 	.word	0x20002768
    5ab0:	20002744 	.word	0x20002744
    5ab4:	200026f8 	.word	0x200026f8
    5ab8:	200026fc 	.word	0x200026fc
    5abc:	20002758 	.word	0x20002758
    5ac0:	00005f11 	.word	0x00005f11
    5ac4:	20002760 	.word	0x20002760
    5ac8:	00004737 	.word	0x00004737
    5acc:	20002748 	.word	0x20002748
    5ad0:	2000266c 	.word	0x2000266c
    5ad4:	00004687 	.word	0x00004687
    5ad8:	20002668 	.word	0x20002668
    5adc:	20002750 	.word	0x20002750
    5ae0:	20002754 	.word	0x20002754

00005ae4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext(void)
{
    5ae4:	b580      	push	{r7, lr}
    5ae6:	b082      	sub	sp, #8
    5ae8:	af00      	add	r7, sp, #0
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    5aea:	4b22      	ldr	r3, [pc, #136]	; (5b74 <vTaskSwitchContext+0x90>)
    5aec:	681b      	ldr	r3, [r3, #0]
    5aee:	2b00      	cmp	r3, #0
    5af0:	d003      	beq.n	5afa <vTaskSwitchContext+0x16>
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    5af2:	4b21      	ldr	r3, [pc, #132]	; (5b78 <vTaskSwitchContext+0x94>)
    5af4:	2201      	movs	r2, #1
    5af6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &(pxCurrentTCB->xNewLib_reent);
		}
#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    5af8:	e037      	b.n	5b6a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
    5afa:	4b1f      	ldr	r3, [pc, #124]	; (5b78 <vTaskSwitchContext+0x94>)
    5afc:	2200      	movs	r2, #0
    5afe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5b00:	4b1e      	ldr	r3, [pc, #120]	; (5b7c <vTaskSwitchContext+0x98>)
    5b02:	681b      	ldr	r3, [r3, #0]
    5b04:	607b      	str	r3, [r7, #4]
    5b06:	e007      	b.n	5b18 <vTaskSwitchContext+0x34>
    5b08:	687b      	ldr	r3, [r7, #4]
    5b0a:	2b00      	cmp	r3, #0
    5b0c:	d101      	bne.n	5b12 <vTaskSwitchContext+0x2e>
    5b0e:	b672      	cpsid	i
    5b10:	e7fe      	b.n	5b10 <vTaskSwitchContext+0x2c>
    5b12:	687b      	ldr	r3, [r7, #4]
    5b14:	3b01      	subs	r3, #1
    5b16:	607b      	str	r3, [r7, #4]
    5b18:	4919      	ldr	r1, [pc, #100]	; (5b80 <vTaskSwitchContext+0x9c>)
    5b1a:	687a      	ldr	r2, [r7, #4]
    5b1c:	0013      	movs	r3, r2
    5b1e:	009b      	lsls	r3, r3, #2
    5b20:	189b      	adds	r3, r3, r2
    5b22:	009b      	lsls	r3, r3, #2
    5b24:	585b      	ldr	r3, [r3, r1]
    5b26:	2b00      	cmp	r3, #0
    5b28:	d0ee      	beq.n	5b08 <vTaskSwitchContext+0x24>
    5b2a:	687a      	ldr	r2, [r7, #4]
    5b2c:	0013      	movs	r3, r2
    5b2e:	009b      	lsls	r3, r3, #2
    5b30:	189b      	adds	r3, r3, r2
    5b32:	009b      	lsls	r3, r3, #2
    5b34:	4a12      	ldr	r2, [pc, #72]	; (5b80 <vTaskSwitchContext+0x9c>)
    5b36:	189b      	adds	r3, r3, r2
    5b38:	603b      	str	r3, [r7, #0]
    5b3a:	683b      	ldr	r3, [r7, #0]
    5b3c:	685b      	ldr	r3, [r3, #4]
    5b3e:	685a      	ldr	r2, [r3, #4]
    5b40:	683b      	ldr	r3, [r7, #0]
    5b42:	605a      	str	r2, [r3, #4]
    5b44:	683b      	ldr	r3, [r7, #0]
    5b46:	685a      	ldr	r2, [r3, #4]
    5b48:	683b      	ldr	r3, [r7, #0]
    5b4a:	3308      	adds	r3, #8
    5b4c:	429a      	cmp	r2, r3
    5b4e:	d104      	bne.n	5b5a <vTaskSwitchContext+0x76>
    5b50:	683b      	ldr	r3, [r7, #0]
    5b52:	685b      	ldr	r3, [r3, #4]
    5b54:	685a      	ldr	r2, [r3, #4]
    5b56:	683b      	ldr	r3, [r7, #0]
    5b58:	605a      	str	r2, [r3, #4]
    5b5a:	683b      	ldr	r3, [r7, #0]
    5b5c:	685b      	ldr	r3, [r3, #4]
    5b5e:	68da      	ldr	r2, [r3, #12]
    5b60:	4b08      	ldr	r3, [pc, #32]	; (5b84 <vTaskSwitchContext+0xa0>)
    5b62:	601a      	str	r2, [r3, #0]
    5b64:	4b05      	ldr	r3, [pc, #20]	; (5b7c <vTaskSwitchContext+0x98>)
    5b66:	687a      	ldr	r2, [r7, #4]
    5b68:	601a      	str	r2, [r3, #0]
}
    5b6a:	46c0      	nop			; (mov r8, r8)
    5b6c:	46bd      	mov	sp, r7
    5b6e:	b002      	add	sp, #8
    5b70:	bd80      	pop	{r7, pc}
    5b72:	46c0      	nop			; (mov r8, r8)
    5b74:	20002768 	.word	0x20002768
    5b78:	20002754 	.word	0x20002754
    5b7c:	20002748 	.word	0x20002748
    5b80:	2000266c 	.word	0x2000266c
    5b84:	20002668 	.word	0x20002668

00005b88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList(List_t *const pxEventList, const TickType_t xTicksToWait)
{
    5b88:	b580      	push	{r7, lr}
    5b8a:	b082      	sub	sp, #8
    5b8c:	af00      	add	r7, sp, #0
    5b8e:	6078      	str	r0, [r7, #4]
    5b90:	6039      	str	r1, [r7, #0]
	configASSERT(pxEventList);
    5b92:	687b      	ldr	r3, [r7, #4]
    5b94:	2b00      	cmp	r3, #0
    5b96:	d101      	bne.n	5b9c <vTaskPlaceOnEventList+0x14>
    5b98:	b672      	cpsid	i
    5b9a:	e7fe      	b.n	5b9a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    5b9c:	4b08      	ldr	r3, [pc, #32]	; (5bc0 <vTaskPlaceOnEventList+0x38>)
    5b9e:	681b      	ldr	r3, [r3, #0]
    5ba0:	3318      	adds	r3, #24
    5ba2:	001a      	movs	r2, r3
    5ba4:	687b      	ldr	r3, [r7, #4]
    5ba6:	0011      	movs	r1, r2
    5ba8:	0018      	movs	r0, r3
    5baa:	4b06      	ldr	r3, [pc, #24]	; (5bc4 <vTaskPlaceOnEventList+0x3c>)
    5bac:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    5bae:	683b      	ldr	r3, [r7, #0]
    5bb0:	2101      	movs	r1, #1
    5bb2:	0018      	movs	r0, r3
    5bb4:	4b04      	ldr	r3, [pc, #16]	; (5bc8 <vTaskPlaceOnEventList+0x40>)
    5bb6:	4798      	blx	r3
}
    5bb8:	46c0      	nop			; (mov r8, r8)
    5bba:	46bd      	mov	sp, r7
    5bbc:	b002      	add	sp, #8
    5bbe:	bd80      	pop	{r7, pc}
    5bc0:	20002668 	.word	0x20002668
    5bc4:	000046cb 	.word	0x000046cb
    5bc8:	00006221 	.word	0x00006221

00005bcc <vTaskPlaceOnEventListRestricted>:

#if (configUSE_TIMERS == 1)

void vTaskPlaceOnEventListRestricted(List_t *const pxEventList, TickType_t xTicksToWait,
                                     const BaseType_t xWaitIndefinitely)
{
    5bcc:	b580      	push	{r7, lr}
    5bce:	b084      	sub	sp, #16
    5bd0:	af00      	add	r7, sp, #0
    5bd2:	60f8      	str	r0, [r7, #12]
    5bd4:	60b9      	str	r1, [r7, #8]
    5bd6:	607a      	str	r2, [r7, #4]
	configASSERT(pxEventList);
    5bd8:	68fb      	ldr	r3, [r7, #12]
    5bda:	2b00      	cmp	r3, #0
    5bdc:	d101      	bne.n	5be2 <vTaskPlaceOnEventListRestricted+0x16>
    5bde:	b672      	cpsid	i
    5be0:	e7fe      	b.n	5be0 <vTaskPlaceOnEventListRestricted+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	In this case it is assume that this is the only task that is going to
	be waiting on this event list, so the faster vListInsertEnd() function
	can be used in place of vListInsert. */
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    5be2:	4b0c      	ldr	r3, [pc, #48]	; (5c14 <vTaskPlaceOnEventListRestricted+0x48>)
    5be4:	681b      	ldr	r3, [r3, #0]
    5be6:	3318      	adds	r3, #24
    5be8:	001a      	movs	r2, r3
    5bea:	68fb      	ldr	r3, [r7, #12]
    5bec:	0011      	movs	r1, r2
    5bee:	0018      	movs	r0, r3
    5bf0:	4b09      	ldr	r3, [pc, #36]	; (5c18 <vTaskPlaceOnEventListRestricted+0x4c>)
    5bf2:	4798      	blx	r3

	/* If the task should block indefinitely then set the block time to a
	value that will be recognised as an indefinite delay inside the
	prvAddCurrentTaskToDelayedList() function. */
	if (xWaitIndefinitely != pdFALSE) {
    5bf4:	687b      	ldr	r3, [r7, #4]
    5bf6:	2b00      	cmp	r3, #0
    5bf8:	d002      	beq.n	5c00 <vTaskPlaceOnEventListRestricted+0x34>
		xTicksToWait = portMAX_DELAY;
    5bfa:	2301      	movs	r3, #1
    5bfc:	425b      	negs	r3, r3
    5bfe:	60bb      	str	r3, [r7, #8]
	}

	traceTASK_DELAY_UNTIL((xTickCount + xTicksToWait));
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    5c00:	687a      	ldr	r2, [r7, #4]
    5c02:	68bb      	ldr	r3, [r7, #8]
    5c04:	0011      	movs	r1, r2
    5c06:	0018      	movs	r0, r3
    5c08:	4b04      	ldr	r3, [pc, #16]	; (5c1c <vTaskPlaceOnEventListRestricted+0x50>)
    5c0a:	4798      	blx	r3
}
    5c0c:	46c0      	nop			; (mov r8, r8)
    5c0e:	46bd      	mov	sp, r7
    5c10:	b004      	add	sp, #16
    5c12:	bd80      	pop	{r7, pc}
    5c14:	20002668 	.word	0x20002668
    5c18:	00004687 	.word	0x00004687
    5c1c:	00006221 	.word	0x00006221

00005c20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList(const List_t *const pxEventList)
{
    5c20:	b580      	push	{r7, lr}
    5c22:	b084      	sub	sp, #16
    5c24:	af00      	add	r7, sp, #0
    5c26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    5c28:	687b      	ldr	r3, [r7, #4]
    5c2a:	68db      	ldr	r3, [r3, #12]
    5c2c:	68db      	ldr	r3, [r3, #12]
    5c2e:	60bb      	str	r3, [r7, #8]
	configASSERT(pxUnblockedTCB);
    5c30:	68bb      	ldr	r3, [r7, #8]
    5c32:	2b00      	cmp	r3, #0
    5c34:	d101      	bne.n	5c3a <xTaskRemoveFromEventList+0x1a>
    5c36:	b672      	cpsid	i
    5c38:	e7fe      	b.n	5c38 <xTaskRemoveFromEventList+0x18>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    5c3a:	68bb      	ldr	r3, [r7, #8]
    5c3c:	3318      	adds	r3, #24
    5c3e:	0018      	movs	r0, r3
    5c40:	4b1f      	ldr	r3, [pc, #124]	; (5cc0 <xTaskRemoveFromEventList+0xa0>)
    5c42:	4798      	blx	r3

	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5c44:	4b1f      	ldr	r3, [pc, #124]	; (5cc4 <xTaskRemoveFromEventList+0xa4>)
    5c46:	681b      	ldr	r3, [r3, #0]
    5c48:	2b00      	cmp	r3, #0
    5c4a:	d11d      	bne.n	5c88 <xTaskRemoveFromEventList+0x68>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    5c4c:	68bb      	ldr	r3, [r7, #8]
    5c4e:	3304      	adds	r3, #4
    5c50:	0018      	movs	r0, r3
    5c52:	4b1b      	ldr	r3, [pc, #108]	; (5cc0 <xTaskRemoveFromEventList+0xa0>)
    5c54:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    5c56:	68bb      	ldr	r3, [r7, #8]
    5c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c5a:	4b1b      	ldr	r3, [pc, #108]	; (5cc8 <xTaskRemoveFromEventList+0xa8>)
    5c5c:	681b      	ldr	r3, [r3, #0]
    5c5e:	429a      	cmp	r2, r3
    5c60:	d903      	bls.n	5c6a <xTaskRemoveFromEventList+0x4a>
    5c62:	68bb      	ldr	r3, [r7, #8]
    5c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c66:	4b18      	ldr	r3, [pc, #96]	; (5cc8 <xTaskRemoveFromEventList+0xa8>)
    5c68:	601a      	str	r2, [r3, #0]
    5c6a:	68bb      	ldr	r3, [r7, #8]
    5c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c6e:	0013      	movs	r3, r2
    5c70:	009b      	lsls	r3, r3, #2
    5c72:	189b      	adds	r3, r3, r2
    5c74:	009b      	lsls	r3, r3, #2
    5c76:	4a15      	ldr	r2, [pc, #84]	; (5ccc <xTaskRemoveFromEventList+0xac>)
    5c78:	189a      	adds	r2, r3, r2
    5c7a:	68bb      	ldr	r3, [r7, #8]
    5c7c:	3304      	adds	r3, #4
    5c7e:	0019      	movs	r1, r3
    5c80:	0010      	movs	r0, r2
    5c82:	4b13      	ldr	r3, [pc, #76]	; (5cd0 <xTaskRemoveFromEventList+0xb0>)
    5c84:	4798      	blx	r3
    5c86:	e007      	b.n	5c98 <xTaskRemoveFromEventList+0x78>
	} else {
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    5c88:	68bb      	ldr	r3, [r7, #8]
    5c8a:	3318      	adds	r3, #24
    5c8c:	001a      	movs	r2, r3
    5c8e:	4b11      	ldr	r3, [pc, #68]	; (5cd4 <xTaskRemoveFromEventList+0xb4>)
    5c90:	0011      	movs	r1, r2
    5c92:	0018      	movs	r0, r3
    5c94:	4b0e      	ldr	r3, [pc, #56]	; (5cd0 <xTaskRemoveFromEventList+0xb0>)
    5c96:	4798      	blx	r3
	}

	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    5c98:	68bb      	ldr	r3, [r7, #8]
    5c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c9c:	4b0e      	ldr	r3, [pc, #56]	; (5cd8 <xTaskRemoveFromEventList+0xb8>)
    5c9e:	681b      	ldr	r3, [r3, #0]
    5ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5ca2:	429a      	cmp	r2, r3
    5ca4:	d905      	bls.n	5cb2 <xTaskRemoveFromEventList+0x92>
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    5ca6:	2301      	movs	r3, #1
    5ca8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    5caa:	4b0c      	ldr	r3, [pc, #48]	; (5cdc <xTaskRemoveFromEventList+0xbc>)
    5cac:	2201      	movs	r2, #1
    5cae:	601a      	str	r2, [r3, #0]
    5cb0:	e001      	b.n	5cb6 <xTaskRemoveFromEventList+0x96>
	} else {
		xReturn = pdFALSE;
    5cb2:	2300      	movs	r3, #0
    5cb4:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
#endif

	return xReturn;
    5cb6:	68fb      	ldr	r3, [r7, #12]
}
    5cb8:	0018      	movs	r0, r3
    5cba:	46bd      	mov	sp, r7
    5cbc:	b004      	add	sp, #16
    5cbe:	bd80      	pop	{r7, pc}
    5cc0:	00004737 	.word	0x00004737
    5cc4:	20002768 	.word	0x20002768
    5cc8:	20002748 	.word	0x20002748
    5ccc:	2000266c 	.word	0x2000266c
    5cd0:	00004687 	.word	0x00004687
    5cd4:	20002700 	.word	0x20002700
    5cd8:	20002668 	.word	0x20002668
    5cdc:	20002754 	.word	0x20002754

00005ce0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState(TimeOut_t *const pxTimeOut)
{
    5ce0:	b580      	push	{r7, lr}
    5ce2:	b082      	sub	sp, #8
    5ce4:	af00      	add	r7, sp, #0
    5ce6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    5ce8:	4b05      	ldr	r3, [pc, #20]	; (5d00 <vTaskInternalSetTimeOutState+0x20>)
    5cea:	681a      	ldr	r2, [r3, #0]
    5cec:	687b      	ldr	r3, [r7, #4]
    5cee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5cf0:	4b04      	ldr	r3, [pc, #16]	; (5d04 <vTaskInternalSetTimeOutState+0x24>)
    5cf2:	681a      	ldr	r2, [r3, #0]
    5cf4:	687b      	ldr	r3, [r7, #4]
    5cf6:	605a      	str	r2, [r3, #4]
}
    5cf8:	46c0      	nop			; (mov r8, r8)
    5cfa:	46bd      	mov	sp, r7
    5cfc:	b002      	add	sp, #8
    5cfe:	bd80      	pop	{r7, pc}
    5d00:	20002758 	.word	0x20002758
    5d04:	20002744 	.word	0x20002744

00005d08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut(TimeOut_t *const pxTimeOut, TickType_t *const pxTicksToWait)
{
    5d08:	b580      	push	{r7, lr}
    5d0a:	b086      	sub	sp, #24
    5d0c:	af00      	add	r7, sp, #0
    5d0e:	6078      	str	r0, [r7, #4]
    5d10:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

	configASSERT(pxTimeOut);
    5d12:	687b      	ldr	r3, [r7, #4]
    5d14:	2b00      	cmp	r3, #0
    5d16:	d101      	bne.n	5d1c <xTaskCheckForTimeOut+0x14>
    5d18:	b672      	cpsid	i
    5d1a:	e7fe      	b.n	5d1a <xTaskCheckForTimeOut+0x12>
	configASSERT(pxTicksToWait);
    5d1c:	683b      	ldr	r3, [r7, #0]
    5d1e:	2b00      	cmp	r3, #0
    5d20:	d101      	bne.n	5d26 <xTaskCheckForTimeOut+0x1e>
    5d22:	b672      	cpsid	i
    5d24:	e7fe      	b.n	5d24 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    5d26:	4b1e      	ldr	r3, [pc, #120]	; (5da0 <xTaskCheckForTimeOut+0x98>)
    5d28:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    5d2a:	4b1e      	ldr	r3, [pc, #120]	; (5da4 <xTaskCheckForTimeOut+0x9c>)
    5d2c:	681b      	ldr	r3, [r3, #0]
    5d2e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5d30:	687b      	ldr	r3, [r7, #4]
    5d32:	685b      	ldr	r3, [r3, #4]
    5d34:	693a      	ldr	r2, [r7, #16]
    5d36:	1ad3      	subs	r3, r2, r3
    5d38:	60fb      	str	r3, [r7, #12]
			xReturn                      = pdTRUE;
		} else
#endif

#if (INCLUDE_vTaskSuspend == 1)
		    if (*pxTicksToWait == portMAX_DELAY) {
    5d3a:	683b      	ldr	r3, [r7, #0]
    5d3c:	681b      	ldr	r3, [r3, #0]
    5d3e:	3301      	adds	r3, #1
    5d40:	d102      	bne.n	5d48 <xTaskCheckForTimeOut+0x40>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time
			specified is the maximum block time then the task should block
			indefinitely, and therefore never time out. */
			xReturn = pdFALSE;
    5d42:	2300      	movs	r3, #0
    5d44:	617b      	str	r3, [r7, #20]
    5d46:	e024      	b.n	5d92 <xTaskCheckForTimeOut+0x8a>
		} else
#endif

		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    5d48:	687b      	ldr	r3, [r7, #4]
    5d4a:	681a      	ldr	r2, [r3, #0]
    5d4c:	4b16      	ldr	r3, [pc, #88]	; (5da8 <xTaskCheckForTimeOut+0xa0>)
    5d4e:	681b      	ldr	r3, [r3, #0]
    5d50:	429a      	cmp	r2, r3
    5d52:	d007      	beq.n	5d64 <xTaskCheckForTimeOut+0x5c>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    5d54:	687b      	ldr	r3, [r7, #4]
    5d56:	685a      	ldr	r2, [r3, #4]
    5d58:	693b      	ldr	r3, [r7, #16]
    5d5a:	429a      	cmp	r2, r3
    5d5c:	d802      	bhi.n	5d64 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    5d5e:	2301      	movs	r3, #1
    5d60:	617b      	str	r3, [r7, #20]
    5d62:	e016      	b.n	5d92 <xTaskCheckForTimeOut+0x8a>
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    5d64:	683b      	ldr	r3, [r7, #0]
    5d66:	681a      	ldr	r2, [r3, #0]
    5d68:	68fb      	ldr	r3, [r7, #12]
    5d6a:	429a      	cmp	r2, r3
    5d6c:	d90c      	bls.n	5d88 <xTaskCheckForTimeOut+0x80>
		                                             whereas others require it to prevent integer conversion errors. */
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    5d6e:	683b      	ldr	r3, [r7, #0]
    5d70:	681a      	ldr	r2, [r3, #0]
    5d72:	68fb      	ldr	r3, [r7, #12]
    5d74:	1ad2      	subs	r2, r2, r3
    5d76:	683b      	ldr	r3, [r7, #0]
    5d78:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    5d7a:	687b      	ldr	r3, [r7, #4]
    5d7c:	0018      	movs	r0, r3
    5d7e:	4b0b      	ldr	r3, [pc, #44]	; (5dac <xTaskCheckForTimeOut+0xa4>)
    5d80:	4798      	blx	r3
			xReturn = pdFALSE;
    5d82:	2300      	movs	r3, #0
    5d84:	617b      	str	r3, [r7, #20]
    5d86:	e004      	b.n	5d92 <xTaskCheckForTimeOut+0x8a>
		} else {
			*pxTicksToWait = 0;
    5d88:	683b      	ldr	r3, [r7, #0]
    5d8a:	2200      	movs	r2, #0
    5d8c:	601a      	str	r2, [r3, #0]
			xReturn        = pdTRUE;
    5d8e:	2301      	movs	r3, #1
    5d90:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    5d92:	4b07      	ldr	r3, [pc, #28]	; (5db0 <xTaskCheckForTimeOut+0xa8>)
    5d94:	4798      	blx	r3

	return xReturn;
    5d96:	697b      	ldr	r3, [r7, #20]
}
    5d98:	0018      	movs	r0, r3
    5d9a:	46bd      	mov	sp, r7
    5d9c:	b006      	add	sp, #24
    5d9e:	bd80      	pop	{r7, pc}
    5da0:	000048d1 	.word	0x000048d1
    5da4:	20002744 	.word	0x20002744
    5da8:	20002758 	.word	0x20002758
    5dac:	00005ce1 	.word	0x00005ce1
    5db0:	000048f5 	.word	0x000048f5

00005db4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield(void)
{
    5db4:	b580      	push	{r7, lr}
    5db6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    5db8:	4b02      	ldr	r3, [pc, #8]	; (5dc4 <vTaskMissedYield+0x10>)
    5dba:	2201      	movs	r2, #1
    5dbc:	601a      	str	r2, [r3, #0]
}
    5dbe:	46c0      	nop			; (mov r8, r8)
    5dc0:	46bd      	mov	sp, r7
    5dc2:	bd80      	pop	{r7, pc}
    5dc4:	20002754 	.word	0x20002754

00005dc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION(prvIdleTask, pvParameters)
{
    5dc8:	b580      	push	{r7, lr}
    5dca:	b082      	sub	sp, #8
    5dcc:	af00      	add	r7, sp, #0
    5dce:	6078      	str	r0, [r7, #4]
	portTASK_CALLS_SECURE_FUNCTIONS();

	for (;;) {
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    5dd0:	4b04      	ldr	r3, [pc, #16]	; (5de4 <prvIdleTask+0x1c>)
    5dd2:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    5dd4:	4b04      	ldr	r3, [pc, #16]	; (5de8 <prvIdleTask+0x20>)
    5dd6:	681b      	ldr	r3, [r3, #0]
    5dd8:	2b01      	cmp	r3, #1
    5dda:	d9f9      	bls.n	5dd0 <prvIdleTask+0x8>
				taskYIELD();
    5ddc:	4b03      	ldr	r3, [pc, #12]	; (5dec <prvIdleTask+0x24>)
    5dde:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    5de0:	e7f6      	b.n	5dd0 <prvIdleTask+0x8>
    5de2:	46c0      	nop			; (mov r8, r8)
    5de4:	00005e7d 	.word	0x00005e7d
    5de8:	2000266c 	.word	0x2000266c
    5dec:	000048b1 	.word	0x000048b1

00005df0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists(void)
{
    5df0:	b580      	push	{r7, lr}
    5df2:	b082      	sub	sp, #8
    5df4:	af00      	add	r7, sp, #0
	UBaseType_t uxPriority;

	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    5df6:	2300      	movs	r3, #0
    5df8:	607b      	str	r3, [r7, #4]
    5dfa:	e00c      	b.n	5e16 <prvInitialiseTaskLists+0x26>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    5dfc:	687a      	ldr	r2, [r7, #4]
    5dfe:	0013      	movs	r3, r2
    5e00:	009b      	lsls	r3, r3, #2
    5e02:	189b      	adds	r3, r3, r2
    5e04:	009b      	lsls	r3, r3, #2
    5e06:	4a14      	ldr	r2, [pc, #80]	; (5e58 <prvInitialiseTaskLists+0x68>)
    5e08:	189b      	adds	r3, r3, r2
    5e0a:	0018      	movs	r0, r3
    5e0c:	4b13      	ldr	r3, [pc, #76]	; (5e5c <prvInitialiseTaskLists+0x6c>)
    5e0e:	4798      	blx	r3
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    5e10:	687b      	ldr	r3, [r7, #4]
    5e12:	3301      	adds	r3, #1
    5e14:	607b      	str	r3, [r7, #4]
    5e16:	687b      	ldr	r3, [r7, #4]
    5e18:	2b04      	cmp	r3, #4
    5e1a:	d9ef      	bls.n	5dfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise(&xDelayedTaskList1);
    5e1c:	4b10      	ldr	r3, [pc, #64]	; (5e60 <prvInitialiseTaskLists+0x70>)
    5e1e:	0018      	movs	r0, r3
    5e20:	4b0e      	ldr	r3, [pc, #56]	; (5e5c <prvInitialiseTaskLists+0x6c>)
    5e22:	4798      	blx	r3
	vListInitialise(&xDelayedTaskList2);
    5e24:	4b0f      	ldr	r3, [pc, #60]	; (5e64 <prvInitialiseTaskLists+0x74>)
    5e26:	0018      	movs	r0, r3
    5e28:	4b0c      	ldr	r3, [pc, #48]	; (5e5c <prvInitialiseTaskLists+0x6c>)
    5e2a:	4798      	blx	r3
	vListInitialise(&xPendingReadyList);
    5e2c:	4b0e      	ldr	r3, [pc, #56]	; (5e68 <prvInitialiseTaskLists+0x78>)
    5e2e:	0018      	movs	r0, r3
    5e30:	4b0a      	ldr	r3, [pc, #40]	; (5e5c <prvInitialiseTaskLists+0x6c>)
    5e32:	4798      	blx	r3

#if (INCLUDE_vTaskDelete == 1)
	{
		vListInitialise(&xTasksWaitingTermination);
    5e34:	4b0d      	ldr	r3, [pc, #52]	; (5e6c <prvInitialiseTaskLists+0x7c>)
    5e36:	0018      	movs	r0, r3
    5e38:	4b08      	ldr	r3, [pc, #32]	; (5e5c <prvInitialiseTaskLists+0x6c>)
    5e3a:	4798      	blx	r3
	}
#endif /* INCLUDE_vTaskDelete */

#if (INCLUDE_vTaskSuspend == 1)
	{
		vListInitialise(&xSuspendedTaskList);
    5e3c:	4b0c      	ldr	r3, [pc, #48]	; (5e70 <prvInitialiseTaskLists+0x80>)
    5e3e:	0018      	movs	r0, r3
    5e40:	4b06      	ldr	r3, [pc, #24]	; (5e5c <prvInitialiseTaskLists+0x6c>)
    5e42:	4798      	blx	r3
	}
#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList         = &xDelayedTaskList1;
    5e44:	4b0b      	ldr	r3, [pc, #44]	; (5e74 <prvInitialiseTaskLists+0x84>)
    5e46:	4a06      	ldr	r2, [pc, #24]	; (5e60 <prvInitialiseTaskLists+0x70>)
    5e48:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5e4a:	4b0b      	ldr	r3, [pc, #44]	; (5e78 <prvInitialiseTaskLists+0x88>)
    5e4c:	4a05      	ldr	r2, [pc, #20]	; (5e64 <prvInitialiseTaskLists+0x74>)
    5e4e:	601a      	str	r2, [r3, #0]
}
    5e50:	46c0      	nop			; (mov r8, r8)
    5e52:	46bd      	mov	sp, r7
    5e54:	b002      	add	sp, #8
    5e56:	bd80      	pop	{r7, pc}
    5e58:	2000266c 	.word	0x2000266c
    5e5c:	00004635 	.word	0x00004635
    5e60:	200026d0 	.word	0x200026d0
    5e64:	200026e4 	.word	0x200026e4
    5e68:	20002700 	.word	0x20002700
    5e6c:	20002714 	.word	0x20002714
    5e70:	2000272c 	.word	0x2000272c
    5e74:	200026f8 	.word	0x200026f8
    5e78:	200026fc 	.word	0x200026fc

00005e7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination(void)
{
    5e7c:	b580      	push	{r7, lr}
    5e7e:	b082      	sub	sp, #8
    5e80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
    5e82:	e01a      	b.n	5eba <prvCheckTasksWaitingTermination+0x3e>
			taskENTER_CRITICAL();
    5e84:	4b11      	ldr	r3, [pc, #68]	; (5ecc <prvCheckTasksWaitingTermination+0x50>)
    5e86:	4798      	blx	r3
			{
				pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xTasksWaitingTermination));
    5e88:	4b11      	ldr	r3, [pc, #68]	; (5ed0 <prvCheckTasksWaitingTermination+0x54>)
    5e8a:	68db      	ldr	r3, [r3, #12]
    5e8c:	68db      	ldr	r3, [r3, #12]
    5e8e:	607b      	str	r3, [r7, #4]
				(void)uxListRemove(&(pxTCB->xStateListItem));
    5e90:	687b      	ldr	r3, [r7, #4]
    5e92:	3304      	adds	r3, #4
    5e94:	0018      	movs	r0, r3
    5e96:	4b0f      	ldr	r3, [pc, #60]	; (5ed4 <prvCheckTasksWaitingTermination+0x58>)
    5e98:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    5e9a:	4b0f      	ldr	r3, [pc, #60]	; (5ed8 <prvCheckTasksWaitingTermination+0x5c>)
    5e9c:	681b      	ldr	r3, [r3, #0]
    5e9e:	1e5a      	subs	r2, r3, #1
    5ea0:	4b0d      	ldr	r3, [pc, #52]	; (5ed8 <prvCheckTasksWaitingTermination+0x5c>)
    5ea2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    5ea4:	4b0d      	ldr	r3, [pc, #52]	; (5edc <prvCheckTasksWaitingTermination+0x60>)
    5ea6:	681b      	ldr	r3, [r3, #0]
    5ea8:	1e5a      	subs	r2, r3, #1
    5eaa:	4b0c      	ldr	r3, [pc, #48]	; (5edc <prvCheckTasksWaitingTermination+0x60>)
    5eac:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    5eae:	4b0c      	ldr	r3, [pc, #48]	; (5ee0 <prvCheckTasksWaitingTermination+0x64>)
    5eb0:	4798      	blx	r3

			prvDeleteTCB(pxTCB);
    5eb2:	687b      	ldr	r3, [r7, #4]
    5eb4:	0018      	movs	r0, r3
    5eb6:	4b0b      	ldr	r3, [pc, #44]	; (5ee4 <prvCheckTasksWaitingTermination+0x68>)
    5eb8:	4798      	blx	r3
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
    5eba:	4b08      	ldr	r3, [pc, #32]	; (5edc <prvCheckTasksWaitingTermination+0x60>)
    5ebc:	681b      	ldr	r3, [r3, #0]
    5ebe:	2b00      	cmp	r3, #0
    5ec0:	d1e0      	bne.n	5e84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
#endif /* INCLUDE_vTaskDelete */
}
    5ec2:	46c0      	nop			; (mov r8, r8)
    5ec4:	46bd      	mov	sp, r7
    5ec6:	b002      	add	sp, #8
    5ec8:	bd80      	pop	{r7, pc}
    5eca:	46c0      	nop			; (mov r8, r8)
    5ecc:	000048d1 	.word	0x000048d1
    5ed0:	20002714 	.word	0x20002714
    5ed4:	00004737 	.word	0x00004737
    5ed8:	20002740 	.word	0x20002740
    5edc:	20002728 	.word	0x20002728
    5ee0:	000048f5 	.word	0x000048f5
    5ee4:	00005ee9 	.word	0x00005ee9

00005ee8 <prvDeleteTCB>:
	/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

static void prvDeleteTCB(TCB_t *pxTCB)
{
    5ee8:	b580      	push	{r7, lr}
    5eea:	b082      	sub	sp, #8
    5eec:	af00      	add	r7, sp, #0
    5eee:	6078      	str	r0, [r7, #4]

#if ((configSUPPORT_DYNAMIC_ALLOCATION == 1) && (configSUPPORT_STATIC_ALLOCATION == 0) && (portUSING_MPU_WRAPPERS == 0))
	{
		/* The task can only have been allocated dynamically - free both
		the stack and TCB. */
		vPortFree(pxTCB->pxStack);
    5ef0:	687b      	ldr	r3, [r7, #4]
    5ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5ef4:	0018      	movs	r0, r3
    5ef6:	4b05      	ldr	r3, [pc, #20]	; (5f0c <prvDeleteTCB+0x24>)
    5ef8:	4798      	blx	r3
		vPortFree(pxTCB);
    5efa:	687b      	ldr	r3, [r7, #4]
    5efc:	0018      	movs	r0, r3
    5efe:	4b03      	ldr	r3, [pc, #12]	; (5f0c <prvDeleteTCB+0x24>)
    5f00:	4798      	blx	r3
			configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
			mtCOVERAGE_TEST_MARKER();
		}
	}
#endif       /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    5f02:	46c0      	nop			; (mov r8, r8)
    5f04:	46bd      	mov	sp, r7
    5f06:	b002      	add	sp, #8
    5f08:	bd80      	pop	{r7, pc}
    5f0a:	46c0      	nop			; (mov r8, r8)
    5f0c:	00004a91 	.word	0x00004a91

00005f10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime(void)
{
    5f10:	b580      	push	{r7, lr}
    5f12:	b082      	sub	sp, #8
    5f14:	af00      	add	r7, sp, #0
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5f16:	4b0e      	ldr	r3, [pc, #56]	; (5f50 <prvResetNextTaskUnblockTime+0x40>)
    5f18:	681b      	ldr	r3, [r3, #0]
    5f1a:	681b      	ldr	r3, [r3, #0]
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	d101      	bne.n	5f24 <prvResetNextTaskUnblockTime+0x14>
    5f20:	2301      	movs	r3, #1
    5f22:	e000      	b.n	5f26 <prvResetNextTaskUnblockTime+0x16>
    5f24:	2300      	movs	r3, #0
    5f26:	2b00      	cmp	r3, #0
    5f28:	d004      	beq.n	5f34 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    5f2a:	4b0a      	ldr	r3, [pc, #40]	; (5f54 <prvResetNextTaskUnblockTime+0x44>)
    5f2c:	2201      	movs	r2, #1
    5f2e:	4252      	negs	r2, r2
    5f30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
	}
}
    5f32:	e008      	b.n	5f46 <prvResetNextTaskUnblockTime+0x36>
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    5f34:	4b06      	ldr	r3, [pc, #24]	; (5f50 <prvResetNextTaskUnblockTime+0x40>)
    5f36:	681b      	ldr	r3, [r3, #0]
    5f38:	68db      	ldr	r3, [r3, #12]
    5f3a:	68db      	ldr	r3, [r3, #12]
    5f3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    5f3e:	687b      	ldr	r3, [r7, #4]
    5f40:	685a      	ldr	r2, [r3, #4]
    5f42:	4b04      	ldr	r3, [pc, #16]	; (5f54 <prvResetNextTaskUnblockTime+0x44>)
    5f44:	601a      	str	r2, [r3, #0]
}
    5f46:	46c0      	nop			; (mov r8, r8)
    5f48:	46bd      	mov	sp, r7
    5f4a:	b002      	add	sp, #8
    5f4c:	bd80      	pop	{r7, pc}
    5f4e:	46c0      	nop			; (mov r8, r8)
    5f50:	200026f8 	.word	0x200026f8
    5f54:	20002760 	.word	0x20002760

00005f58 <xTaskGetSchedulerState>:
	/*-----------------------------------------------------------*/

#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))

BaseType_t xTaskGetSchedulerState(void)
{
    5f58:	b580      	push	{r7, lr}
    5f5a:	b082      	sub	sp, #8
    5f5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

	if (xSchedulerRunning == pdFALSE) {
    5f5e:	4b0a      	ldr	r3, [pc, #40]	; (5f88 <xTaskGetSchedulerState+0x30>)
    5f60:	681b      	ldr	r3, [r3, #0]
    5f62:	2b00      	cmp	r3, #0
    5f64:	d102      	bne.n	5f6c <xTaskGetSchedulerState+0x14>
		xReturn = taskSCHEDULER_NOT_STARTED;
    5f66:	2301      	movs	r3, #1
    5f68:	607b      	str	r3, [r7, #4]
    5f6a:	e008      	b.n	5f7e <xTaskGetSchedulerState+0x26>
	} else {
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5f6c:	4b07      	ldr	r3, [pc, #28]	; (5f8c <xTaskGetSchedulerState+0x34>)
    5f6e:	681b      	ldr	r3, [r3, #0]
    5f70:	2b00      	cmp	r3, #0
    5f72:	d102      	bne.n	5f7a <xTaskGetSchedulerState+0x22>
			xReturn = taskSCHEDULER_RUNNING;
    5f74:	2302      	movs	r3, #2
    5f76:	607b      	str	r3, [r7, #4]
    5f78:	e001      	b.n	5f7e <xTaskGetSchedulerState+0x26>
		} else {
			xReturn = taskSCHEDULER_SUSPENDED;
    5f7a:	2300      	movs	r3, #0
    5f7c:	607b      	str	r3, [r7, #4]
		}
	}

	return xReturn;
    5f7e:	687b      	ldr	r3, [r7, #4]
}
    5f80:	0018      	movs	r0, r3
    5f82:	46bd      	mov	sp, r7
    5f84:	b002      	add	sp, #8
    5f86:	bd80      	pop	{r7, pc}
    5f88:	2000274c 	.word	0x2000274c
    5f8c:	20002768 	.word	0x20002768

00005f90 <xTaskGenericNotify>:

#if (configUSE_TASK_NOTIFICATIONS == 1)

BaseType_t xTaskGenericNotify(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction,
                              uint32_t *pulPreviousNotificationValue)
{
    5f90:	b580      	push	{r7, lr}
    5f92:	b088      	sub	sp, #32
    5f94:	af00      	add	r7, sp, #0
    5f96:	60f8      	str	r0, [r7, #12]
    5f98:	60b9      	str	r1, [r7, #8]
    5f9a:	603b      	str	r3, [r7, #0]
    5f9c:	1dfb      	adds	r3, r7, #7
    5f9e:	701a      	strb	r2, [r3, #0]
	TCB_t *    pxTCB;
	BaseType_t xReturn = pdPASS;
    5fa0:	2301      	movs	r3, #1
    5fa2:	61fb      	str	r3, [r7, #28]
	uint8_t    ucOriginalNotifyState;

	configASSERT(xTaskToNotify);
    5fa4:	68fb      	ldr	r3, [r7, #12]
    5fa6:	2b00      	cmp	r3, #0
    5fa8:	d101      	bne.n	5fae <xTaskGenericNotify+0x1e>
    5faa:	b672      	cpsid	i
    5fac:	e7fe      	b.n	5fac <xTaskGenericNotify+0x1c>
	pxTCB = (TCB_t *)xTaskToNotify;
    5fae:	68fb      	ldr	r3, [r7, #12]
    5fb0:	61bb      	str	r3, [r7, #24]

	taskENTER_CRITICAL();
    5fb2:	4b39      	ldr	r3, [pc, #228]	; (6098 <xTaskGenericNotify+0x108>)
    5fb4:	4798      	blx	r3
	{
		if (pulPreviousNotificationValue != NULL) {
    5fb6:	683b      	ldr	r3, [r7, #0]
    5fb8:	2b00      	cmp	r3, #0
    5fba:	d003      	beq.n	5fc4 <xTaskGenericNotify+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    5fbc:	69bb      	ldr	r3, [r7, #24]
    5fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    5fc0:	683b      	ldr	r3, [r7, #0]
    5fc2:	601a      	str	r2, [r3, #0]
		}

		ucOriginalNotifyState = pxTCB->ucNotifyState;
    5fc4:	2317      	movs	r3, #23
    5fc6:	18fb      	adds	r3, r7, r3
    5fc8:	69ba      	ldr	r2, [r7, #24]
    5fca:	2148      	movs	r1, #72	; 0x48
    5fcc:	5c52      	ldrb	r2, [r2, r1]
    5fce:	701a      	strb	r2, [r3, #0]

		pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    5fd0:	69bb      	ldr	r3, [r7, #24]
    5fd2:	2248      	movs	r2, #72	; 0x48
    5fd4:	2102      	movs	r1, #2
    5fd6:	5499      	strb	r1, [r3, r2]

		switch (eAction) {
    5fd8:	1dfb      	adds	r3, r7, #7
    5fda:	781b      	ldrb	r3, [r3, #0]
    5fdc:	2b04      	cmp	r3, #4
    5fde:	d822      	bhi.n	6026 <xTaskGenericNotify+0x96>
    5fe0:	009a      	lsls	r2, r3, #2
    5fe2:	4b2e      	ldr	r3, [pc, #184]	; (609c <xTaskGenericNotify+0x10c>)
    5fe4:	18d3      	adds	r3, r2, r3
    5fe6:	681b      	ldr	r3, [r3, #0]
    5fe8:	469f      	mov	pc, r3
		case eSetBits:
			pxTCB->ulNotifiedValue |= ulValue;
    5fea:	69bb      	ldr	r3, [r7, #24]
    5fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    5fee:	68bb      	ldr	r3, [r7, #8]
    5ff0:	431a      	orrs	r2, r3
    5ff2:	69bb      	ldr	r3, [r7, #24]
    5ff4:	645a      	str	r2, [r3, #68]	; 0x44
			break;
    5ff6:	e016      	b.n	6026 <xTaskGenericNotify+0x96>

		case eIncrement:
			(pxTCB->ulNotifiedValue)++;
    5ff8:	69bb      	ldr	r3, [r7, #24]
    5ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    5ffc:	1c5a      	adds	r2, r3, #1
    5ffe:	69bb      	ldr	r3, [r7, #24]
    6000:	645a      	str	r2, [r3, #68]	; 0x44
			break;
    6002:	e010      	b.n	6026 <xTaskGenericNotify+0x96>

		case eSetValueWithOverwrite:
			pxTCB->ulNotifiedValue = ulValue;
    6004:	69bb      	ldr	r3, [r7, #24]
    6006:	68ba      	ldr	r2, [r7, #8]
    6008:	645a      	str	r2, [r3, #68]	; 0x44
			break;
    600a:	e00c      	b.n	6026 <xTaskGenericNotify+0x96>

		case eSetValueWithoutOverwrite:
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    600c:	2317      	movs	r3, #23
    600e:	18fb      	adds	r3, r7, r3
    6010:	781b      	ldrb	r3, [r3, #0]
    6012:	2b02      	cmp	r3, #2
    6014:	d003      	beq.n	601e <xTaskGenericNotify+0x8e>
				pxTCB->ulNotifiedValue = ulValue;
    6016:	69bb      	ldr	r3, [r7, #24]
    6018:	68ba      	ldr	r2, [r7, #8]
    601a:	645a      	str	r2, [r3, #68]	; 0x44
			} else {
				/* The value could not be written to the task. */
				xReturn = pdFAIL;
			}
			break;
    601c:	e003      	b.n	6026 <xTaskGenericNotify+0x96>
				xReturn = pdFAIL;
    601e:	2300      	movs	r3, #0
    6020:	61fb      	str	r3, [r7, #28]
			break;
    6022:	e000      	b.n	6026 <xTaskGenericNotify+0x96>

		case eNoAction:
			/* The task is being notified without its notify value being
			updated. */
			break;
    6024:	46c0      	nop			; (mov r8, r8)

		traceTASK_NOTIFY();

		/* If the task is in the blocked state specifically to wait for a
		notification then unblock it now. */
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    6026:	2317      	movs	r3, #23
    6028:	18fb      	adds	r3, r7, r3
    602a:	781b      	ldrb	r3, [r3, #0]
    602c:	2b01      	cmp	r3, #1
    602e:	d12b      	bne.n	6088 <xTaskGenericNotify+0xf8>
			(void)uxListRemove(&(pxTCB->xStateListItem));
    6030:	69bb      	ldr	r3, [r7, #24]
    6032:	3304      	adds	r3, #4
    6034:	0018      	movs	r0, r3
    6036:	4b1a      	ldr	r3, [pc, #104]	; (60a0 <xTaskGenericNotify+0x110>)
    6038:	4798      	blx	r3
			prvAddTaskToReadyList(pxTCB);
    603a:	69bb      	ldr	r3, [r7, #24]
    603c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    603e:	4b19      	ldr	r3, [pc, #100]	; (60a4 <xTaskGenericNotify+0x114>)
    6040:	681b      	ldr	r3, [r3, #0]
    6042:	429a      	cmp	r2, r3
    6044:	d903      	bls.n	604e <xTaskGenericNotify+0xbe>
    6046:	69bb      	ldr	r3, [r7, #24]
    6048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    604a:	4b16      	ldr	r3, [pc, #88]	; (60a4 <xTaskGenericNotify+0x114>)
    604c:	601a      	str	r2, [r3, #0]
    604e:	69bb      	ldr	r3, [r7, #24]
    6050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6052:	0013      	movs	r3, r2
    6054:	009b      	lsls	r3, r3, #2
    6056:	189b      	adds	r3, r3, r2
    6058:	009b      	lsls	r3, r3, #2
    605a:	4a13      	ldr	r2, [pc, #76]	; (60a8 <xTaskGenericNotify+0x118>)
    605c:	189a      	adds	r2, r3, r2
    605e:	69bb      	ldr	r3, [r7, #24]
    6060:	3304      	adds	r3, #4
    6062:	0019      	movs	r1, r3
    6064:	0010      	movs	r0, r2
    6066:	4b11      	ldr	r3, [pc, #68]	; (60ac <xTaskGenericNotify+0x11c>)
    6068:	4798      	blx	r3

			/* The task should not have been on an event list. */
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    606a:	69bb      	ldr	r3, [r7, #24]
    606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    606e:	2b00      	cmp	r3, #0
    6070:	d001      	beq.n	6076 <xTaskGenericNotify+0xe6>
    6072:	b672      	cpsid	i
    6074:	e7fe      	b.n	6074 <xTaskGenericNotify+0xe4>
				earliest possible time. */
				prvResetNextTaskUnblockTime();
			}
#endif

			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    6076:	69bb      	ldr	r3, [r7, #24]
    6078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    607a:	4b0d      	ldr	r3, [pc, #52]	; (60b0 <xTaskGenericNotify+0x120>)
    607c:	681b      	ldr	r3, [r3, #0]
    607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6080:	429a      	cmp	r2, r3
    6082:	d901      	bls.n	6088 <xTaskGenericNotify+0xf8>
				/* The notified task has a priority above the currently
				executing task so a yield is required. */
				taskYIELD_IF_USING_PREEMPTION();
    6084:	4b0b      	ldr	r3, [pc, #44]	; (60b4 <xTaskGenericNotify+0x124>)
    6086:	4798      	blx	r3
			}
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    6088:	4b0b      	ldr	r3, [pc, #44]	; (60b8 <xTaskGenericNotify+0x128>)
    608a:	4798      	blx	r3

	return xReturn;
    608c:	69fb      	ldr	r3, [r7, #28]
}
    608e:	0018      	movs	r0, r3
    6090:	46bd      	mov	sp, r7
    6092:	b008      	add	sp, #32
    6094:	bd80      	pop	{r7, pc}
    6096:	46c0      	nop			; (mov r8, r8)
    6098:	000048d1 	.word	0x000048d1
    609c:	00008660 	.word	0x00008660
    60a0:	00004737 	.word	0x00004737
    60a4:	20002748 	.word	0x20002748
    60a8:	2000266c 	.word	0x2000266c
    60ac:	00004687 	.word	0x00004687
    60b0:	20002668 	.word	0x20002668
    60b4:	000048b1 	.word	0x000048b1
    60b8:	000048f5 	.word	0x000048f5

000060bc <xTaskGenericNotifyFromISR>:

#if (configUSE_TASK_NOTIFICATIONS == 1)

BaseType_t xTaskGenericNotifyFromISR(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction,
                                     uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken)
{
    60bc:	b580      	push	{r7, lr}
    60be:	b088      	sub	sp, #32
    60c0:	af00      	add	r7, sp, #0
    60c2:	60f8      	str	r0, [r7, #12]
    60c4:	60b9      	str	r1, [r7, #8]
    60c6:	603b      	str	r3, [r7, #0]
    60c8:	1dfb      	adds	r3, r7, #7
    60ca:	701a      	strb	r2, [r3, #0]
	TCB_t *     pxTCB;
	uint8_t     ucOriginalNotifyState;
	BaseType_t  xReturn = pdPASS;
    60cc:	2301      	movs	r3, #1
    60ce:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

	configASSERT(xTaskToNotify);
    60d0:	68fb      	ldr	r3, [r7, #12]
    60d2:	2b00      	cmp	r3, #0
    60d4:	d101      	bne.n	60da <xTaskGenericNotifyFromISR+0x1e>
    60d6:	b672      	cpsid	i
    60d8:	e7fe      	b.n	60d8 <xTaskGenericNotifyFromISR+0x1c>
	simple as possible.  More information (albeit Cortex-M specific) is
	provided on the following link:
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	pxTCB = (TCB_t *)xTaskToNotify;
    60da:	68fb      	ldr	r3, [r7, #12]
    60dc:	61bb      	str	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    60de:	4b45      	ldr	r3, [pc, #276]	; (61f4 <xTaskGenericNotifyFromISR+0x138>)
    60e0:	4798      	blx	r3
    60e2:	0003      	movs	r3, r0
    60e4:	617b      	str	r3, [r7, #20]
	{
		if (pulPreviousNotificationValue != NULL) {
    60e6:	683b      	ldr	r3, [r7, #0]
    60e8:	2b00      	cmp	r3, #0
    60ea:	d003      	beq.n	60f4 <xTaskGenericNotifyFromISR+0x38>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    60ec:	69bb      	ldr	r3, [r7, #24]
    60ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    60f0:	683b      	ldr	r3, [r7, #0]
    60f2:	601a      	str	r2, [r3, #0]
		}

		ucOriginalNotifyState = pxTCB->ucNotifyState;
    60f4:	2313      	movs	r3, #19
    60f6:	18fb      	adds	r3, r7, r3
    60f8:	69ba      	ldr	r2, [r7, #24]
    60fa:	2148      	movs	r1, #72	; 0x48
    60fc:	5c52      	ldrb	r2, [r2, r1]
    60fe:	701a      	strb	r2, [r3, #0]
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    6100:	69bb      	ldr	r3, [r7, #24]
    6102:	2248      	movs	r2, #72	; 0x48
    6104:	2102      	movs	r1, #2
    6106:	5499      	strb	r1, [r3, r2]

		switch (eAction) {
    6108:	1dfb      	adds	r3, r7, #7
    610a:	781b      	ldrb	r3, [r3, #0]
    610c:	2b04      	cmp	r3, #4
    610e:	d822      	bhi.n	6156 <xTaskGenericNotifyFromISR+0x9a>
    6110:	009a      	lsls	r2, r3, #2
    6112:	4b39      	ldr	r3, [pc, #228]	; (61f8 <xTaskGenericNotifyFromISR+0x13c>)
    6114:	18d3      	adds	r3, r2, r3
    6116:	681b      	ldr	r3, [r3, #0]
    6118:	469f      	mov	pc, r3
		case eSetBits:
			pxTCB->ulNotifiedValue |= ulValue;
    611a:	69bb      	ldr	r3, [r7, #24]
    611c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    611e:	68bb      	ldr	r3, [r7, #8]
    6120:	431a      	orrs	r2, r3
    6122:	69bb      	ldr	r3, [r7, #24]
    6124:	645a      	str	r2, [r3, #68]	; 0x44
			break;
    6126:	e016      	b.n	6156 <xTaskGenericNotifyFromISR+0x9a>

		case eIncrement:
			(pxTCB->ulNotifiedValue)++;
    6128:	69bb      	ldr	r3, [r7, #24]
    612a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    612c:	1c5a      	adds	r2, r3, #1
    612e:	69bb      	ldr	r3, [r7, #24]
    6130:	645a      	str	r2, [r3, #68]	; 0x44
			break;
    6132:	e010      	b.n	6156 <xTaskGenericNotifyFromISR+0x9a>

		case eSetValueWithOverwrite:
			pxTCB->ulNotifiedValue = ulValue;
    6134:	69bb      	ldr	r3, [r7, #24]
    6136:	68ba      	ldr	r2, [r7, #8]
    6138:	645a      	str	r2, [r3, #68]	; 0x44
			break;
    613a:	e00c      	b.n	6156 <xTaskGenericNotifyFromISR+0x9a>

		case eSetValueWithoutOverwrite:
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    613c:	2313      	movs	r3, #19
    613e:	18fb      	adds	r3, r7, r3
    6140:	781b      	ldrb	r3, [r3, #0]
    6142:	2b02      	cmp	r3, #2
    6144:	d003      	beq.n	614e <xTaskGenericNotifyFromISR+0x92>
				pxTCB->ulNotifiedValue = ulValue;
    6146:	69bb      	ldr	r3, [r7, #24]
    6148:	68ba      	ldr	r2, [r7, #8]
    614a:	645a      	str	r2, [r3, #68]	; 0x44
			} else {
				/* The value could not be written to the task. */
				xReturn = pdFAIL;
			}
			break;
    614c:	e003      	b.n	6156 <xTaskGenericNotifyFromISR+0x9a>
				xReturn = pdFAIL;
    614e:	2300      	movs	r3, #0
    6150:	61fb      	str	r3, [r7, #28]
			break;
    6152:	e000      	b.n	6156 <xTaskGenericNotifyFromISR+0x9a>

		case eNoAction:
			/* The task is being notified without its notify value being
			updated. */
			break;
    6154:	46c0      	nop			; (mov r8, r8)

		traceTASK_NOTIFY_FROM_ISR();

		/* If the task is in the blocked state specifically to wait for a
		notification then unblock it now. */
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    6156:	2313      	movs	r3, #19
    6158:	18fb      	adds	r3, r7, r3
    615a:	781b      	ldrb	r3, [r3, #0]
    615c:	2b01      	cmp	r3, #1
    615e:	d140      	bne.n	61e2 <xTaskGenericNotifyFromISR+0x126>
			/* The task should not have been on an event list. */
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    6160:	69bb      	ldr	r3, [r7, #24]
    6162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6164:	2b00      	cmp	r3, #0
    6166:	d001      	beq.n	616c <xTaskGenericNotifyFromISR+0xb0>
    6168:	b672      	cpsid	i
    616a:	e7fe      	b.n	616a <xTaskGenericNotifyFromISR+0xae>

			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    616c:	4b23      	ldr	r3, [pc, #140]	; (61fc <xTaskGenericNotifyFromISR+0x140>)
    616e:	681b      	ldr	r3, [r3, #0]
    6170:	2b00      	cmp	r3, #0
    6172:	d11d      	bne.n	61b0 <xTaskGenericNotifyFromISR+0xf4>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    6174:	69bb      	ldr	r3, [r7, #24]
    6176:	3304      	adds	r3, #4
    6178:	0018      	movs	r0, r3
    617a:	4b21      	ldr	r3, [pc, #132]	; (6200 <xTaskGenericNotifyFromISR+0x144>)
    617c:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    617e:	69bb      	ldr	r3, [r7, #24]
    6180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6182:	4b20      	ldr	r3, [pc, #128]	; (6204 <xTaskGenericNotifyFromISR+0x148>)
    6184:	681b      	ldr	r3, [r3, #0]
    6186:	429a      	cmp	r2, r3
    6188:	d903      	bls.n	6192 <xTaskGenericNotifyFromISR+0xd6>
    618a:	69bb      	ldr	r3, [r7, #24]
    618c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    618e:	4b1d      	ldr	r3, [pc, #116]	; (6204 <xTaskGenericNotifyFromISR+0x148>)
    6190:	601a      	str	r2, [r3, #0]
    6192:	69bb      	ldr	r3, [r7, #24]
    6194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6196:	0013      	movs	r3, r2
    6198:	009b      	lsls	r3, r3, #2
    619a:	189b      	adds	r3, r3, r2
    619c:	009b      	lsls	r3, r3, #2
    619e:	4a1a      	ldr	r2, [pc, #104]	; (6208 <xTaskGenericNotifyFromISR+0x14c>)
    61a0:	189a      	adds	r2, r3, r2
    61a2:	69bb      	ldr	r3, [r7, #24]
    61a4:	3304      	adds	r3, #4
    61a6:	0019      	movs	r1, r3
    61a8:	0010      	movs	r0, r2
    61aa:	4b18      	ldr	r3, [pc, #96]	; (620c <xTaskGenericNotifyFromISR+0x150>)
    61ac:	4798      	blx	r3
    61ae:	e007      	b.n	61c0 <xTaskGenericNotifyFromISR+0x104>
			} else {
				/* The delayed and ready lists cannot be accessed, so hold
				this task pending until the scheduler is resumed. */
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    61b0:	69bb      	ldr	r3, [r7, #24]
    61b2:	3318      	adds	r3, #24
    61b4:	001a      	movs	r2, r3
    61b6:	4b16      	ldr	r3, [pc, #88]	; (6210 <xTaskGenericNotifyFromISR+0x154>)
    61b8:	0011      	movs	r1, r2
    61ba:	0018      	movs	r0, r3
    61bc:	4b13      	ldr	r3, [pc, #76]	; (620c <xTaskGenericNotifyFromISR+0x150>)
    61be:	4798      	blx	r3
			}

			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    61c0:	69bb      	ldr	r3, [r7, #24]
    61c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    61c4:	4b13      	ldr	r3, [pc, #76]	; (6214 <xTaskGenericNotifyFromISR+0x158>)
    61c6:	681b      	ldr	r3, [r3, #0]
    61c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    61ca:	429a      	cmp	r2, r3
    61cc:	d909      	bls.n	61e2 <xTaskGenericNotifyFromISR+0x126>
				/* The notified task has a priority above the currently
				executing task so a yield is required. */
				if (pxHigherPriorityTaskWoken != NULL) {
    61ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    61d0:	2b00      	cmp	r3, #0
    61d2:	d003      	beq.n	61dc <xTaskGenericNotifyFromISR+0x120>
					*pxHigherPriorityTaskWoken = pdTRUE;
    61d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    61d6:	2201      	movs	r2, #1
    61d8:	601a      	str	r2, [r3, #0]
    61da:	e002      	b.n	61e2 <xTaskGenericNotifyFromISR+0x126>
				} else {
					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    61dc:	4b0e      	ldr	r3, [pc, #56]	; (6218 <xTaskGenericNotifyFromISR+0x15c>)
    61de:	2201      	movs	r2, #1
    61e0:	601a      	str	r2, [r3, #0]
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
    61e2:	697b      	ldr	r3, [r7, #20]
    61e4:	0018      	movs	r0, r3
    61e6:	4b0d      	ldr	r3, [pc, #52]	; (621c <xTaskGenericNotifyFromISR+0x160>)
    61e8:	4798      	blx	r3

	return xReturn;
    61ea:	69fb      	ldr	r3, [r7, #28]
}
    61ec:	0018      	movs	r0, r3
    61ee:	46bd      	mov	sp, r7
    61f0:	b008      	add	sp, #32
    61f2:	bd80      	pop	{r7, pc}
    61f4:	00004925 	.word	0x00004925
    61f8:	00008674 	.word	0x00008674
    61fc:	20002768 	.word	0x20002768
    6200:	00004737 	.word	0x00004737
    6204:	20002748 	.word	0x20002748
    6208:	2000266c 	.word	0x2000266c
    620c:	00004687 	.word	0x00004687
    6210:	20002700 	.word	0x20002700
    6214:	20002668 	.word	0x20002668
    6218:	20002754 	.word	0x20002754
    621c:	00004931 	.word	0x00004931

00006220 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    6220:	b580      	push	{r7, lr}
    6222:	b084      	sub	sp, #16
    6224:	af00      	add	r7, sp, #0
    6226:	6078      	str	r0, [r7, #4]
    6228:	6039      	str	r1, [r7, #0]
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    622a:	4b21      	ldr	r3, [pc, #132]	; (62b0 <prvAddCurrentTaskToDelayedList+0x90>)
    622c:	681b      	ldr	r3, [r3, #0]
    622e:	60fb      	str	r3, [r7, #12]
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    6230:	4b20      	ldr	r3, [pc, #128]	; (62b4 <prvAddCurrentTaskToDelayedList+0x94>)
    6232:	681b      	ldr	r3, [r3, #0]
    6234:	3304      	adds	r3, #4
    6236:	0018      	movs	r0, r3
    6238:	4b1f      	ldr	r3, [pc, #124]	; (62b8 <prvAddCurrentTaskToDelayedList+0x98>)
    623a:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    623c:	687b      	ldr	r3, [r7, #4]
    623e:	3301      	adds	r3, #1
    6240:	d10b      	bne.n	625a <prvAddCurrentTaskToDelayedList+0x3a>
    6242:	683b      	ldr	r3, [r7, #0]
    6244:	2b00      	cmp	r3, #0
    6246:	d008      	beq.n	625a <prvAddCurrentTaskToDelayedList+0x3a>
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    6248:	4b1a      	ldr	r3, [pc, #104]	; (62b4 <prvAddCurrentTaskToDelayedList+0x94>)
    624a:	681b      	ldr	r3, [r3, #0]
    624c:	1d1a      	adds	r2, r3, #4
    624e:	4b1b      	ldr	r3, [pc, #108]	; (62bc <prvAddCurrentTaskToDelayedList+0x9c>)
    6250:	0011      	movs	r1, r2
    6252:	0018      	movs	r0, r3
    6254:	4b1a      	ldr	r3, [pc, #104]	; (62c0 <prvAddCurrentTaskToDelayedList+0xa0>)
    6256:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		(void)xCanBlockIndefinitely;
	}
#endif /* INCLUDE_vTaskSuspend */
}
    6258:	e026      	b.n	62a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    625a:	68fa      	ldr	r2, [r7, #12]
    625c:	687b      	ldr	r3, [r7, #4]
    625e:	18d3      	adds	r3, r2, r3
    6260:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    6262:	4b14      	ldr	r3, [pc, #80]	; (62b4 <prvAddCurrentTaskToDelayedList+0x94>)
    6264:	681b      	ldr	r3, [r3, #0]
    6266:	68ba      	ldr	r2, [r7, #8]
    6268:	605a      	str	r2, [r3, #4]
			if (xTimeToWake < xConstTickCount) {
    626a:	68ba      	ldr	r2, [r7, #8]
    626c:	68fb      	ldr	r3, [r7, #12]
    626e:	429a      	cmp	r2, r3
    6270:	d209      	bcs.n	6286 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    6272:	4b14      	ldr	r3, [pc, #80]	; (62c4 <prvAddCurrentTaskToDelayedList+0xa4>)
    6274:	681a      	ldr	r2, [r3, #0]
    6276:	4b0f      	ldr	r3, [pc, #60]	; (62b4 <prvAddCurrentTaskToDelayedList+0x94>)
    6278:	681b      	ldr	r3, [r3, #0]
    627a:	3304      	adds	r3, #4
    627c:	0019      	movs	r1, r3
    627e:	0010      	movs	r0, r2
    6280:	4b11      	ldr	r3, [pc, #68]	; (62c8 <prvAddCurrentTaskToDelayedList+0xa8>)
    6282:	4798      	blx	r3
}
    6284:	e010      	b.n	62a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    6286:	4b11      	ldr	r3, [pc, #68]	; (62cc <prvAddCurrentTaskToDelayedList+0xac>)
    6288:	681a      	ldr	r2, [r3, #0]
    628a:	4b0a      	ldr	r3, [pc, #40]	; (62b4 <prvAddCurrentTaskToDelayedList+0x94>)
    628c:	681b      	ldr	r3, [r3, #0]
    628e:	3304      	adds	r3, #4
    6290:	0019      	movs	r1, r3
    6292:	0010      	movs	r0, r2
    6294:	4b0c      	ldr	r3, [pc, #48]	; (62c8 <prvAddCurrentTaskToDelayedList+0xa8>)
    6296:	4798      	blx	r3
				if (xTimeToWake < xNextTaskUnblockTime) {
    6298:	4b0d      	ldr	r3, [pc, #52]	; (62d0 <prvAddCurrentTaskToDelayedList+0xb0>)
    629a:	681b      	ldr	r3, [r3, #0]
    629c:	68ba      	ldr	r2, [r7, #8]
    629e:	429a      	cmp	r2, r3
    62a0:	d202      	bcs.n	62a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    62a2:	4b0b      	ldr	r3, [pc, #44]	; (62d0 <prvAddCurrentTaskToDelayedList+0xb0>)
    62a4:	68ba      	ldr	r2, [r7, #8]
    62a6:	601a      	str	r2, [r3, #0]
}
    62a8:	46c0      	nop			; (mov r8, r8)
    62aa:	46bd      	mov	sp, r7
    62ac:	b004      	add	sp, #16
    62ae:	bd80      	pop	{r7, pc}
    62b0:	20002744 	.word	0x20002744
    62b4:	20002668 	.word	0x20002668
    62b8:	00004737 	.word	0x00004737
    62bc:	2000272c 	.word	0x2000272c
    62c0:	00004687 	.word	0x00004687
    62c4:	200026fc 	.word	0x200026fc
    62c8:	000046cb 	.word	0x000046cb
    62cc:	200026f8 	.word	0x200026f8
    62d0:	20002760 	.word	0x20002760

000062d4 <xTimerCreateTimerTask>:
                                  void *const pvTimerID, TimerCallbackFunction_t pxCallbackFunction,
                                  Timer_t *pxNewTimer) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask(void)
{
    62d4:	b590      	push	{r4, r7, lr}
    62d6:	b085      	sub	sp, #20
    62d8:	af02      	add	r7, sp, #8
	BaseType_t xReturn = pdFAIL;
    62da:	2300      	movs	r3, #0
    62dc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    62de:	4b0e      	ldr	r3, [pc, #56]	; (6318 <xTimerCreateTimerTask+0x44>)
    62e0:	4798      	blx	r3

	if (xTimerQueue != NULL) {
    62e2:	4b0e      	ldr	r3, [pc, #56]	; (631c <xTimerCreateTimerTask+0x48>)
    62e4:	681b      	ldr	r3, [r3, #0]
    62e6:	2b00      	cmp	r3, #0
    62e8:	d00c      	beq.n	6304 <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
#else
		{
			xReturn = xTaskCreate(prvTimerTask,
    62ea:	2380      	movs	r3, #128	; 0x80
    62ec:	005a      	lsls	r2, r3, #1
    62ee:	490c      	ldr	r1, [pc, #48]	; (6320 <xTimerCreateTimerTask+0x4c>)
    62f0:	480c      	ldr	r0, [pc, #48]	; (6324 <xTimerCreateTimerTask+0x50>)
    62f2:	4b0d      	ldr	r3, [pc, #52]	; (6328 <xTimerCreateTimerTask+0x54>)
    62f4:	9301      	str	r3, [sp, #4]
    62f6:	2302      	movs	r3, #2
    62f8:	9300      	str	r3, [sp, #0]
    62fa:	2300      	movs	r3, #0
    62fc:	4c0b      	ldr	r4, [pc, #44]	; (632c <xTimerCreateTimerTask+0x58>)
    62fe:	47a0      	blx	r4
    6300:	0003      	movs	r3, r0
    6302:	607b      	str	r3, [r7, #4]
#endif /* configSUPPORT_STATIC_ALLOCATION */
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT(xReturn);
    6304:	687b      	ldr	r3, [r7, #4]
    6306:	2b00      	cmp	r3, #0
    6308:	d101      	bne.n	630e <xTimerCreateTimerTask+0x3a>
    630a:	b672      	cpsid	i
    630c:	e7fe      	b.n	630c <xTimerCreateTimerTask+0x38>
	return xReturn;
    630e:	687b      	ldr	r3, [r7, #4]
}
    6310:	0018      	movs	r0, r3
    6312:	46bd      	mov	sp, r7
    6314:	b003      	add	sp, #12
    6316:	bd90      	pop	{r4, r7, pc}
    6318:	00006815 	.word	0x00006815
    631c:	2000279c 	.word	0x2000279c
    6320:	00008688 	.word	0x00008688
    6324:	00006455 	.word	0x00006455
    6328:	200027a0 	.word	0x200027a0
    632c:	0000549d 	.word	0x0000549d

00006330 <xTimerGenericCommand>:
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand(TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue,
                                BaseType_t *const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait)
{
    6330:	b590      	push	{r4, r7, lr}
    6332:	b089      	sub	sp, #36	; 0x24
    6334:	af00      	add	r7, sp, #0
    6336:	60f8      	str	r0, [r7, #12]
    6338:	60b9      	str	r1, [r7, #8]
    633a:	607a      	str	r2, [r7, #4]
    633c:	603b      	str	r3, [r7, #0]
	BaseType_t          xReturn = pdFAIL;
    633e:	2300      	movs	r3, #0
    6340:	61fb      	str	r3, [r7, #28]
	DaemonTaskMessage_t xMessage;

	configASSERT(xTimer);
    6342:	68fb      	ldr	r3, [r7, #12]
    6344:	2b00      	cmp	r3, #0
    6346:	d101      	bne.n	634c <xTimerGenericCommand+0x1c>
    6348:	b672      	cpsid	i
    634a:	e7fe      	b.n	634a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if (xTimerQueue != NULL) {
    634c:	4b1e      	ldr	r3, [pc, #120]	; (63c8 <xTimerGenericCommand+0x98>)
    634e:	681b      	ldr	r3, [r3, #0]
    6350:	2b00      	cmp	r3, #0
    6352:	d033      	beq.n	63bc <xTimerGenericCommand+0x8c>
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID                       = xCommandID;
    6354:	2310      	movs	r3, #16
    6356:	18fb      	adds	r3, r7, r3
    6358:	68ba      	ldr	r2, [r7, #8]
    635a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    635c:	2310      	movs	r3, #16
    635e:	18fb      	adds	r3, r7, r3
    6360:	687a      	ldr	r2, [r7, #4]
    6362:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    6364:	2310      	movs	r3, #16
    6366:	18fb      	adds	r3, r7, r3
    6368:	68fa      	ldr	r2, [r7, #12]
    636a:	609a      	str	r2, [r3, #8]

		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    636c:	68bb      	ldr	r3, [r7, #8]
    636e:	2b05      	cmp	r3, #5
    6370:	dc1a      	bgt.n	63a8 <xTimerGenericCommand+0x78>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    6372:	4b16      	ldr	r3, [pc, #88]	; (63cc <xTimerGenericCommand+0x9c>)
    6374:	4798      	blx	r3
    6376:	0003      	movs	r3, r0
    6378:	2b02      	cmp	r3, #2
    637a:	d10a      	bne.n	6392 <xTimerGenericCommand+0x62>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    637c:	4b12      	ldr	r3, [pc, #72]	; (63c8 <xTimerGenericCommand+0x98>)
    637e:	6818      	ldr	r0, [r3, #0]
    6380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    6382:	2310      	movs	r3, #16
    6384:	18f9      	adds	r1, r7, r3
    6386:	2300      	movs	r3, #0
    6388:	4c11      	ldr	r4, [pc, #68]	; (63d0 <xTimerGenericCommand+0xa0>)
    638a:	47a0      	blx	r4
    638c:	0003      	movs	r3, r0
    638e:	61fb      	str	r3, [r7, #28]
    6390:	e014      	b.n	63bc <xTimerGenericCommand+0x8c>
			} else {
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    6392:	4b0d      	ldr	r3, [pc, #52]	; (63c8 <xTimerGenericCommand+0x98>)
    6394:	6818      	ldr	r0, [r3, #0]
    6396:	2310      	movs	r3, #16
    6398:	18f9      	adds	r1, r7, r3
    639a:	2300      	movs	r3, #0
    639c:	2200      	movs	r2, #0
    639e:	4c0c      	ldr	r4, [pc, #48]	; (63d0 <xTimerGenericCommand+0xa0>)
    63a0:	47a0      	blx	r4
    63a2:	0003      	movs	r3, r0
    63a4:	61fb      	str	r3, [r7, #28]
    63a6:	e009      	b.n	63bc <xTimerGenericCommand+0x8c>
			}
		} else {
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    63a8:	4b07      	ldr	r3, [pc, #28]	; (63c8 <xTimerGenericCommand+0x98>)
    63aa:	6818      	ldr	r0, [r3, #0]
    63ac:	683a      	ldr	r2, [r7, #0]
    63ae:	2310      	movs	r3, #16
    63b0:	18f9      	adds	r1, r7, r3
    63b2:	2300      	movs	r3, #0
    63b4:	4c07      	ldr	r4, [pc, #28]	; (63d4 <xTimerGenericCommand+0xa4>)
    63b6:	47a0      	blx	r4
    63b8:	0003      	movs	r3, r0
    63ba:	61fb      	str	r3, [r7, #28]
		traceTIMER_COMMAND_SEND(xTimer, xCommandID, xOptionalValue, xReturn);
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    63bc:	69fb      	ldr	r3, [r7, #28]
}
    63be:	0018      	movs	r0, r3
    63c0:	46bd      	mov	sp, r7
    63c2:	b009      	add	sp, #36	; 0x24
    63c4:	bd90      	pop	{r4, r7, pc}
    63c6:	46c0      	nop			; (mov r8, r8)
    63c8:	2000279c 	.word	0x2000279c
    63cc:	00005f59 	.word	0x00005f59
    63d0:	00004c79 	.word	0x00004c79
    63d4:	00004e59 	.word	0x00004e59

000063d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer(const TickType_t xNextExpireTime, const TickType_t xTimeNow)
{
    63d8:	b590      	push	{r4, r7, lr}
    63da:	b087      	sub	sp, #28
    63dc:	af02      	add	r7, sp, #8
    63de:	6078      	str	r0, [r7, #4]
    63e0:	6039      	str	r1, [r7, #0]
	BaseType_t     xResult;
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    63e2:	4b18      	ldr	r3, [pc, #96]	; (6444 <prvProcessExpiredTimer+0x6c>)
    63e4:	681b      	ldr	r3, [r3, #0]
    63e6:	68db      	ldr	r3, [r3, #12]
    63e8:	68db      	ldr	r3, [r3, #12]
    63ea:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    63ec:	68fb      	ldr	r3, [r7, #12]
    63ee:	3304      	adds	r3, #4
    63f0:	0018      	movs	r0, r3
    63f2:	4b15      	ldr	r3, [pc, #84]	; (6448 <prvProcessExpiredTimer+0x70>)
    63f4:	4798      	blx	r3
	traceTIMER_EXPIRED(pxTimer);

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    63f6:	68fb      	ldr	r3, [r7, #12]
    63f8:	69db      	ldr	r3, [r3, #28]
    63fa:	2b01      	cmp	r3, #1
    63fc:	d119      	bne.n	6432 <prvProcessExpiredTimer+0x5a>
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if (prvInsertTimerInActiveList(
		        pxTimer, (xNextExpireTime + pxTimer->xTimerPeriodInTicks), xTimeNow, xNextExpireTime)
    63fe:	68fb      	ldr	r3, [r7, #12]
    6400:	699a      	ldr	r2, [r3, #24]
		if (prvInsertTimerInActiveList(
    6402:	687b      	ldr	r3, [r7, #4]
    6404:	18d1      	adds	r1, r2, r3
    6406:	687b      	ldr	r3, [r7, #4]
    6408:	683a      	ldr	r2, [r7, #0]
    640a:	68f8      	ldr	r0, [r7, #12]
    640c:	4c0f      	ldr	r4, [pc, #60]	; (644c <prvProcessExpiredTimer+0x74>)
    640e:	47a0      	blx	r4
    6410:	1e03      	subs	r3, r0, #0
    6412:	d00e      	beq.n	6432 <prvProcessExpiredTimer+0x5a>
		    != pdFALSE) {
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    6414:	687a      	ldr	r2, [r7, #4]
    6416:	68f8      	ldr	r0, [r7, #12]
    6418:	2300      	movs	r3, #0
    641a:	9300      	str	r3, [sp, #0]
    641c:	2300      	movs	r3, #0
    641e:	2100      	movs	r1, #0
    6420:	4c0b      	ldr	r4, [pc, #44]	; (6450 <prvProcessExpiredTimer+0x78>)
    6422:	47a0      	blx	r4
    6424:	0003      	movs	r3, r0
    6426:	60bb      	str	r3, [r7, #8]
			configASSERT(xResult);
    6428:	68bb      	ldr	r3, [r7, #8]
    642a:	2b00      	cmp	r3, #0
    642c:	d101      	bne.n	6432 <prvProcessExpiredTimer+0x5a>
    642e:	b672      	cpsid	i
    6430:	e7fe      	b.n	6430 <prvProcessExpiredTimer+0x58>
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6432:	68fb      	ldr	r3, [r7, #12]
    6434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6436:	68fa      	ldr	r2, [r7, #12]
    6438:	0010      	movs	r0, r2
    643a:	4798      	blx	r3
}
    643c:	46c0      	nop			; (mov r8, r8)
    643e:	46bd      	mov	sp, r7
    6440:	b005      	add	sp, #20
    6442:	bd90      	pop	{r4, r7, pc}
    6444:	20002794 	.word	0x20002794
    6448:	00004737 	.word	0x00004737
    644c:	000065b5 	.word	0x000065b5
    6450:	00006331 	.word	0x00006331

00006454 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask(void *pvParameters)
{
    6454:	b580      	push	{r7, lr}
    6456:	b084      	sub	sp, #16
    6458:	af00      	add	r7, sp, #0
    645a:	6078      	str	r0, [r7, #4]
#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */

	for (;;) {
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
    645c:	2308      	movs	r3, #8
    645e:	18fb      	adds	r3, r7, r3
    6460:	0018      	movs	r0, r3
    6462:	4b06      	ldr	r3, [pc, #24]	; (647c <prvTimerTask+0x28>)
    6464:	4798      	blx	r3
    6466:	0003      	movs	r3, r0
    6468:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
    646a:	68ba      	ldr	r2, [r7, #8]
    646c:	68fb      	ldr	r3, [r7, #12]
    646e:	0011      	movs	r1, r2
    6470:	0018      	movs	r0, r3
    6472:	4b03      	ldr	r3, [pc, #12]	; (6480 <prvTimerTask+0x2c>)
    6474:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    6476:	4b03      	ldr	r3, [pc, #12]	; (6484 <prvTimerTask+0x30>)
    6478:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
    647a:	e7ef      	b.n	645c <prvTimerTask+0x8>
    647c:	0000652d 	.word	0x0000652d
    6480:	00006489 	.word	0x00006489
    6484:	0000663d 	.word	0x0000663d

00006488 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask(const TickType_t xNextExpireTime, BaseType_t xListWasEmpty)
{
    6488:	b580      	push	{r7, lr}
    648a:	b084      	sub	sp, #16
    648c:	af00      	add	r7, sp, #0
    648e:	6078      	str	r0, [r7, #4]
    6490:	6039      	str	r1, [r7, #0]
	TickType_t xTimeNow;
	BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    6492:	4b1e      	ldr	r3, [pc, #120]	; (650c <prvProcessTimerOrBlockTask+0x84>)
    6494:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6496:	2308      	movs	r3, #8
    6498:	18fb      	adds	r3, r7, r3
    649a:	0018      	movs	r0, r3
    649c:	4b1c      	ldr	r3, [pc, #112]	; (6510 <prvProcessTimerOrBlockTask+0x88>)
    649e:	4798      	blx	r3
    64a0:	0003      	movs	r3, r0
    64a2:	60fb      	str	r3, [r7, #12]
		if (xTimerListsWereSwitched == pdFALSE) {
    64a4:	68bb      	ldr	r3, [r7, #8]
    64a6:	2b00      	cmp	r3, #0
    64a8:	d129      	bne.n	64fe <prvProcessTimerOrBlockTask+0x76>
			/* The tick count has not overflowed, has the timer expired? */
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    64aa:	683b      	ldr	r3, [r7, #0]
    64ac:	2b00      	cmp	r3, #0
    64ae:	d10c      	bne.n	64ca <prvProcessTimerOrBlockTask+0x42>
    64b0:	687a      	ldr	r2, [r7, #4]
    64b2:	68fb      	ldr	r3, [r7, #12]
    64b4:	429a      	cmp	r2, r3
    64b6:	d808      	bhi.n	64ca <prvProcessTimerOrBlockTask+0x42>
				(void)xTaskResumeAll();
    64b8:	4b16      	ldr	r3, [pc, #88]	; (6514 <prvProcessTimerOrBlockTask+0x8c>)
    64ba:	4798      	blx	r3
				prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
    64bc:	68fa      	ldr	r2, [r7, #12]
    64be:	687b      	ldr	r3, [r7, #4]
    64c0:	0011      	movs	r1, r2
    64c2:	0018      	movs	r0, r3
    64c4:	4b14      	ldr	r3, [pc, #80]	; (6518 <prvProcessTimerOrBlockTask+0x90>)
    64c6:	4798      	blx	r3
			}
		} else {
			(void)xTaskResumeAll();
		}
	}
}
    64c8:	e01b      	b.n	6502 <prvProcessTimerOrBlockTask+0x7a>
				if (xListWasEmpty != pdFALSE) {
    64ca:	683b      	ldr	r3, [r7, #0]
    64cc:	2b00      	cmp	r3, #0
    64ce:	d006      	beq.n	64de <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    64d0:	4b12      	ldr	r3, [pc, #72]	; (651c <prvProcessTimerOrBlockTask+0x94>)
    64d2:	681b      	ldr	r3, [r3, #0]
    64d4:	681b      	ldr	r3, [r3, #0]
    64d6:	425a      	negs	r2, r3
    64d8:	4153      	adcs	r3, r2
    64da:	b2db      	uxtb	r3, r3
    64dc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    64de:	4b10      	ldr	r3, [pc, #64]	; (6520 <prvProcessTimerOrBlockTask+0x98>)
    64e0:	6818      	ldr	r0, [r3, #0]
    64e2:	687a      	ldr	r2, [r7, #4]
    64e4:	68fb      	ldr	r3, [r7, #12]
    64e6:	1ad3      	subs	r3, r2, r3
    64e8:	683a      	ldr	r2, [r7, #0]
    64ea:	0019      	movs	r1, r3
    64ec:	4b0d      	ldr	r3, [pc, #52]	; (6524 <prvProcessTimerOrBlockTask+0x9c>)
    64ee:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    64f0:	4b08      	ldr	r3, [pc, #32]	; (6514 <prvProcessTimerOrBlockTask+0x8c>)
    64f2:	4798      	blx	r3
    64f4:	1e03      	subs	r3, r0, #0
    64f6:	d104      	bne.n	6502 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    64f8:	4b0b      	ldr	r3, [pc, #44]	; (6528 <prvProcessTimerOrBlockTask+0xa0>)
    64fa:	4798      	blx	r3
}
    64fc:	e001      	b.n	6502 <prvProcessTimerOrBlockTask+0x7a>
			(void)xTaskResumeAll();
    64fe:	4b05      	ldr	r3, [pc, #20]	; (6514 <prvProcessTimerOrBlockTask+0x8c>)
    6500:	4798      	blx	r3
}
    6502:	46c0      	nop			; (mov r8, r8)
    6504:	46bd      	mov	sp, r7
    6506:	b004      	add	sp, #16
    6508:	bd80      	pop	{r7, pc}
    650a:	46c0      	nop			; (mov r8, r8)
    650c:	00005809 	.word	0x00005809
    6510:	0000656d 	.word	0x0000656d
    6514:	00005821 	.word	0x00005821
    6518:	000063d9 	.word	0x000063d9
    651c:	20002798 	.word	0x20002798
    6520:	2000279c 	.word	0x2000279c
    6524:	00005381 	.word	0x00005381
    6528:	000048b1 	.word	0x000048b1

0000652c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime(BaseType_t *const pxListWasEmpty)
{
    652c:	b580      	push	{r7, lr}
    652e:	b084      	sub	sp, #16
    6530:	af00      	add	r7, sp, #0
    6532:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    6534:	4b0c      	ldr	r3, [pc, #48]	; (6568 <prvGetNextExpireTime+0x3c>)
    6536:	681b      	ldr	r3, [r3, #0]
    6538:	681b      	ldr	r3, [r3, #0]
    653a:	425a      	negs	r2, r3
    653c:	4153      	adcs	r3, r2
    653e:	b2db      	uxtb	r3, r3
    6540:	001a      	movs	r2, r3
    6542:	687b      	ldr	r3, [r7, #4]
    6544:	601a      	str	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    6546:	687b      	ldr	r3, [r7, #4]
    6548:	681b      	ldr	r3, [r3, #0]
    654a:	2b00      	cmp	r3, #0
    654c:	d105      	bne.n	655a <prvGetNextExpireTime+0x2e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    654e:	4b06      	ldr	r3, [pc, #24]	; (6568 <prvGetNextExpireTime+0x3c>)
    6550:	681b      	ldr	r3, [r3, #0]
    6552:	68db      	ldr	r3, [r3, #12]
    6554:	681b      	ldr	r3, [r3, #0]
    6556:	60fb      	str	r3, [r7, #12]
    6558:	e001      	b.n	655e <prvGetNextExpireTime+0x32>
	} else {
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = (TickType_t)0U;
    655a:	2300      	movs	r3, #0
    655c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    655e:	68fb      	ldr	r3, [r7, #12]
}
    6560:	0018      	movs	r0, r3
    6562:	46bd      	mov	sp, r7
    6564:	b004      	add	sp, #16
    6566:	bd80      	pop	{r7, pc}
    6568:	20002794 	.word	0x20002794

0000656c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow(BaseType_t *const pxTimerListsWereSwitched)
{
    656c:	b580      	push	{r7, lr}
    656e:	b084      	sub	sp, #16
    6570:	af00      	add	r7, sp, #0
    6572:	6078      	str	r0, [r7, #4]
	TickType_t                        xTimeNow;
	PRIVILEGED_DATA static TickType_t xLastTime
	    = (TickType_t)0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    6574:	4b0c      	ldr	r3, [pc, #48]	; (65a8 <prvSampleTimeNow+0x3c>)
    6576:	4798      	blx	r3
    6578:	0003      	movs	r3, r0
    657a:	60fb      	str	r3, [r7, #12]

	if (xTimeNow < xLastTime) {
    657c:	4b0b      	ldr	r3, [pc, #44]	; (65ac <prvSampleTimeNow+0x40>)
    657e:	681b      	ldr	r3, [r3, #0]
    6580:	68fa      	ldr	r2, [r7, #12]
    6582:	429a      	cmp	r2, r3
    6584:	d205      	bcs.n	6592 <prvSampleTimeNow+0x26>
		prvSwitchTimerLists();
    6586:	4b0a      	ldr	r3, [pc, #40]	; (65b0 <prvSampleTimeNow+0x44>)
    6588:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    658a:	687b      	ldr	r3, [r7, #4]
    658c:	2201      	movs	r2, #1
    658e:	601a      	str	r2, [r3, #0]
    6590:	e002      	b.n	6598 <prvSampleTimeNow+0x2c>
	} else {
		*pxTimerListsWereSwitched = pdFALSE;
    6592:	687b      	ldr	r3, [r7, #4]
    6594:	2200      	movs	r2, #0
    6596:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    6598:	4b04      	ldr	r3, [pc, #16]	; (65ac <prvSampleTimeNow+0x40>)
    659a:	68fa      	ldr	r2, [r7, #12]
    659c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    659e:	68fb      	ldr	r3, [r7, #12]
}
    65a0:	0018      	movs	r0, r3
    65a2:	46bd      	mov	sp, r7
    65a4:	b004      	add	sp, #16
    65a6:	bd80      	pop	{r7, pc}
    65a8:	00005955 	.word	0x00005955
    65ac:	200027a4 	.word	0x200027a4
    65b0:	00006755 	.word	0x00006755

000065b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    65b4:	b580      	push	{r7, lr}
    65b6:	b086      	sub	sp, #24
    65b8:	af00      	add	r7, sp, #0
    65ba:	60f8      	str	r0, [r7, #12]
    65bc:	60b9      	str	r1, [r7, #8]
    65be:	607a      	str	r2, [r7, #4]
    65c0:	603b      	str	r3, [r7, #0]
	BaseType_t xProcessTimerNow = pdFALSE;
    65c2:	2300      	movs	r3, #0
    65c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    65c6:	68fb      	ldr	r3, [r7, #12]
    65c8:	68ba      	ldr	r2, [r7, #8]
    65ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    65cc:	68fb      	ldr	r3, [r7, #12]
    65ce:	68fa      	ldr	r2, [r7, #12]
    65d0:	611a      	str	r2, [r3, #16]

	if (xNextExpiryTime <= xTimeNow) {
    65d2:	68ba      	ldr	r2, [r7, #8]
    65d4:	687b      	ldr	r3, [r7, #4]
    65d6:	429a      	cmp	r2, r3
    65d8:	d812      	bhi.n	6600 <prvInsertTimerInActiveList+0x4c>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    65da:	687a      	ldr	r2, [r7, #4]
    65dc:	683b      	ldr	r3, [r7, #0]
    65de:	1ad2      	subs	r2, r2, r3
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
    65e0:	68fb      	ldr	r3, [r7, #12]
    65e2:	699b      	ldr	r3, [r3, #24]
		if (((TickType_t)(xTimeNow - xCommandTime))
    65e4:	429a      	cmp	r2, r3
    65e6:	d302      	bcc.n	65ee <prvInsertTimerInActiveList+0x3a>
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    65e8:	2301      	movs	r3, #1
    65ea:	617b      	str	r3, [r7, #20]
    65ec:	e01b      	b.n	6626 <prvInsertTimerInActiveList+0x72>
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    65ee:	4b10      	ldr	r3, [pc, #64]	; (6630 <prvInsertTimerInActiveList+0x7c>)
    65f0:	681a      	ldr	r2, [r3, #0]
    65f2:	68fb      	ldr	r3, [r7, #12]
    65f4:	3304      	adds	r3, #4
    65f6:	0019      	movs	r1, r3
    65f8:	0010      	movs	r0, r2
    65fa:	4b0e      	ldr	r3, [pc, #56]	; (6634 <prvInsertTimerInActiveList+0x80>)
    65fc:	4798      	blx	r3
    65fe:	e012      	b.n	6626 <prvInsertTimerInActiveList+0x72>
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    6600:	687a      	ldr	r2, [r7, #4]
    6602:	683b      	ldr	r3, [r7, #0]
    6604:	429a      	cmp	r2, r3
    6606:	d206      	bcs.n	6616 <prvInsertTimerInActiveList+0x62>
    6608:	68ba      	ldr	r2, [r7, #8]
    660a:	683b      	ldr	r3, [r7, #0]
    660c:	429a      	cmp	r2, r3
    660e:	d302      	bcc.n	6616 <prvInsertTimerInActiveList+0x62>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    6610:	2301      	movs	r3, #1
    6612:	617b      	str	r3, [r7, #20]
    6614:	e007      	b.n	6626 <prvInsertTimerInActiveList+0x72>
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    6616:	4b08      	ldr	r3, [pc, #32]	; (6638 <prvInsertTimerInActiveList+0x84>)
    6618:	681a      	ldr	r2, [r3, #0]
    661a:	68fb      	ldr	r3, [r7, #12]
    661c:	3304      	adds	r3, #4
    661e:	0019      	movs	r1, r3
    6620:	0010      	movs	r0, r2
    6622:	4b04      	ldr	r3, [pc, #16]	; (6634 <prvInsertTimerInActiveList+0x80>)
    6624:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    6626:	697b      	ldr	r3, [r7, #20]
}
    6628:	0018      	movs	r0, r3
    662a:	46bd      	mov	sp, r7
    662c:	b006      	add	sp, #24
    662e:	bd80      	pop	{r7, pc}
    6630:	20002798 	.word	0x20002798
    6634:	000046cb 	.word	0x000046cb
    6638:	20002794 	.word	0x20002794

0000663c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void prvProcessReceivedCommands(void)
{
    663c:	b590      	push	{r4, r7, lr}
    663e:	b08b      	sub	sp, #44	; 0x2c
    6640:	af02      	add	r7, sp, #8
	DaemonTaskMessage_t xMessage;
	Timer_t *           pxTimer;
	BaseType_t          xTimerListsWereSwitched, xResult;
	TickType_t          xTimeNow;

	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    6642:	e068      	b.n	6716 <prvProcessReceivedCommands+0xda>
		}
#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if (xMessage.xMessageID >= (BaseType_t)0) {
    6644:	2308      	movs	r3, #8
    6646:	18fb      	adds	r3, r7, r3
    6648:	681b      	ldr	r3, [r3, #0]
    664a:	2b00      	cmp	r3, #0
    664c:	db63      	blt.n	6716 <prvProcessReceivedCommands+0xda>
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    664e:	2308      	movs	r3, #8
    6650:	18fb      	adds	r3, r7, r3
    6652:	689b      	ldr	r3, [r3, #8]
    6654:	61fb      	str	r3, [r7, #28]

			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    6656:	69fb      	ldr	r3, [r7, #28]
    6658:	695b      	ldr	r3, [r3, #20]
    665a:	2b00      	cmp	r3, #0
    665c:	d004      	beq.n	6668 <prvProcessReceivedCommands+0x2c>
			    == pdFALSE) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
			{
				/* The timer is in a list, remove it. */
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    665e:	69fb      	ldr	r3, [r7, #28]
    6660:	3304      	adds	r3, #4
    6662:	0018      	movs	r0, r3
    6664:	4b33      	ldr	r3, [pc, #204]	; (6734 <prvProcessReceivedCommands+0xf8>)
    6666:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6668:	1d3b      	adds	r3, r7, #4
    666a:	0018      	movs	r0, r3
    666c:	4b32      	ldr	r3, [pc, #200]	; (6738 <prvProcessReceivedCommands+0xfc>)
    666e:	4798      	blx	r3
    6670:	0003      	movs	r3, r0
    6672:	61bb      	str	r3, [r7, #24]

			switch (xMessage.xMessageID) {
    6674:	2308      	movs	r3, #8
    6676:	18fb      	adds	r3, r7, r3
    6678:	681b      	ldr	r3, [r3, #0]
    667a:	2b09      	cmp	r3, #9
    667c:	d84a      	bhi.n	6714 <prvProcessReceivedCommands+0xd8>
    667e:	009a      	lsls	r2, r3, #2
    6680:	4b2e      	ldr	r3, [pc, #184]	; (673c <prvProcessReceivedCommands+0x100>)
    6682:	18d3      	adds	r3, r2, r3
    6684:	681b      	ldr	r3, [r3, #0]
    6686:	469f      	mov	pc, r3
			case tmrCOMMAND_RESET:
			case tmrCOMMAND_RESET_FROM_ISR:
			case tmrCOMMAND_START_DONT_TRACE:
				/* Start or restart a timer. */
				if (prvInsertTimerInActiveList(pxTimer,
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    6688:	2308      	movs	r3, #8
    668a:	18fb      	adds	r3, r7, r3
    668c:	685a      	ldr	r2, [r3, #4]
    668e:	69fb      	ldr	r3, [r7, #28]
    6690:	699b      	ldr	r3, [r3, #24]
				if (prvInsertTimerInActiveList(pxTimer,
    6692:	18d1      	adds	r1, r2, r3
    6694:	2308      	movs	r3, #8
    6696:	18fb      	adds	r3, r7, r3
    6698:	685b      	ldr	r3, [r3, #4]
    669a:	69ba      	ldr	r2, [r7, #24]
    669c:	69f8      	ldr	r0, [r7, #28]
    669e:	4c28      	ldr	r4, [pc, #160]	; (6740 <prvProcessReceivedCommands+0x104>)
    66a0:	47a0      	blx	r4
    66a2:	1e03      	subs	r3, r0, #0
    66a4:	d037      	beq.n	6716 <prvProcessReceivedCommands+0xda>
				                               xTimeNow,
				                               xMessage.u.xTimerParameters.xMessageValue)
				    != pdFALSE) {
					/* The timer expired before it was added to the active
					timer list.  Process it now. */
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    66a6:	69fb      	ldr	r3, [r7, #28]
    66a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66aa:	69fa      	ldr	r2, [r7, #28]
    66ac:	0010      	movs	r0, r2
    66ae:	4798      	blx	r3
					traceTIMER_EXPIRED(pxTimer);

					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    66b0:	69fb      	ldr	r3, [r7, #28]
    66b2:	69db      	ldr	r3, [r3, #28]
    66b4:	2b01      	cmp	r3, #1
    66b6:	d12e      	bne.n	6716 <prvProcessReceivedCommands+0xda>
						xResult = xTimerGenericCommand(pxTimer,
						                               tmrCOMMAND_START_DONT_TRACE,
						                               xMessage.u.xTimerParameters.xMessageValue
    66b8:	2308      	movs	r3, #8
    66ba:	18fb      	adds	r3, r7, r3
    66bc:	685a      	ldr	r2, [r3, #4]
						                                   + pxTimer->xTimerPeriodInTicks,
    66be:	69fb      	ldr	r3, [r7, #28]
    66c0:	699b      	ldr	r3, [r3, #24]
						xResult = xTimerGenericCommand(pxTimer,
    66c2:	18d2      	adds	r2, r2, r3
    66c4:	69f8      	ldr	r0, [r7, #28]
    66c6:	2300      	movs	r3, #0
    66c8:	9300      	str	r3, [sp, #0]
    66ca:	2300      	movs	r3, #0
    66cc:	2100      	movs	r1, #0
    66ce:	4c1d      	ldr	r4, [pc, #116]	; (6744 <prvProcessReceivedCommands+0x108>)
    66d0:	47a0      	blx	r4
    66d2:	0003      	movs	r3, r0
    66d4:	617b      	str	r3, [r7, #20]
						                               NULL,
						                               tmrNO_DELAY);
						configASSERT(xResult);
    66d6:	697b      	ldr	r3, [r7, #20]
    66d8:	2b00      	cmp	r3, #0
    66da:	d11c      	bne.n	6716 <prvProcessReceivedCommands+0xda>
    66dc:	b672      	cpsid	i
    66de:	e7fe      	b.n	66de <prvProcessReceivedCommands+0xa2>
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD:
			case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    66e0:	2308      	movs	r3, #8
    66e2:	18fb      	adds	r3, r7, r3
    66e4:	685a      	ldr	r2, [r3, #4]
    66e6:	69fb      	ldr	r3, [r7, #28]
    66e8:	619a      	str	r2, [r3, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    66ea:	69fb      	ldr	r3, [r7, #28]
    66ec:	699b      	ldr	r3, [r3, #24]
    66ee:	2b00      	cmp	r3, #0
    66f0:	d101      	bne.n	66f6 <prvProcessReceivedCommands+0xba>
    66f2:	b672      	cpsid	i
    66f4:	e7fe      	b.n	66f4 <prvProcessReceivedCommands+0xb8>
				therefore set to the current time, and as the period cannot
				be zero the next expiry time can only be in the future,
				meaning (unlike for the xTimerStart() case above) there is
				no fail case that needs to be handled here. */
				(void)prvInsertTimerInActiveList(
				    pxTimer, (xTimeNow + pxTimer->xTimerPeriodInTicks), xTimeNow, xTimeNow);
    66f6:	69fb      	ldr	r3, [r7, #28]
    66f8:	699a      	ldr	r2, [r3, #24]
				(void)prvInsertTimerInActiveList(
    66fa:	69bb      	ldr	r3, [r7, #24]
    66fc:	18d1      	adds	r1, r2, r3
    66fe:	69bb      	ldr	r3, [r7, #24]
    6700:	69ba      	ldr	r2, [r7, #24]
    6702:	69f8      	ldr	r0, [r7, #28]
    6704:	4c0e      	ldr	r4, [pc, #56]	; (6740 <prvProcessReceivedCommands+0x104>)
    6706:	47a0      	blx	r4
				break;
    6708:	e005      	b.n	6716 <prvProcessReceivedCommands+0xda>
allocated. */
#if ((configSUPPORT_DYNAMIC_ALLOCATION == 1) && (configSUPPORT_STATIC_ALLOCATION == 0))
			{
				/* The timer can only have been allocated dynamically -
				free it again. */
				vPortFree(pxTimer);
    670a:	69fb      	ldr	r3, [r7, #28]
    670c:	0018      	movs	r0, r3
    670e:	4b0e      	ldr	r3, [pc, #56]	; (6748 <prvProcessReceivedCommands+0x10c>)
    6710:	4798      	blx	r3
				} else {
					mtCOVERAGE_TEST_MARKER();
				}
			}
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
			break;
    6712:	e000      	b.n	6716 <prvProcessReceivedCommands+0xda>

			default:
				/* Don't expect to get here. */
				break;
    6714:	46c0      	nop			; (mov r8, r8)
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    6716:	4b0d      	ldr	r3, [pc, #52]	; (674c <prvProcessReceivedCommands+0x110>)
    6718:	681b      	ldr	r3, [r3, #0]
    671a:	2208      	movs	r2, #8
    671c:	18b9      	adds	r1, r7, r2
    671e:	2200      	movs	r2, #0
    6720:	0018      	movs	r0, r3
    6722:	4b0b      	ldr	r3, [pc, #44]	; (6750 <prvProcessReceivedCommands+0x114>)
    6724:	4798      	blx	r3
    6726:	1e03      	subs	r3, r0, #0
    6728:	d18c      	bne.n	6644 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    672a:	46c0      	nop			; (mov r8, r8)
    672c:	46bd      	mov	sp, r7
    672e:	b009      	add	sp, #36	; 0x24
    6730:	bd90      	pop	{r4, r7, pc}
    6732:	46c0      	nop			; (mov r8, r8)
    6734:	00004737 	.word	0x00004737
    6738:	0000656d 	.word	0x0000656d
    673c:	00008690 	.word	0x00008690
    6740:	000065b5 	.word	0x000065b5
    6744:	00006331 	.word	0x00006331
    6748:	00004a91 	.word	0x00004a91
    674c:	2000279c 	.word	0x2000279c
    6750:	00004f79 	.word	0x00004f79

00006754 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists(void)
{
    6754:	b590      	push	{r4, r7, lr}
    6756:	b089      	sub	sp, #36	; 0x24
    6758:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    675a:	e03e      	b.n	67da <prvSwitchTimerLists+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    675c:	4b28      	ldr	r3, [pc, #160]	; (6800 <prvSwitchTimerLists+0xac>)
    675e:	681b      	ldr	r3, [r3, #0]
    6760:	68db      	ldr	r3, [r3, #12]
    6762:	681b      	ldr	r3, [r3, #0]
    6764:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    6766:	4b26      	ldr	r3, [pc, #152]	; (6800 <prvSwitchTimerLists+0xac>)
    6768:	681b      	ldr	r3, [r3, #0]
    676a:	68db      	ldr	r3, [r3, #12]
    676c:	68db      	ldr	r3, [r3, #12]
    676e:	613b      	str	r3, [r7, #16]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    6770:	693b      	ldr	r3, [r7, #16]
    6772:	3304      	adds	r3, #4
    6774:	0018      	movs	r0, r3
    6776:	4b23      	ldr	r3, [pc, #140]	; (6804 <prvSwitchTimerLists+0xb0>)
    6778:	4798      	blx	r3
		traceTIMER_EXPIRED(pxTimer);

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    677a:	693b      	ldr	r3, [r7, #16]
    677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    677e:	693a      	ldr	r2, [r7, #16]
    6780:	0010      	movs	r0, r2
    6782:	4798      	blx	r3

		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6784:	693b      	ldr	r3, [r7, #16]
    6786:	69db      	ldr	r3, [r3, #28]
    6788:	2b01      	cmp	r3, #1
    678a:	d126      	bne.n	67da <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    678c:	693b      	ldr	r3, [r7, #16]
    678e:	699a      	ldr	r2, [r3, #24]
    6790:	697b      	ldr	r3, [r7, #20]
    6792:	18d3      	adds	r3, r2, r3
    6794:	60fb      	str	r3, [r7, #12]
			if (xReloadTime > xNextExpireTime) {
    6796:	68fa      	ldr	r2, [r7, #12]
    6798:	697b      	ldr	r3, [r7, #20]
    679a:	429a      	cmp	r2, r3
    679c:	d90e      	bls.n	67bc <prvSwitchTimerLists+0x68>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    679e:	693b      	ldr	r3, [r7, #16]
    67a0:	68fa      	ldr	r2, [r7, #12]
    67a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    67a4:	693b      	ldr	r3, [r7, #16]
    67a6:	693a      	ldr	r2, [r7, #16]
    67a8:	611a      	str	r2, [r3, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    67aa:	4b15      	ldr	r3, [pc, #84]	; (6800 <prvSwitchTimerLists+0xac>)
    67ac:	681a      	ldr	r2, [r3, #0]
    67ae:	693b      	ldr	r3, [r7, #16]
    67b0:	3304      	adds	r3, #4
    67b2:	0019      	movs	r1, r3
    67b4:	0010      	movs	r0, r2
    67b6:	4b14      	ldr	r3, [pc, #80]	; (6808 <prvSwitchTimerLists+0xb4>)
    67b8:	4798      	blx	r3
    67ba:	e00e      	b.n	67da <prvSwitchTimerLists+0x86>
			} else {
				xResult
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    67bc:	697a      	ldr	r2, [r7, #20]
    67be:	6938      	ldr	r0, [r7, #16]
    67c0:	2300      	movs	r3, #0
    67c2:	9300      	str	r3, [sp, #0]
    67c4:	2300      	movs	r3, #0
    67c6:	2100      	movs	r1, #0
    67c8:	4c10      	ldr	r4, [pc, #64]	; (680c <prvSwitchTimerLists+0xb8>)
    67ca:	47a0      	blx	r4
    67cc:	0003      	movs	r3, r0
    67ce:	60bb      	str	r3, [r7, #8]
				configASSERT(xResult);
    67d0:	68bb      	ldr	r3, [r7, #8]
    67d2:	2b00      	cmp	r3, #0
    67d4:	d101      	bne.n	67da <prvSwitchTimerLists+0x86>
    67d6:	b672      	cpsid	i
    67d8:	e7fe      	b.n	67d8 <prvSwitchTimerLists+0x84>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    67da:	4b09      	ldr	r3, [pc, #36]	; (6800 <prvSwitchTimerLists+0xac>)
    67dc:	681b      	ldr	r3, [r3, #0]
    67de:	681b      	ldr	r3, [r3, #0]
    67e0:	2b00      	cmp	r3, #0
    67e2:	d1bb      	bne.n	675c <prvSwitchTimerLists+0x8>
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp              = pxCurrentTimerList;
    67e4:	4b06      	ldr	r3, [pc, #24]	; (6800 <prvSwitchTimerLists+0xac>)
    67e6:	681b      	ldr	r3, [r3, #0]
    67e8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList  = pxOverflowTimerList;
    67ea:	4b09      	ldr	r3, [pc, #36]	; (6810 <prvSwitchTimerLists+0xbc>)
    67ec:	681a      	ldr	r2, [r3, #0]
    67ee:	4b04      	ldr	r3, [pc, #16]	; (6800 <prvSwitchTimerLists+0xac>)
    67f0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    67f2:	4b07      	ldr	r3, [pc, #28]	; (6810 <prvSwitchTimerLists+0xbc>)
    67f4:	687a      	ldr	r2, [r7, #4]
    67f6:	601a      	str	r2, [r3, #0]
}
    67f8:	46c0      	nop			; (mov r8, r8)
    67fa:	46bd      	mov	sp, r7
    67fc:	b007      	add	sp, #28
    67fe:	bd90      	pop	{r4, r7, pc}
    6800:	20002794 	.word	0x20002794
    6804:	00004737 	.word	0x00004737
    6808:	000046cb 	.word	0x000046cb
    680c:	00006331 	.word	0x00006331
    6810:	20002798 	.word	0x20002798

00006814 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    6814:	b580      	push	{r7, lr}
    6816:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    6818:	4b10      	ldr	r3, [pc, #64]	; (685c <prvCheckForValidListAndQueue+0x48>)
    681a:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    681c:	4b10      	ldr	r3, [pc, #64]	; (6860 <prvCheckForValidListAndQueue+0x4c>)
    681e:	681b      	ldr	r3, [r3, #0]
    6820:	2b00      	cmp	r3, #0
    6822:	d115      	bne.n	6850 <prvCheckForValidListAndQueue+0x3c>
			vListInitialise(&xActiveTimerList1);
    6824:	4b0f      	ldr	r3, [pc, #60]	; (6864 <prvCheckForValidListAndQueue+0x50>)
    6826:	0018      	movs	r0, r3
    6828:	4b0f      	ldr	r3, [pc, #60]	; (6868 <prvCheckForValidListAndQueue+0x54>)
    682a:	4798      	blx	r3
			vListInitialise(&xActiveTimerList2);
    682c:	4b0f      	ldr	r3, [pc, #60]	; (686c <prvCheckForValidListAndQueue+0x58>)
    682e:	0018      	movs	r0, r3
    6830:	4b0d      	ldr	r3, [pc, #52]	; (6868 <prvCheckForValidListAndQueue+0x54>)
    6832:	4798      	blx	r3
			pxCurrentTimerList  = &xActiveTimerList1;
    6834:	4b0e      	ldr	r3, [pc, #56]	; (6870 <prvCheckForValidListAndQueue+0x5c>)
    6836:	4a0b      	ldr	r2, [pc, #44]	; (6864 <prvCheckForValidListAndQueue+0x50>)
    6838:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    683a:	4b0e      	ldr	r3, [pc, #56]	; (6874 <prvCheckForValidListAndQueue+0x60>)
    683c:	4a0b      	ldr	r2, [pc, #44]	; (686c <prvCheckForValidListAndQueue+0x58>)
    683e:	601a      	str	r2, [r3, #0]
				                                 &(ucStaticTimerQueueStorage[0]),
				                                 &xStaticTimerQueue);
			}
#else
			{
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    6840:	2200      	movs	r2, #0
    6842:	210c      	movs	r1, #12
    6844:	2002      	movs	r0, #2
    6846:	4b0c      	ldr	r3, [pc, #48]	; (6878 <prvCheckForValidListAndQueue+0x64>)
    6848:	4798      	blx	r3
    684a:	0002      	movs	r2, r0
    684c:	4b04      	ldr	r3, [pc, #16]	; (6860 <prvCheckForValidListAndQueue+0x4c>)
    684e:	601a      	str	r2, [r3, #0]
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    6850:	4b0a      	ldr	r3, [pc, #40]	; (687c <prvCheckForValidListAndQueue+0x68>)
    6852:	4798      	blx	r3
}
    6854:	46c0      	nop			; (mov r8, r8)
    6856:	46bd      	mov	sp, r7
    6858:	bd80      	pop	{r7, pc}
    685a:	46c0      	nop			; (mov r8, r8)
    685c:	000048d1 	.word	0x000048d1
    6860:	2000279c 	.word	0x2000279c
    6864:	2000276c 	.word	0x2000276c
    6868:	00004635 	.word	0x00004635
    686c:	20002780 	.word	0x20002780
    6870:	20002794 	.word	0x20002794
    6874:	20002798 	.word	0x20002798
    6878:	00004b69 	.word	0x00004b69
    687c:	000048f5 	.word	0x000048f5

00006880 <__aeabi_cdrcmple>:
    6880:	4684      	mov	ip, r0
    6882:	1c10      	adds	r0, r2, #0
    6884:	4662      	mov	r2, ip
    6886:	468c      	mov	ip, r1
    6888:	1c19      	adds	r1, r3, #0
    688a:	4663      	mov	r3, ip
    688c:	e000      	b.n	6890 <__aeabi_cdcmpeq>
    688e:	46c0      	nop			; (mov r8, r8)

00006890 <__aeabi_cdcmpeq>:
    6890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6892:	f000 ff15 	bl	76c0 <__ledf2>
    6896:	2800      	cmp	r0, #0
    6898:	d401      	bmi.n	689e <__aeabi_cdcmpeq+0xe>
    689a:	2100      	movs	r1, #0
    689c:	42c8      	cmn	r0, r1
    689e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000068a0 <__aeabi_dcmpeq>:
    68a0:	b510      	push	{r4, lr}
    68a2:	f000 fe6f 	bl	7584 <__eqdf2>
    68a6:	4240      	negs	r0, r0
    68a8:	3001      	adds	r0, #1
    68aa:	bd10      	pop	{r4, pc}

000068ac <__aeabi_dcmplt>:
    68ac:	b510      	push	{r4, lr}
    68ae:	f000 ff07 	bl	76c0 <__ledf2>
    68b2:	2800      	cmp	r0, #0
    68b4:	db01      	blt.n	68ba <__aeabi_dcmplt+0xe>
    68b6:	2000      	movs	r0, #0
    68b8:	bd10      	pop	{r4, pc}
    68ba:	2001      	movs	r0, #1
    68bc:	bd10      	pop	{r4, pc}
    68be:	46c0      	nop			; (mov r8, r8)

000068c0 <__aeabi_dcmple>:
    68c0:	b510      	push	{r4, lr}
    68c2:	f000 fefd 	bl	76c0 <__ledf2>
    68c6:	2800      	cmp	r0, #0
    68c8:	dd01      	ble.n	68ce <__aeabi_dcmple+0xe>
    68ca:	2000      	movs	r0, #0
    68cc:	bd10      	pop	{r4, pc}
    68ce:	2001      	movs	r0, #1
    68d0:	bd10      	pop	{r4, pc}
    68d2:	46c0      	nop			; (mov r8, r8)

000068d4 <__aeabi_dcmpgt>:
    68d4:	b510      	push	{r4, lr}
    68d6:	f000 fe8f 	bl	75f8 <__gedf2>
    68da:	2800      	cmp	r0, #0
    68dc:	dc01      	bgt.n	68e2 <__aeabi_dcmpgt+0xe>
    68de:	2000      	movs	r0, #0
    68e0:	bd10      	pop	{r4, pc}
    68e2:	2001      	movs	r0, #1
    68e4:	bd10      	pop	{r4, pc}
    68e6:	46c0      	nop			; (mov r8, r8)

000068e8 <__aeabi_dcmpge>:
    68e8:	b510      	push	{r4, lr}
    68ea:	f000 fe85 	bl	75f8 <__gedf2>
    68ee:	2800      	cmp	r0, #0
    68f0:	da01      	bge.n	68f6 <__aeabi_dcmpge+0xe>
    68f2:	2000      	movs	r0, #0
    68f4:	bd10      	pop	{r4, pc}
    68f6:	2001      	movs	r0, #1
    68f8:	bd10      	pop	{r4, pc}
    68fa:	46c0      	nop			; (mov r8, r8)

000068fc <__aeabi_dadd>:
    68fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68fe:	4645      	mov	r5, r8
    6900:	46de      	mov	lr, fp
    6902:	4657      	mov	r7, sl
    6904:	464e      	mov	r6, r9
    6906:	030c      	lsls	r4, r1, #12
    6908:	b5e0      	push	{r5, r6, r7, lr}
    690a:	004e      	lsls	r6, r1, #1
    690c:	0fc9      	lsrs	r1, r1, #31
    690e:	4688      	mov	r8, r1
    6910:	000d      	movs	r5, r1
    6912:	0a61      	lsrs	r1, r4, #9
    6914:	0f44      	lsrs	r4, r0, #29
    6916:	430c      	orrs	r4, r1
    6918:	00c7      	lsls	r7, r0, #3
    691a:	0319      	lsls	r1, r3, #12
    691c:	0058      	lsls	r0, r3, #1
    691e:	0fdb      	lsrs	r3, r3, #31
    6920:	469b      	mov	fp, r3
    6922:	0a4b      	lsrs	r3, r1, #9
    6924:	0f51      	lsrs	r1, r2, #29
    6926:	430b      	orrs	r3, r1
    6928:	0d76      	lsrs	r6, r6, #21
    692a:	0d40      	lsrs	r0, r0, #21
    692c:	0019      	movs	r1, r3
    692e:	00d2      	lsls	r2, r2, #3
    6930:	45d8      	cmp	r8, fp
    6932:	d100      	bne.n	6936 <__aeabi_dadd+0x3a>
    6934:	e0ae      	b.n	6a94 <__aeabi_dadd+0x198>
    6936:	1a35      	subs	r5, r6, r0
    6938:	2d00      	cmp	r5, #0
    693a:	dc00      	bgt.n	693e <__aeabi_dadd+0x42>
    693c:	e0f6      	b.n	6b2c <__aeabi_dadd+0x230>
    693e:	2800      	cmp	r0, #0
    6940:	d10f      	bne.n	6962 <__aeabi_dadd+0x66>
    6942:	4313      	orrs	r3, r2
    6944:	d100      	bne.n	6948 <__aeabi_dadd+0x4c>
    6946:	e0db      	b.n	6b00 <__aeabi_dadd+0x204>
    6948:	1e6b      	subs	r3, r5, #1
    694a:	2b00      	cmp	r3, #0
    694c:	d000      	beq.n	6950 <__aeabi_dadd+0x54>
    694e:	e137      	b.n	6bc0 <__aeabi_dadd+0x2c4>
    6950:	1aba      	subs	r2, r7, r2
    6952:	4297      	cmp	r7, r2
    6954:	41bf      	sbcs	r7, r7
    6956:	1a64      	subs	r4, r4, r1
    6958:	427f      	negs	r7, r7
    695a:	1be4      	subs	r4, r4, r7
    695c:	2601      	movs	r6, #1
    695e:	0017      	movs	r7, r2
    6960:	e024      	b.n	69ac <__aeabi_dadd+0xb0>
    6962:	4bc6      	ldr	r3, [pc, #792]	; (6c7c <__aeabi_dadd+0x380>)
    6964:	429e      	cmp	r6, r3
    6966:	d04d      	beq.n	6a04 <__aeabi_dadd+0x108>
    6968:	2380      	movs	r3, #128	; 0x80
    696a:	041b      	lsls	r3, r3, #16
    696c:	4319      	orrs	r1, r3
    696e:	2d38      	cmp	r5, #56	; 0x38
    6970:	dd00      	ble.n	6974 <__aeabi_dadd+0x78>
    6972:	e107      	b.n	6b84 <__aeabi_dadd+0x288>
    6974:	2d1f      	cmp	r5, #31
    6976:	dd00      	ble.n	697a <__aeabi_dadd+0x7e>
    6978:	e138      	b.n	6bec <__aeabi_dadd+0x2f0>
    697a:	2020      	movs	r0, #32
    697c:	1b43      	subs	r3, r0, r5
    697e:	469a      	mov	sl, r3
    6980:	000b      	movs	r3, r1
    6982:	4650      	mov	r0, sl
    6984:	4083      	lsls	r3, r0
    6986:	4699      	mov	r9, r3
    6988:	0013      	movs	r3, r2
    698a:	4648      	mov	r0, r9
    698c:	40eb      	lsrs	r3, r5
    698e:	4318      	orrs	r0, r3
    6990:	0003      	movs	r3, r0
    6992:	4650      	mov	r0, sl
    6994:	4082      	lsls	r2, r0
    6996:	1e50      	subs	r0, r2, #1
    6998:	4182      	sbcs	r2, r0
    699a:	40e9      	lsrs	r1, r5
    699c:	431a      	orrs	r2, r3
    699e:	1aba      	subs	r2, r7, r2
    69a0:	1a61      	subs	r1, r4, r1
    69a2:	4297      	cmp	r7, r2
    69a4:	41a4      	sbcs	r4, r4
    69a6:	0017      	movs	r7, r2
    69a8:	4264      	negs	r4, r4
    69aa:	1b0c      	subs	r4, r1, r4
    69ac:	0223      	lsls	r3, r4, #8
    69ae:	d562      	bpl.n	6a76 <__aeabi_dadd+0x17a>
    69b0:	0264      	lsls	r4, r4, #9
    69b2:	0a65      	lsrs	r5, r4, #9
    69b4:	2d00      	cmp	r5, #0
    69b6:	d100      	bne.n	69ba <__aeabi_dadd+0xbe>
    69b8:	e0df      	b.n	6b7a <__aeabi_dadd+0x27e>
    69ba:	0028      	movs	r0, r5
    69bc:	f001 fcba 	bl	8334 <__clzsi2>
    69c0:	0003      	movs	r3, r0
    69c2:	3b08      	subs	r3, #8
    69c4:	2b1f      	cmp	r3, #31
    69c6:	dd00      	ble.n	69ca <__aeabi_dadd+0xce>
    69c8:	e0d2      	b.n	6b70 <__aeabi_dadd+0x274>
    69ca:	2220      	movs	r2, #32
    69cc:	003c      	movs	r4, r7
    69ce:	1ad2      	subs	r2, r2, r3
    69d0:	409d      	lsls	r5, r3
    69d2:	40d4      	lsrs	r4, r2
    69d4:	409f      	lsls	r7, r3
    69d6:	4325      	orrs	r5, r4
    69d8:	429e      	cmp	r6, r3
    69da:	dd00      	ble.n	69de <__aeabi_dadd+0xe2>
    69dc:	e0c4      	b.n	6b68 <__aeabi_dadd+0x26c>
    69de:	1b9e      	subs	r6, r3, r6
    69e0:	1c73      	adds	r3, r6, #1
    69e2:	2b1f      	cmp	r3, #31
    69e4:	dd00      	ble.n	69e8 <__aeabi_dadd+0xec>
    69e6:	e0f1      	b.n	6bcc <__aeabi_dadd+0x2d0>
    69e8:	2220      	movs	r2, #32
    69ea:	0038      	movs	r0, r7
    69ec:	0029      	movs	r1, r5
    69ee:	1ad2      	subs	r2, r2, r3
    69f0:	40d8      	lsrs	r0, r3
    69f2:	4091      	lsls	r1, r2
    69f4:	4097      	lsls	r7, r2
    69f6:	002c      	movs	r4, r5
    69f8:	4301      	orrs	r1, r0
    69fa:	1e78      	subs	r0, r7, #1
    69fc:	4187      	sbcs	r7, r0
    69fe:	40dc      	lsrs	r4, r3
    6a00:	2600      	movs	r6, #0
    6a02:	430f      	orrs	r7, r1
    6a04:	077b      	lsls	r3, r7, #29
    6a06:	d009      	beq.n	6a1c <__aeabi_dadd+0x120>
    6a08:	230f      	movs	r3, #15
    6a0a:	403b      	ands	r3, r7
    6a0c:	2b04      	cmp	r3, #4
    6a0e:	d005      	beq.n	6a1c <__aeabi_dadd+0x120>
    6a10:	1d3b      	adds	r3, r7, #4
    6a12:	42bb      	cmp	r3, r7
    6a14:	41bf      	sbcs	r7, r7
    6a16:	427f      	negs	r7, r7
    6a18:	19e4      	adds	r4, r4, r7
    6a1a:	001f      	movs	r7, r3
    6a1c:	0223      	lsls	r3, r4, #8
    6a1e:	d52c      	bpl.n	6a7a <__aeabi_dadd+0x17e>
    6a20:	4b96      	ldr	r3, [pc, #600]	; (6c7c <__aeabi_dadd+0x380>)
    6a22:	3601      	adds	r6, #1
    6a24:	429e      	cmp	r6, r3
    6a26:	d100      	bne.n	6a2a <__aeabi_dadd+0x12e>
    6a28:	e09a      	b.n	6b60 <__aeabi_dadd+0x264>
    6a2a:	4645      	mov	r5, r8
    6a2c:	4b94      	ldr	r3, [pc, #592]	; (6c80 <__aeabi_dadd+0x384>)
    6a2e:	08ff      	lsrs	r7, r7, #3
    6a30:	401c      	ands	r4, r3
    6a32:	0760      	lsls	r0, r4, #29
    6a34:	0576      	lsls	r6, r6, #21
    6a36:	0264      	lsls	r4, r4, #9
    6a38:	4307      	orrs	r7, r0
    6a3a:	0b24      	lsrs	r4, r4, #12
    6a3c:	0d76      	lsrs	r6, r6, #21
    6a3e:	2100      	movs	r1, #0
    6a40:	0324      	lsls	r4, r4, #12
    6a42:	0b23      	lsrs	r3, r4, #12
    6a44:	0d0c      	lsrs	r4, r1, #20
    6a46:	4a8f      	ldr	r2, [pc, #572]	; (6c84 <__aeabi_dadd+0x388>)
    6a48:	0524      	lsls	r4, r4, #20
    6a4a:	431c      	orrs	r4, r3
    6a4c:	4014      	ands	r4, r2
    6a4e:	0533      	lsls	r3, r6, #20
    6a50:	4323      	orrs	r3, r4
    6a52:	005b      	lsls	r3, r3, #1
    6a54:	07ed      	lsls	r5, r5, #31
    6a56:	085b      	lsrs	r3, r3, #1
    6a58:	432b      	orrs	r3, r5
    6a5a:	0038      	movs	r0, r7
    6a5c:	0019      	movs	r1, r3
    6a5e:	bc3c      	pop	{r2, r3, r4, r5}
    6a60:	4690      	mov	r8, r2
    6a62:	4699      	mov	r9, r3
    6a64:	46a2      	mov	sl, r4
    6a66:	46ab      	mov	fp, r5
    6a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a6a:	4664      	mov	r4, ip
    6a6c:	4304      	orrs	r4, r0
    6a6e:	d100      	bne.n	6a72 <__aeabi_dadd+0x176>
    6a70:	e211      	b.n	6e96 <__aeabi_dadd+0x59a>
    6a72:	0004      	movs	r4, r0
    6a74:	4667      	mov	r7, ip
    6a76:	077b      	lsls	r3, r7, #29
    6a78:	d1c6      	bne.n	6a08 <__aeabi_dadd+0x10c>
    6a7a:	4645      	mov	r5, r8
    6a7c:	0760      	lsls	r0, r4, #29
    6a7e:	08ff      	lsrs	r7, r7, #3
    6a80:	4307      	orrs	r7, r0
    6a82:	08e4      	lsrs	r4, r4, #3
    6a84:	4b7d      	ldr	r3, [pc, #500]	; (6c7c <__aeabi_dadd+0x380>)
    6a86:	429e      	cmp	r6, r3
    6a88:	d030      	beq.n	6aec <__aeabi_dadd+0x1f0>
    6a8a:	0324      	lsls	r4, r4, #12
    6a8c:	0576      	lsls	r6, r6, #21
    6a8e:	0b24      	lsrs	r4, r4, #12
    6a90:	0d76      	lsrs	r6, r6, #21
    6a92:	e7d4      	b.n	6a3e <__aeabi_dadd+0x142>
    6a94:	1a33      	subs	r3, r6, r0
    6a96:	469a      	mov	sl, r3
    6a98:	2b00      	cmp	r3, #0
    6a9a:	dd78      	ble.n	6b8e <__aeabi_dadd+0x292>
    6a9c:	2800      	cmp	r0, #0
    6a9e:	d031      	beq.n	6b04 <__aeabi_dadd+0x208>
    6aa0:	4876      	ldr	r0, [pc, #472]	; (6c7c <__aeabi_dadd+0x380>)
    6aa2:	4286      	cmp	r6, r0
    6aa4:	d0ae      	beq.n	6a04 <__aeabi_dadd+0x108>
    6aa6:	2080      	movs	r0, #128	; 0x80
    6aa8:	0400      	lsls	r0, r0, #16
    6aaa:	4301      	orrs	r1, r0
    6aac:	4653      	mov	r3, sl
    6aae:	2b38      	cmp	r3, #56	; 0x38
    6ab0:	dc00      	bgt.n	6ab4 <__aeabi_dadd+0x1b8>
    6ab2:	e0e9      	b.n	6c88 <__aeabi_dadd+0x38c>
    6ab4:	430a      	orrs	r2, r1
    6ab6:	1e51      	subs	r1, r2, #1
    6ab8:	418a      	sbcs	r2, r1
    6aba:	2100      	movs	r1, #0
    6abc:	19d2      	adds	r2, r2, r7
    6abe:	42ba      	cmp	r2, r7
    6ac0:	41bf      	sbcs	r7, r7
    6ac2:	1909      	adds	r1, r1, r4
    6ac4:	427c      	negs	r4, r7
    6ac6:	0017      	movs	r7, r2
    6ac8:	190c      	adds	r4, r1, r4
    6aca:	0223      	lsls	r3, r4, #8
    6acc:	d5d3      	bpl.n	6a76 <__aeabi_dadd+0x17a>
    6ace:	4b6b      	ldr	r3, [pc, #428]	; (6c7c <__aeabi_dadd+0x380>)
    6ad0:	3601      	adds	r6, #1
    6ad2:	429e      	cmp	r6, r3
    6ad4:	d100      	bne.n	6ad8 <__aeabi_dadd+0x1dc>
    6ad6:	e13a      	b.n	6d4e <__aeabi_dadd+0x452>
    6ad8:	2001      	movs	r0, #1
    6ada:	4b69      	ldr	r3, [pc, #420]	; (6c80 <__aeabi_dadd+0x384>)
    6adc:	401c      	ands	r4, r3
    6ade:	087b      	lsrs	r3, r7, #1
    6ae0:	4007      	ands	r7, r0
    6ae2:	431f      	orrs	r7, r3
    6ae4:	07e0      	lsls	r0, r4, #31
    6ae6:	4307      	orrs	r7, r0
    6ae8:	0864      	lsrs	r4, r4, #1
    6aea:	e78b      	b.n	6a04 <__aeabi_dadd+0x108>
    6aec:	0023      	movs	r3, r4
    6aee:	433b      	orrs	r3, r7
    6af0:	d100      	bne.n	6af4 <__aeabi_dadd+0x1f8>
    6af2:	e1cb      	b.n	6e8c <__aeabi_dadd+0x590>
    6af4:	2280      	movs	r2, #128	; 0x80
    6af6:	0312      	lsls	r2, r2, #12
    6af8:	4314      	orrs	r4, r2
    6afa:	0324      	lsls	r4, r4, #12
    6afc:	0b24      	lsrs	r4, r4, #12
    6afe:	e79e      	b.n	6a3e <__aeabi_dadd+0x142>
    6b00:	002e      	movs	r6, r5
    6b02:	e77f      	b.n	6a04 <__aeabi_dadd+0x108>
    6b04:	0008      	movs	r0, r1
    6b06:	4310      	orrs	r0, r2
    6b08:	d100      	bne.n	6b0c <__aeabi_dadd+0x210>
    6b0a:	e0b4      	b.n	6c76 <__aeabi_dadd+0x37a>
    6b0c:	1e58      	subs	r0, r3, #1
    6b0e:	2800      	cmp	r0, #0
    6b10:	d000      	beq.n	6b14 <__aeabi_dadd+0x218>
    6b12:	e0de      	b.n	6cd2 <__aeabi_dadd+0x3d6>
    6b14:	18ba      	adds	r2, r7, r2
    6b16:	42ba      	cmp	r2, r7
    6b18:	419b      	sbcs	r3, r3
    6b1a:	1864      	adds	r4, r4, r1
    6b1c:	425b      	negs	r3, r3
    6b1e:	18e4      	adds	r4, r4, r3
    6b20:	0017      	movs	r7, r2
    6b22:	2601      	movs	r6, #1
    6b24:	0223      	lsls	r3, r4, #8
    6b26:	d5a6      	bpl.n	6a76 <__aeabi_dadd+0x17a>
    6b28:	2602      	movs	r6, #2
    6b2a:	e7d5      	b.n	6ad8 <__aeabi_dadd+0x1dc>
    6b2c:	2d00      	cmp	r5, #0
    6b2e:	d16e      	bne.n	6c0e <__aeabi_dadd+0x312>
    6b30:	1c70      	adds	r0, r6, #1
    6b32:	0540      	lsls	r0, r0, #21
    6b34:	0d40      	lsrs	r0, r0, #21
    6b36:	2801      	cmp	r0, #1
    6b38:	dc00      	bgt.n	6b3c <__aeabi_dadd+0x240>
    6b3a:	e0f9      	b.n	6d30 <__aeabi_dadd+0x434>
    6b3c:	1ab8      	subs	r0, r7, r2
    6b3e:	4684      	mov	ip, r0
    6b40:	4287      	cmp	r7, r0
    6b42:	4180      	sbcs	r0, r0
    6b44:	1ae5      	subs	r5, r4, r3
    6b46:	4240      	negs	r0, r0
    6b48:	1a2d      	subs	r5, r5, r0
    6b4a:	0228      	lsls	r0, r5, #8
    6b4c:	d400      	bmi.n	6b50 <__aeabi_dadd+0x254>
    6b4e:	e089      	b.n	6c64 <__aeabi_dadd+0x368>
    6b50:	1bd7      	subs	r7, r2, r7
    6b52:	42ba      	cmp	r2, r7
    6b54:	4192      	sbcs	r2, r2
    6b56:	1b1c      	subs	r4, r3, r4
    6b58:	4252      	negs	r2, r2
    6b5a:	1aa5      	subs	r5, r4, r2
    6b5c:	46d8      	mov	r8, fp
    6b5e:	e729      	b.n	69b4 <__aeabi_dadd+0xb8>
    6b60:	4645      	mov	r5, r8
    6b62:	2400      	movs	r4, #0
    6b64:	2700      	movs	r7, #0
    6b66:	e76a      	b.n	6a3e <__aeabi_dadd+0x142>
    6b68:	4c45      	ldr	r4, [pc, #276]	; (6c80 <__aeabi_dadd+0x384>)
    6b6a:	1af6      	subs	r6, r6, r3
    6b6c:	402c      	ands	r4, r5
    6b6e:	e749      	b.n	6a04 <__aeabi_dadd+0x108>
    6b70:	003d      	movs	r5, r7
    6b72:	3828      	subs	r0, #40	; 0x28
    6b74:	4085      	lsls	r5, r0
    6b76:	2700      	movs	r7, #0
    6b78:	e72e      	b.n	69d8 <__aeabi_dadd+0xdc>
    6b7a:	0038      	movs	r0, r7
    6b7c:	f001 fbda 	bl	8334 <__clzsi2>
    6b80:	3020      	adds	r0, #32
    6b82:	e71d      	b.n	69c0 <__aeabi_dadd+0xc4>
    6b84:	430a      	orrs	r2, r1
    6b86:	1e51      	subs	r1, r2, #1
    6b88:	418a      	sbcs	r2, r1
    6b8a:	2100      	movs	r1, #0
    6b8c:	e707      	b.n	699e <__aeabi_dadd+0xa2>
    6b8e:	2b00      	cmp	r3, #0
    6b90:	d000      	beq.n	6b94 <__aeabi_dadd+0x298>
    6b92:	e0f3      	b.n	6d7c <__aeabi_dadd+0x480>
    6b94:	1c70      	adds	r0, r6, #1
    6b96:	0543      	lsls	r3, r0, #21
    6b98:	0d5b      	lsrs	r3, r3, #21
    6b9a:	2b01      	cmp	r3, #1
    6b9c:	dc00      	bgt.n	6ba0 <__aeabi_dadd+0x2a4>
    6b9e:	e0ad      	b.n	6cfc <__aeabi_dadd+0x400>
    6ba0:	4b36      	ldr	r3, [pc, #216]	; (6c7c <__aeabi_dadd+0x380>)
    6ba2:	4298      	cmp	r0, r3
    6ba4:	d100      	bne.n	6ba8 <__aeabi_dadd+0x2ac>
    6ba6:	e0d1      	b.n	6d4c <__aeabi_dadd+0x450>
    6ba8:	18ba      	adds	r2, r7, r2
    6baa:	42ba      	cmp	r2, r7
    6bac:	41bf      	sbcs	r7, r7
    6bae:	1864      	adds	r4, r4, r1
    6bb0:	427f      	negs	r7, r7
    6bb2:	19e4      	adds	r4, r4, r7
    6bb4:	07e7      	lsls	r7, r4, #31
    6bb6:	0852      	lsrs	r2, r2, #1
    6bb8:	4317      	orrs	r7, r2
    6bba:	0864      	lsrs	r4, r4, #1
    6bbc:	0006      	movs	r6, r0
    6bbe:	e721      	b.n	6a04 <__aeabi_dadd+0x108>
    6bc0:	482e      	ldr	r0, [pc, #184]	; (6c7c <__aeabi_dadd+0x380>)
    6bc2:	4285      	cmp	r5, r0
    6bc4:	d100      	bne.n	6bc8 <__aeabi_dadd+0x2cc>
    6bc6:	e093      	b.n	6cf0 <__aeabi_dadd+0x3f4>
    6bc8:	001d      	movs	r5, r3
    6bca:	e6d0      	b.n	696e <__aeabi_dadd+0x72>
    6bcc:	0029      	movs	r1, r5
    6bce:	3e1f      	subs	r6, #31
    6bd0:	40f1      	lsrs	r1, r6
    6bd2:	2b20      	cmp	r3, #32
    6bd4:	d100      	bne.n	6bd8 <__aeabi_dadd+0x2dc>
    6bd6:	e08d      	b.n	6cf4 <__aeabi_dadd+0x3f8>
    6bd8:	2240      	movs	r2, #64	; 0x40
    6bda:	1ad3      	subs	r3, r2, r3
    6bdc:	409d      	lsls	r5, r3
    6bde:	432f      	orrs	r7, r5
    6be0:	1e7d      	subs	r5, r7, #1
    6be2:	41af      	sbcs	r7, r5
    6be4:	2400      	movs	r4, #0
    6be6:	430f      	orrs	r7, r1
    6be8:	2600      	movs	r6, #0
    6bea:	e744      	b.n	6a76 <__aeabi_dadd+0x17a>
    6bec:	002b      	movs	r3, r5
    6bee:	0008      	movs	r0, r1
    6bf0:	3b20      	subs	r3, #32
    6bf2:	40d8      	lsrs	r0, r3
    6bf4:	0003      	movs	r3, r0
    6bf6:	2d20      	cmp	r5, #32
    6bf8:	d100      	bne.n	6bfc <__aeabi_dadd+0x300>
    6bfa:	e07d      	b.n	6cf8 <__aeabi_dadd+0x3fc>
    6bfc:	2040      	movs	r0, #64	; 0x40
    6bfe:	1b45      	subs	r5, r0, r5
    6c00:	40a9      	lsls	r1, r5
    6c02:	430a      	orrs	r2, r1
    6c04:	1e51      	subs	r1, r2, #1
    6c06:	418a      	sbcs	r2, r1
    6c08:	2100      	movs	r1, #0
    6c0a:	431a      	orrs	r2, r3
    6c0c:	e6c7      	b.n	699e <__aeabi_dadd+0xa2>
    6c0e:	2e00      	cmp	r6, #0
    6c10:	d050      	beq.n	6cb4 <__aeabi_dadd+0x3b8>
    6c12:	4e1a      	ldr	r6, [pc, #104]	; (6c7c <__aeabi_dadd+0x380>)
    6c14:	42b0      	cmp	r0, r6
    6c16:	d057      	beq.n	6cc8 <__aeabi_dadd+0x3cc>
    6c18:	2680      	movs	r6, #128	; 0x80
    6c1a:	426b      	negs	r3, r5
    6c1c:	4699      	mov	r9, r3
    6c1e:	0436      	lsls	r6, r6, #16
    6c20:	4334      	orrs	r4, r6
    6c22:	464b      	mov	r3, r9
    6c24:	2b38      	cmp	r3, #56	; 0x38
    6c26:	dd00      	ble.n	6c2a <__aeabi_dadd+0x32e>
    6c28:	e0d6      	b.n	6dd8 <__aeabi_dadd+0x4dc>
    6c2a:	2b1f      	cmp	r3, #31
    6c2c:	dd00      	ble.n	6c30 <__aeabi_dadd+0x334>
    6c2e:	e135      	b.n	6e9c <__aeabi_dadd+0x5a0>
    6c30:	2620      	movs	r6, #32
    6c32:	1af5      	subs	r5, r6, r3
    6c34:	0026      	movs	r6, r4
    6c36:	40ae      	lsls	r6, r5
    6c38:	46b2      	mov	sl, r6
    6c3a:	003e      	movs	r6, r7
    6c3c:	40de      	lsrs	r6, r3
    6c3e:	46ac      	mov	ip, r5
    6c40:	0035      	movs	r5, r6
    6c42:	4656      	mov	r6, sl
    6c44:	432e      	orrs	r6, r5
    6c46:	4665      	mov	r5, ip
    6c48:	40af      	lsls	r7, r5
    6c4a:	1e7d      	subs	r5, r7, #1
    6c4c:	41af      	sbcs	r7, r5
    6c4e:	40dc      	lsrs	r4, r3
    6c50:	4337      	orrs	r7, r6
    6c52:	1bd7      	subs	r7, r2, r7
    6c54:	42ba      	cmp	r2, r7
    6c56:	4192      	sbcs	r2, r2
    6c58:	1b0c      	subs	r4, r1, r4
    6c5a:	4252      	negs	r2, r2
    6c5c:	1aa4      	subs	r4, r4, r2
    6c5e:	0006      	movs	r6, r0
    6c60:	46d8      	mov	r8, fp
    6c62:	e6a3      	b.n	69ac <__aeabi_dadd+0xb0>
    6c64:	4664      	mov	r4, ip
    6c66:	4667      	mov	r7, ip
    6c68:	432c      	orrs	r4, r5
    6c6a:	d000      	beq.n	6c6e <__aeabi_dadd+0x372>
    6c6c:	e6a2      	b.n	69b4 <__aeabi_dadd+0xb8>
    6c6e:	2500      	movs	r5, #0
    6c70:	2600      	movs	r6, #0
    6c72:	2700      	movs	r7, #0
    6c74:	e706      	b.n	6a84 <__aeabi_dadd+0x188>
    6c76:	001e      	movs	r6, r3
    6c78:	e6c4      	b.n	6a04 <__aeabi_dadd+0x108>
    6c7a:	46c0      	nop			; (mov r8, r8)
    6c7c:	000007ff 	.word	0x000007ff
    6c80:	ff7fffff 	.word	0xff7fffff
    6c84:	800fffff 	.word	0x800fffff
    6c88:	2b1f      	cmp	r3, #31
    6c8a:	dc63      	bgt.n	6d54 <__aeabi_dadd+0x458>
    6c8c:	2020      	movs	r0, #32
    6c8e:	1ac3      	subs	r3, r0, r3
    6c90:	0008      	movs	r0, r1
    6c92:	4098      	lsls	r0, r3
    6c94:	469c      	mov	ip, r3
    6c96:	4683      	mov	fp, r0
    6c98:	4653      	mov	r3, sl
    6c9a:	0010      	movs	r0, r2
    6c9c:	40d8      	lsrs	r0, r3
    6c9e:	0003      	movs	r3, r0
    6ca0:	4658      	mov	r0, fp
    6ca2:	4318      	orrs	r0, r3
    6ca4:	4663      	mov	r3, ip
    6ca6:	409a      	lsls	r2, r3
    6ca8:	1e53      	subs	r3, r2, #1
    6caa:	419a      	sbcs	r2, r3
    6cac:	4653      	mov	r3, sl
    6cae:	4302      	orrs	r2, r0
    6cb0:	40d9      	lsrs	r1, r3
    6cb2:	e703      	b.n	6abc <__aeabi_dadd+0x1c0>
    6cb4:	0026      	movs	r6, r4
    6cb6:	433e      	orrs	r6, r7
    6cb8:	d006      	beq.n	6cc8 <__aeabi_dadd+0x3cc>
    6cba:	43eb      	mvns	r3, r5
    6cbc:	4699      	mov	r9, r3
    6cbe:	2b00      	cmp	r3, #0
    6cc0:	d0c7      	beq.n	6c52 <__aeabi_dadd+0x356>
    6cc2:	4e94      	ldr	r6, [pc, #592]	; (6f14 <__aeabi_dadd+0x618>)
    6cc4:	42b0      	cmp	r0, r6
    6cc6:	d1ac      	bne.n	6c22 <__aeabi_dadd+0x326>
    6cc8:	000c      	movs	r4, r1
    6cca:	0017      	movs	r7, r2
    6ccc:	0006      	movs	r6, r0
    6cce:	46d8      	mov	r8, fp
    6cd0:	e698      	b.n	6a04 <__aeabi_dadd+0x108>
    6cd2:	4b90      	ldr	r3, [pc, #576]	; (6f14 <__aeabi_dadd+0x618>)
    6cd4:	459a      	cmp	sl, r3
    6cd6:	d00b      	beq.n	6cf0 <__aeabi_dadd+0x3f4>
    6cd8:	4682      	mov	sl, r0
    6cda:	e6e7      	b.n	6aac <__aeabi_dadd+0x1b0>
    6cdc:	2800      	cmp	r0, #0
    6cde:	d000      	beq.n	6ce2 <__aeabi_dadd+0x3e6>
    6ce0:	e09e      	b.n	6e20 <__aeabi_dadd+0x524>
    6ce2:	0018      	movs	r0, r3
    6ce4:	4310      	orrs	r0, r2
    6ce6:	d100      	bne.n	6cea <__aeabi_dadd+0x3ee>
    6ce8:	e0e9      	b.n	6ebe <__aeabi_dadd+0x5c2>
    6cea:	001c      	movs	r4, r3
    6cec:	0017      	movs	r7, r2
    6cee:	46d8      	mov	r8, fp
    6cf0:	4e88      	ldr	r6, [pc, #544]	; (6f14 <__aeabi_dadd+0x618>)
    6cf2:	e687      	b.n	6a04 <__aeabi_dadd+0x108>
    6cf4:	2500      	movs	r5, #0
    6cf6:	e772      	b.n	6bde <__aeabi_dadd+0x2e2>
    6cf8:	2100      	movs	r1, #0
    6cfa:	e782      	b.n	6c02 <__aeabi_dadd+0x306>
    6cfc:	0023      	movs	r3, r4
    6cfe:	433b      	orrs	r3, r7
    6d00:	2e00      	cmp	r6, #0
    6d02:	d000      	beq.n	6d06 <__aeabi_dadd+0x40a>
    6d04:	e0ab      	b.n	6e5e <__aeabi_dadd+0x562>
    6d06:	2b00      	cmp	r3, #0
    6d08:	d100      	bne.n	6d0c <__aeabi_dadd+0x410>
    6d0a:	e0e7      	b.n	6edc <__aeabi_dadd+0x5e0>
    6d0c:	000b      	movs	r3, r1
    6d0e:	4313      	orrs	r3, r2
    6d10:	d100      	bne.n	6d14 <__aeabi_dadd+0x418>
    6d12:	e677      	b.n	6a04 <__aeabi_dadd+0x108>
    6d14:	18ba      	adds	r2, r7, r2
    6d16:	42ba      	cmp	r2, r7
    6d18:	41bf      	sbcs	r7, r7
    6d1a:	1864      	adds	r4, r4, r1
    6d1c:	427f      	negs	r7, r7
    6d1e:	19e4      	adds	r4, r4, r7
    6d20:	0223      	lsls	r3, r4, #8
    6d22:	d400      	bmi.n	6d26 <__aeabi_dadd+0x42a>
    6d24:	e0f2      	b.n	6f0c <__aeabi_dadd+0x610>
    6d26:	4b7c      	ldr	r3, [pc, #496]	; (6f18 <__aeabi_dadd+0x61c>)
    6d28:	0017      	movs	r7, r2
    6d2a:	401c      	ands	r4, r3
    6d2c:	0006      	movs	r6, r0
    6d2e:	e669      	b.n	6a04 <__aeabi_dadd+0x108>
    6d30:	0020      	movs	r0, r4
    6d32:	4338      	orrs	r0, r7
    6d34:	2e00      	cmp	r6, #0
    6d36:	d1d1      	bne.n	6cdc <__aeabi_dadd+0x3e0>
    6d38:	2800      	cmp	r0, #0
    6d3a:	d15b      	bne.n	6df4 <__aeabi_dadd+0x4f8>
    6d3c:	001c      	movs	r4, r3
    6d3e:	4314      	orrs	r4, r2
    6d40:	d100      	bne.n	6d44 <__aeabi_dadd+0x448>
    6d42:	e0a8      	b.n	6e96 <__aeabi_dadd+0x59a>
    6d44:	001c      	movs	r4, r3
    6d46:	0017      	movs	r7, r2
    6d48:	46d8      	mov	r8, fp
    6d4a:	e65b      	b.n	6a04 <__aeabi_dadd+0x108>
    6d4c:	0006      	movs	r6, r0
    6d4e:	2400      	movs	r4, #0
    6d50:	2700      	movs	r7, #0
    6d52:	e697      	b.n	6a84 <__aeabi_dadd+0x188>
    6d54:	4650      	mov	r0, sl
    6d56:	000b      	movs	r3, r1
    6d58:	3820      	subs	r0, #32
    6d5a:	40c3      	lsrs	r3, r0
    6d5c:	4699      	mov	r9, r3
    6d5e:	4653      	mov	r3, sl
    6d60:	2b20      	cmp	r3, #32
    6d62:	d100      	bne.n	6d66 <__aeabi_dadd+0x46a>
    6d64:	e095      	b.n	6e92 <__aeabi_dadd+0x596>
    6d66:	2340      	movs	r3, #64	; 0x40
    6d68:	4650      	mov	r0, sl
    6d6a:	1a1b      	subs	r3, r3, r0
    6d6c:	4099      	lsls	r1, r3
    6d6e:	430a      	orrs	r2, r1
    6d70:	1e51      	subs	r1, r2, #1
    6d72:	418a      	sbcs	r2, r1
    6d74:	464b      	mov	r3, r9
    6d76:	2100      	movs	r1, #0
    6d78:	431a      	orrs	r2, r3
    6d7a:	e69f      	b.n	6abc <__aeabi_dadd+0x1c0>
    6d7c:	2e00      	cmp	r6, #0
    6d7e:	d130      	bne.n	6de2 <__aeabi_dadd+0x4e6>
    6d80:	0026      	movs	r6, r4
    6d82:	433e      	orrs	r6, r7
    6d84:	d067      	beq.n	6e56 <__aeabi_dadd+0x55a>
    6d86:	43db      	mvns	r3, r3
    6d88:	469a      	mov	sl, r3
    6d8a:	2b00      	cmp	r3, #0
    6d8c:	d01c      	beq.n	6dc8 <__aeabi_dadd+0x4cc>
    6d8e:	4e61      	ldr	r6, [pc, #388]	; (6f14 <__aeabi_dadd+0x618>)
    6d90:	42b0      	cmp	r0, r6
    6d92:	d060      	beq.n	6e56 <__aeabi_dadd+0x55a>
    6d94:	4653      	mov	r3, sl
    6d96:	2b38      	cmp	r3, #56	; 0x38
    6d98:	dd00      	ble.n	6d9c <__aeabi_dadd+0x4a0>
    6d9a:	e096      	b.n	6eca <__aeabi_dadd+0x5ce>
    6d9c:	2b1f      	cmp	r3, #31
    6d9e:	dd00      	ble.n	6da2 <__aeabi_dadd+0x4a6>
    6da0:	e09f      	b.n	6ee2 <__aeabi_dadd+0x5e6>
    6da2:	2620      	movs	r6, #32
    6da4:	1af3      	subs	r3, r6, r3
    6da6:	0026      	movs	r6, r4
    6da8:	409e      	lsls	r6, r3
    6daa:	469c      	mov	ip, r3
    6dac:	46b3      	mov	fp, r6
    6dae:	4653      	mov	r3, sl
    6db0:	003e      	movs	r6, r7
    6db2:	40de      	lsrs	r6, r3
    6db4:	0033      	movs	r3, r6
    6db6:	465e      	mov	r6, fp
    6db8:	431e      	orrs	r6, r3
    6dba:	4663      	mov	r3, ip
    6dbc:	409f      	lsls	r7, r3
    6dbe:	1e7b      	subs	r3, r7, #1
    6dc0:	419f      	sbcs	r7, r3
    6dc2:	4653      	mov	r3, sl
    6dc4:	40dc      	lsrs	r4, r3
    6dc6:	4337      	orrs	r7, r6
    6dc8:	18bf      	adds	r7, r7, r2
    6dca:	4297      	cmp	r7, r2
    6dcc:	4192      	sbcs	r2, r2
    6dce:	1864      	adds	r4, r4, r1
    6dd0:	4252      	negs	r2, r2
    6dd2:	18a4      	adds	r4, r4, r2
    6dd4:	0006      	movs	r6, r0
    6dd6:	e678      	b.n	6aca <__aeabi_dadd+0x1ce>
    6dd8:	4327      	orrs	r7, r4
    6dda:	1e7c      	subs	r4, r7, #1
    6ddc:	41a7      	sbcs	r7, r4
    6dde:	2400      	movs	r4, #0
    6de0:	e737      	b.n	6c52 <__aeabi_dadd+0x356>
    6de2:	4e4c      	ldr	r6, [pc, #304]	; (6f14 <__aeabi_dadd+0x618>)
    6de4:	42b0      	cmp	r0, r6
    6de6:	d036      	beq.n	6e56 <__aeabi_dadd+0x55a>
    6de8:	2680      	movs	r6, #128	; 0x80
    6dea:	425b      	negs	r3, r3
    6dec:	0436      	lsls	r6, r6, #16
    6dee:	469a      	mov	sl, r3
    6df0:	4334      	orrs	r4, r6
    6df2:	e7cf      	b.n	6d94 <__aeabi_dadd+0x498>
    6df4:	0018      	movs	r0, r3
    6df6:	4310      	orrs	r0, r2
    6df8:	d100      	bne.n	6dfc <__aeabi_dadd+0x500>
    6dfa:	e603      	b.n	6a04 <__aeabi_dadd+0x108>
    6dfc:	1ab8      	subs	r0, r7, r2
    6dfe:	4684      	mov	ip, r0
    6e00:	4567      	cmp	r7, ip
    6e02:	41ad      	sbcs	r5, r5
    6e04:	1ae0      	subs	r0, r4, r3
    6e06:	426d      	negs	r5, r5
    6e08:	1b40      	subs	r0, r0, r5
    6e0a:	0205      	lsls	r5, r0, #8
    6e0c:	d400      	bmi.n	6e10 <__aeabi_dadd+0x514>
    6e0e:	e62c      	b.n	6a6a <__aeabi_dadd+0x16e>
    6e10:	1bd7      	subs	r7, r2, r7
    6e12:	42ba      	cmp	r2, r7
    6e14:	4192      	sbcs	r2, r2
    6e16:	1b1c      	subs	r4, r3, r4
    6e18:	4252      	negs	r2, r2
    6e1a:	1aa4      	subs	r4, r4, r2
    6e1c:	46d8      	mov	r8, fp
    6e1e:	e5f1      	b.n	6a04 <__aeabi_dadd+0x108>
    6e20:	0018      	movs	r0, r3
    6e22:	4310      	orrs	r0, r2
    6e24:	d100      	bne.n	6e28 <__aeabi_dadd+0x52c>
    6e26:	e763      	b.n	6cf0 <__aeabi_dadd+0x3f4>
    6e28:	08f8      	lsrs	r0, r7, #3
    6e2a:	0767      	lsls	r7, r4, #29
    6e2c:	4307      	orrs	r7, r0
    6e2e:	2080      	movs	r0, #128	; 0x80
    6e30:	08e4      	lsrs	r4, r4, #3
    6e32:	0300      	lsls	r0, r0, #12
    6e34:	4204      	tst	r4, r0
    6e36:	d008      	beq.n	6e4a <__aeabi_dadd+0x54e>
    6e38:	08dd      	lsrs	r5, r3, #3
    6e3a:	4205      	tst	r5, r0
    6e3c:	d105      	bne.n	6e4a <__aeabi_dadd+0x54e>
    6e3e:	08d2      	lsrs	r2, r2, #3
    6e40:	0759      	lsls	r1, r3, #29
    6e42:	4311      	orrs	r1, r2
    6e44:	000f      	movs	r7, r1
    6e46:	002c      	movs	r4, r5
    6e48:	46d8      	mov	r8, fp
    6e4a:	0f7b      	lsrs	r3, r7, #29
    6e4c:	00e4      	lsls	r4, r4, #3
    6e4e:	431c      	orrs	r4, r3
    6e50:	00ff      	lsls	r7, r7, #3
    6e52:	4e30      	ldr	r6, [pc, #192]	; (6f14 <__aeabi_dadd+0x618>)
    6e54:	e5d6      	b.n	6a04 <__aeabi_dadd+0x108>
    6e56:	000c      	movs	r4, r1
    6e58:	0017      	movs	r7, r2
    6e5a:	0006      	movs	r6, r0
    6e5c:	e5d2      	b.n	6a04 <__aeabi_dadd+0x108>
    6e5e:	2b00      	cmp	r3, #0
    6e60:	d038      	beq.n	6ed4 <__aeabi_dadd+0x5d8>
    6e62:	000b      	movs	r3, r1
    6e64:	4313      	orrs	r3, r2
    6e66:	d100      	bne.n	6e6a <__aeabi_dadd+0x56e>
    6e68:	e742      	b.n	6cf0 <__aeabi_dadd+0x3f4>
    6e6a:	08f8      	lsrs	r0, r7, #3
    6e6c:	0767      	lsls	r7, r4, #29
    6e6e:	4307      	orrs	r7, r0
    6e70:	2080      	movs	r0, #128	; 0x80
    6e72:	08e4      	lsrs	r4, r4, #3
    6e74:	0300      	lsls	r0, r0, #12
    6e76:	4204      	tst	r4, r0
    6e78:	d0e7      	beq.n	6e4a <__aeabi_dadd+0x54e>
    6e7a:	08cb      	lsrs	r3, r1, #3
    6e7c:	4203      	tst	r3, r0
    6e7e:	d1e4      	bne.n	6e4a <__aeabi_dadd+0x54e>
    6e80:	08d2      	lsrs	r2, r2, #3
    6e82:	0749      	lsls	r1, r1, #29
    6e84:	4311      	orrs	r1, r2
    6e86:	000f      	movs	r7, r1
    6e88:	001c      	movs	r4, r3
    6e8a:	e7de      	b.n	6e4a <__aeabi_dadd+0x54e>
    6e8c:	2700      	movs	r7, #0
    6e8e:	2400      	movs	r4, #0
    6e90:	e5d5      	b.n	6a3e <__aeabi_dadd+0x142>
    6e92:	2100      	movs	r1, #0
    6e94:	e76b      	b.n	6d6e <__aeabi_dadd+0x472>
    6e96:	2500      	movs	r5, #0
    6e98:	2700      	movs	r7, #0
    6e9a:	e5f3      	b.n	6a84 <__aeabi_dadd+0x188>
    6e9c:	464e      	mov	r6, r9
    6e9e:	0025      	movs	r5, r4
    6ea0:	3e20      	subs	r6, #32
    6ea2:	40f5      	lsrs	r5, r6
    6ea4:	464b      	mov	r3, r9
    6ea6:	002e      	movs	r6, r5
    6ea8:	2b20      	cmp	r3, #32
    6eaa:	d02d      	beq.n	6f08 <__aeabi_dadd+0x60c>
    6eac:	2540      	movs	r5, #64	; 0x40
    6eae:	1aed      	subs	r5, r5, r3
    6eb0:	40ac      	lsls	r4, r5
    6eb2:	4327      	orrs	r7, r4
    6eb4:	1e7c      	subs	r4, r7, #1
    6eb6:	41a7      	sbcs	r7, r4
    6eb8:	2400      	movs	r4, #0
    6eba:	4337      	orrs	r7, r6
    6ebc:	e6c9      	b.n	6c52 <__aeabi_dadd+0x356>
    6ebe:	2480      	movs	r4, #128	; 0x80
    6ec0:	2500      	movs	r5, #0
    6ec2:	0324      	lsls	r4, r4, #12
    6ec4:	4e13      	ldr	r6, [pc, #76]	; (6f14 <__aeabi_dadd+0x618>)
    6ec6:	2700      	movs	r7, #0
    6ec8:	e5dc      	b.n	6a84 <__aeabi_dadd+0x188>
    6eca:	4327      	orrs	r7, r4
    6ecc:	1e7c      	subs	r4, r7, #1
    6ece:	41a7      	sbcs	r7, r4
    6ed0:	2400      	movs	r4, #0
    6ed2:	e779      	b.n	6dc8 <__aeabi_dadd+0x4cc>
    6ed4:	000c      	movs	r4, r1
    6ed6:	0017      	movs	r7, r2
    6ed8:	4e0e      	ldr	r6, [pc, #56]	; (6f14 <__aeabi_dadd+0x618>)
    6eda:	e593      	b.n	6a04 <__aeabi_dadd+0x108>
    6edc:	000c      	movs	r4, r1
    6ede:	0017      	movs	r7, r2
    6ee0:	e590      	b.n	6a04 <__aeabi_dadd+0x108>
    6ee2:	4656      	mov	r6, sl
    6ee4:	0023      	movs	r3, r4
    6ee6:	3e20      	subs	r6, #32
    6ee8:	40f3      	lsrs	r3, r6
    6eea:	4699      	mov	r9, r3
    6eec:	4653      	mov	r3, sl
    6eee:	2b20      	cmp	r3, #32
    6ef0:	d00e      	beq.n	6f10 <__aeabi_dadd+0x614>
    6ef2:	2340      	movs	r3, #64	; 0x40
    6ef4:	4656      	mov	r6, sl
    6ef6:	1b9b      	subs	r3, r3, r6
    6ef8:	409c      	lsls	r4, r3
    6efa:	4327      	orrs	r7, r4
    6efc:	1e7c      	subs	r4, r7, #1
    6efe:	41a7      	sbcs	r7, r4
    6f00:	464b      	mov	r3, r9
    6f02:	2400      	movs	r4, #0
    6f04:	431f      	orrs	r7, r3
    6f06:	e75f      	b.n	6dc8 <__aeabi_dadd+0x4cc>
    6f08:	2400      	movs	r4, #0
    6f0a:	e7d2      	b.n	6eb2 <__aeabi_dadd+0x5b6>
    6f0c:	0017      	movs	r7, r2
    6f0e:	e5b2      	b.n	6a76 <__aeabi_dadd+0x17a>
    6f10:	2400      	movs	r4, #0
    6f12:	e7f2      	b.n	6efa <__aeabi_dadd+0x5fe>
    6f14:	000007ff 	.word	0x000007ff
    6f18:	ff7fffff 	.word	0xff7fffff

00006f1c <__aeabi_ddiv>:
    6f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f1e:	4657      	mov	r7, sl
    6f20:	4645      	mov	r5, r8
    6f22:	46de      	mov	lr, fp
    6f24:	464e      	mov	r6, r9
    6f26:	b5e0      	push	{r5, r6, r7, lr}
    6f28:	004c      	lsls	r4, r1, #1
    6f2a:	030e      	lsls	r6, r1, #12
    6f2c:	b087      	sub	sp, #28
    6f2e:	4683      	mov	fp, r0
    6f30:	4692      	mov	sl, r2
    6f32:	001d      	movs	r5, r3
    6f34:	4680      	mov	r8, r0
    6f36:	0b36      	lsrs	r6, r6, #12
    6f38:	0d64      	lsrs	r4, r4, #21
    6f3a:	0fcf      	lsrs	r7, r1, #31
    6f3c:	2c00      	cmp	r4, #0
    6f3e:	d04f      	beq.n	6fe0 <__aeabi_ddiv+0xc4>
    6f40:	4b6f      	ldr	r3, [pc, #444]	; (7100 <__aeabi_ddiv+0x1e4>)
    6f42:	429c      	cmp	r4, r3
    6f44:	d035      	beq.n	6fb2 <__aeabi_ddiv+0x96>
    6f46:	2380      	movs	r3, #128	; 0x80
    6f48:	0f42      	lsrs	r2, r0, #29
    6f4a:	041b      	lsls	r3, r3, #16
    6f4c:	00f6      	lsls	r6, r6, #3
    6f4e:	4313      	orrs	r3, r2
    6f50:	4333      	orrs	r3, r6
    6f52:	4699      	mov	r9, r3
    6f54:	00c3      	lsls	r3, r0, #3
    6f56:	4698      	mov	r8, r3
    6f58:	4b6a      	ldr	r3, [pc, #424]	; (7104 <__aeabi_ddiv+0x1e8>)
    6f5a:	2600      	movs	r6, #0
    6f5c:	469c      	mov	ip, r3
    6f5e:	2300      	movs	r3, #0
    6f60:	4464      	add	r4, ip
    6f62:	9303      	str	r3, [sp, #12]
    6f64:	032b      	lsls	r3, r5, #12
    6f66:	0b1b      	lsrs	r3, r3, #12
    6f68:	469b      	mov	fp, r3
    6f6a:	006b      	lsls	r3, r5, #1
    6f6c:	0fed      	lsrs	r5, r5, #31
    6f6e:	4650      	mov	r0, sl
    6f70:	0d5b      	lsrs	r3, r3, #21
    6f72:	9501      	str	r5, [sp, #4]
    6f74:	d05e      	beq.n	7034 <__aeabi_ddiv+0x118>
    6f76:	4a62      	ldr	r2, [pc, #392]	; (7100 <__aeabi_ddiv+0x1e4>)
    6f78:	4293      	cmp	r3, r2
    6f7a:	d053      	beq.n	7024 <__aeabi_ddiv+0x108>
    6f7c:	465a      	mov	r2, fp
    6f7e:	00d1      	lsls	r1, r2, #3
    6f80:	2280      	movs	r2, #128	; 0x80
    6f82:	0f40      	lsrs	r0, r0, #29
    6f84:	0412      	lsls	r2, r2, #16
    6f86:	4302      	orrs	r2, r0
    6f88:	430a      	orrs	r2, r1
    6f8a:	4693      	mov	fp, r2
    6f8c:	4652      	mov	r2, sl
    6f8e:	00d1      	lsls	r1, r2, #3
    6f90:	4a5c      	ldr	r2, [pc, #368]	; (7104 <__aeabi_ddiv+0x1e8>)
    6f92:	4694      	mov	ip, r2
    6f94:	2200      	movs	r2, #0
    6f96:	4463      	add	r3, ip
    6f98:	0038      	movs	r0, r7
    6f9a:	4068      	eors	r0, r5
    6f9c:	4684      	mov	ip, r0
    6f9e:	9002      	str	r0, [sp, #8]
    6fa0:	1ae4      	subs	r4, r4, r3
    6fa2:	4316      	orrs	r6, r2
    6fa4:	2e0f      	cmp	r6, #15
    6fa6:	d900      	bls.n	6faa <__aeabi_ddiv+0x8e>
    6fa8:	e0b4      	b.n	7114 <__aeabi_ddiv+0x1f8>
    6faa:	4b57      	ldr	r3, [pc, #348]	; (7108 <__aeabi_ddiv+0x1ec>)
    6fac:	00b6      	lsls	r6, r6, #2
    6fae:	599b      	ldr	r3, [r3, r6]
    6fb0:	469f      	mov	pc, r3
    6fb2:	0003      	movs	r3, r0
    6fb4:	4333      	orrs	r3, r6
    6fb6:	4699      	mov	r9, r3
    6fb8:	d16c      	bne.n	7094 <__aeabi_ddiv+0x178>
    6fba:	2300      	movs	r3, #0
    6fbc:	4698      	mov	r8, r3
    6fbe:	3302      	adds	r3, #2
    6fc0:	2608      	movs	r6, #8
    6fc2:	9303      	str	r3, [sp, #12]
    6fc4:	e7ce      	b.n	6f64 <__aeabi_ddiv+0x48>
    6fc6:	46cb      	mov	fp, r9
    6fc8:	4641      	mov	r1, r8
    6fca:	9a03      	ldr	r2, [sp, #12]
    6fcc:	9701      	str	r7, [sp, #4]
    6fce:	2a02      	cmp	r2, #2
    6fd0:	d165      	bne.n	709e <__aeabi_ddiv+0x182>
    6fd2:	9b01      	ldr	r3, [sp, #4]
    6fd4:	4c4a      	ldr	r4, [pc, #296]	; (7100 <__aeabi_ddiv+0x1e4>)
    6fd6:	469c      	mov	ip, r3
    6fd8:	2300      	movs	r3, #0
    6fda:	2200      	movs	r2, #0
    6fdc:	4698      	mov	r8, r3
    6fde:	e06b      	b.n	70b8 <__aeabi_ddiv+0x19c>
    6fe0:	0003      	movs	r3, r0
    6fe2:	4333      	orrs	r3, r6
    6fe4:	4699      	mov	r9, r3
    6fe6:	d04e      	beq.n	7086 <__aeabi_ddiv+0x16a>
    6fe8:	2e00      	cmp	r6, #0
    6fea:	d100      	bne.n	6fee <__aeabi_ddiv+0xd2>
    6fec:	e1bc      	b.n	7368 <__aeabi_ddiv+0x44c>
    6fee:	0030      	movs	r0, r6
    6ff0:	f001 f9a0 	bl	8334 <__clzsi2>
    6ff4:	0003      	movs	r3, r0
    6ff6:	3b0b      	subs	r3, #11
    6ff8:	2b1c      	cmp	r3, #28
    6ffa:	dd00      	ble.n	6ffe <__aeabi_ddiv+0xe2>
    6ffc:	e1ac      	b.n	7358 <__aeabi_ddiv+0x43c>
    6ffe:	221d      	movs	r2, #29
    7000:	1ad3      	subs	r3, r2, r3
    7002:	465a      	mov	r2, fp
    7004:	0001      	movs	r1, r0
    7006:	40da      	lsrs	r2, r3
    7008:	3908      	subs	r1, #8
    700a:	408e      	lsls	r6, r1
    700c:	0013      	movs	r3, r2
    700e:	4333      	orrs	r3, r6
    7010:	4699      	mov	r9, r3
    7012:	465b      	mov	r3, fp
    7014:	408b      	lsls	r3, r1
    7016:	4698      	mov	r8, r3
    7018:	2300      	movs	r3, #0
    701a:	4c3c      	ldr	r4, [pc, #240]	; (710c <__aeabi_ddiv+0x1f0>)
    701c:	2600      	movs	r6, #0
    701e:	1a24      	subs	r4, r4, r0
    7020:	9303      	str	r3, [sp, #12]
    7022:	e79f      	b.n	6f64 <__aeabi_ddiv+0x48>
    7024:	4651      	mov	r1, sl
    7026:	465a      	mov	r2, fp
    7028:	4311      	orrs	r1, r2
    702a:	d129      	bne.n	7080 <__aeabi_ddiv+0x164>
    702c:	2200      	movs	r2, #0
    702e:	4693      	mov	fp, r2
    7030:	3202      	adds	r2, #2
    7032:	e7b1      	b.n	6f98 <__aeabi_ddiv+0x7c>
    7034:	4659      	mov	r1, fp
    7036:	4301      	orrs	r1, r0
    7038:	d01e      	beq.n	7078 <__aeabi_ddiv+0x15c>
    703a:	465b      	mov	r3, fp
    703c:	2b00      	cmp	r3, #0
    703e:	d100      	bne.n	7042 <__aeabi_ddiv+0x126>
    7040:	e19e      	b.n	7380 <__aeabi_ddiv+0x464>
    7042:	4658      	mov	r0, fp
    7044:	f001 f976 	bl	8334 <__clzsi2>
    7048:	0003      	movs	r3, r0
    704a:	3b0b      	subs	r3, #11
    704c:	2b1c      	cmp	r3, #28
    704e:	dd00      	ble.n	7052 <__aeabi_ddiv+0x136>
    7050:	e18f      	b.n	7372 <__aeabi_ddiv+0x456>
    7052:	0002      	movs	r2, r0
    7054:	4659      	mov	r1, fp
    7056:	3a08      	subs	r2, #8
    7058:	4091      	lsls	r1, r2
    705a:	468b      	mov	fp, r1
    705c:	211d      	movs	r1, #29
    705e:	1acb      	subs	r3, r1, r3
    7060:	4651      	mov	r1, sl
    7062:	40d9      	lsrs	r1, r3
    7064:	000b      	movs	r3, r1
    7066:	4659      	mov	r1, fp
    7068:	430b      	orrs	r3, r1
    706a:	4651      	mov	r1, sl
    706c:	469b      	mov	fp, r3
    706e:	4091      	lsls	r1, r2
    7070:	4b26      	ldr	r3, [pc, #152]	; (710c <__aeabi_ddiv+0x1f0>)
    7072:	2200      	movs	r2, #0
    7074:	1a1b      	subs	r3, r3, r0
    7076:	e78f      	b.n	6f98 <__aeabi_ddiv+0x7c>
    7078:	2300      	movs	r3, #0
    707a:	2201      	movs	r2, #1
    707c:	469b      	mov	fp, r3
    707e:	e78b      	b.n	6f98 <__aeabi_ddiv+0x7c>
    7080:	4651      	mov	r1, sl
    7082:	2203      	movs	r2, #3
    7084:	e788      	b.n	6f98 <__aeabi_ddiv+0x7c>
    7086:	2300      	movs	r3, #0
    7088:	4698      	mov	r8, r3
    708a:	3301      	adds	r3, #1
    708c:	2604      	movs	r6, #4
    708e:	2400      	movs	r4, #0
    7090:	9303      	str	r3, [sp, #12]
    7092:	e767      	b.n	6f64 <__aeabi_ddiv+0x48>
    7094:	2303      	movs	r3, #3
    7096:	46b1      	mov	r9, r6
    7098:	9303      	str	r3, [sp, #12]
    709a:	260c      	movs	r6, #12
    709c:	e762      	b.n	6f64 <__aeabi_ddiv+0x48>
    709e:	2a03      	cmp	r2, #3
    70a0:	d100      	bne.n	70a4 <__aeabi_ddiv+0x188>
    70a2:	e25c      	b.n	755e <__aeabi_ddiv+0x642>
    70a4:	9b01      	ldr	r3, [sp, #4]
    70a6:	2a01      	cmp	r2, #1
    70a8:	d000      	beq.n	70ac <__aeabi_ddiv+0x190>
    70aa:	e1e4      	b.n	7476 <__aeabi_ddiv+0x55a>
    70ac:	4013      	ands	r3, r2
    70ae:	469c      	mov	ip, r3
    70b0:	2300      	movs	r3, #0
    70b2:	2400      	movs	r4, #0
    70b4:	2200      	movs	r2, #0
    70b6:	4698      	mov	r8, r3
    70b8:	2100      	movs	r1, #0
    70ba:	0312      	lsls	r2, r2, #12
    70bc:	0b13      	lsrs	r3, r2, #12
    70be:	0d0a      	lsrs	r2, r1, #20
    70c0:	0512      	lsls	r2, r2, #20
    70c2:	431a      	orrs	r2, r3
    70c4:	0523      	lsls	r3, r4, #20
    70c6:	4c12      	ldr	r4, [pc, #72]	; (7110 <__aeabi_ddiv+0x1f4>)
    70c8:	4640      	mov	r0, r8
    70ca:	4022      	ands	r2, r4
    70cc:	4313      	orrs	r3, r2
    70ce:	4662      	mov	r2, ip
    70d0:	005b      	lsls	r3, r3, #1
    70d2:	07d2      	lsls	r2, r2, #31
    70d4:	085b      	lsrs	r3, r3, #1
    70d6:	4313      	orrs	r3, r2
    70d8:	0019      	movs	r1, r3
    70da:	b007      	add	sp, #28
    70dc:	bc3c      	pop	{r2, r3, r4, r5}
    70de:	4690      	mov	r8, r2
    70e0:	4699      	mov	r9, r3
    70e2:	46a2      	mov	sl, r4
    70e4:	46ab      	mov	fp, r5
    70e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70e8:	2300      	movs	r3, #0
    70ea:	2280      	movs	r2, #128	; 0x80
    70ec:	469c      	mov	ip, r3
    70ee:	0312      	lsls	r2, r2, #12
    70f0:	4698      	mov	r8, r3
    70f2:	4c03      	ldr	r4, [pc, #12]	; (7100 <__aeabi_ddiv+0x1e4>)
    70f4:	e7e0      	b.n	70b8 <__aeabi_ddiv+0x19c>
    70f6:	2300      	movs	r3, #0
    70f8:	4c01      	ldr	r4, [pc, #4]	; (7100 <__aeabi_ddiv+0x1e4>)
    70fa:	2200      	movs	r2, #0
    70fc:	4698      	mov	r8, r3
    70fe:	e7db      	b.n	70b8 <__aeabi_ddiv+0x19c>
    7100:	000007ff 	.word	0x000007ff
    7104:	fffffc01 	.word	0xfffffc01
    7108:	000086b8 	.word	0x000086b8
    710c:	fffffc0d 	.word	0xfffffc0d
    7110:	800fffff 	.word	0x800fffff
    7114:	45d9      	cmp	r9, fp
    7116:	d900      	bls.n	711a <__aeabi_ddiv+0x1fe>
    7118:	e139      	b.n	738e <__aeabi_ddiv+0x472>
    711a:	d100      	bne.n	711e <__aeabi_ddiv+0x202>
    711c:	e134      	b.n	7388 <__aeabi_ddiv+0x46c>
    711e:	2300      	movs	r3, #0
    7120:	4646      	mov	r6, r8
    7122:	464d      	mov	r5, r9
    7124:	469a      	mov	sl, r3
    7126:	3c01      	subs	r4, #1
    7128:	465b      	mov	r3, fp
    712a:	0e0a      	lsrs	r2, r1, #24
    712c:	021b      	lsls	r3, r3, #8
    712e:	431a      	orrs	r2, r3
    7130:	020b      	lsls	r3, r1, #8
    7132:	0c17      	lsrs	r7, r2, #16
    7134:	9303      	str	r3, [sp, #12]
    7136:	0413      	lsls	r3, r2, #16
    7138:	0c1b      	lsrs	r3, r3, #16
    713a:	0039      	movs	r1, r7
    713c:	0028      	movs	r0, r5
    713e:	4690      	mov	r8, r2
    7140:	9301      	str	r3, [sp, #4]
    7142:	f7fb f9a3 	bl	248c <__aeabi_uidiv>
    7146:	0002      	movs	r2, r0
    7148:	9b01      	ldr	r3, [sp, #4]
    714a:	4683      	mov	fp, r0
    714c:	435a      	muls	r2, r3
    714e:	0028      	movs	r0, r5
    7150:	0039      	movs	r1, r7
    7152:	4691      	mov	r9, r2
    7154:	f7fb f9e2 	bl	251c <__aeabi_uidivmod>
    7158:	0c35      	lsrs	r5, r6, #16
    715a:	0409      	lsls	r1, r1, #16
    715c:	430d      	orrs	r5, r1
    715e:	45a9      	cmp	r9, r5
    7160:	d90d      	bls.n	717e <__aeabi_ddiv+0x262>
    7162:	465b      	mov	r3, fp
    7164:	4445      	add	r5, r8
    7166:	3b01      	subs	r3, #1
    7168:	45a8      	cmp	r8, r5
    716a:	d900      	bls.n	716e <__aeabi_ddiv+0x252>
    716c:	e13a      	b.n	73e4 <__aeabi_ddiv+0x4c8>
    716e:	45a9      	cmp	r9, r5
    7170:	d800      	bhi.n	7174 <__aeabi_ddiv+0x258>
    7172:	e137      	b.n	73e4 <__aeabi_ddiv+0x4c8>
    7174:	2302      	movs	r3, #2
    7176:	425b      	negs	r3, r3
    7178:	469c      	mov	ip, r3
    717a:	4445      	add	r5, r8
    717c:	44e3      	add	fp, ip
    717e:	464b      	mov	r3, r9
    7180:	1aeb      	subs	r3, r5, r3
    7182:	0039      	movs	r1, r7
    7184:	0018      	movs	r0, r3
    7186:	9304      	str	r3, [sp, #16]
    7188:	f7fb f980 	bl	248c <__aeabi_uidiv>
    718c:	9b01      	ldr	r3, [sp, #4]
    718e:	0005      	movs	r5, r0
    7190:	4343      	muls	r3, r0
    7192:	0039      	movs	r1, r7
    7194:	9804      	ldr	r0, [sp, #16]
    7196:	4699      	mov	r9, r3
    7198:	f7fb f9c0 	bl	251c <__aeabi_uidivmod>
    719c:	0433      	lsls	r3, r6, #16
    719e:	0409      	lsls	r1, r1, #16
    71a0:	0c1b      	lsrs	r3, r3, #16
    71a2:	430b      	orrs	r3, r1
    71a4:	4599      	cmp	r9, r3
    71a6:	d909      	bls.n	71bc <__aeabi_ddiv+0x2a0>
    71a8:	4443      	add	r3, r8
    71aa:	1e6a      	subs	r2, r5, #1
    71ac:	4598      	cmp	r8, r3
    71ae:	d900      	bls.n	71b2 <__aeabi_ddiv+0x296>
    71b0:	e11a      	b.n	73e8 <__aeabi_ddiv+0x4cc>
    71b2:	4599      	cmp	r9, r3
    71b4:	d800      	bhi.n	71b8 <__aeabi_ddiv+0x29c>
    71b6:	e117      	b.n	73e8 <__aeabi_ddiv+0x4cc>
    71b8:	3d02      	subs	r5, #2
    71ba:	4443      	add	r3, r8
    71bc:	464a      	mov	r2, r9
    71be:	1a9b      	subs	r3, r3, r2
    71c0:	465a      	mov	r2, fp
    71c2:	0412      	lsls	r2, r2, #16
    71c4:	432a      	orrs	r2, r5
    71c6:	9903      	ldr	r1, [sp, #12]
    71c8:	4693      	mov	fp, r2
    71ca:	0c10      	lsrs	r0, r2, #16
    71cc:	0c0a      	lsrs	r2, r1, #16
    71ce:	4691      	mov	r9, r2
    71d0:	0409      	lsls	r1, r1, #16
    71d2:	465a      	mov	r2, fp
    71d4:	0c09      	lsrs	r1, r1, #16
    71d6:	464e      	mov	r6, r9
    71d8:	000d      	movs	r5, r1
    71da:	0412      	lsls	r2, r2, #16
    71dc:	0c12      	lsrs	r2, r2, #16
    71de:	4345      	muls	r5, r0
    71e0:	9105      	str	r1, [sp, #20]
    71e2:	4351      	muls	r1, r2
    71e4:	4372      	muls	r2, r6
    71e6:	4370      	muls	r0, r6
    71e8:	1952      	adds	r2, r2, r5
    71ea:	0c0e      	lsrs	r6, r1, #16
    71ec:	18b2      	adds	r2, r6, r2
    71ee:	4295      	cmp	r5, r2
    71f0:	d903      	bls.n	71fa <__aeabi_ddiv+0x2de>
    71f2:	2580      	movs	r5, #128	; 0x80
    71f4:	026d      	lsls	r5, r5, #9
    71f6:	46ac      	mov	ip, r5
    71f8:	4460      	add	r0, ip
    71fa:	0c15      	lsrs	r5, r2, #16
    71fc:	0409      	lsls	r1, r1, #16
    71fe:	0412      	lsls	r2, r2, #16
    7200:	0c09      	lsrs	r1, r1, #16
    7202:	1828      	adds	r0, r5, r0
    7204:	1852      	adds	r2, r2, r1
    7206:	4283      	cmp	r3, r0
    7208:	d200      	bcs.n	720c <__aeabi_ddiv+0x2f0>
    720a:	e0ce      	b.n	73aa <__aeabi_ddiv+0x48e>
    720c:	d100      	bne.n	7210 <__aeabi_ddiv+0x2f4>
    720e:	e0c8      	b.n	73a2 <__aeabi_ddiv+0x486>
    7210:	1a1d      	subs	r5, r3, r0
    7212:	4653      	mov	r3, sl
    7214:	1a9e      	subs	r6, r3, r2
    7216:	45b2      	cmp	sl, r6
    7218:	4192      	sbcs	r2, r2
    721a:	4252      	negs	r2, r2
    721c:	1aab      	subs	r3, r5, r2
    721e:	469a      	mov	sl, r3
    7220:	4598      	cmp	r8, r3
    7222:	d100      	bne.n	7226 <__aeabi_ddiv+0x30a>
    7224:	e117      	b.n	7456 <__aeabi_ddiv+0x53a>
    7226:	0039      	movs	r1, r7
    7228:	0018      	movs	r0, r3
    722a:	f7fb f92f 	bl	248c <__aeabi_uidiv>
    722e:	9b01      	ldr	r3, [sp, #4]
    7230:	0005      	movs	r5, r0
    7232:	4343      	muls	r3, r0
    7234:	0039      	movs	r1, r7
    7236:	4650      	mov	r0, sl
    7238:	9304      	str	r3, [sp, #16]
    723a:	f7fb f96f 	bl	251c <__aeabi_uidivmod>
    723e:	9804      	ldr	r0, [sp, #16]
    7240:	040b      	lsls	r3, r1, #16
    7242:	0c31      	lsrs	r1, r6, #16
    7244:	4319      	orrs	r1, r3
    7246:	4288      	cmp	r0, r1
    7248:	d909      	bls.n	725e <__aeabi_ddiv+0x342>
    724a:	4441      	add	r1, r8
    724c:	1e6b      	subs	r3, r5, #1
    724e:	4588      	cmp	r8, r1
    7250:	d900      	bls.n	7254 <__aeabi_ddiv+0x338>
    7252:	e107      	b.n	7464 <__aeabi_ddiv+0x548>
    7254:	4288      	cmp	r0, r1
    7256:	d800      	bhi.n	725a <__aeabi_ddiv+0x33e>
    7258:	e104      	b.n	7464 <__aeabi_ddiv+0x548>
    725a:	3d02      	subs	r5, #2
    725c:	4441      	add	r1, r8
    725e:	9b04      	ldr	r3, [sp, #16]
    7260:	1acb      	subs	r3, r1, r3
    7262:	0018      	movs	r0, r3
    7264:	0039      	movs	r1, r7
    7266:	9304      	str	r3, [sp, #16]
    7268:	f7fb f910 	bl	248c <__aeabi_uidiv>
    726c:	9b01      	ldr	r3, [sp, #4]
    726e:	4682      	mov	sl, r0
    7270:	4343      	muls	r3, r0
    7272:	0039      	movs	r1, r7
    7274:	9804      	ldr	r0, [sp, #16]
    7276:	9301      	str	r3, [sp, #4]
    7278:	f7fb f950 	bl	251c <__aeabi_uidivmod>
    727c:	9801      	ldr	r0, [sp, #4]
    727e:	040b      	lsls	r3, r1, #16
    7280:	0431      	lsls	r1, r6, #16
    7282:	0c09      	lsrs	r1, r1, #16
    7284:	4319      	orrs	r1, r3
    7286:	4288      	cmp	r0, r1
    7288:	d90d      	bls.n	72a6 <__aeabi_ddiv+0x38a>
    728a:	4653      	mov	r3, sl
    728c:	4441      	add	r1, r8
    728e:	3b01      	subs	r3, #1
    7290:	4588      	cmp	r8, r1
    7292:	d900      	bls.n	7296 <__aeabi_ddiv+0x37a>
    7294:	e0e8      	b.n	7468 <__aeabi_ddiv+0x54c>
    7296:	4288      	cmp	r0, r1
    7298:	d800      	bhi.n	729c <__aeabi_ddiv+0x380>
    729a:	e0e5      	b.n	7468 <__aeabi_ddiv+0x54c>
    729c:	2302      	movs	r3, #2
    729e:	425b      	negs	r3, r3
    72a0:	469c      	mov	ip, r3
    72a2:	4441      	add	r1, r8
    72a4:	44e2      	add	sl, ip
    72a6:	9b01      	ldr	r3, [sp, #4]
    72a8:	042d      	lsls	r5, r5, #16
    72aa:	1ace      	subs	r6, r1, r3
    72ac:	4651      	mov	r1, sl
    72ae:	4329      	orrs	r1, r5
    72b0:	9d05      	ldr	r5, [sp, #20]
    72b2:	464f      	mov	r7, r9
    72b4:	002a      	movs	r2, r5
    72b6:	040b      	lsls	r3, r1, #16
    72b8:	0c08      	lsrs	r0, r1, #16
    72ba:	0c1b      	lsrs	r3, r3, #16
    72bc:	435a      	muls	r2, r3
    72be:	4345      	muls	r5, r0
    72c0:	437b      	muls	r3, r7
    72c2:	4378      	muls	r0, r7
    72c4:	195b      	adds	r3, r3, r5
    72c6:	0c17      	lsrs	r7, r2, #16
    72c8:	18fb      	adds	r3, r7, r3
    72ca:	429d      	cmp	r5, r3
    72cc:	d903      	bls.n	72d6 <__aeabi_ddiv+0x3ba>
    72ce:	2580      	movs	r5, #128	; 0x80
    72d0:	026d      	lsls	r5, r5, #9
    72d2:	46ac      	mov	ip, r5
    72d4:	4460      	add	r0, ip
    72d6:	0c1d      	lsrs	r5, r3, #16
    72d8:	0412      	lsls	r2, r2, #16
    72da:	041b      	lsls	r3, r3, #16
    72dc:	0c12      	lsrs	r2, r2, #16
    72de:	1828      	adds	r0, r5, r0
    72e0:	189b      	adds	r3, r3, r2
    72e2:	4286      	cmp	r6, r0
    72e4:	d200      	bcs.n	72e8 <__aeabi_ddiv+0x3cc>
    72e6:	e093      	b.n	7410 <__aeabi_ddiv+0x4f4>
    72e8:	d100      	bne.n	72ec <__aeabi_ddiv+0x3d0>
    72ea:	e08e      	b.n	740a <__aeabi_ddiv+0x4ee>
    72ec:	2301      	movs	r3, #1
    72ee:	4319      	orrs	r1, r3
    72f0:	4ba0      	ldr	r3, [pc, #640]	; (7574 <__aeabi_ddiv+0x658>)
    72f2:	18e3      	adds	r3, r4, r3
    72f4:	2b00      	cmp	r3, #0
    72f6:	dc00      	bgt.n	72fa <__aeabi_ddiv+0x3de>
    72f8:	e099      	b.n	742e <__aeabi_ddiv+0x512>
    72fa:	074a      	lsls	r2, r1, #29
    72fc:	d000      	beq.n	7300 <__aeabi_ddiv+0x3e4>
    72fe:	e09e      	b.n	743e <__aeabi_ddiv+0x522>
    7300:	465a      	mov	r2, fp
    7302:	01d2      	lsls	r2, r2, #7
    7304:	d506      	bpl.n	7314 <__aeabi_ddiv+0x3f8>
    7306:	465a      	mov	r2, fp
    7308:	4b9b      	ldr	r3, [pc, #620]	; (7578 <__aeabi_ddiv+0x65c>)
    730a:	401a      	ands	r2, r3
    730c:	2380      	movs	r3, #128	; 0x80
    730e:	4693      	mov	fp, r2
    7310:	00db      	lsls	r3, r3, #3
    7312:	18e3      	adds	r3, r4, r3
    7314:	4a99      	ldr	r2, [pc, #612]	; (757c <__aeabi_ddiv+0x660>)
    7316:	4293      	cmp	r3, r2
    7318:	dd68      	ble.n	73ec <__aeabi_ddiv+0x4d0>
    731a:	2301      	movs	r3, #1
    731c:	9a02      	ldr	r2, [sp, #8]
    731e:	4c98      	ldr	r4, [pc, #608]	; (7580 <__aeabi_ddiv+0x664>)
    7320:	401a      	ands	r2, r3
    7322:	2300      	movs	r3, #0
    7324:	4694      	mov	ip, r2
    7326:	4698      	mov	r8, r3
    7328:	2200      	movs	r2, #0
    732a:	e6c5      	b.n	70b8 <__aeabi_ddiv+0x19c>
    732c:	2280      	movs	r2, #128	; 0x80
    732e:	464b      	mov	r3, r9
    7330:	0312      	lsls	r2, r2, #12
    7332:	4213      	tst	r3, r2
    7334:	d00a      	beq.n	734c <__aeabi_ddiv+0x430>
    7336:	465b      	mov	r3, fp
    7338:	4213      	tst	r3, r2
    733a:	d106      	bne.n	734a <__aeabi_ddiv+0x42e>
    733c:	431a      	orrs	r2, r3
    733e:	0312      	lsls	r2, r2, #12
    7340:	0b12      	lsrs	r2, r2, #12
    7342:	46ac      	mov	ip, r5
    7344:	4688      	mov	r8, r1
    7346:	4c8e      	ldr	r4, [pc, #568]	; (7580 <__aeabi_ddiv+0x664>)
    7348:	e6b6      	b.n	70b8 <__aeabi_ddiv+0x19c>
    734a:	464b      	mov	r3, r9
    734c:	431a      	orrs	r2, r3
    734e:	0312      	lsls	r2, r2, #12
    7350:	0b12      	lsrs	r2, r2, #12
    7352:	46bc      	mov	ip, r7
    7354:	4c8a      	ldr	r4, [pc, #552]	; (7580 <__aeabi_ddiv+0x664>)
    7356:	e6af      	b.n	70b8 <__aeabi_ddiv+0x19c>
    7358:	0003      	movs	r3, r0
    735a:	465a      	mov	r2, fp
    735c:	3b28      	subs	r3, #40	; 0x28
    735e:	409a      	lsls	r2, r3
    7360:	2300      	movs	r3, #0
    7362:	4691      	mov	r9, r2
    7364:	4698      	mov	r8, r3
    7366:	e657      	b.n	7018 <__aeabi_ddiv+0xfc>
    7368:	4658      	mov	r0, fp
    736a:	f000 ffe3 	bl	8334 <__clzsi2>
    736e:	3020      	adds	r0, #32
    7370:	e640      	b.n	6ff4 <__aeabi_ddiv+0xd8>
    7372:	0003      	movs	r3, r0
    7374:	4652      	mov	r2, sl
    7376:	3b28      	subs	r3, #40	; 0x28
    7378:	409a      	lsls	r2, r3
    737a:	2100      	movs	r1, #0
    737c:	4693      	mov	fp, r2
    737e:	e677      	b.n	7070 <__aeabi_ddiv+0x154>
    7380:	f000 ffd8 	bl	8334 <__clzsi2>
    7384:	3020      	adds	r0, #32
    7386:	e65f      	b.n	7048 <__aeabi_ddiv+0x12c>
    7388:	4588      	cmp	r8, r1
    738a:	d200      	bcs.n	738e <__aeabi_ddiv+0x472>
    738c:	e6c7      	b.n	711e <__aeabi_ddiv+0x202>
    738e:	464b      	mov	r3, r9
    7390:	07de      	lsls	r6, r3, #31
    7392:	085d      	lsrs	r5, r3, #1
    7394:	4643      	mov	r3, r8
    7396:	085b      	lsrs	r3, r3, #1
    7398:	431e      	orrs	r6, r3
    739a:	4643      	mov	r3, r8
    739c:	07db      	lsls	r3, r3, #31
    739e:	469a      	mov	sl, r3
    73a0:	e6c2      	b.n	7128 <__aeabi_ddiv+0x20c>
    73a2:	2500      	movs	r5, #0
    73a4:	4592      	cmp	sl, r2
    73a6:	d300      	bcc.n	73aa <__aeabi_ddiv+0x48e>
    73a8:	e733      	b.n	7212 <__aeabi_ddiv+0x2f6>
    73aa:	9e03      	ldr	r6, [sp, #12]
    73ac:	4659      	mov	r1, fp
    73ae:	46b4      	mov	ip, r6
    73b0:	44e2      	add	sl, ip
    73b2:	45b2      	cmp	sl, r6
    73b4:	41ad      	sbcs	r5, r5
    73b6:	426d      	negs	r5, r5
    73b8:	4445      	add	r5, r8
    73ba:	18eb      	adds	r3, r5, r3
    73bc:	3901      	subs	r1, #1
    73be:	4598      	cmp	r8, r3
    73c0:	d207      	bcs.n	73d2 <__aeabi_ddiv+0x4b6>
    73c2:	4298      	cmp	r0, r3
    73c4:	d900      	bls.n	73c8 <__aeabi_ddiv+0x4ac>
    73c6:	e07f      	b.n	74c8 <__aeabi_ddiv+0x5ac>
    73c8:	d100      	bne.n	73cc <__aeabi_ddiv+0x4b0>
    73ca:	e0bc      	b.n	7546 <__aeabi_ddiv+0x62a>
    73cc:	1a1d      	subs	r5, r3, r0
    73ce:	468b      	mov	fp, r1
    73d0:	e71f      	b.n	7212 <__aeabi_ddiv+0x2f6>
    73d2:	4598      	cmp	r8, r3
    73d4:	d1fa      	bne.n	73cc <__aeabi_ddiv+0x4b0>
    73d6:	9d03      	ldr	r5, [sp, #12]
    73d8:	4555      	cmp	r5, sl
    73da:	d9f2      	bls.n	73c2 <__aeabi_ddiv+0x4a6>
    73dc:	4643      	mov	r3, r8
    73de:	468b      	mov	fp, r1
    73e0:	1a1d      	subs	r5, r3, r0
    73e2:	e716      	b.n	7212 <__aeabi_ddiv+0x2f6>
    73e4:	469b      	mov	fp, r3
    73e6:	e6ca      	b.n	717e <__aeabi_ddiv+0x262>
    73e8:	0015      	movs	r5, r2
    73ea:	e6e7      	b.n	71bc <__aeabi_ddiv+0x2a0>
    73ec:	465a      	mov	r2, fp
    73ee:	08c9      	lsrs	r1, r1, #3
    73f0:	0752      	lsls	r2, r2, #29
    73f2:	430a      	orrs	r2, r1
    73f4:	055b      	lsls	r3, r3, #21
    73f6:	4690      	mov	r8, r2
    73f8:	0d5c      	lsrs	r4, r3, #21
    73fa:	465a      	mov	r2, fp
    73fc:	2301      	movs	r3, #1
    73fe:	9902      	ldr	r1, [sp, #8]
    7400:	0252      	lsls	r2, r2, #9
    7402:	4019      	ands	r1, r3
    7404:	0b12      	lsrs	r2, r2, #12
    7406:	468c      	mov	ip, r1
    7408:	e656      	b.n	70b8 <__aeabi_ddiv+0x19c>
    740a:	2b00      	cmp	r3, #0
    740c:	d100      	bne.n	7410 <__aeabi_ddiv+0x4f4>
    740e:	e76f      	b.n	72f0 <__aeabi_ddiv+0x3d4>
    7410:	4446      	add	r6, r8
    7412:	1e4a      	subs	r2, r1, #1
    7414:	45b0      	cmp	r8, r6
    7416:	d929      	bls.n	746c <__aeabi_ddiv+0x550>
    7418:	0011      	movs	r1, r2
    741a:	4286      	cmp	r6, r0
    741c:	d000      	beq.n	7420 <__aeabi_ddiv+0x504>
    741e:	e765      	b.n	72ec <__aeabi_ddiv+0x3d0>
    7420:	9a03      	ldr	r2, [sp, #12]
    7422:	4293      	cmp	r3, r2
    7424:	d000      	beq.n	7428 <__aeabi_ddiv+0x50c>
    7426:	e761      	b.n	72ec <__aeabi_ddiv+0x3d0>
    7428:	e762      	b.n	72f0 <__aeabi_ddiv+0x3d4>
    742a:	2101      	movs	r1, #1
    742c:	4249      	negs	r1, r1
    742e:	2001      	movs	r0, #1
    7430:	1ac2      	subs	r2, r0, r3
    7432:	2a38      	cmp	r2, #56	; 0x38
    7434:	dd21      	ble.n	747a <__aeabi_ddiv+0x55e>
    7436:	9b02      	ldr	r3, [sp, #8]
    7438:	4003      	ands	r3, r0
    743a:	469c      	mov	ip, r3
    743c:	e638      	b.n	70b0 <__aeabi_ddiv+0x194>
    743e:	220f      	movs	r2, #15
    7440:	400a      	ands	r2, r1
    7442:	2a04      	cmp	r2, #4
    7444:	d100      	bne.n	7448 <__aeabi_ddiv+0x52c>
    7446:	e75b      	b.n	7300 <__aeabi_ddiv+0x3e4>
    7448:	000a      	movs	r2, r1
    744a:	1d11      	adds	r1, r2, #4
    744c:	4291      	cmp	r1, r2
    744e:	4192      	sbcs	r2, r2
    7450:	4252      	negs	r2, r2
    7452:	4493      	add	fp, r2
    7454:	e754      	b.n	7300 <__aeabi_ddiv+0x3e4>
    7456:	4b47      	ldr	r3, [pc, #284]	; (7574 <__aeabi_ddiv+0x658>)
    7458:	18e3      	adds	r3, r4, r3
    745a:	2b00      	cmp	r3, #0
    745c:	dde5      	ble.n	742a <__aeabi_ddiv+0x50e>
    745e:	2201      	movs	r2, #1
    7460:	4252      	negs	r2, r2
    7462:	e7f2      	b.n	744a <__aeabi_ddiv+0x52e>
    7464:	001d      	movs	r5, r3
    7466:	e6fa      	b.n	725e <__aeabi_ddiv+0x342>
    7468:	469a      	mov	sl, r3
    746a:	e71c      	b.n	72a6 <__aeabi_ddiv+0x38a>
    746c:	42b0      	cmp	r0, r6
    746e:	d839      	bhi.n	74e4 <__aeabi_ddiv+0x5c8>
    7470:	d06e      	beq.n	7550 <__aeabi_ddiv+0x634>
    7472:	0011      	movs	r1, r2
    7474:	e73a      	b.n	72ec <__aeabi_ddiv+0x3d0>
    7476:	9302      	str	r3, [sp, #8]
    7478:	e73a      	b.n	72f0 <__aeabi_ddiv+0x3d4>
    747a:	2a1f      	cmp	r2, #31
    747c:	dc3c      	bgt.n	74f8 <__aeabi_ddiv+0x5dc>
    747e:	2320      	movs	r3, #32
    7480:	1a9b      	subs	r3, r3, r2
    7482:	000c      	movs	r4, r1
    7484:	4658      	mov	r0, fp
    7486:	4099      	lsls	r1, r3
    7488:	4098      	lsls	r0, r3
    748a:	1e4b      	subs	r3, r1, #1
    748c:	4199      	sbcs	r1, r3
    748e:	465b      	mov	r3, fp
    7490:	40d4      	lsrs	r4, r2
    7492:	40d3      	lsrs	r3, r2
    7494:	4320      	orrs	r0, r4
    7496:	4308      	orrs	r0, r1
    7498:	001a      	movs	r2, r3
    749a:	0743      	lsls	r3, r0, #29
    749c:	d009      	beq.n	74b2 <__aeabi_ddiv+0x596>
    749e:	230f      	movs	r3, #15
    74a0:	4003      	ands	r3, r0
    74a2:	2b04      	cmp	r3, #4
    74a4:	d005      	beq.n	74b2 <__aeabi_ddiv+0x596>
    74a6:	0001      	movs	r1, r0
    74a8:	1d08      	adds	r0, r1, #4
    74aa:	4288      	cmp	r0, r1
    74ac:	419b      	sbcs	r3, r3
    74ae:	425b      	negs	r3, r3
    74b0:	18d2      	adds	r2, r2, r3
    74b2:	0213      	lsls	r3, r2, #8
    74b4:	d53a      	bpl.n	752c <__aeabi_ddiv+0x610>
    74b6:	2301      	movs	r3, #1
    74b8:	9a02      	ldr	r2, [sp, #8]
    74ba:	2401      	movs	r4, #1
    74bc:	401a      	ands	r2, r3
    74be:	2300      	movs	r3, #0
    74c0:	4694      	mov	ip, r2
    74c2:	4698      	mov	r8, r3
    74c4:	2200      	movs	r2, #0
    74c6:	e5f7      	b.n	70b8 <__aeabi_ddiv+0x19c>
    74c8:	2102      	movs	r1, #2
    74ca:	4249      	negs	r1, r1
    74cc:	468c      	mov	ip, r1
    74ce:	9d03      	ldr	r5, [sp, #12]
    74d0:	44e3      	add	fp, ip
    74d2:	46ac      	mov	ip, r5
    74d4:	44e2      	add	sl, ip
    74d6:	45aa      	cmp	sl, r5
    74d8:	41ad      	sbcs	r5, r5
    74da:	426d      	negs	r5, r5
    74dc:	4445      	add	r5, r8
    74de:	18ed      	adds	r5, r5, r3
    74e0:	1a2d      	subs	r5, r5, r0
    74e2:	e696      	b.n	7212 <__aeabi_ddiv+0x2f6>
    74e4:	1e8a      	subs	r2, r1, #2
    74e6:	9903      	ldr	r1, [sp, #12]
    74e8:	004d      	lsls	r5, r1, #1
    74ea:	428d      	cmp	r5, r1
    74ec:	4189      	sbcs	r1, r1
    74ee:	4249      	negs	r1, r1
    74f0:	4441      	add	r1, r8
    74f2:	1876      	adds	r6, r6, r1
    74f4:	9503      	str	r5, [sp, #12]
    74f6:	e78f      	b.n	7418 <__aeabi_ddiv+0x4fc>
    74f8:	201f      	movs	r0, #31
    74fa:	4240      	negs	r0, r0
    74fc:	1ac3      	subs	r3, r0, r3
    74fe:	4658      	mov	r0, fp
    7500:	40d8      	lsrs	r0, r3
    7502:	0003      	movs	r3, r0
    7504:	2a20      	cmp	r2, #32
    7506:	d028      	beq.n	755a <__aeabi_ddiv+0x63e>
    7508:	2040      	movs	r0, #64	; 0x40
    750a:	465d      	mov	r5, fp
    750c:	1a82      	subs	r2, r0, r2
    750e:	4095      	lsls	r5, r2
    7510:	4329      	orrs	r1, r5
    7512:	1e4a      	subs	r2, r1, #1
    7514:	4191      	sbcs	r1, r2
    7516:	4319      	orrs	r1, r3
    7518:	2307      	movs	r3, #7
    751a:	2200      	movs	r2, #0
    751c:	400b      	ands	r3, r1
    751e:	d009      	beq.n	7534 <__aeabi_ddiv+0x618>
    7520:	230f      	movs	r3, #15
    7522:	2200      	movs	r2, #0
    7524:	400b      	ands	r3, r1
    7526:	0008      	movs	r0, r1
    7528:	2b04      	cmp	r3, #4
    752a:	d1bd      	bne.n	74a8 <__aeabi_ddiv+0x58c>
    752c:	0001      	movs	r1, r0
    752e:	0753      	lsls	r3, r2, #29
    7530:	0252      	lsls	r2, r2, #9
    7532:	0b12      	lsrs	r2, r2, #12
    7534:	08c9      	lsrs	r1, r1, #3
    7536:	4319      	orrs	r1, r3
    7538:	2301      	movs	r3, #1
    753a:	4688      	mov	r8, r1
    753c:	9902      	ldr	r1, [sp, #8]
    753e:	2400      	movs	r4, #0
    7540:	4019      	ands	r1, r3
    7542:	468c      	mov	ip, r1
    7544:	e5b8      	b.n	70b8 <__aeabi_ddiv+0x19c>
    7546:	4552      	cmp	r2, sl
    7548:	d8be      	bhi.n	74c8 <__aeabi_ddiv+0x5ac>
    754a:	468b      	mov	fp, r1
    754c:	2500      	movs	r5, #0
    754e:	e660      	b.n	7212 <__aeabi_ddiv+0x2f6>
    7550:	9d03      	ldr	r5, [sp, #12]
    7552:	429d      	cmp	r5, r3
    7554:	d3c6      	bcc.n	74e4 <__aeabi_ddiv+0x5c8>
    7556:	0011      	movs	r1, r2
    7558:	e762      	b.n	7420 <__aeabi_ddiv+0x504>
    755a:	2500      	movs	r5, #0
    755c:	e7d8      	b.n	7510 <__aeabi_ddiv+0x5f4>
    755e:	2280      	movs	r2, #128	; 0x80
    7560:	465b      	mov	r3, fp
    7562:	0312      	lsls	r2, r2, #12
    7564:	431a      	orrs	r2, r3
    7566:	9b01      	ldr	r3, [sp, #4]
    7568:	0312      	lsls	r2, r2, #12
    756a:	0b12      	lsrs	r2, r2, #12
    756c:	469c      	mov	ip, r3
    756e:	4688      	mov	r8, r1
    7570:	4c03      	ldr	r4, [pc, #12]	; (7580 <__aeabi_ddiv+0x664>)
    7572:	e5a1      	b.n	70b8 <__aeabi_ddiv+0x19c>
    7574:	000003ff 	.word	0x000003ff
    7578:	feffffff 	.word	0xfeffffff
    757c:	000007fe 	.word	0x000007fe
    7580:	000007ff 	.word	0x000007ff

00007584 <__eqdf2>:
    7584:	b5f0      	push	{r4, r5, r6, r7, lr}
    7586:	464f      	mov	r7, r9
    7588:	4646      	mov	r6, r8
    758a:	46d6      	mov	lr, sl
    758c:	005c      	lsls	r4, r3, #1
    758e:	b5c0      	push	{r6, r7, lr}
    7590:	031f      	lsls	r7, r3, #12
    7592:	0fdb      	lsrs	r3, r3, #31
    7594:	469a      	mov	sl, r3
    7596:	4b17      	ldr	r3, [pc, #92]	; (75f4 <__eqdf2+0x70>)
    7598:	030e      	lsls	r6, r1, #12
    759a:	004d      	lsls	r5, r1, #1
    759c:	4684      	mov	ip, r0
    759e:	4680      	mov	r8, r0
    75a0:	0b36      	lsrs	r6, r6, #12
    75a2:	0d6d      	lsrs	r5, r5, #21
    75a4:	0fc9      	lsrs	r1, r1, #31
    75a6:	4691      	mov	r9, r2
    75a8:	0b3f      	lsrs	r7, r7, #12
    75aa:	0d64      	lsrs	r4, r4, #21
    75ac:	2001      	movs	r0, #1
    75ae:	429d      	cmp	r5, r3
    75b0:	d008      	beq.n	75c4 <__eqdf2+0x40>
    75b2:	429c      	cmp	r4, r3
    75b4:	d001      	beq.n	75ba <__eqdf2+0x36>
    75b6:	42a5      	cmp	r5, r4
    75b8:	d00b      	beq.n	75d2 <__eqdf2+0x4e>
    75ba:	bc1c      	pop	{r2, r3, r4}
    75bc:	4690      	mov	r8, r2
    75be:	4699      	mov	r9, r3
    75c0:	46a2      	mov	sl, r4
    75c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75c4:	4663      	mov	r3, ip
    75c6:	4333      	orrs	r3, r6
    75c8:	d1f7      	bne.n	75ba <__eqdf2+0x36>
    75ca:	42ac      	cmp	r4, r5
    75cc:	d1f5      	bne.n	75ba <__eqdf2+0x36>
    75ce:	433a      	orrs	r2, r7
    75d0:	d1f3      	bne.n	75ba <__eqdf2+0x36>
    75d2:	2001      	movs	r0, #1
    75d4:	42be      	cmp	r6, r7
    75d6:	d1f0      	bne.n	75ba <__eqdf2+0x36>
    75d8:	45c8      	cmp	r8, r9
    75da:	d1ee      	bne.n	75ba <__eqdf2+0x36>
    75dc:	4551      	cmp	r1, sl
    75de:	d007      	beq.n	75f0 <__eqdf2+0x6c>
    75e0:	2d00      	cmp	r5, #0
    75e2:	d1ea      	bne.n	75ba <__eqdf2+0x36>
    75e4:	4663      	mov	r3, ip
    75e6:	431e      	orrs	r6, r3
    75e8:	0030      	movs	r0, r6
    75ea:	1e46      	subs	r6, r0, #1
    75ec:	41b0      	sbcs	r0, r6
    75ee:	e7e4      	b.n	75ba <__eqdf2+0x36>
    75f0:	2000      	movs	r0, #0
    75f2:	e7e2      	b.n	75ba <__eqdf2+0x36>
    75f4:	000007ff 	.word	0x000007ff

000075f8 <__gedf2>:
    75f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    75fa:	4645      	mov	r5, r8
    75fc:	46de      	mov	lr, fp
    75fe:	4657      	mov	r7, sl
    7600:	464e      	mov	r6, r9
    7602:	b5e0      	push	{r5, r6, r7, lr}
    7604:	031f      	lsls	r7, r3, #12
    7606:	0b3d      	lsrs	r5, r7, #12
    7608:	4f2c      	ldr	r7, [pc, #176]	; (76bc <__gedf2+0xc4>)
    760a:	030e      	lsls	r6, r1, #12
    760c:	004c      	lsls	r4, r1, #1
    760e:	46ab      	mov	fp, r5
    7610:	005d      	lsls	r5, r3, #1
    7612:	4684      	mov	ip, r0
    7614:	0b36      	lsrs	r6, r6, #12
    7616:	0d64      	lsrs	r4, r4, #21
    7618:	0fc9      	lsrs	r1, r1, #31
    761a:	4690      	mov	r8, r2
    761c:	0d6d      	lsrs	r5, r5, #21
    761e:	0fdb      	lsrs	r3, r3, #31
    7620:	42bc      	cmp	r4, r7
    7622:	d02a      	beq.n	767a <__gedf2+0x82>
    7624:	4f25      	ldr	r7, [pc, #148]	; (76bc <__gedf2+0xc4>)
    7626:	42bd      	cmp	r5, r7
    7628:	d02d      	beq.n	7686 <__gedf2+0x8e>
    762a:	2c00      	cmp	r4, #0
    762c:	d10f      	bne.n	764e <__gedf2+0x56>
    762e:	4330      	orrs	r0, r6
    7630:	0007      	movs	r7, r0
    7632:	4681      	mov	r9, r0
    7634:	4278      	negs	r0, r7
    7636:	4178      	adcs	r0, r7
    7638:	b2c0      	uxtb	r0, r0
    763a:	2d00      	cmp	r5, #0
    763c:	d117      	bne.n	766e <__gedf2+0x76>
    763e:	465f      	mov	r7, fp
    7640:	433a      	orrs	r2, r7
    7642:	d114      	bne.n	766e <__gedf2+0x76>
    7644:	464b      	mov	r3, r9
    7646:	2000      	movs	r0, #0
    7648:	2b00      	cmp	r3, #0
    764a:	d00a      	beq.n	7662 <__gedf2+0x6a>
    764c:	e006      	b.n	765c <__gedf2+0x64>
    764e:	2d00      	cmp	r5, #0
    7650:	d102      	bne.n	7658 <__gedf2+0x60>
    7652:	4658      	mov	r0, fp
    7654:	4302      	orrs	r2, r0
    7656:	d001      	beq.n	765c <__gedf2+0x64>
    7658:	4299      	cmp	r1, r3
    765a:	d018      	beq.n	768e <__gedf2+0x96>
    765c:	4248      	negs	r0, r1
    765e:	2101      	movs	r1, #1
    7660:	4308      	orrs	r0, r1
    7662:	bc3c      	pop	{r2, r3, r4, r5}
    7664:	4690      	mov	r8, r2
    7666:	4699      	mov	r9, r3
    7668:	46a2      	mov	sl, r4
    766a:	46ab      	mov	fp, r5
    766c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    766e:	2800      	cmp	r0, #0
    7670:	d0f2      	beq.n	7658 <__gedf2+0x60>
    7672:	2001      	movs	r0, #1
    7674:	3b01      	subs	r3, #1
    7676:	4318      	orrs	r0, r3
    7678:	e7f3      	b.n	7662 <__gedf2+0x6a>
    767a:	0037      	movs	r7, r6
    767c:	4307      	orrs	r7, r0
    767e:	d0d1      	beq.n	7624 <__gedf2+0x2c>
    7680:	2002      	movs	r0, #2
    7682:	4240      	negs	r0, r0
    7684:	e7ed      	b.n	7662 <__gedf2+0x6a>
    7686:	465f      	mov	r7, fp
    7688:	4317      	orrs	r7, r2
    768a:	d0ce      	beq.n	762a <__gedf2+0x32>
    768c:	e7f8      	b.n	7680 <__gedf2+0x88>
    768e:	42ac      	cmp	r4, r5
    7690:	dce4      	bgt.n	765c <__gedf2+0x64>
    7692:	da03      	bge.n	769c <__gedf2+0xa4>
    7694:	1e48      	subs	r0, r1, #1
    7696:	2101      	movs	r1, #1
    7698:	4308      	orrs	r0, r1
    769a:	e7e2      	b.n	7662 <__gedf2+0x6a>
    769c:	455e      	cmp	r6, fp
    769e:	d8dd      	bhi.n	765c <__gedf2+0x64>
    76a0:	d006      	beq.n	76b0 <__gedf2+0xb8>
    76a2:	2000      	movs	r0, #0
    76a4:	455e      	cmp	r6, fp
    76a6:	d2dc      	bcs.n	7662 <__gedf2+0x6a>
    76a8:	2301      	movs	r3, #1
    76aa:	1e48      	subs	r0, r1, #1
    76ac:	4318      	orrs	r0, r3
    76ae:	e7d8      	b.n	7662 <__gedf2+0x6a>
    76b0:	45c4      	cmp	ip, r8
    76b2:	d8d3      	bhi.n	765c <__gedf2+0x64>
    76b4:	2000      	movs	r0, #0
    76b6:	45c4      	cmp	ip, r8
    76b8:	d3f6      	bcc.n	76a8 <__gedf2+0xb0>
    76ba:	e7d2      	b.n	7662 <__gedf2+0x6a>
    76bc:	000007ff 	.word	0x000007ff

000076c0 <__ledf2>:
    76c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    76c2:	464e      	mov	r6, r9
    76c4:	4645      	mov	r5, r8
    76c6:	46de      	mov	lr, fp
    76c8:	4657      	mov	r7, sl
    76ca:	005c      	lsls	r4, r3, #1
    76cc:	b5e0      	push	{r5, r6, r7, lr}
    76ce:	031f      	lsls	r7, r3, #12
    76d0:	0fdb      	lsrs	r3, r3, #31
    76d2:	4699      	mov	r9, r3
    76d4:	4b2a      	ldr	r3, [pc, #168]	; (7780 <__ledf2+0xc0>)
    76d6:	030e      	lsls	r6, r1, #12
    76d8:	004d      	lsls	r5, r1, #1
    76da:	0fc9      	lsrs	r1, r1, #31
    76dc:	4684      	mov	ip, r0
    76de:	0b36      	lsrs	r6, r6, #12
    76e0:	0d6d      	lsrs	r5, r5, #21
    76e2:	468b      	mov	fp, r1
    76e4:	4690      	mov	r8, r2
    76e6:	0b3f      	lsrs	r7, r7, #12
    76e8:	0d64      	lsrs	r4, r4, #21
    76ea:	429d      	cmp	r5, r3
    76ec:	d020      	beq.n	7730 <__ledf2+0x70>
    76ee:	4b24      	ldr	r3, [pc, #144]	; (7780 <__ledf2+0xc0>)
    76f0:	429c      	cmp	r4, r3
    76f2:	d022      	beq.n	773a <__ledf2+0x7a>
    76f4:	2d00      	cmp	r5, #0
    76f6:	d112      	bne.n	771e <__ledf2+0x5e>
    76f8:	4330      	orrs	r0, r6
    76fa:	4243      	negs	r3, r0
    76fc:	4143      	adcs	r3, r0
    76fe:	b2db      	uxtb	r3, r3
    7700:	2c00      	cmp	r4, #0
    7702:	d01f      	beq.n	7744 <__ledf2+0x84>
    7704:	2b00      	cmp	r3, #0
    7706:	d00c      	beq.n	7722 <__ledf2+0x62>
    7708:	464b      	mov	r3, r9
    770a:	2001      	movs	r0, #1
    770c:	3b01      	subs	r3, #1
    770e:	4303      	orrs	r3, r0
    7710:	0018      	movs	r0, r3
    7712:	bc3c      	pop	{r2, r3, r4, r5}
    7714:	4690      	mov	r8, r2
    7716:	4699      	mov	r9, r3
    7718:	46a2      	mov	sl, r4
    771a:	46ab      	mov	fp, r5
    771c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    771e:	2c00      	cmp	r4, #0
    7720:	d016      	beq.n	7750 <__ledf2+0x90>
    7722:	45cb      	cmp	fp, r9
    7724:	d017      	beq.n	7756 <__ledf2+0x96>
    7726:	465b      	mov	r3, fp
    7728:	4259      	negs	r1, r3
    772a:	2301      	movs	r3, #1
    772c:	430b      	orrs	r3, r1
    772e:	e7ef      	b.n	7710 <__ledf2+0x50>
    7730:	0031      	movs	r1, r6
    7732:	2302      	movs	r3, #2
    7734:	4301      	orrs	r1, r0
    7736:	d1eb      	bne.n	7710 <__ledf2+0x50>
    7738:	e7d9      	b.n	76ee <__ledf2+0x2e>
    773a:	0039      	movs	r1, r7
    773c:	2302      	movs	r3, #2
    773e:	4311      	orrs	r1, r2
    7740:	d1e6      	bne.n	7710 <__ledf2+0x50>
    7742:	e7d7      	b.n	76f4 <__ledf2+0x34>
    7744:	433a      	orrs	r2, r7
    7746:	d1dd      	bne.n	7704 <__ledf2+0x44>
    7748:	2300      	movs	r3, #0
    774a:	2800      	cmp	r0, #0
    774c:	d0e0      	beq.n	7710 <__ledf2+0x50>
    774e:	e7ea      	b.n	7726 <__ledf2+0x66>
    7750:	433a      	orrs	r2, r7
    7752:	d1e6      	bne.n	7722 <__ledf2+0x62>
    7754:	e7e7      	b.n	7726 <__ledf2+0x66>
    7756:	42a5      	cmp	r5, r4
    7758:	dce5      	bgt.n	7726 <__ledf2+0x66>
    775a:	db05      	blt.n	7768 <__ledf2+0xa8>
    775c:	42be      	cmp	r6, r7
    775e:	d8e2      	bhi.n	7726 <__ledf2+0x66>
    7760:	d007      	beq.n	7772 <__ledf2+0xb2>
    7762:	2300      	movs	r3, #0
    7764:	42be      	cmp	r6, r7
    7766:	d2d3      	bcs.n	7710 <__ledf2+0x50>
    7768:	4659      	mov	r1, fp
    776a:	2301      	movs	r3, #1
    776c:	3901      	subs	r1, #1
    776e:	430b      	orrs	r3, r1
    7770:	e7ce      	b.n	7710 <__ledf2+0x50>
    7772:	45c4      	cmp	ip, r8
    7774:	d8d7      	bhi.n	7726 <__ledf2+0x66>
    7776:	2300      	movs	r3, #0
    7778:	45c4      	cmp	ip, r8
    777a:	d3f5      	bcc.n	7768 <__ledf2+0xa8>
    777c:	e7c8      	b.n	7710 <__ledf2+0x50>
    777e:	46c0      	nop			; (mov r8, r8)
    7780:	000007ff 	.word	0x000007ff

00007784 <__aeabi_dmul>:
    7784:	b5f0      	push	{r4, r5, r6, r7, lr}
    7786:	4657      	mov	r7, sl
    7788:	4645      	mov	r5, r8
    778a:	46de      	mov	lr, fp
    778c:	464e      	mov	r6, r9
    778e:	b5e0      	push	{r5, r6, r7, lr}
    7790:	030c      	lsls	r4, r1, #12
    7792:	4698      	mov	r8, r3
    7794:	004e      	lsls	r6, r1, #1
    7796:	0b23      	lsrs	r3, r4, #12
    7798:	b087      	sub	sp, #28
    779a:	0007      	movs	r7, r0
    779c:	4692      	mov	sl, r2
    779e:	469b      	mov	fp, r3
    77a0:	0d76      	lsrs	r6, r6, #21
    77a2:	0fcd      	lsrs	r5, r1, #31
    77a4:	2e00      	cmp	r6, #0
    77a6:	d06b      	beq.n	7880 <__aeabi_dmul+0xfc>
    77a8:	4b6d      	ldr	r3, [pc, #436]	; (7960 <__aeabi_dmul+0x1dc>)
    77aa:	429e      	cmp	r6, r3
    77ac:	d035      	beq.n	781a <__aeabi_dmul+0x96>
    77ae:	2480      	movs	r4, #128	; 0x80
    77b0:	465b      	mov	r3, fp
    77b2:	0f42      	lsrs	r2, r0, #29
    77b4:	0424      	lsls	r4, r4, #16
    77b6:	00db      	lsls	r3, r3, #3
    77b8:	4314      	orrs	r4, r2
    77ba:	431c      	orrs	r4, r3
    77bc:	00c3      	lsls	r3, r0, #3
    77be:	4699      	mov	r9, r3
    77c0:	4b68      	ldr	r3, [pc, #416]	; (7964 <__aeabi_dmul+0x1e0>)
    77c2:	46a3      	mov	fp, r4
    77c4:	469c      	mov	ip, r3
    77c6:	2300      	movs	r3, #0
    77c8:	2700      	movs	r7, #0
    77ca:	4466      	add	r6, ip
    77cc:	9302      	str	r3, [sp, #8]
    77ce:	4643      	mov	r3, r8
    77d0:	031c      	lsls	r4, r3, #12
    77d2:	005a      	lsls	r2, r3, #1
    77d4:	0fdb      	lsrs	r3, r3, #31
    77d6:	4650      	mov	r0, sl
    77d8:	0b24      	lsrs	r4, r4, #12
    77da:	0d52      	lsrs	r2, r2, #21
    77dc:	4698      	mov	r8, r3
    77de:	d100      	bne.n	77e2 <__aeabi_dmul+0x5e>
    77e0:	e076      	b.n	78d0 <__aeabi_dmul+0x14c>
    77e2:	4b5f      	ldr	r3, [pc, #380]	; (7960 <__aeabi_dmul+0x1dc>)
    77e4:	429a      	cmp	r2, r3
    77e6:	d06d      	beq.n	78c4 <__aeabi_dmul+0x140>
    77e8:	2380      	movs	r3, #128	; 0x80
    77ea:	0f41      	lsrs	r1, r0, #29
    77ec:	041b      	lsls	r3, r3, #16
    77ee:	430b      	orrs	r3, r1
    77f0:	495c      	ldr	r1, [pc, #368]	; (7964 <__aeabi_dmul+0x1e0>)
    77f2:	00e4      	lsls	r4, r4, #3
    77f4:	468c      	mov	ip, r1
    77f6:	431c      	orrs	r4, r3
    77f8:	00c3      	lsls	r3, r0, #3
    77fa:	2000      	movs	r0, #0
    77fc:	4462      	add	r2, ip
    77fe:	4641      	mov	r1, r8
    7800:	18b6      	adds	r6, r6, r2
    7802:	4069      	eors	r1, r5
    7804:	1c72      	adds	r2, r6, #1
    7806:	9101      	str	r1, [sp, #4]
    7808:	4694      	mov	ip, r2
    780a:	4307      	orrs	r7, r0
    780c:	2f0f      	cmp	r7, #15
    780e:	d900      	bls.n	7812 <__aeabi_dmul+0x8e>
    7810:	e0b0      	b.n	7974 <__aeabi_dmul+0x1f0>
    7812:	4a55      	ldr	r2, [pc, #340]	; (7968 <__aeabi_dmul+0x1e4>)
    7814:	00bf      	lsls	r7, r7, #2
    7816:	59d2      	ldr	r2, [r2, r7]
    7818:	4697      	mov	pc, r2
    781a:	465b      	mov	r3, fp
    781c:	4303      	orrs	r3, r0
    781e:	4699      	mov	r9, r3
    7820:	d000      	beq.n	7824 <__aeabi_dmul+0xa0>
    7822:	e087      	b.n	7934 <__aeabi_dmul+0x1b0>
    7824:	2300      	movs	r3, #0
    7826:	469b      	mov	fp, r3
    7828:	3302      	adds	r3, #2
    782a:	2708      	movs	r7, #8
    782c:	9302      	str	r3, [sp, #8]
    782e:	e7ce      	b.n	77ce <__aeabi_dmul+0x4a>
    7830:	4642      	mov	r2, r8
    7832:	9201      	str	r2, [sp, #4]
    7834:	2802      	cmp	r0, #2
    7836:	d067      	beq.n	7908 <__aeabi_dmul+0x184>
    7838:	2803      	cmp	r0, #3
    783a:	d100      	bne.n	783e <__aeabi_dmul+0xba>
    783c:	e20e      	b.n	7c5c <__aeabi_dmul+0x4d8>
    783e:	2801      	cmp	r0, #1
    7840:	d000      	beq.n	7844 <__aeabi_dmul+0xc0>
    7842:	e162      	b.n	7b0a <__aeabi_dmul+0x386>
    7844:	2300      	movs	r3, #0
    7846:	2400      	movs	r4, #0
    7848:	2200      	movs	r2, #0
    784a:	4699      	mov	r9, r3
    784c:	9901      	ldr	r1, [sp, #4]
    784e:	4001      	ands	r1, r0
    7850:	b2cd      	uxtb	r5, r1
    7852:	2100      	movs	r1, #0
    7854:	0312      	lsls	r2, r2, #12
    7856:	0d0b      	lsrs	r3, r1, #20
    7858:	0b12      	lsrs	r2, r2, #12
    785a:	051b      	lsls	r3, r3, #20
    785c:	4313      	orrs	r3, r2
    785e:	4a43      	ldr	r2, [pc, #268]	; (796c <__aeabi_dmul+0x1e8>)
    7860:	0524      	lsls	r4, r4, #20
    7862:	4013      	ands	r3, r2
    7864:	431c      	orrs	r4, r3
    7866:	0064      	lsls	r4, r4, #1
    7868:	07ed      	lsls	r5, r5, #31
    786a:	0864      	lsrs	r4, r4, #1
    786c:	432c      	orrs	r4, r5
    786e:	4648      	mov	r0, r9
    7870:	0021      	movs	r1, r4
    7872:	b007      	add	sp, #28
    7874:	bc3c      	pop	{r2, r3, r4, r5}
    7876:	4690      	mov	r8, r2
    7878:	4699      	mov	r9, r3
    787a:	46a2      	mov	sl, r4
    787c:	46ab      	mov	fp, r5
    787e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7880:	4303      	orrs	r3, r0
    7882:	4699      	mov	r9, r3
    7884:	d04f      	beq.n	7926 <__aeabi_dmul+0x1a2>
    7886:	465b      	mov	r3, fp
    7888:	2b00      	cmp	r3, #0
    788a:	d100      	bne.n	788e <__aeabi_dmul+0x10a>
    788c:	e189      	b.n	7ba2 <__aeabi_dmul+0x41e>
    788e:	4658      	mov	r0, fp
    7890:	f000 fd50 	bl	8334 <__clzsi2>
    7894:	0003      	movs	r3, r0
    7896:	3b0b      	subs	r3, #11
    7898:	2b1c      	cmp	r3, #28
    789a:	dd00      	ble.n	789e <__aeabi_dmul+0x11a>
    789c:	e17a      	b.n	7b94 <__aeabi_dmul+0x410>
    789e:	221d      	movs	r2, #29
    78a0:	1ad3      	subs	r3, r2, r3
    78a2:	003a      	movs	r2, r7
    78a4:	0001      	movs	r1, r0
    78a6:	465c      	mov	r4, fp
    78a8:	40da      	lsrs	r2, r3
    78aa:	3908      	subs	r1, #8
    78ac:	408c      	lsls	r4, r1
    78ae:	0013      	movs	r3, r2
    78b0:	408f      	lsls	r7, r1
    78b2:	4323      	orrs	r3, r4
    78b4:	469b      	mov	fp, r3
    78b6:	46b9      	mov	r9, r7
    78b8:	2300      	movs	r3, #0
    78ba:	4e2d      	ldr	r6, [pc, #180]	; (7970 <__aeabi_dmul+0x1ec>)
    78bc:	2700      	movs	r7, #0
    78be:	1a36      	subs	r6, r6, r0
    78c0:	9302      	str	r3, [sp, #8]
    78c2:	e784      	b.n	77ce <__aeabi_dmul+0x4a>
    78c4:	4653      	mov	r3, sl
    78c6:	4323      	orrs	r3, r4
    78c8:	d12a      	bne.n	7920 <__aeabi_dmul+0x19c>
    78ca:	2400      	movs	r4, #0
    78cc:	2002      	movs	r0, #2
    78ce:	e796      	b.n	77fe <__aeabi_dmul+0x7a>
    78d0:	4653      	mov	r3, sl
    78d2:	4323      	orrs	r3, r4
    78d4:	d020      	beq.n	7918 <__aeabi_dmul+0x194>
    78d6:	2c00      	cmp	r4, #0
    78d8:	d100      	bne.n	78dc <__aeabi_dmul+0x158>
    78da:	e157      	b.n	7b8c <__aeabi_dmul+0x408>
    78dc:	0020      	movs	r0, r4
    78de:	f000 fd29 	bl	8334 <__clzsi2>
    78e2:	0003      	movs	r3, r0
    78e4:	3b0b      	subs	r3, #11
    78e6:	2b1c      	cmp	r3, #28
    78e8:	dd00      	ble.n	78ec <__aeabi_dmul+0x168>
    78ea:	e149      	b.n	7b80 <__aeabi_dmul+0x3fc>
    78ec:	211d      	movs	r1, #29
    78ee:	1acb      	subs	r3, r1, r3
    78f0:	4651      	mov	r1, sl
    78f2:	0002      	movs	r2, r0
    78f4:	40d9      	lsrs	r1, r3
    78f6:	4653      	mov	r3, sl
    78f8:	3a08      	subs	r2, #8
    78fa:	4094      	lsls	r4, r2
    78fc:	4093      	lsls	r3, r2
    78fe:	430c      	orrs	r4, r1
    7900:	4a1b      	ldr	r2, [pc, #108]	; (7970 <__aeabi_dmul+0x1ec>)
    7902:	1a12      	subs	r2, r2, r0
    7904:	2000      	movs	r0, #0
    7906:	e77a      	b.n	77fe <__aeabi_dmul+0x7a>
    7908:	2501      	movs	r5, #1
    790a:	9b01      	ldr	r3, [sp, #4]
    790c:	4c14      	ldr	r4, [pc, #80]	; (7960 <__aeabi_dmul+0x1dc>)
    790e:	401d      	ands	r5, r3
    7910:	2300      	movs	r3, #0
    7912:	2200      	movs	r2, #0
    7914:	4699      	mov	r9, r3
    7916:	e79c      	b.n	7852 <__aeabi_dmul+0xce>
    7918:	2400      	movs	r4, #0
    791a:	2200      	movs	r2, #0
    791c:	2001      	movs	r0, #1
    791e:	e76e      	b.n	77fe <__aeabi_dmul+0x7a>
    7920:	4653      	mov	r3, sl
    7922:	2003      	movs	r0, #3
    7924:	e76b      	b.n	77fe <__aeabi_dmul+0x7a>
    7926:	2300      	movs	r3, #0
    7928:	469b      	mov	fp, r3
    792a:	3301      	adds	r3, #1
    792c:	2704      	movs	r7, #4
    792e:	2600      	movs	r6, #0
    7930:	9302      	str	r3, [sp, #8]
    7932:	e74c      	b.n	77ce <__aeabi_dmul+0x4a>
    7934:	2303      	movs	r3, #3
    7936:	4681      	mov	r9, r0
    7938:	270c      	movs	r7, #12
    793a:	9302      	str	r3, [sp, #8]
    793c:	e747      	b.n	77ce <__aeabi_dmul+0x4a>
    793e:	2280      	movs	r2, #128	; 0x80
    7940:	2300      	movs	r3, #0
    7942:	2500      	movs	r5, #0
    7944:	0312      	lsls	r2, r2, #12
    7946:	4699      	mov	r9, r3
    7948:	4c05      	ldr	r4, [pc, #20]	; (7960 <__aeabi_dmul+0x1dc>)
    794a:	e782      	b.n	7852 <__aeabi_dmul+0xce>
    794c:	465c      	mov	r4, fp
    794e:	464b      	mov	r3, r9
    7950:	9802      	ldr	r0, [sp, #8]
    7952:	e76f      	b.n	7834 <__aeabi_dmul+0xb0>
    7954:	465c      	mov	r4, fp
    7956:	464b      	mov	r3, r9
    7958:	9501      	str	r5, [sp, #4]
    795a:	9802      	ldr	r0, [sp, #8]
    795c:	e76a      	b.n	7834 <__aeabi_dmul+0xb0>
    795e:	46c0      	nop			; (mov r8, r8)
    7960:	000007ff 	.word	0x000007ff
    7964:	fffffc01 	.word	0xfffffc01
    7968:	000086f8 	.word	0x000086f8
    796c:	800fffff 	.word	0x800fffff
    7970:	fffffc0d 	.word	0xfffffc0d
    7974:	464a      	mov	r2, r9
    7976:	4649      	mov	r1, r9
    7978:	0c17      	lsrs	r7, r2, #16
    797a:	0c1a      	lsrs	r2, r3, #16
    797c:	041b      	lsls	r3, r3, #16
    797e:	0c1b      	lsrs	r3, r3, #16
    7980:	0408      	lsls	r0, r1, #16
    7982:	0019      	movs	r1, r3
    7984:	0c00      	lsrs	r0, r0, #16
    7986:	4341      	muls	r1, r0
    7988:	0015      	movs	r5, r2
    798a:	4688      	mov	r8, r1
    798c:	0019      	movs	r1, r3
    798e:	437d      	muls	r5, r7
    7990:	4379      	muls	r1, r7
    7992:	9503      	str	r5, [sp, #12]
    7994:	4689      	mov	r9, r1
    7996:	0029      	movs	r1, r5
    7998:	0015      	movs	r5, r2
    799a:	4345      	muls	r5, r0
    799c:	444d      	add	r5, r9
    799e:	9502      	str	r5, [sp, #8]
    79a0:	4645      	mov	r5, r8
    79a2:	0c2d      	lsrs	r5, r5, #16
    79a4:	46aa      	mov	sl, r5
    79a6:	9d02      	ldr	r5, [sp, #8]
    79a8:	4455      	add	r5, sl
    79aa:	45a9      	cmp	r9, r5
    79ac:	d906      	bls.n	79bc <__aeabi_dmul+0x238>
    79ae:	468a      	mov	sl, r1
    79b0:	2180      	movs	r1, #128	; 0x80
    79b2:	0249      	lsls	r1, r1, #9
    79b4:	4689      	mov	r9, r1
    79b6:	44ca      	add	sl, r9
    79b8:	4651      	mov	r1, sl
    79ba:	9103      	str	r1, [sp, #12]
    79bc:	0c29      	lsrs	r1, r5, #16
    79be:	9104      	str	r1, [sp, #16]
    79c0:	4641      	mov	r1, r8
    79c2:	0409      	lsls	r1, r1, #16
    79c4:	042d      	lsls	r5, r5, #16
    79c6:	0c09      	lsrs	r1, r1, #16
    79c8:	4688      	mov	r8, r1
    79ca:	0029      	movs	r1, r5
    79cc:	0c25      	lsrs	r5, r4, #16
    79ce:	0424      	lsls	r4, r4, #16
    79d0:	4441      	add	r1, r8
    79d2:	0c24      	lsrs	r4, r4, #16
    79d4:	9105      	str	r1, [sp, #20]
    79d6:	0021      	movs	r1, r4
    79d8:	4341      	muls	r1, r0
    79da:	4688      	mov	r8, r1
    79dc:	0021      	movs	r1, r4
    79de:	4379      	muls	r1, r7
    79e0:	468a      	mov	sl, r1
    79e2:	4368      	muls	r0, r5
    79e4:	4641      	mov	r1, r8
    79e6:	4450      	add	r0, sl
    79e8:	4681      	mov	r9, r0
    79ea:	0c08      	lsrs	r0, r1, #16
    79ec:	4448      	add	r0, r9
    79ee:	436f      	muls	r7, r5
    79f0:	4582      	cmp	sl, r0
    79f2:	d903      	bls.n	79fc <__aeabi_dmul+0x278>
    79f4:	2180      	movs	r1, #128	; 0x80
    79f6:	0249      	lsls	r1, r1, #9
    79f8:	4689      	mov	r9, r1
    79fa:	444f      	add	r7, r9
    79fc:	0c01      	lsrs	r1, r0, #16
    79fe:	4689      	mov	r9, r1
    7a00:	0039      	movs	r1, r7
    7a02:	4449      	add	r1, r9
    7a04:	9102      	str	r1, [sp, #8]
    7a06:	4641      	mov	r1, r8
    7a08:	040f      	lsls	r7, r1, #16
    7a0a:	9904      	ldr	r1, [sp, #16]
    7a0c:	0c3f      	lsrs	r7, r7, #16
    7a0e:	4688      	mov	r8, r1
    7a10:	0400      	lsls	r0, r0, #16
    7a12:	19c0      	adds	r0, r0, r7
    7a14:	4480      	add	r8, r0
    7a16:	4641      	mov	r1, r8
    7a18:	9104      	str	r1, [sp, #16]
    7a1a:	4659      	mov	r1, fp
    7a1c:	0c0f      	lsrs	r7, r1, #16
    7a1e:	0409      	lsls	r1, r1, #16
    7a20:	0c09      	lsrs	r1, r1, #16
    7a22:	4688      	mov	r8, r1
    7a24:	4359      	muls	r1, r3
    7a26:	468a      	mov	sl, r1
    7a28:	0039      	movs	r1, r7
    7a2a:	4351      	muls	r1, r2
    7a2c:	4689      	mov	r9, r1
    7a2e:	4641      	mov	r1, r8
    7a30:	434a      	muls	r2, r1
    7a32:	4651      	mov	r1, sl
    7a34:	0c09      	lsrs	r1, r1, #16
    7a36:	468b      	mov	fp, r1
    7a38:	437b      	muls	r3, r7
    7a3a:	18d2      	adds	r2, r2, r3
    7a3c:	445a      	add	r2, fp
    7a3e:	4293      	cmp	r3, r2
    7a40:	d903      	bls.n	7a4a <__aeabi_dmul+0x2c6>
    7a42:	2380      	movs	r3, #128	; 0x80
    7a44:	025b      	lsls	r3, r3, #9
    7a46:	469b      	mov	fp, r3
    7a48:	44d9      	add	r9, fp
    7a4a:	4651      	mov	r1, sl
    7a4c:	0409      	lsls	r1, r1, #16
    7a4e:	0c09      	lsrs	r1, r1, #16
    7a50:	468a      	mov	sl, r1
    7a52:	4641      	mov	r1, r8
    7a54:	4361      	muls	r1, r4
    7a56:	437c      	muls	r4, r7
    7a58:	0c13      	lsrs	r3, r2, #16
    7a5a:	0412      	lsls	r2, r2, #16
    7a5c:	444b      	add	r3, r9
    7a5e:	4452      	add	r2, sl
    7a60:	46a1      	mov	r9, r4
    7a62:	468a      	mov	sl, r1
    7a64:	003c      	movs	r4, r7
    7a66:	4641      	mov	r1, r8
    7a68:	436c      	muls	r4, r5
    7a6a:	434d      	muls	r5, r1
    7a6c:	4651      	mov	r1, sl
    7a6e:	444d      	add	r5, r9
    7a70:	0c0f      	lsrs	r7, r1, #16
    7a72:	197d      	adds	r5, r7, r5
    7a74:	45a9      	cmp	r9, r5
    7a76:	d903      	bls.n	7a80 <__aeabi_dmul+0x2fc>
    7a78:	2180      	movs	r1, #128	; 0x80
    7a7a:	0249      	lsls	r1, r1, #9
    7a7c:	4688      	mov	r8, r1
    7a7e:	4444      	add	r4, r8
    7a80:	9f04      	ldr	r7, [sp, #16]
    7a82:	9903      	ldr	r1, [sp, #12]
    7a84:	46b8      	mov	r8, r7
    7a86:	4441      	add	r1, r8
    7a88:	468b      	mov	fp, r1
    7a8a:	4583      	cmp	fp, r0
    7a8c:	4180      	sbcs	r0, r0
    7a8e:	4241      	negs	r1, r0
    7a90:	4688      	mov	r8, r1
    7a92:	4651      	mov	r1, sl
    7a94:	0408      	lsls	r0, r1, #16
    7a96:	042f      	lsls	r7, r5, #16
    7a98:	0c00      	lsrs	r0, r0, #16
    7a9a:	183f      	adds	r7, r7, r0
    7a9c:	4658      	mov	r0, fp
    7a9e:	9902      	ldr	r1, [sp, #8]
    7aa0:	1810      	adds	r0, r2, r0
    7aa2:	4689      	mov	r9, r1
    7aa4:	4290      	cmp	r0, r2
    7aa6:	4192      	sbcs	r2, r2
    7aa8:	444f      	add	r7, r9
    7aaa:	46ba      	mov	sl, r7
    7aac:	4252      	negs	r2, r2
    7aae:	4699      	mov	r9, r3
    7ab0:	4693      	mov	fp, r2
    7ab2:	44c2      	add	sl, r8
    7ab4:	44d1      	add	r9, sl
    7ab6:	44cb      	add	fp, r9
    7ab8:	428f      	cmp	r7, r1
    7aba:	41bf      	sbcs	r7, r7
    7abc:	45c2      	cmp	sl, r8
    7abe:	4189      	sbcs	r1, r1
    7ac0:	4599      	cmp	r9, r3
    7ac2:	419b      	sbcs	r3, r3
    7ac4:	4593      	cmp	fp, r2
    7ac6:	4192      	sbcs	r2, r2
    7ac8:	427f      	negs	r7, r7
    7aca:	4249      	negs	r1, r1
    7acc:	0c2d      	lsrs	r5, r5, #16
    7ace:	4252      	negs	r2, r2
    7ad0:	430f      	orrs	r7, r1
    7ad2:	425b      	negs	r3, r3
    7ad4:	4313      	orrs	r3, r2
    7ad6:	197f      	adds	r7, r7, r5
    7ad8:	18ff      	adds	r7, r7, r3
    7ada:	465b      	mov	r3, fp
    7adc:	193c      	adds	r4, r7, r4
    7ade:	0ddb      	lsrs	r3, r3, #23
    7ae0:	9a05      	ldr	r2, [sp, #20]
    7ae2:	0264      	lsls	r4, r4, #9
    7ae4:	431c      	orrs	r4, r3
    7ae6:	0243      	lsls	r3, r0, #9
    7ae8:	4313      	orrs	r3, r2
    7aea:	1e5d      	subs	r5, r3, #1
    7aec:	41ab      	sbcs	r3, r5
    7aee:	465a      	mov	r2, fp
    7af0:	0dc0      	lsrs	r0, r0, #23
    7af2:	4303      	orrs	r3, r0
    7af4:	0252      	lsls	r2, r2, #9
    7af6:	4313      	orrs	r3, r2
    7af8:	01e2      	lsls	r2, r4, #7
    7afa:	d556      	bpl.n	7baa <__aeabi_dmul+0x426>
    7afc:	2001      	movs	r0, #1
    7afe:	085a      	lsrs	r2, r3, #1
    7b00:	4003      	ands	r3, r0
    7b02:	4313      	orrs	r3, r2
    7b04:	07e2      	lsls	r2, r4, #31
    7b06:	4313      	orrs	r3, r2
    7b08:	0864      	lsrs	r4, r4, #1
    7b0a:	485a      	ldr	r0, [pc, #360]	; (7c74 <__aeabi_dmul+0x4f0>)
    7b0c:	4460      	add	r0, ip
    7b0e:	2800      	cmp	r0, #0
    7b10:	dd4d      	ble.n	7bae <__aeabi_dmul+0x42a>
    7b12:	075a      	lsls	r2, r3, #29
    7b14:	d009      	beq.n	7b2a <__aeabi_dmul+0x3a6>
    7b16:	220f      	movs	r2, #15
    7b18:	401a      	ands	r2, r3
    7b1a:	2a04      	cmp	r2, #4
    7b1c:	d005      	beq.n	7b2a <__aeabi_dmul+0x3a6>
    7b1e:	1d1a      	adds	r2, r3, #4
    7b20:	429a      	cmp	r2, r3
    7b22:	419b      	sbcs	r3, r3
    7b24:	425b      	negs	r3, r3
    7b26:	18e4      	adds	r4, r4, r3
    7b28:	0013      	movs	r3, r2
    7b2a:	01e2      	lsls	r2, r4, #7
    7b2c:	d504      	bpl.n	7b38 <__aeabi_dmul+0x3b4>
    7b2e:	2080      	movs	r0, #128	; 0x80
    7b30:	4a51      	ldr	r2, [pc, #324]	; (7c78 <__aeabi_dmul+0x4f4>)
    7b32:	00c0      	lsls	r0, r0, #3
    7b34:	4014      	ands	r4, r2
    7b36:	4460      	add	r0, ip
    7b38:	4a50      	ldr	r2, [pc, #320]	; (7c7c <__aeabi_dmul+0x4f8>)
    7b3a:	4290      	cmp	r0, r2
    7b3c:	dd00      	ble.n	7b40 <__aeabi_dmul+0x3bc>
    7b3e:	e6e3      	b.n	7908 <__aeabi_dmul+0x184>
    7b40:	2501      	movs	r5, #1
    7b42:	08db      	lsrs	r3, r3, #3
    7b44:	0762      	lsls	r2, r4, #29
    7b46:	431a      	orrs	r2, r3
    7b48:	0264      	lsls	r4, r4, #9
    7b4a:	9b01      	ldr	r3, [sp, #4]
    7b4c:	4691      	mov	r9, r2
    7b4e:	0b22      	lsrs	r2, r4, #12
    7b50:	0544      	lsls	r4, r0, #21
    7b52:	0d64      	lsrs	r4, r4, #21
    7b54:	401d      	ands	r5, r3
    7b56:	e67c      	b.n	7852 <__aeabi_dmul+0xce>
    7b58:	2280      	movs	r2, #128	; 0x80
    7b5a:	4659      	mov	r1, fp
    7b5c:	0312      	lsls	r2, r2, #12
    7b5e:	4211      	tst	r1, r2
    7b60:	d008      	beq.n	7b74 <__aeabi_dmul+0x3f0>
    7b62:	4214      	tst	r4, r2
    7b64:	d106      	bne.n	7b74 <__aeabi_dmul+0x3f0>
    7b66:	4322      	orrs	r2, r4
    7b68:	0312      	lsls	r2, r2, #12
    7b6a:	0b12      	lsrs	r2, r2, #12
    7b6c:	4645      	mov	r5, r8
    7b6e:	4699      	mov	r9, r3
    7b70:	4c43      	ldr	r4, [pc, #268]	; (7c80 <__aeabi_dmul+0x4fc>)
    7b72:	e66e      	b.n	7852 <__aeabi_dmul+0xce>
    7b74:	465b      	mov	r3, fp
    7b76:	431a      	orrs	r2, r3
    7b78:	0312      	lsls	r2, r2, #12
    7b7a:	0b12      	lsrs	r2, r2, #12
    7b7c:	4c40      	ldr	r4, [pc, #256]	; (7c80 <__aeabi_dmul+0x4fc>)
    7b7e:	e668      	b.n	7852 <__aeabi_dmul+0xce>
    7b80:	0003      	movs	r3, r0
    7b82:	4654      	mov	r4, sl
    7b84:	3b28      	subs	r3, #40	; 0x28
    7b86:	409c      	lsls	r4, r3
    7b88:	2300      	movs	r3, #0
    7b8a:	e6b9      	b.n	7900 <__aeabi_dmul+0x17c>
    7b8c:	f000 fbd2 	bl	8334 <__clzsi2>
    7b90:	3020      	adds	r0, #32
    7b92:	e6a6      	b.n	78e2 <__aeabi_dmul+0x15e>
    7b94:	0003      	movs	r3, r0
    7b96:	3b28      	subs	r3, #40	; 0x28
    7b98:	409f      	lsls	r7, r3
    7b9a:	2300      	movs	r3, #0
    7b9c:	46bb      	mov	fp, r7
    7b9e:	4699      	mov	r9, r3
    7ba0:	e68a      	b.n	78b8 <__aeabi_dmul+0x134>
    7ba2:	f000 fbc7 	bl	8334 <__clzsi2>
    7ba6:	3020      	adds	r0, #32
    7ba8:	e674      	b.n	7894 <__aeabi_dmul+0x110>
    7baa:	46b4      	mov	ip, r6
    7bac:	e7ad      	b.n	7b0a <__aeabi_dmul+0x386>
    7bae:	2501      	movs	r5, #1
    7bb0:	1a2a      	subs	r2, r5, r0
    7bb2:	2a38      	cmp	r2, #56	; 0x38
    7bb4:	dd06      	ble.n	7bc4 <__aeabi_dmul+0x440>
    7bb6:	9b01      	ldr	r3, [sp, #4]
    7bb8:	2400      	movs	r4, #0
    7bba:	401d      	ands	r5, r3
    7bbc:	2300      	movs	r3, #0
    7bbe:	2200      	movs	r2, #0
    7bc0:	4699      	mov	r9, r3
    7bc2:	e646      	b.n	7852 <__aeabi_dmul+0xce>
    7bc4:	2a1f      	cmp	r2, #31
    7bc6:	dc21      	bgt.n	7c0c <__aeabi_dmul+0x488>
    7bc8:	2520      	movs	r5, #32
    7bca:	0020      	movs	r0, r4
    7bcc:	1aad      	subs	r5, r5, r2
    7bce:	001e      	movs	r6, r3
    7bd0:	40ab      	lsls	r3, r5
    7bd2:	40a8      	lsls	r0, r5
    7bd4:	40d6      	lsrs	r6, r2
    7bd6:	1e5d      	subs	r5, r3, #1
    7bd8:	41ab      	sbcs	r3, r5
    7bda:	4330      	orrs	r0, r6
    7bdc:	4318      	orrs	r0, r3
    7bde:	40d4      	lsrs	r4, r2
    7be0:	0743      	lsls	r3, r0, #29
    7be2:	d009      	beq.n	7bf8 <__aeabi_dmul+0x474>
    7be4:	230f      	movs	r3, #15
    7be6:	4003      	ands	r3, r0
    7be8:	2b04      	cmp	r3, #4
    7bea:	d005      	beq.n	7bf8 <__aeabi_dmul+0x474>
    7bec:	0003      	movs	r3, r0
    7bee:	1d18      	adds	r0, r3, #4
    7bf0:	4298      	cmp	r0, r3
    7bf2:	419b      	sbcs	r3, r3
    7bf4:	425b      	negs	r3, r3
    7bf6:	18e4      	adds	r4, r4, r3
    7bf8:	0223      	lsls	r3, r4, #8
    7bfa:	d521      	bpl.n	7c40 <__aeabi_dmul+0x4bc>
    7bfc:	2501      	movs	r5, #1
    7bfe:	9b01      	ldr	r3, [sp, #4]
    7c00:	2401      	movs	r4, #1
    7c02:	401d      	ands	r5, r3
    7c04:	2300      	movs	r3, #0
    7c06:	2200      	movs	r2, #0
    7c08:	4699      	mov	r9, r3
    7c0a:	e622      	b.n	7852 <__aeabi_dmul+0xce>
    7c0c:	251f      	movs	r5, #31
    7c0e:	0021      	movs	r1, r4
    7c10:	426d      	negs	r5, r5
    7c12:	1a28      	subs	r0, r5, r0
    7c14:	40c1      	lsrs	r1, r0
    7c16:	0008      	movs	r0, r1
    7c18:	2a20      	cmp	r2, #32
    7c1a:	d01d      	beq.n	7c58 <__aeabi_dmul+0x4d4>
    7c1c:	355f      	adds	r5, #95	; 0x5f
    7c1e:	1aaa      	subs	r2, r5, r2
    7c20:	4094      	lsls	r4, r2
    7c22:	4323      	orrs	r3, r4
    7c24:	1e5c      	subs	r4, r3, #1
    7c26:	41a3      	sbcs	r3, r4
    7c28:	2507      	movs	r5, #7
    7c2a:	4303      	orrs	r3, r0
    7c2c:	401d      	ands	r5, r3
    7c2e:	2200      	movs	r2, #0
    7c30:	2d00      	cmp	r5, #0
    7c32:	d009      	beq.n	7c48 <__aeabi_dmul+0x4c4>
    7c34:	220f      	movs	r2, #15
    7c36:	2400      	movs	r4, #0
    7c38:	401a      	ands	r2, r3
    7c3a:	0018      	movs	r0, r3
    7c3c:	2a04      	cmp	r2, #4
    7c3e:	d1d6      	bne.n	7bee <__aeabi_dmul+0x46a>
    7c40:	0003      	movs	r3, r0
    7c42:	0765      	lsls	r5, r4, #29
    7c44:	0264      	lsls	r4, r4, #9
    7c46:	0b22      	lsrs	r2, r4, #12
    7c48:	08db      	lsrs	r3, r3, #3
    7c4a:	432b      	orrs	r3, r5
    7c4c:	2501      	movs	r5, #1
    7c4e:	4699      	mov	r9, r3
    7c50:	9b01      	ldr	r3, [sp, #4]
    7c52:	2400      	movs	r4, #0
    7c54:	401d      	ands	r5, r3
    7c56:	e5fc      	b.n	7852 <__aeabi_dmul+0xce>
    7c58:	2400      	movs	r4, #0
    7c5a:	e7e2      	b.n	7c22 <__aeabi_dmul+0x49e>
    7c5c:	2280      	movs	r2, #128	; 0x80
    7c5e:	2501      	movs	r5, #1
    7c60:	0312      	lsls	r2, r2, #12
    7c62:	4322      	orrs	r2, r4
    7c64:	9901      	ldr	r1, [sp, #4]
    7c66:	0312      	lsls	r2, r2, #12
    7c68:	0b12      	lsrs	r2, r2, #12
    7c6a:	400d      	ands	r5, r1
    7c6c:	4699      	mov	r9, r3
    7c6e:	4c04      	ldr	r4, [pc, #16]	; (7c80 <__aeabi_dmul+0x4fc>)
    7c70:	e5ef      	b.n	7852 <__aeabi_dmul+0xce>
    7c72:	46c0      	nop			; (mov r8, r8)
    7c74:	000003ff 	.word	0x000003ff
    7c78:	feffffff 	.word	0xfeffffff
    7c7c:	000007fe 	.word	0x000007fe
    7c80:	000007ff 	.word	0x000007ff

00007c84 <__aeabi_dsub>:
    7c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c86:	4646      	mov	r6, r8
    7c88:	46d6      	mov	lr, sl
    7c8a:	464f      	mov	r7, r9
    7c8c:	030c      	lsls	r4, r1, #12
    7c8e:	b5c0      	push	{r6, r7, lr}
    7c90:	0fcd      	lsrs	r5, r1, #31
    7c92:	004e      	lsls	r6, r1, #1
    7c94:	0a61      	lsrs	r1, r4, #9
    7c96:	0f44      	lsrs	r4, r0, #29
    7c98:	430c      	orrs	r4, r1
    7c9a:	00c1      	lsls	r1, r0, #3
    7c9c:	0058      	lsls	r0, r3, #1
    7c9e:	0d40      	lsrs	r0, r0, #21
    7ca0:	4684      	mov	ip, r0
    7ca2:	468a      	mov	sl, r1
    7ca4:	000f      	movs	r7, r1
    7ca6:	0319      	lsls	r1, r3, #12
    7ca8:	0f50      	lsrs	r0, r2, #29
    7caa:	0a49      	lsrs	r1, r1, #9
    7cac:	4301      	orrs	r1, r0
    7cae:	48c6      	ldr	r0, [pc, #792]	; (7fc8 <__aeabi_dsub+0x344>)
    7cb0:	0d76      	lsrs	r6, r6, #21
    7cb2:	46a8      	mov	r8, r5
    7cb4:	0fdb      	lsrs	r3, r3, #31
    7cb6:	00d2      	lsls	r2, r2, #3
    7cb8:	4584      	cmp	ip, r0
    7cba:	d100      	bne.n	7cbe <__aeabi_dsub+0x3a>
    7cbc:	e0d8      	b.n	7e70 <__aeabi_dsub+0x1ec>
    7cbe:	2001      	movs	r0, #1
    7cc0:	4043      	eors	r3, r0
    7cc2:	42ab      	cmp	r3, r5
    7cc4:	d100      	bne.n	7cc8 <__aeabi_dsub+0x44>
    7cc6:	e0a6      	b.n	7e16 <__aeabi_dsub+0x192>
    7cc8:	4660      	mov	r0, ip
    7cca:	1a35      	subs	r5, r6, r0
    7ccc:	2d00      	cmp	r5, #0
    7cce:	dc00      	bgt.n	7cd2 <__aeabi_dsub+0x4e>
    7cd0:	e105      	b.n	7ede <__aeabi_dsub+0x25a>
    7cd2:	2800      	cmp	r0, #0
    7cd4:	d110      	bne.n	7cf8 <__aeabi_dsub+0x74>
    7cd6:	000b      	movs	r3, r1
    7cd8:	4313      	orrs	r3, r2
    7cda:	d100      	bne.n	7cde <__aeabi_dsub+0x5a>
    7cdc:	e0d7      	b.n	7e8e <__aeabi_dsub+0x20a>
    7cde:	1e6b      	subs	r3, r5, #1
    7ce0:	2b00      	cmp	r3, #0
    7ce2:	d000      	beq.n	7ce6 <__aeabi_dsub+0x62>
    7ce4:	e14b      	b.n	7f7e <__aeabi_dsub+0x2fa>
    7ce6:	4653      	mov	r3, sl
    7ce8:	1a9f      	subs	r7, r3, r2
    7cea:	45ba      	cmp	sl, r7
    7cec:	4180      	sbcs	r0, r0
    7cee:	1a64      	subs	r4, r4, r1
    7cf0:	4240      	negs	r0, r0
    7cf2:	1a24      	subs	r4, r4, r0
    7cf4:	2601      	movs	r6, #1
    7cf6:	e01e      	b.n	7d36 <__aeabi_dsub+0xb2>
    7cf8:	4bb3      	ldr	r3, [pc, #716]	; (7fc8 <__aeabi_dsub+0x344>)
    7cfa:	429e      	cmp	r6, r3
    7cfc:	d048      	beq.n	7d90 <__aeabi_dsub+0x10c>
    7cfe:	2380      	movs	r3, #128	; 0x80
    7d00:	041b      	lsls	r3, r3, #16
    7d02:	4319      	orrs	r1, r3
    7d04:	2d38      	cmp	r5, #56	; 0x38
    7d06:	dd00      	ble.n	7d0a <__aeabi_dsub+0x86>
    7d08:	e119      	b.n	7f3e <__aeabi_dsub+0x2ba>
    7d0a:	2d1f      	cmp	r5, #31
    7d0c:	dd00      	ble.n	7d10 <__aeabi_dsub+0x8c>
    7d0e:	e14c      	b.n	7faa <__aeabi_dsub+0x326>
    7d10:	2320      	movs	r3, #32
    7d12:	000f      	movs	r7, r1
    7d14:	1b5b      	subs	r3, r3, r5
    7d16:	0010      	movs	r0, r2
    7d18:	409a      	lsls	r2, r3
    7d1a:	409f      	lsls	r7, r3
    7d1c:	40e8      	lsrs	r0, r5
    7d1e:	1e53      	subs	r3, r2, #1
    7d20:	419a      	sbcs	r2, r3
    7d22:	40e9      	lsrs	r1, r5
    7d24:	4307      	orrs	r7, r0
    7d26:	4317      	orrs	r7, r2
    7d28:	4653      	mov	r3, sl
    7d2a:	1bdf      	subs	r7, r3, r7
    7d2c:	1a61      	subs	r1, r4, r1
    7d2e:	45ba      	cmp	sl, r7
    7d30:	41a4      	sbcs	r4, r4
    7d32:	4264      	negs	r4, r4
    7d34:	1b0c      	subs	r4, r1, r4
    7d36:	0223      	lsls	r3, r4, #8
    7d38:	d400      	bmi.n	7d3c <__aeabi_dsub+0xb8>
    7d3a:	e0c5      	b.n	7ec8 <__aeabi_dsub+0x244>
    7d3c:	0264      	lsls	r4, r4, #9
    7d3e:	0a65      	lsrs	r5, r4, #9
    7d40:	2d00      	cmp	r5, #0
    7d42:	d100      	bne.n	7d46 <__aeabi_dsub+0xc2>
    7d44:	e0f6      	b.n	7f34 <__aeabi_dsub+0x2b0>
    7d46:	0028      	movs	r0, r5
    7d48:	f000 faf4 	bl	8334 <__clzsi2>
    7d4c:	0003      	movs	r3, r0
    7d4e:	3b08      	subs	r3, #8
    7d50:	2b1f      	cmp	r3, #31
    7d52:	dd00      	ble.n	7d56 <__aeabi_dsub+0xd2>
    7d54:	e0e9      	b.n	7f2a <__aeabi_dsub+0x2a6>
    7d56:	2220      	movs	r2, #32
    7d58:	003c      	movs	r4, r7
    7d5a:	1ad2      	subs	r2, r2, r3
    7d5c:	409d      	lsls	r5, r3
    7d5e:	40d4      	lsrs	r4, r2
    7d60:	409f      	lsls	r7, r3
    7d62:	4325      	orrs	r5, r4
    7d64:	429e      	cmp	r6, r3
    7d66:	dd00      	ble.n	7d6a <__aeabi_dsub+0xe6>
    7d68:	e0db      	b.n	7f22 <__aeabi_dsub+0x29e>
    7d6a:	1b9e      	subs	r6, r3, r6
    7d6c:	1c73      	adds	r3, r6, #1
    7d6e:	2b1f      	cmp	r3, #31
    7d70:	dd00      	ble.n	7d74 <__aeabi_dsub+0xf0>
    7d72:	e10a      	b.n	7f8a <__aeabi_dsub+0x306>
    7d74:	2220      	movs	r2, #32
    7d76:	0038      	movs	r0, r7
    7d78:	1ad2      	subs	r2, r2, r3
    7d7a:	0029      	movs	r1, r5
    7d7c:	4097      	lsls	r7, r2
    7d7e:	002c      	movs	r4, r5
    7d80:	4091      	lsls	r1, r2
    7d82:	40d8      	lsrs	r0, r3
    7d84:	1e7a      	subs	r2, r7, #1
    7d86:	4197      	sbcs	r7, r2
    7d88:	40dc      	lsrs	r4, r3
    7d8a:	2600      	movs	r6, #0
    7d8c:	4301      	orrs	r1, r0
    7d8e:	430f      	orrs	r7, r1
    7d90:	077b      	lsls	r3, r7, #29
    7d92:	d009      	beq.n	7da8 <__aeabi_dsub+0x124>
    7d94:	230f      	movs	r3, #15
    7d96:	403b      	ands	r3, r7
    7d98:	2b04      	cmp	r3, #4
    7d9a:	d005      	beq.n	7da8 <__aeabi_dsub+0x124>
    7d9c:	1d3b      	adds	r3, r7, #4
    7d9e:	42bb      	cmp	r3, r7
    7da0:	41bf      	sbcs	r7, r7
    7da2:	427f      	negs	r7, r7
    7da4:	19e4      	adds	r4, r4, r7
    7da6:	001f      	movs	r7, r3
    7da8:	0223      	lsls	r3, r4, #8
    7daa:	d525      	bpl.n	7df8 <__aeabi_dsub+0x174>
    7dac:	4b86      	ldr	r3, [pc, #536]	; (7fc8 <__aeabi_dsub+0x344>)
    7dae:	3601      	adds	r6, #1
    7db0:	429e      	cmp	r6, r3
    7db2:	d100      	bne.n	7db6 <__aeabi_dsub+0x132>
    7db4:	e0af      	b.n	7f16 <__aeabi_dsub+0x292>
    7db6:	4b85      	ldr	r3, [pc, #532]	; (7fcc <__aeabi_dsub+0x348>)
    7db8:	2501      	movs	r5, #1
    7dba:	401c      	ands	r4, r3
    7dbc:	4643      	mov	r3, r8
    7dbe:	0762      	lsls	r2, r4, #29
    7dc0:	08ff      	lsrs	r7, r7, #3
    7dc2:	0264      	lsls	r4, r4, #9
    7dc4:	0576      	lsls	r6, r6, #21
    7dc6:	4317      	orrs	r7, r2
    7dc8:	0b24      	lsrs	r4, r4, #12
    7dca:	0d76      	lsrs	r6, r6, #21
    7dcc:	401d      	ands	r5, r3
    7dce:	2100      	movs	r1, #0
    7dd0:	0324      	lsls	r4, r4, #12
    7dd2:	0b23      	lsrs	r3, r4, #12
    7dd4:	0d0c      	lsrs	r4, r1, #20
    7dd6:	4a7e      	ldr	r2, [pc, #504]	; (7fd0 <__aeabi_dsub+0x34c>)
    7dd8:	0524      	lsls	r4, r4, #20
    7dda:	431c      	orrs	r4, r3
    7ddc:	4014      	ands	r4, r2
    7dde:	0533      	lsls	r3, r6, #20
    7de0:	4323      	orrs	r3, r4
    7de2:	005b      	lsls	r3, r3, #1
    7de4:	07ed      	lsls	r5, r5, #31
    7de6:	085b      	lsrs	r3, r3, #1
    7de8:	432b      	orrs	r3, r5
    7dea:	0038      	movs	r0, r7
    7dec:	0019      	movs	r1, r3
    7dee:	bc1c      	pop	{r2, r3, r4}
    7df0:	4690      	mov	r8, r2
    7df2:	4699      	mov	r9, r3
    7df4:	46a2      	mov	sl, r4
    7df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7df8:	2501      	movs	r5, #1
    7dfa:	4643      	mov	r3, r8
    7dfc:	0762      	lsls	r2, r4, #29
    7dfe:	08ff      	lsrs	r7, r7, #3
    7e00:	4317      	orrs	r7, r2
    7e02:	08e4      	lsrs	r4, r4, #3
    7e04:	401d      	ands	r5, r3
    7e06:	4b70      	ldr	r3, [pc, #448]	; (7fc8 <__aeabi_dsub+0x344>)
    7e08:	429e      	cmp	r6, r3
    7e0a:	d036      	beq.n	7e7a <__aeabi_dsub+0x1f6>
    7e0c:	0324      	lsls	r4, r4, #12
    7e0e:	0576      	lsls	r6, r6, #21
    7e10:	0b24      	lsrs	r4, r4, #12
    7e12:	0d76      	lsrs	r6, r6, #21
    7e14:	e7db      	b.n	7dce <__aeabi_dsub+0x14a>
    7e16:	4663      	mov	r3, ip
    7e18:	1af3      	subs	r3, r6, r3
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	dc00      	bgt.n	7e20 <__aeabi_dsub+0x19c>
    7e1e:	e094      	b.n	7f4a <__aeabi_dsub+0x2c6>
    7e20:	4660      	mov	r0, ip
    7e22:	2800      	cmp	r0, #0
    7e24:	d035      	beq.n	7e92 <__aeabi_dsub+0x20e>
    7e26:	4868      	ldr	r0, [pc, #416]	; (7fc8 <__aeabi_dsub+0x344>)
    7e28:	4286      	cmp	r6, r0
    7e2a:	d0b1      	beq.n	7d90 <__aeabi_dsub+0x10c>
    7e2c:	2780      	movs	r7, #128	; 0x80
    7e2e:	043f      	lsls	r7, r7, #16
    7e30:	4339      	orrs	r1, r7
    7e32:	2b38      	cmp	r3, #56	; 0x38
    7e34:	dc00      	bgt.n	7e38 <__aeabi_dsub+0x1b4>
    7e36:	e0fd      	b.n	8034 <__aeabi_dsub+0x3b0>
    7e38:	430a      	orrs	r2, r1
    7e3a:	0017      	movs	r7, r2
    7e3c:	2100      	movs	r1, #0
    7e3e:	1e7a      	subs	r2, r7, #1
    7e40:	4197      	sbcs	r7, r2
    7e42:	4457      	add	r7, sl
    7e44:	4557      	cmp	r7, sl
    7e46:	4180      	sbcs	r0, r0
    7e48:	1909      	adds	r1, r1, r4
    7e4a:	4244      	negs	r4, r0
    7e4c:	190c      	adds	r4, r1, r4
    7e4e:	0223      	lsls	r3, r4, #8
    7e50:	d53a      	bpl.n	7ec8 <__aeabi_dsub+0x244>
    7e52:	4b5d      	ldr	r3, [pc, #372]	; (7fc8 <__aeabi_dsub+0x344>)
    7e54:	3601      	adds	r6, #1
    7e56:	429e      	cmp	r6, r3
    7e58:	d100      	bne.n	7e5c <__aeabi_dsub+0x1d8>
    7e5a:	e14b      	b.n	80f4 <__aeabi_dsub+0x470>
    7e5c:	2201      	movs	r2, #1
    7e5e:	4b5b      	ldr	r3, [pc, #364]	; (7fcc <__aeabi_dsub+0x348>)
    7e60:	401c      	ands	r4, r3
    7e62:	087b      	lsrs	r3, r7, #1
    7e64:	4017      	ands	r7, r2
    7e66:	431f      	orrs	r7, r3
    7e68:	07e2      	lsls	r2, r4, #31
    7e6a:	4317      	orrs	r7, r2
    7e6c:	0864      	lsrs	r4, r4, #1
    7e6e:	e78f      	b.n	7d90 <__aeabi_dsub+0x10c>
    7e70:	0008      	movs	r0, r1
    7e72:	4310      	orrs	r0, r2
    7e74:	d000      	beq.n	7e78 <__aeabi_dsub+0x1f4>
    7e76:	e724      	b.n	7cc2 <__aeabi_dsub+0x3e>
    7e78:	e721      	b.n	7cbe <__aeabi_dsub+0x3a>
    7e7a:	0023      	movs	r3, r4
    7e7c:	433b      	orrs	r3, r7
    7e7e:	d100      	bne.n	7e82 <__aeabi_dsub+0x1fe>
    7e80:	e1b9      	b.n	81f6 <__aeabi_dsub+0x572>
    7e82:	2280      	movs	r2, #128	; 0x80
    7e84:	0312      	lsls	r2, r2, #12
    7e86:	4314      	orrs	r4, r2
    7e88:	0324      	lsls	r4, r4, #12
    7e8a:	0b24      	lsrs	r4, r4, #12
    7e8c:	e79f      	b.n	7dce <__aeabi_dsub+0x14a>
    7e8e:	002e      	movs	r6, r5
    7e90:	e77e      	b.n	7d90 <__aeabi_dsub+0x10c>
    7e92:	0008      	movs	r0, r1
    7e94:	4310      	orrs	r0, r2
    7e96:	d100      	bne.n	7e9a <__aeabi_dsub+0x216>
    7e98:	e0ca      	b.n	8030 <__aeabi_dsub+0x3ac>
    7e9a:	1e58      	subs	r0, r3, #1
    7e9c:	4684      	mov	ip, r0
    7e9e:	2800      	cmp	r0, #0
    7ea0:	d000      	beq.n	7ea4 <__aeabi_dsub+0x220>
    7ea2:	e0e7      	b.n	8074 <__aeabi_dsub+0x3f0>
    7ea4:	4452      	add	r2, sl
    7ea6:	4552      	cmp	r2, sl
    7ea8:	4180      	sbcs	r0, r0
    7eaa:	1864      	adds	r4, r4, r1
    7eac:	4240      	negs	r0, r0
    7eae:	1824      	adds	r4, r4, r0
    7eb0:	0017      	movs	r7, r2
    7eb2:	2601      	movs	r6, #1
    7eb4:	0223      	lsls	r3, r4, #8
    7eb6:	d507      	bpl.n	7ec8 <__aeabi_dsub+0x244>
    7eb8:	2602      	movs	r6, #2
    7eba:	e7cf      	b.n	7e5c <__aeabi_dsub+0x1d8>
    7ebc:	4664      	mov	r4, ip
    7ebe:	432c      	orrs	r4, r5
    7ec0:	d100      	bne.n	7ec4 <__aeabi_dsub+0x240>
    7ec2:	e1b3      	b.n	822c <__aeabi_dsub+0x5a8>
    7ec4:	002c      	movs	r4, r5
    7ec6:	4667      	mov	r7, ip
    7ec8:	077b      	lsls	r3, r7, #29
    7eca:	d000      	beq.n	7ece <__aeabi_dsub+0x24a>
    7ecc:	e762      	b.n	7d94 <__aeabi_dsub+0x110>
    7ece:	0763      	lsls	r3, r4, #29
    7ed0:	08ff      	lsrs	r7, r7, #3
    7ed2:	431f      	orrs	r7, r3
    7ed4:	2501      	movs	r5, #1
    7ed6:	4643      	mov	r3, r8
    7ed8:	08e4      	lsrs	r4, r4, #3
    7eda:	401d      	ands	r5, r3
    7edc:	e793      	b.n	7e06 <__aeabi_dsub+0x182>
    7ede:	2d00      	cmp	r5, #0
    7ee0:	d178      	bne.n	7fd4 <__aeabi_dsub+0x350>
    7ee2:	1c75      	adds	r5, r6, #1
    7ee4:	056d      	lsls	r5, r5, #21
    7ee6:	0d6d      	lsrs	r5, r5, #21
    7ee8:	2d01      	cmp	r5, #1
    7eea:	dc00      	bgt.n	7eee <__aeabi_dsub+0x26a>
    7eec:	e0f2      	b.n	80d4 <__aeabi_dsub+0x450>
    7eee:	4650      	mov	r0, sl
    7ef0:	1a80      	subs	r0, r0, r2
    7ef2:	4582      	cmp	sl, r0
    7ef4:	41bf      	sbcs	r7, r7
    7ef6:	1a65      	subs	r5, r4, r1
    7ef8:	427f      	negs	r7, r7
    7efa:	1bed      	subs	r5, r5, r7
    7efc:	4684      	mov	ip, r0
    7efe:	0228      	lsls	r0, r5, #8
    7f00:	d400      	bmi.n	7f04 <__aeabi_dsub+0x280>
    7f02:	e08c      	b.n	801e <__aeabi_dsub+0x39a>
    7f04:	4650      	mov	r0, sl
    7f06:	1a17      	subs	r7, r2, r0
    7f08:	42ba      	cmp	r2, r7
    7f0a:	4192      	sbcs	r2, r2
    7f0c:	1b0c      	subs	r4, r1, r4
    7f0e:	4255      	negs	r5, r2
    7f10:	1b65      	subs	r5, r4, r5
    7f12:	4698      	mov	r8, r3
    7f14:	e714      	b.n	7d40 <__aeabi_dsub+0xbc>
    7f16:	2501      	movs	r5, #1
    7f18:	4643      	mov	r3, r8
    7f1a:	2400      	movs	r4, #0
    7f1c:	401d      	ands	r5, r3
    7f1e:	2700      	movs	r7, #0
    7f20:	e755      	b.n	7dce <__aeabi_dsub+0x14a>
    7f22:	4c2a      	ldr	r4, [pc, #168]	; (7fcc <__aeabi_dsub+0x348>)
    7f24:	1af6      	subs	r6, r6, r3
    7f26:	402c      	ands	r4, r5
    7f28:	e732      	b.n	7d90 <__aeabi_dsub+0x10c>
    7f2a:	003d      	movs	r5, r7
    7f2c:	3828      	subs	r0, #40	; 0x28
    7f2e:	4085      	lsls	r5, r0
    7f30:	2700      	movs	r7, #0
    7f32:	e717      	b.n	7d64 <__aeabi_dsub+0xe0>
    7f34:	0038      	movs	r0, r7
    7f36:	f000 f9fd 	bl	8334 <__clzsi2>
    7f3a:	3020      	adds	r0, #32
    7f3c:	e706      	b.n	7d4c <__aeabi_dsub+0xc8>
    7f3e:	430a      	orrs	r2, r1
    7f40:	0017      	movs	r7, r2
    7f42:	2100      	movs	r1, #0
    7f44:	1e7a      	subs	r2, r7, #1
    7f46:	4197      	sbcs	r7, r2
    7f48:	e6ee      	b.n	7d28 <__aeabi_dsub+0xa4>
    7f4a:	2b00      	cmp	r3, #0
    7f4c:	d000      	beq.n	7f50 <__aeabi_dsub+0x2cc>
    7f4e:	e0e5      	b.n	811c <__aeabi_dsub+0x498>
    7f50:	1c73      	adds	r3, r6, #1
    7f52:	469c      	mov	ip, r3
    7f54:	055b      	lsls	r3, r3, #21
    7f56:	0d5b      	lsrs	r3, r3, #21
    7f58:	2b01      	cmp	r3, #1
    7f5a:	dc00      	bgt.n	7f5e <__aeabi_dsub+0x2da>
    7f5c:	e09f      	b.n	809e <__aeabi_dsub+0x41a>
    7f5e:	4b1a      	ldr	r3, [pc, #104]	; (7fc8 <__aeabi_dsub+0x344>)
    7f60:	459c      	cmp	ip, r3
    7f62:	d100      	bne.n	7f66 <__aeabi_dsub+0x2e2>
    7f64:	e0c5      	b.n	80f2 <__aeabi_dsub+0x46e>
    7f66:	4452      	add	r2, sl
    7f68:	4552      	cmp	r2, sl
    7f6a:	4180      	sbcs	r0, r0
    7f6c:	1864      	adds	r4, r4, r1
    7f6e:	4240      	negs	r0, r0
    7f70:	1824      	adds	r4, r4, r0
    7f72:	07e7      	lsls	r7, r4, #31
    7f74:	0852      	lsrs	r2, r2, #1
    7f76:	4317      	orrs	r7, r2
    7f78:	0864      	lsrs	r4, r4, #1
    7f7a:	4666      	mov	r6, ip
    7f7c:	e708      	b.n	7d90 <__aeabi_dsub+0x10c>
    7f7e:	4812      	ldr	r0, [pc, #72]	; (7fc8 <__aeabi_dsub+0x344>)
    7f80:	4285      	cmp	r5, r0
    7f82:	d100      	bne.n	7f86 <__aeabi_dsub+0x302>
    7f84:	e085      	b.n	8092 <__aeabi_dsub+0x40e>
    7f86:	001d      	movs	r5, r3
    7f88:	e6bc      	b.n	7d04 <__aeabi_dsub+0x80>
    7f8a:	0029      	movs	r1, r5
    7f8c:	3e1f      	subs	r6, #31
    7f8e:	40f1      	lsrs	r1, r6
    7f90:	2b20      	cmp	r3, #32
    7f92:	d100      	bne.n	7f96 <__aeabi_dsub+0x312>
    7f94:	e07f      	b.n	8096 <__aeabi_dsub+0x412>
    7f96:	2240      	movs	r2, #64	; 0x40
    7f98:	1ad3      	subs	r3, r2, r3
    7f9a:	409d      	lsls	r5, r3
    7f9c:	432f      	orrs	r7, r5
    7f9e:	1e7d      	subs	r5, r7, #1
    7fa0:	41af      	sbcs	r7, r5
    7fa2:	2400      	movs	r4, #0
    7fa4:	430f      	orrs	r7, r1
    7fa6:	2600      	movs	r6, #0
    7fa8:	e78e      	b.n	7ec8 <__aeabi_dsub+0x244>
    7faa:	002b      	movs	r3, r5
    7fac:	000f      	movs	r7, r1
    7fae:	3b20      	subs	r3, #32
    7fb0:	40df      	lsrs	r7, r3
    7fb2:	2d20      	cmp	r5, #32
    7fb4:	d071      	beq.n	809a <__aeabi_dsub+0x416>
    7fb6:	2340      	movs	r3, #64	; 0x40
    7fb8:	1b5d      	subs	r5, r3, r5
    7fba:	40a9      	lsls	r1, r5
    7fbc:	430a      	orrs	r2, r1
    7fbe:	1e51      	subs	r1, r2, #1
    7fc0:	418a      	sbcs	r2, r1
    7fc2:	2100      	movs	r1, #0
    7fc4:	4317      	orrs	r7, r2
    7fc6:	e6af      	b.n	7d28 <__aeabi_dsub+0xa4>
    7fc8:	000007ff 	.word	0x000007ff
    7fcc:	ff7fffff 	.word	0xff7fffff
    7fd0:	800fffff 	.word	0x800fffff
    7fd4:	2e00      	cmp	r6, #0
    7fd6:	d03e      	beq.n	8056 <__aeabi_dsub+0x3d2>
    7fd8:	4eb3      	ldr	r6, [pc, #716]	; (82a8 <__aeabi_dsub+0x624>)
    7fda:	45b4      	cmp	ip, r6
    7fdc:	d045      	beq.n	806a <__aeabi_dsub+0x3e6>
    7fde:	2680      	movs	r6, #128	; 0x80
    7fe0:	0436      	lsls	r6, r6, #16
    7fe2:	426d      	negs	r5, r5
    7fe4:	4334      	orrs	r4, r6
    7fe6:	2d38      	cmp	r5, #56	; 0x38
    7fe8:	dd00      	ble.n	7fec <__aeabi_dsub+0x368>
    7fea:	e0a8      	b.n	813e <__aeabi_dsub+0x4ba>
    7fec:	2d1f      	cmp	r5, #31
    7fee:	dd00      	ble.n	7ff2 <__aeabi_dsub+0x36e>
    7ff0:	e11f      	b.n	8232 <__aeabi_dsub+0x5ae>
    7ff2:	2620      	movs	r6, #32
    7ff4:	0027      	movs	r7, r4
    7ff6:	4650      	mov	r0, sl
    7ff8:	1b76      	subs	r6, r6, r5
    7ffa:	40b7      	lsls	r7, r6
    7ffc:	40e8      	lsrs	r0, r5
    7ffe:	4307      	orrs	r7, r0
    8000:	4650      	mov	r0, sl
    8002:	40b0      	lsls	r0, r6
    8004:	1e46      	subs	r6, r0, #1
    8006:	41b0      	sbcs	r0, r6
    8008:	40ec      	lsrs	r4, r5
    800a:	4338      	orrs	r0, r7
    800c:	1a17      	subs	r7, r2, r0
    800e:	42ba      	cmp	r2, r7
    8010:	4192      	sbcs	r2, r2
    8012:	1b0c      	subs	r4, r1, r4
    8014:	4252      	negs	r2, r2
    8016:	1aa4      	subs	r4, r4, r2
    8018:	4666      	mov	r6, ip
    801a:	4698      	mov	r8, r3
    801c:	e68b      	b.n	7d36 <__aeabi_dsub+0xb2>
    801e:	4664      	mov	r4, ip
    8020:	4667      	mov	r7, ip
    8022:	432c      	orrs	r4, r5
    8024:	d000      	beq.n	8028 <__aeabi_dsub+0x3a4>
    8026:	e68b      	b.n	7d40 <__aeabi_dsub+0xbc>
    8028:	2500      	movs	r5, #0
    802a:	2600      	movs	r6, #0
    802c:	2700      	movs	r7, #0
    802e:	e6ea      	b.n	7e06 <__aeabi_dsub+0x182>
    8030:	001e      	movs	r6, r3
    8032:	e6ad      	b.n	7d90 <__aeabi_dsub+0x10c>
    8034:	2b1f      	cmp	r3, #31
    8036:	dc60      	bgt.n	80fa <__aeabi_dsub+0x476>
    8038:	2720      	movs	r7, #32
    803a:	1af8      	subs	r0, r7, r3
    803c:	000f      	movs	r7, r1
    803e:	4684      	mov	ip, r0
    8040:	4087      	lsls	r7, r0
    8042:	0010      	movs	r0, r2
    8044:	40d8      	lsrs	r0, r3
    8046:	4307      	orrs	r7, r0
    8048:	4660      	mov	r0, ip
    804a:	4082      	lsls	r2, r0
    804c:	1e50      	subs	r0, r2, #1
    804e:	4182      	sbcs	r2, r0
    8050:	40d9      	lsrs	r1, r3
    8052:	4317      	orrs	r7, r2
    8054:	e6f5      	b.n	7e42 <__aeabi_dsub+0x1be>
    8056:	0026      	movs	r6, r4
    8058:	4650      	mov	r0, sl
    805a:	4306      	orrs	r6, r0
    805c:	d005      	beq.n	806a <__aeabi_dsub+0x3e6>
    805e:	43ed      	mvns	r5, r5
    8060:	2d00      	cmp	r5, #0
    8062:	d0d3      	beq.n	800c <__aeabi_dsub+0x388>
    8064:	4e90      	ldr	r6, [pc, #576]	; (82a8 <__aeabi_dsub+0x624>)
    8066:	45b4      	cmp	ip, r6
    8068:	d1bd      	bne.n	7fe6 <__aeabi_dsub+0x362>
    806a:	000c      	movs	r4, r1
    806c:	0017      	movs	r7, r2
    806e:	4666      	mov	r6, ip
    8070:	4698      	mov	r8, r3
    8072:	e68d      	b.n	7d90 <__aeabi_dsub+0x10c>
    8074:	488c      	ldr	r0, [pc, #560]	; (82a8 <__aeabi_dsub+0x624>)
    8076:	4283      	cmp	r3, r0
    8078:	d00b      	beq.n	8092 <__aeabi_dsub+0x40e>
    807a:	4663      	mov	r3, ip
    807c:	e6d9      	b.n	7e32 <__aeabi_dsub+0x1ae>
    807e:	2d00      	cmp	r5, #0
    8080:	d000      	beq.n	8084 <__aeabi_dsub+0x400>
    8082:	e096      	b.n	81b2 <__aeabi_dsub+0x52e>
    8084:	0008      	movs	r0, r1
    8086:	4310      	orrs	r0, r2
    8088:	d100      	bne.n	808c <__aeabi_dsub+0x408>
    808a:	e0e2      	b.n	8252 <__aeabi_dsub+0x5ce>
    808c:	000c      	movs	r4, r1
    808e:	0017      	movs	r7, r2
    8090:	4698      	mov	r8, r3
    8092:	4e85      	ldr	r6, [pc, #532]	; (82a8 <__aeabi_dsub+0x624>)
    8094:	e67c      	b.n	7d90 <__aeabi_dsub+0x10c>
    8096:	2500      	movs	r5, #0
    8098:	e780      	b.n	7f9c <__aeabi_dsub+0x318>
    809a:	2100      	movs	r1, #0
    809c:	e78e      	b.n	7fbc <__aeabi_dsub+0x338>
    809e:	0023      	movs	r3, r4
    80a0:	4650      	mov	r0, sl
    80a2:	4303      	orrs	r3, r0
    80a4:	2e00      	cmp	r6, #0
    80a6:	d000      	beq.n	80aa <__aeabi_dsub+0x426>
    80a8:	e0a8      	b.n	81fc <__aeabi_dsub+0x578>
    80aa:	2b00      	cmp	r3, #0
    80ac:	d100      	bne.n	80b0 <__aeabi_dsub+0x42c>
    80ae:	e0de      	b.n	826e <__aeabi_dsub+0x5ea>
    80b0:	000b      	movs	r3, r1
    80b2:	4313      	orrs	r3, r2
    80b4:	d100      	bne.n	80b8 <__aeabi_dsub+0x434>
    80b6:	e66b      	b.n	7d90 <__aeabi_dsub+0x10c>
    80b8:	4452      	add	r2, sl
    80ba:	4552      	cmp	r2, sl
    80bc:	4180      	sbcs	r0, r0
    80be:	1864      	adds	r4, r4, r1
    80c0:	4240      	negs	r0, r0
    80c2:	1824      	adds	r4, r4, r0
    80c4:	0017      	movs	r7, r2
    80c6:	0223      	lsls	r3, r4, #8
    80c8:	d400      	bmi.n	80cc <__aeabi_dsub+0x448>
    80ca:	e6fd      	b.n	7ec8 <__aeabi_dsub+0x244>
    80cc:	4b77      	ldr	r3, [pc, #476]	; (82ac <__aeabi_dsub+0x628>)
    80ce:	4666      	mov	r6, ip
    80d0:	401c      	ands	r4, r3
    80d2:	e65d      	b.n	7d90 <__aeabi_dsub+0x10c>
    80d4:	0025      	movs	r5, r4
    80d6:	4650      	mov	r0, sl
    80d8:	4305      	orrs	r5, r0
    80da:	2e00      	cmp	r6, #0
    80dc:	d1cf      	bne.n	807e <__aeabi_dsub+0x3fa>
    80de:	2d00      	cmp	r5, #0
    80e0:	d14f      	bne.n	8182 <__aeabi_dsub+0x4fe>
    80e2:	000c      	movs	r4, r1
    80e4:	4314      	orrs	r4, r2
    80e6:	d100      	bne.n	80ea <__aeabi_dsub+0x466>
    80e8:	e0a0      	b.n	822c <__aeabi_dsub+0x5a8>
    80ea:	000c      	movs	r4, r1
    80ec:	0017      	movs	r7, r2
    80ee:	4698      	mov	r8, r3
    80f0:	e64e      	b.n	7d90 <__aeabi_dsub+0x10c>
    80f2:	4666      	mov	r6, ip
    80f4:	2400      	movs	r4, #0
    80f6:	2700      	movs	r7, #0
    80f8:	e685      	b.n	7e06 <__aeabi_dsub+0x182>
    80fa:	001f      	movs	r7, r3
    80fc:	0008      	movs	r0, r1
    80fe:	3f20      	subs	r7, #32
    8100:	40f8      	lsrs	r0, r7
    8102:	0007      	movs	r7, r0
    8104:	2b20      	cmp	r3, #32
    8106:	d100      	bne.n	810a <__aeabi_dsub+0x486>
    8108:	e08e      	b.n	8228 <__aeabi_dsub+0x5a4>
    810a:	2040      	movs	r0, #64	; 0x40
    810c:	1ac3      	subs	r3, r0, r3
    810e:	4099      	lsls	r1, r3
    8110:	430a      	orrs	r2, r1
    8112:	1e51      	subs	r1, r2, #1
    8114:	418a      	sbcs	r2, r1
    8116:	2100      	movs	r1, #0
    8118:	4317      	orrs	r7, r2
    811a:	e692      	b.n	7e42 <__aeabi_dsub+0x1be>
    811c:	2e00      	cmp	r6, #0
    811e:	d114      	bne.n	814a <__aeabi_dsub+0x4c6>
    8120:	0026      	movs	r6, r4
    8122:	4650      	mov	r0, sl
    8124:	4306      	orrs	r6, r0
    8126:	d062      	beq.n	81ee <__aeabi_dsub+0x56a>
    8128:	43db      	mvns	r3, r3
    812a:	2b00      	cmp	r3, #0
    812c:	d15c      	bne.n	81e8 <__aeabi_dsub+0x564>
    812e:	1887      	adds	r7, r0, r2
    8130:	4297      	cmp	r7, r2
    8132:	4192      	sbcs	r2, r2
    8134:	1864      	adds	r4, r4, r1
    8136:	4252      	negs	r2, r2
    8138:	18a4      	adds	r4, r4, r2
    813a:	4666      	mov	r6, ip
    813c:	e687      	b.n	7e4e <__aeabi_dsub+0x1ca>
    813e:	4650      	mov	r0, sl
    8140:	4320      	orrs	r0, r4
    8142:	1e44      	subs	r4, r0, #1
    8144:	41a0      	sbcs	r0, r4
    8146:	2400      	movs	r4, #0
    8148:	e760      	b.n	800c <__aeabi_dsub+0x388>
    814a:	4e57      	ldr	r6, [pc, #348]	; (82a8 <__aeabi_dsub+0x624>)
    814c:	45b4      	cmp	ip, r6
    814e:	d04e      	beq.n	81ee <__aeabi_dsub+0x56a>
    8150:	2680      	movs	r6, #128	; 0x80
    8152:	0436      	lsls	r6, r6, #16
    8154:	425b      	negs	r3, r3
    8156:	4334      	orrs	r4, r6
    8158:	2b38      	cmp	r3, #56	; 0x38
    815a:	dd00      	ble.n	815e <__aeabi_dsub+0x4da>
    815c:	e07f      	b.n	825e <__aeabi_dsub+0x5da>
    815e:	2b1f      	cmp	r3, #31
    8160:	dd00      	ble.n	8164 <__aeabi_dsub+0x4e0>
    8162:	e08b      	b.n	827c <__aeabi_dsub+0x5f8>
    8164:	2620      	movs	r6, #32
    8166:	0027      	movs	r7, r4
    8168:	4650      	mov	r0, sl
    816a:	1af6      	subs	r6, r6, r3
    816c:	40b7      	lsls	r7, r6
    816e:	40d8      	lsrs	r0, r3
    8170:	4307      	orrs	r7, r0
    8172:	4650      	mov	r0, sl
    8174:	40b0      	lsls	r0, r6
    8176:	1e46      	subs	r6, r0, #1
    8178:	41b0      	sbcs	r0, r6
    817a:	4307      	orrs	r7, r0
    817c:	40dc      	lsrs	r4, r3
    817e:	18bf      	adds	r7, r7, r2
    8180:	e7d6      	b.n	8130 <__aeabi_dsub+0x4ac>
    8182:	000d      	movs	r5, r1
    8184:	4315      	orrs	r5, r2
    8186:	d100      	bne.n	818a <__aeabi_dsub+0x506>
    8188:	e602      	b.n	7d90 <__aeabi_dsub+0x10c>
    818a:	4650      	mov	r0, sl
    818c:	1a80      	subs	r0, r0, r2
    818e:	4582      	cmp	sl, r0
    8190:	41bf      	sbcs	r7, r7
    8192:	1a65      	subs	r5, r4, r1
    8194:	427f      	negs	r7, r7
    8196:	1bed      	subs	r5, r5, r7
    8198:	4684      	mov	ip, r0
    819a:	0228      	lsls	r0, r5, #8
    819c:	d400      	bmi.n	81a0 <__aeabi_dsub+0x51c>
    819e:	e68d      	b.n	7ebc <__aeabi_dsub+0x238>
    81a0:	4650      	mov	r0, sl
    81a2:	1a17      	subs	r7, r2, r0
    81a4:	42ba      	cmp	r2, r7
    81a6:	4192      	sbcs	r2, r2
    81a8:	1b0c      	subs	r4, r1, r4
    81aa:	4252      	negs	r2, r2
    81ac:	1aa4      	subs	r4, r4, r2
    81ae:	4698      	mov	r8, r3
    81b0:	e5ee      	b.n	7d90 <__aeabi_dsub+0x10c>
    81b2:	000d      	movs	r5, r1
    81b4:	4315      	orrs	r5, r2
    81b6:	d100      	bne.n	81ba <__aeabi_dsub+0x536>
    81b8:	e76b      	b.n	8092 <__aeabi_dsub+0x40e>
    81ba:	4650      	mov	r0, sl
    81bc:	0767      	lsls	r7, r4, #29
    81be:	08c0      	lsrs	r0, r0, #3
    81c0:	4307      	orrs	r7, r0
    81c2:	2080      	movs	r0, #128	; 0x80
    81c4:	08e4      	lsrs	r4, r4, #3
    81c6:	0300      	lsls	r0, r0, #12
    81c8:	4204      	tst	r4, r0
    81ca:	d007      	beq.n	81dc <__aeabi_dsub+0x558>
    81cc:	08cd      	lsrs	r5, r1, #3
    81ce:	4205      	tst	r5, r0
    81d0:	d104      	bne.n	81dc <__aeabi_dsub+0x558>
    81d2:	002c      	movs	r4, r5
    81d4:	4698      	mov	r8, r3
    81d6:	08d7      	lsrs	r7, r2, #3
    81d8:	0749      	lsls	r1, r1, #29
    81da:	430f      	orrs	r7, r1
    81dc:	0f7b      	lsrs	r3, r7, #29
    81de:	00e4      	lsls	r4, r4, #3
    81e0:	431c      	orrs	r4, r3
    81e2:	00ff      	lsls	r7, r7, #3
    81e4:	4e30      	ldr	r6, [pc, #192]	; (82a8 <__aeabi_dsub+0x624>)
    81e6:	e5d3      	b.n	7d90 <__aeabi_dsub+0x10c>
    81e8:	4e2f      	ldr	r6, [pc, #188]	; (82a8 <__aeabi_dsub+0x624>)
    81ea:	45b4      	cmp	ip, r6
    81ec:	d1b4      	bne.n	8158 <__aeabi_dsub+0x4d4>
    81ee:	000c      	movs	r4, r1
    81f0:	0017      	movs	r7, r2
    81f2:	4666      	mov	r6, ip
    81f4:	e5cc      	b.n	7d90 <__aeabi_dsub+0x10c>
    81f6:	2700      	movs	r7, #0
    81f8:	2400      	movs	r4, #0
    81fa:	e5e8      	b.n	7dce <__aeabi_dsub+0x14a>
    81fc:	2b00      	cmp	r3, #0
    81fe:	d039      	beq.n	8274 <__aeabi_dsub+0x5f0>
    8200:	000b      	movs	r3, r1
    8202:	4313      	orrs	r3, r2
    8204:	d100      	bne.n	8208 <__aeabi_dsub+0x584>
    8206:	e744      	b.n	8092 <__aeabi_dsub+0x40e>
    8208:	08c0      	lsrs	r0, r0, #3
    820a:	0767      	lsls	r7, r4, #29
    820c:	4307      	orrs	r7, r0
    820e:	2080      	movs	r0, #128	; 0x80
    8210:	08e4      	lsrs	r4, r4, #3
    8212:	0300      	lsls	r0, r0, #12
    8214:	4204      	tst	r4, r0
    8216:	d0e1      	beq.n	81dc <__aeabi_dsub+0x558>
    8218:	08cb      	lsrs	r3, r1, #3
    821a:	4203      	tst	r3, r0
    821c:	d1de      	bne.n	81dc <__aeabi_dsub+0x558>
    821e:	08d7      	lsrs	r7, r2, #3
    8220:	0749      	lsls	r1, r1, #29
    8222:	430f      	orrs	r7, r1
    8224:	001c      	movs	r4, r3
    8226:	e7d9      	b.n	81dc <__aeabi_dsub+0x558>
    8228:	2100      	movs	r1, #0
    822a:	e771      	b.n	8110 <__aeabi_dsub+0x48c>
    822c:	2500      	movs	r5, #0
    822e:	2700      	movs	r7, #0
    8230:	e5e9      	b.n	7e06 <__aeabi_dsub+0x182>
    8232:	002e      	movs	r6, r5
    8234:	0027      	movs	r7, r4
    8236:	3e20      	subs	r6, #32
    8238:	40f7      	lsrs	r7, r6
    823a:	2d20      	cmp	r5, #32
    823c:	d02f      	beq.n	829e <__aeabi_dsub+0x61a>
    823e:	2640      	movs	r6, #64	; 0x40
    8240:	1b75      	subs	r5, r6, r5
    8242:	40ac      	lsls	r4, r5
    8244:	4650      	mov	r0, sl
    8246:	4320      	orrs	r0, r4
    8248:	1e44      	subs	r4, r0, #1
    824a:	41a0      	sbcs	r0, r4
    824c:	2400      	movs	r4, #0
    824e:	4338      	orrs	r0, r7
    8250:	e6dc      	b.n	800c <__aeabi_dsub+0x388>
    8252:	2480      	movs	r4, #128	; 0x80
    8254:	2500      	movs	r5, #0
    8256:	0324      	lsls	r4, r4, #12
    8258:	4e13      	ldr	r6, [pc, #76]	; (82a8 <__aeabi_dsub+0x624>)
    825a:	2700      	movs	r7, #0
    825c:	e5d3      	b.n	7e06 <__aeabi_dsub+0x182>
    825e:	4650      	mov	r0, sl
    8260:	4320      	orrs	r0, r4
    8262:	0007      	movs	r7, r0
    8264:	1e78      	subs	r0, r7, #1
    8266:	4187      	sbcs	r7, r0
    8268:	2400      	movs	r4, #0
    826a:	18bf      	adds	r7, r7, r2
    826c:	e760      	b.n	8130 <__aeabi_dsub+0x4ac>
    826e:	000c      	movs	r4, r1
    8270:	0017      	movs	r7, r2
    8272:	e58d      	b.n	7d90 <__aeabi_dsub+0x10c>
    8274:	000c      	movs	r4, r1
    8276:	0017      	movs	r7, r2
    8278:	4e0b      	ldr	r6, [pc, #44]	; (82a8 <__aeabi_dsub+0x624>)
    827a:	e589      	b.n	7d90 <__aeabi_dsub+0x10c>
    827c:	001e      	movs	r6, r3
    827e:	0027      	movs	r7, r4
    8280:	3e20      	subs	r6, #32
    8282:	40f7      	lsrs	r7, r6
    8284:	2b20      	cmp	r3, #32
    8286:	d00c      	beq.n	82a2 <__aeabi_dsub+0x61e>
    8288:	2640      	movs	r6, #64	; 0x40
    828a:	1af3      	subs	r3, r6, r3
    828c:	409c      	lsls	r4, r3
    828e:	4650      	mov	r0, sl
    8290:	4320      	orrs	r0, r4
    8292:	1e44      	subs	r4, r0, #1
    8294:	41a0      	sbcs	r0, r4
    8296:	4307      	orrs	r7, r0
    8298:	2400      	movs	r4, #0
    829a:	18bf      	adds	r7, r7, r2
    829c:	e748      	b.n	8130 <__aeabi_dsub+0x4ac>
    829e:	2400      	movs	r4, #0
    82a0:	e7d0      	b.n	8244 <__aeabi_dsub+0x5c0>
    82a2:	2400      	movs	r4, #0
    82a4:	e7f3      	b.n	828e <__aeabi_dsub+0x60a>
    82a6:	46c0      	nop			; (mov r8, r8)
    82a8:	000007ff 	.word	0x000007ff
    82ac:	ff7fffff 	.word	0xff7fffff

000082b0 <__aeabi_i2d>:
    82b0:	b570      	push	{r4, r5, r6, lr}
    82b2:	2800      	cmp	r0, #0
    82b4:	d030      	beq.n	8318 <__aeabi_i2d+0x68>
    82b6:	17c3      	asrs	r3, r0, #31
    82b8:	18c4      	adds	r4, r0, r3
    82ba:	405c      	eors	r4, r3
    82bc:	0fc5      	lsrs	r5, r0, #31
    82be:	0020      	movs	r0, r4
    82c0:	f000 f838 	bl	8334 <__clzsi2>
    82c4:	4b17      	ldr	r3, [pc, #92]	; (8324 <__aeabi_i2d+0x74>)
    82c6:	4a18      	ldr	r2, [pc, #96]	; (8328 <__aeabi_i2d+0x78>)
    82c8:	1a1b      	subs	r3, r3, r0
    82ca:	1ad2      	subs	r2, r2, r3
    82cc:	2a1f      	cmp	r2, #31
    82ce:	dd18      	ble.n	8302 <__aeabi_i2d+0x52>
    82d0:	4a16      	ldr	r2, [pc, #88]	; (832c <__aeabi_i2d+0x7c>)
    82d2:	1ad2      	subs	r2, r2, r3
    82d4:	4094      	lsls	r4, r2
    82d6:	2200      	movs	r2, #0
    82d8:	0324      	lsls	r4, r4, #12
    82da:	055b      	lsls	r3, r3, #21
    82dc:	0b24      	lsrs	r4, r4, #12
    82de:	0d5b      	lsrs	r3, r3, #21
    82e0:	2100      	movs	r1, #0
    82e2:	0010      	movs	r0, r2
    82e4:	0324      	lsls	r4, r4, #12
    82e6:	0d0a      	lsrs	r2, r1, #20
    82e8:	0b24      	lsrs	r4, r4, #12
    82ea:	0512      	lsls	r2, r2, #20
    82ec:	4322      	orrs	r2, r4
    82ee:	4c10      	ldr	r4, [pc, #64]	; (8330 <__aeabi_i2d+0x80>)
    82f0:	051b      	lsls	r3, r3, #20
    82f2:	4022      	ands	r2, r4
    82f4:	4313      	orrs	r3, r2
    82f6:	005b      	lsls	r3, r3, #1
    82f8:	07ed      	lsls	r5, r5, #31
    82fa:	085b      	lsrs	r3, r3, #1
    82fc:	432b      	orrs	r3, r5
    82fe:	0019      	movs	r1, r3
    8300:	bd70      	pop	{r4, r5, r6, pc}
    8302:	0021      	movs	r1, r4
    8304:	4091      	lsls	r1, r2
    8306:	000a      	movs	r2, r1
    8308:	210b      	movs	r1, #11
    830a:	1a08      	subs	r0, r1, r0
    830c:	40c4      	lsrs	r4, r0
    830e:	055b      	lsls	r3, r3, #21
    8310:	0324      	lsls	r4, r4, #12
    8312:	0b24      	lsrs	r4, r4, #12
    8314:	0d5b      	lsrs	r3, r3, #21
    8316:	e7e3      	b.n	82e0 <__aeabi_i2d+0x30>
    8318:	2500      	movs	r5, #0
    831a:	2300      	movs	r3, #0
    831c:	2400      	movs	r4, #0
    831e:	2200      	movs	r2, #0
    8320:	e7de      	b.n	82e0 <__aeabi_i2d+0x30>
    8322:	46c0      	nop			; (mov r8, r8)
    8324:	0000041e 	.word	0x0000041e
    8328:	00000433 	.word	0x00000433
    832c:	00000413 	.word	0x00000413
    8330:	800fffff 	.word	0x800fffff

00008334 <__clzsi2>:
    8334:	211c      	movs	r1, #28
    8336:	2301      	movs	r3, #1
    8338:	041b      	lsls	r3, r3, #16
    833a:	4298      	cmp	r0, r3
    833c:	d301      	bcc.n	8342 <__clzsi2+0xe>
    833e:	0c00      	lsrs	r0, r0, #16
    8340:	3910      	subs	r1, #16
    8342:	0a1b      	lsrs	r3, r3, #8
    8344:	4298      	cmp	r0, r3
    8346:	d301      	bcc.n	834c <__clzsi2+0x18>
    8348:	0a00      	lsrs	r0, r0, #8
    834a:	3908      	subs	r1, #8
    834c:	091b      	lsrs	r3, r3, #4
    834e:	4298      	cmp	r0, r3
    8350:	d301      	bcc.n	8356 <__clzsi2+0x22>
    8352:	0900      	lsrs	r0, r0, #4
    8354:	3904      	subs	r1, #4
    8356:	a202      	add	r2, pc, #8	; (adr r2, 8360 <__clzsi2+0x2c>)
    8358:	5c10      	ldrb	r0, [r2, r0]
    835a:	1840      	adds	r0, r0, r1
    835c:	4770      	bx	lr
    835e:	46c0      	nop			; (mov r8, r8)
    8360:	02020304 	.word	0x02020304
    8364:	01010101 	.word	0x01010101
	...

00008370 <__libc_init_array>:
    8370:	b570      	push	{r4, r5, r6, lr}
    8372:	2600      	movs	r6, #0
    8374:	4d0c      	ldr	r5, [pc, #48]	; (83a8 <__libc_init_array+0x38>)
    8376:	4c0d      	ldr	r4, [pc, #52]	; (83ac <__libc_init_array+0x3c>)
    8378:	1b64      	subs	r4, r4, r5
    837a:	10a4      	asrs	r4, r4, #2
    837c:	42a6      	cmp	r6, r4
    837e:	d109      	bne.n	8394 <__libc_init_array+0x24>
    8380:	2600      	movs	r6, #0
    8382:	f000 f9d9 	bl	8738 <_init>
    8386:	4d0a      	ldr	r5, [pc, #40]	; (83b0 <__libc_init_array+0x40>)
    8388:	4c0a      	ldr	r4, [pc, #40]	; (83b4 <__libc_init_array+0x44>)
    838a:	1b64      	subs	r4, r4, r5
    838c:	10a4      	asrs	r4, r4, #2
    838e:	42a6      	cmp	r6, r4
    8390:	d105      	bne.n	839e <__libc_init_array+0x2e>
    8392:	bd70      	pop	{r4, r5, r6, pc}
    8394:	00b3      	lsls	r3, r6, #2
    8396:	58eb      	ldr	r3, [r5, r3]
    8398:	4798      	blx	r3
    839a:	3601      	adds	r6, #1
    839c:	e7ee      	b.n	837c <__libc_init_array+0xc>
    839e:	00b3      	lsls	r3, r6, #2
    83a0:	58eb      	ldr	r3, [r5, r3]
    83a2:	4798      	blx	r3
    83a4:	3601      	adds	r6, #1
    83a6:	e7f2      	b.n	838e <__libc_init_array+0x1e>
    83a8:	00008744 	.word	0x00008744
    83ac:	00008744 	.word	0x00008744
    83b0:	00008744 	.word	0x00008744
    83b4:	00008748 	.word	0x00008748

000083b8 <memcpy>:
    83b8:	2300      	movs	r3, #0
    83ba:	b510      	push	{r4, lr}
    83bc:	429a      	cmp	r2, r3
    83be:	d100      	bne.n	83c2 <memcpy+0xa>
    83c0:	bd10      	pop	{r4, pc}
    83c2:	5ccc      	ldrb	r4, [r1, r3]
    83c4:	54c4      	strb	r4, [r0, r3]
    83c6:	3301      	adds	r3, #1
    83c8:	e7f8      	b.n	83bc <memcpy+0x4>

000083ca <memset>:
    83ca:	0003      	movs	r3, r0
    83cc:	1882      	adds	r2, r0, r2
    83ce:	4293      	cmp	r3, r2
    83d0:	d100      	bne.n	83d4 <memset+0xa>
    83d2:	4770      	bx	lr
    83d4:	7019      	strb	r1, [r3, #0]
    83d6:	3301      	adds	r3, #1
    83d8:	e7f9      	b.n	83ce <memset+0x4>
    83da:	0000      	movs	r0, r0
    83dc:	682f2e2e 	.word	0x682f2e2e
    83e0:	702f6c70 	.word	0x702f6c70
    83e4:	2f74726f 	.word	0x2f74726f
    83e8:	5f6c7068 	.word	0x5f6c7068
    83ec:	6f697067 	.word	0x6f697067
    83f0:	7361625f 	.word	0x7361625f
    83f4:	00682e65 	.word	0x00682e65
    83f8:	682f2e2e 	.word	0x682f2e2e
    83fc:	732f6c61 	.word	0x732f6c61
    8400:	682f6372 	.word	0x682f6372
    8404:	615f6c61 	.word	0x615f6c61
    8408:	735f6364 	.word	0x735f6364
    840c:	2e636e79 	.word	0x2e636e79
    8410:	00000063 	.word	0x00000063
    8414:	000010bc 	.word	0x000010bc
    8418:	00001086 	.word	0x00001086
    841c:	0000108c 	.word	0x0000108c
    8420:	00001086 	.word	0x00001086
    8424:	00001092 	.word	0x00001092
    8428:	00001086 	.word	0x00001086
    842c:	00001092 	.word	0x00001092
    8430:	00001086 	.word	0x00001086
    8434:	00001086 	.word	0x00001086
    8438:	00001092 	.word	0x00001092
    843c:	00001086 	.word	0x00001086
    8440:	00001092 	.word	0x00001092
    8444:	00001086 	.word	0x00001086
    8448:	000010c0 	.word	0x000010c0
    844c:	000010aa 	.word	0x000010aa
    8450:	000010b0 	.word	0x000010b0
    8454:	000010aa 	.word	0x000010aa
    8458:	000010b6 	.word	0x000010b6
    845c:	000010aa 	.word	0x000010aa
    8460:	000010b6 	.word	0x000010b6
    8464:	000010aa 	.word	0x000010aa
    8468:	000010aa 	.word	0x000010aa
    846c:	000010b6 	.word	0x000010b6
    8470:	000010aa 	.word	0x000010aa
    8474:	000010b6 	.word	0x000010b6
    8478:	000010aa 	.word	0x000010aa
    847c:	0000142c 	.word	0x0000142c
    8480:	000013a0 	.word	0x000013a0
    8484:	000013b0 	.word	0x000013b0
    8488:	000013c6 	.word	0x000013c6
    848c:	000013da 	.word	0x000013da
    8490:	000013fe 	.word	0x000013fe
    8494:	00001548 	.word	0x00001548
    8498:	000014a8 	.word	0x000014a8
    849c:	000014dc 	.word	0x000014dc
    84a0:	00001506 	.word	0x00001506
    84a4:	00001526 	.word	0x00001526
    84a8:	0000153c 	.word	0x0000153c
    84ac:	00001548 	.word	0x00001548
    84b0:	682f2e2e 	.word	0x682f2e2e
    84b4:	732f6c61 	.word	0x732f6c61
    84b8:	682f6372 	.word	0x682f6372
    84bc:	635f6c61 	.word	0x635f6c61
    84c0:	6e656c61 	.word	0x6e656c61
    84c4:	5f726164 	.word	0x5f726164
    84c8:	632e736f 	.word	0x632e736f
    84cc:	00000000 	.word	0x00000000
    84d0:	682f2e2e 	.word	0x682f2e2e
    84d4:	732f6c61 	.word	0x732f6c61
    84d8:	682f6372 	.word	0x682f6372
    84dc:	695f6c61 	.word	0x695f6c61
    84e0:	00632e6f 	.word	0x00632e6f
    84e4:	682f2e2e 	.word	0x682f2e2e
    84e8:	732f6c61 	.word	0x732f6c61
    84ec:	682f6372 	.word	0x682f6372
    84f0:	705f6c61 	.word	0x705f6c61
    84f4:	632e6d77 	.word	0x632e6d77
    84f8:	00000000 	.word	0x00000000
    84fc:	682f2e2e 	.word	0x682f2e2e
    8500:	732f6c61 	.word	0x732f6c61
    8504:	682f6372 	.word	0x682f6372
    8508:	755f6c61 	.word	0x755f6c61
    850c:	74726173 	.word	0x74726173
    8510:	6e79735f 	.word	0x6e79735f
    8514:	00632e63 	.word	0x00632e63

00008518 <_adcs>:
    8518:	05000000 19030000 00000000 00000000     ................
	...
    8534:	05000001 190a0000 00000000 00000000     ................
	...
    8550:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    8560:	632e6364 00000000 682f2e2e 722f6c70     dc.c....../hpl/r
    8570:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    8580:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    8590:	65735f6c 6d6f6372 0000632e              l_sercom.c..

0000859c <sercomspi_regs>:
	...
    85b0:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    85c0:	0000632e 54415453 00000045 00000072     .c..STATE...r...
    85d0:	000007d0 00000535 000003e8 00000320     ....5....... ...
    85e0:	0000029b 0000023b 000001f4 000001bc     ....;...........
    85f0:	00000190 0000016c 0000014d 00000134     ....l...M...4...
    8600:	0000011e 0000010b 000000fa 000000eb     ................
    8610:	742f2e2e 64726968 74726170 54522f79     ../thirdparty/RT
    8620:	662f534f 72656572 2f736f74 65657246     OS/freertos/Free
    8630:	534f5452 2e303156 2f302e30 736f7472     RTOSV10.0.0/rtos
    8640:	726f705f 00632e74 454c4449 00000000     _port.c.IDLE....
    8650:	09632509 25097525 75250975 00000a0d     .%c.%u.%u.%u....
    8660:	00006024 00005fea 00005ff8 00006004     $`..._..._...`..
    8670:	0000600c 00006154 0000611a 00006128     .`..Ta...a..(a..
    8680:	00006134 0000613c 20726d54 00637653     4a..<a..Tmr Svc.
    8690:	00006688 00006688 00006688 00006716     .f...f...f...g..
    86a0:	000066e0 0000670a 00006688 00006688     .f...g...f...f..
    86b0:	00006716 000066e0 00007114 000070f6     .g...f...q...p..
    86c0:	000070b0 00006fce 000070b0 000070e8     .p...o...p...p..
    86d0:	000070b0 00006fce 000070f6 000070f6     .p...o...p...p..
    86e0:	000070e8 00006fce 00006fc6 00006fc6     .p...o...o...o..
    86f0:	00006fc6 0000732c 00007974 00007834     .o..,s..ty..4x..
    8700:	00007834 00007830 0000794c 0000794c     4x..0x..Ly..Ly..
    8710:	0000793e 00007830 0000794c 0000793e     >y..0x..Ly..>y..
    8720:	0000794c 00007830 00007954 00007954     Ly..0x..Ty..Ty..
    8730:	00007954 00007b58                       Ty..X{..

00008738 <_init>:
    8738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    873a:	46c0      	nop			; (mov r8, r8)
    873c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    873e:	bc08      	pop	{r3}
    8740:	469e      	mov	lr, r3
    8742:	4770      	bx	lr

00008744 <__init_array_start>:
    8744:	000000e5 	.word	0x000000e5

00008748 <_fini>:
    8748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    874a:	46c0      	nop			; (mov r8, r8)
    874c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    874e:	bc08      	pop	{r3}
    8750:	469e      	mov	lr, r3
    8752:	4770      	bx	lr

00008754 <__fini_array_start>:
    8754:	000000bd 	.word	0x000000bd
