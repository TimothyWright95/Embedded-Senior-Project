
MyProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008794  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000002c  20000000  00008794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002890  2000002c  000087c0  0002002c  2**2
                  ALLOC
  3 .stack        00002004  200028bc  0000b050  0002002c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
  6 .debug_info   00026fe8  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039fb  00000000  00000000  00047095  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a321  00000000  00000000  0004aa90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001a80  00000000  00000000  00054db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000018b0  00000000  00000000  00056831  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00021779  00000000  00000000  000580e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017ced  00000000  00000000  0007985a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a78da  00000000  00000000  00091547  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00006228  00000000  00000000  00138e24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	c0 48 00 20 31 01 00 00 b5 01 00 00 b5 01 00 00     .H. 1...........
	...
      2c:	51 48 00 00 00 00 00 00 00 00 00 00 81 49 00 00     QH...........I..
      3c:	c9 49 00 00 b5 01 00 00 b5 01 00 00 81 2b 00 00     .I...........+..
      4c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      5c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      6c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      7c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      8c:	b5 01 00 00 e1 38 00 00 b5 01 00 00 b5 01 00 00     .....8..........
      9c:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................
      ac:	b5 01 00 00 b5 01 00 00 b5 01 00 00 b5 01 00 00     ................

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	2000002c 	.word	0x2000002c
      dc:	00000000 	.word	0x00000000
      e0:	00008794 	.word	0x00008794

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000030 	.word	0x20000030
     110:	00008794 	.word	0x00008794
     114:	00008794 	.word	0x00008794
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b580      	push	{r7, lr}
     11e:	af00      	add	r7, sp, #0
	system_init();
     120:	4b02      	ldr	r3, [pc, #8]	; (12c <atmel_start_init+0x10>)
     122:	4798      	blx	r3
}
     124:	46c0      	nop			; (mov r8, r8)
     126:	46bd      	mov	sp, r7
     128:	bd80      	pop	{r7, pc}
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	00000c41 	.word	0x00000c41

00000130 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     130:	b580      	push	{r7, lr}
     132:	b082      	sub	sp, #8
     134:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     136:	4b16      	ldr	r3, [pc, #88]	; (190 <Reset_Handler+0x60>)
     138:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     13a:	4b16      	ldr	r3, [pc, #88]	; (194 <Reset_Handler+0x64>)
     13c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     13e:	687a      	ldr	r2, [r7, #4]
     140:	683b      	ldr	r3, [r7, #0]
     142:	429a      	cmp	r2, r3
     144:	d00c      	beq.n	160 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     146:	e007      	b.n	158 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     148:	683b      	ldr	r3, [r7, #0]
     14a:	1d1a      	adds	r2, r3, #4
     14c:	603a      	str	r2, [r7, #0]
     14e:	687a      	ldr	r2, [r7, #4]
     150:	1d11      	adds	r1, r2, #4
     152:	6079      	str	r1, [r7, #4]
     154:	6812      	ldr	r2, [r2, #0]
     156:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     158:	683a      	ldr	r2, [r7, #0]
     15a:	4b0f      	ldr	r3, [pc, #60]	; (198 <Reset_Handler+0x68>)
     15c:	429a      	cmp	r2, r3
     15e:	d3f3      	bcc.n	148 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4b0e      	ldr	r3, [pc, #56]	; (19c <Reset_Handler+0x6c>)
     162:	603b      	str	r3, [r7, #0]
     164:	e004      	b.n	170 <Reset_Handler+0x40>
                *pDest++ = 0;
     166:	683b      	ldr	r3, [r7, #0]
     168:	1d1a      	adds	r2, r3, #4
     16a:	603a      	str	r2, [r7, #0]
     16c:	2200      	movs	r2, #0
     16e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     170:	683a      	ldr	r2, [r7, #0]
     172:	4b0b      	ldr	r3, [pc, #44]	; (1a0 <Reset_Handler+0x70>)
     174:	429a      	cmp	r2, r3
     176:	d3f6      	bcc.n	166 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     178:	4b0a      	ldr	r3, [pc, #40]	; (1a4 <Reset_Handler+0x74>)
     17a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     17c:	4b0a      	ldr	r3, [pc, #40]	; (1a8 <Reset_Handler+0x78>)
     17e:	687a      	ldr	r2, [r7, #4]
     180:	21ff      	movs	r1, #255	; 0xff
     182:	438a      	bics	r2, r1
     184:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
     186:	4b09      	ldr	r3, [pc, #36]	; (1ac <Reset_Handler+0x7c>)
     188:	4798      	blx	r3

        /* Branch to main function */
        main();
     18a:	4b09      	ldr	r3, [pc, #36]	; (1b0 <Reset_Handler+0x80>)
     18c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     18e:	e7fe      	b.n	18e <Reset_Handler+0x5e>
     190:	00008794 	.word	0x00008794
     194:	20000000 	.word	0x20000000
     198:	2000002c 	.word	0x2000002c
     19c:	2000002c 	.word	0x2000002c
     1a0:	200028bc 	.word	0x200028bc
     1a4:	00000000 	.word	0x00000000
     1a8:	e000ed00 	.word	0xe000ed00
     1ac:	000083b1 	.word	0x000083b1
     1b0:	000039e1 	.word	0x000039e1

000001b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     1b4:	b580      	push	{r7, lr}
     1b6:	af00      	add	r7, sp, #0
        while (1) {
     1b8:	e7fe      	b.n	1b8 <Dummy_Handler+0x4>

000001ba <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     1ba:	b580      	push	{r7, lr}
     1bc:	b084      	sub	sp, #16
     1be:	af00      	add	r7, sp, #0
     1c0:	60f8      	str	r0, [r7, #12]
     1c2:	607a      	str	r2, [r7, #4]
     1c4:	230b      	movs	r3, #11
     1c6:	18fb      	adds	r3, r7, r3
     1c8:	1c0a      	adds	r2, r1, #0
     1ca:	701a      	strb	r2, [r3, #0]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     1cc:	230b      	movs	r3, #11
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	781a      	ldrb	r2, [r3, #0]
     1d2:	68fb      	ldr	r3, [r7, #12]
     1d4:	3220      	adds	r2, #32
     1d6:	0092      	lsls	r2, r2, #2
     1d8:	6879      	ldr	r1, [r7, #4]
     1da:	50d1      	str	r1, [r2, r3]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     1dc:	46c0      	nop			; (mov r8, r8)
     1de:	46bd      	mov	sp, r7
     1e0:	b004      	add	sp, #16
     1e2:	bd80      	pop	{r7, pc}

000001e4 <hri_mclk_set_APBAMASK_RTC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_WDT;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_RTC_bit(const void *const hw)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	b082      	sub	sp, #8
     1e8:	af00      	add	r7, sp, #0
     1ea:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     1ec:	687b      	ldr	r3, [r7, #4]
     1ee:	695b      	ldr	r3, [r3, #20]
     1f0:	2280      	movs	r2, #128	; 0x80
     1f2:	0092      	lsls	r2, r2, #2
     1f4:	431a      	orrs	r2, r3
     1f6:	687b      	ldr	r3, [r7, #4]
     1f8:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	46bd      	mov	sp, r7
     1fe:	b002      	add	sp, #8
     200:	bd80      	pop	{r7, pc}

00000202 <hri_mclk_set_APBCMASK_SERCOM3_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_SERCOM2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_SERCOM3_bit(const void *const hw)
{
     202:	b580      	push	{r7, lr}
     204:	b082      	sub	sp, #8
     206:	af00      	add	r7, sp, #0
     208:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM3;
     20a:	687b      	ldr	r3, [r7, #4]
     20c:	69db      	ldr	r3, [r3, #28]
     20e:	2210      	movs	r2, #16
     210:	431a      	orrs	r2, r3
     212:	687b      	ldr	r3, [r7, #4]
     214:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     216:	46c0      	nop			; (mov r8, r8)
     218:	46bd      	mov	sp, r7
     21a:	b002      	add	sp, #8
     21c:	bd80      	pop	{r7, pc}

0000021e <hri_mclk_set_APBCMASK_TC0_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TCC2;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_TC0_bit(const void *const hw)
{
     21e:	b580      	push	{r7, lr}
     220:	b082      	sub	sp, #8
     222:	af00      	add	r7, sp, #0
     224:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC0;
     226:	687b      	ldr	r3, [r7, #4]
     228:	69db      	ldr	r3, [r3, #28]
     22a:	2280      	movs	r2, #128	; 0x80
     22c:	0152      	lsls	r2, r2, #5
     22e:	431a      	orrs	r2, r3
     230:	687b      	ldr	r3, [r7, #4]
     232:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     234:	46c0      	nop			; (mov r8, r8)
     236:	46bd      	mov	sp, r7
     238:	b002      	add	sp, #8
     23a:	bd80      	pop	{r7, pc}

0000023c <hri_mclk_set_APBCMASK_ADC0_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_TC4;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_ADC0_bit(const void *const hw)
{
     23c:	b580      	push	{r7, lr}
     23e:	b082      	sub	sp, #8
     240:	af00      	add	r7, sp, #0
     242:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC0;
     244:	687b      	ldr	r3, [r7, #4]
     246:	69db      	ldr	r3, [r3, #28]
     248:	2280      	movs	r2, #128	; 0x80
     24a:	0292      	lsls	r2, r2, #10
     24c:	431a      	orrs	r2, r3
     24e:	687b      	ldr	r3, [r7, #4]
     250:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     252:	46c0      	nop			; (mov r8, r8)
     254:	46bd      	mov	sp, r7
     256:	b002      	add	sp, #8
     258:	bd80      	pop	{r7, pc}

0000025a <hri_mclk_set_APBCMASK_ADC1_bit>:
	((Mclk *)hw)->APBCMASK.reg ^= MCLK_APBCMASK_ADC0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBCMASK_ADC1_bit(const void *const hw)
{
     25a:	b580      	push	{r7, lr}
     25c:	b082      	sub	sp, #8
     25e:	af00      	add	r7, sp, #0
     260:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_ADC1;
     262:	687b      	ldr	r3, [r7, #4]
     264:	69db      	ldr	r3, [r3, #28]
     266:	2280      	movs	r2, #128	; 0x80
     268:	02d2      	lsls	r2, r2, #11
     26a:	431a      	orrs	r2, r3
     26c:	687b      	ldr	r3, [r7, #4]
     26e:	61da      	str	r2, [r3, #28]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     270:	46c0      	nop			; (mov r8, r8)
     272:	46bd      	mov	sp, r7
     274:	b002      	add	sp, #8
     276:	bd80      	pop	{r7, pc}

00000278 <hri_port_set_DIR_reg>:
	((PortGroup *)hw)->WRCONFIG.reg = data;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     278:	b580      	push	{r7, lr}
     27a:	b084      	sub	sp, #16
     27c:	af00      	add	r7, sp, #0
     27e:	60f8      	str	r0, [r7, #12]
     280:	607a      	str	r2, [r7, #4]
     282:	230b      	movs	r3, #11
     284:	18fb      	adds	r3, r7, r3
     286:	1c0a      	adds	r2, r1, #0
     288:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     28a:	230b      	movs	r3, #11
     28c:	18fb      	adds	r3, r7, r3
     28e:	781b      	ldrb	r3, [r3, #0]
     290:	68fa      	ldr	r2, [r7, #12]
     292:	01db      	lsls	r3, r3, #7
     294:	18d3      	adds	r3, r2, r3
     296:	3308      	adds	r3, #8
     298:	687a      	ldr	r2, [r7, #4]
     29a:	601a      	str	r2, [r3, #0]
}
     29c:	46c0      	nop			; (mov r8, r8)
     29e:	46bd      	mov	sp, r7
     2a0:	b004      	add	sp, #16
     2a2:	bd80      	pop	{r7, pc}

000002a4 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	60f8      	str	r0, [r7, #12]
     2ac:	607a      	str	r2, [r7, #4]
     2ae:	230b      	movs	r3, #11
     2b0:	18fb      	adds	r3, r7, r3
     2b2:	1c0a      	adds	r2, r1, #0
     2b4:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     2b6:	230b      	movs	r3, #11
     2b8:	18fb      	adds	r3, r7, r3
     2ba:	781b      	ldrb	r3, [r3, #0]
     2bc:	68fa      	ldr	r2, [r7, #12]
     2be:	01db      	lsls	r3, r3, #7
     2c0:	18d3      	adds	r3, r2, r3
     2c2:	3304      	adds	r3, #4
     2c4:	687a      	ldr	r2, [r7, #4]
     2c6:	601a      	str	r2, [r3, #0]
}
     2c8:	46c0      	nop			; (mov r8, r8)
     2ca:	46bd      	mov	sp, r7
     2cc:	b004      	add	sp, #16
     2ce:	bd80      	pop	{r7, pc}

000002d0 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = mask;
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b084      	sub	sp, #16
     2d4:	af00      	add	r7, sp, #0
     2d6:	60f8      	str	r0, [r7, #12]
     2d8:	607a      	str	r2, [r7, #4]
     2da:	230b      	movs	r3, #11
     2dc:	18fb      	adds	r3, r7, r3
     2de:	1c0a      	adds	r2, r1, #0
     2e0:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     2e2:	230b      	movs	r3, #11
     2e4:	18fb      	adds	r3, r7, r3
     2e6:	781b      	ldrb	r3, [r3, #0]
     2e8:	68fa      	ldr	r2, [r7, #12]
     2ea:	01db      	lsls	r3, r3, #7
     2ec:	18d3      	adds	r3, r2, r3
     2ee:	3318      	adds	r3, #24
     2f0:	687a      	ldr	r2, [r7, #4]
     2f2:	601a      	str	r2, [r3, #0]
}
     2f4:	46c0      	nop			; (mov r8, r8)
     2f6:	46bd      	mov	sp, r7
     2f8:	b004      	add	sp, #16
     2fa:	bd80      	pop	{r7, pc}

000002fc <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	b084      	sub	sp, #16
     300:	af00      	add	r7, sp, #0
     302:	60f8      	str	r0, [r7, #12]
     304:	607a      	str	r2, [r7, #4]
     306:	230b      	movs	r3, #11
     308:	18fb      	adds	r3, r7, r3
     30a:	1c0a      	adds	r2, r1, #0
     30c:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     30e:	230b      	movs	r3, #11
     310:	18fb      	adds	r3, r7, r3
     312:	781b      	ldrb	r3, [r3, #0]
     314:	68fa      	ldr	r2, [r7, #12]
     316:	01db      	lsls	r3, r3, #7
     318:	18d3      	adds	r3, r2, r3
     31a:	3314      	adds	r3, #20
     31c:	687a      	ldr	r2, [r7, #4]
     31e:	601a      	str	r2, [r3, #0]
}
     320:	46c0      	nop			; (mov r8, r8)
     322:	46bd      	mov	sp, r7
     324:	b004      	add	sp, #16
     326:	bd80      	pop	{r7, pc}

00000328 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     328:	b590      	push	{r4, r7, lr}
     32a:	b085      	sub	sp, #20
     32c:	af00      	add	r7, sp, #0
     32e:	6078      	str	r0, [r7, #4]
     330:	000c      	movs	r4, r1
     332:	0010      	movs	r0, r2
     334:	0019      	movs	r1, r3
     336:	1cfb      	adds	r3, r7, #3
     338:	1c22      	adds	r2, r4, #0
     33a:	701a      	strb	r2, [r3, #0]
     33c:	1cbb      	adds	r3, r7, #2
     33e:	1c02      	adds	r2, r0, #0
     340:	701a      	strb	r2, [r3, #0]
     342:	1c7b      	adds	r3, r7, #1
     344:	1c0a      	adds	r2, r1, #0
     346:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     348:	1cfb      	adds	r3, r7, #3
     34a:	7819      	ldrb	r1, [r3, #0]
     34c:	1cbb      	adds	r3, r7, #2
     34e:	781a      	ldrb	r2, [r3, #0]
     350:	230f      	movs	r3, #15
     352:	18fb      	adds	r3, r7, r3
     354:	6878      	ldr	r0, [r7, #4]
     356:	2430      	movs	r4, #48	; 0x30
     358:	01c9      	lsls	r1, r1, #7
     35a:	1841      	adds	r1, r0, r1
     35c:	188a      	adds	r2, r1, r2
     35e:	1912      	adds	r2, r2, r4
     360:	7812      	ldrb	r2, [r2, #0]
     362:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     364:	230f      	movs	r3, #15
     366:	18fb      	adds	r3, r7, r3
     368:	220f      	movs	r2, #15
     36a:	18ba      	adds	r2, r7, r2
     36c:	7812      	ldrb	r2, [r2, #0]
     36e:	210f      	movs	r1, #15
     370:	438a      	bics	r2, r1
     372:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXE(data);
     374:	1c7b      	adds	r3, r7, #1
     376:	781b      	ldrb	r3, [r3, #0]
     378:	220f      	movs	r2, #15
     37a:	4013      	ands	r3, r2
     37c:	b2d9      	uxtb	r1, r3
     37e:	230f      	movs	r3, #15
     380:	18fb      	adds	r3, r7, r3
     382:	220f      	movs	r2, #15
     384:	18ba      	adds	r2, r7, r2
     386:	7812      	ldrb	r2, [r2, #0]
     388:	430a      	orrs	r2, r1
     38a:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     38c:	1cfb      	adds	r3, r7, #3
     38e:	781a      	ldrb	r2, [r3, #0]
     390:	1cbb      	adds	r3, r7, #2
     392:	781b      	ldrb	r3, [r3, #0]
     394:	6879      	ldr	r1, [r7, #4]
     396:	2030      	movs	r0, #48	; 0x30
     398:	01d2      	lsls	r2, r2, #7
     39a:	188a      	adds	r2, r1, r2
     39c:	18d3      	adds	r3, r2, r3
     39e:	181b      	adds	r3, r3, r0
     3a0:	220f      	movs	r2, #15
     3a2:	18ba      	adds	r2, r7, r2
     3a4:	7812      	ldrb	r2, [r2, #0]
     3a6:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     3a8:	46c0      	nop			; (mov r8, r8)
     3aa:	46bd      	mov	sp, r7
     3ac:	b005      	add	sp, #20
     3ae:	bd90      	pop	{r4, r7, pc}

000003b0 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     3b0:	b590      	push	{r4, r7, lr}
     3b2:	b085      	sub	sp, #20
     3b4:	af00      	add	r7, sp, #0
     3b6:	6078      	str	r0, [r7, #4]
     3b8:	000c      	movs	r4, r1
     3ba:	0010      	movs	r0, r2
     3bc:	0019      	movs	r1, r3
     3be:	1cfb      	adds	r3, r7, #3
     3c0:	1c22      	adds	r2, r4, #0
     3c2:	701a      	strb	r2, [r3, #0]
     3c4:	1cbb      	adds	r3, r7, #2
     3c6:	1c02      	adds	r2, r0, #0
     3c8:	701a      	strb	r2, [r3, #0]
     3ca:	1c7b      	adds	r3, r7, #1
     3cc:	1c0a      	adds	r2, r1, #0
     3ce:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d0:	1cfb      	adds	r3, r7, #3
     3d2:	7819      	ldrb	r1, [r3, #0]
     3d4:	1cbb      	adds	r3, r7, #2
     3d6:	781a      	ldrb	r2, [r3, #0]
     3d8:	230f      	movs	r3, #15
     3da:	18fb      	adds	r3, r7, r3
     3dc:	6878      	ldr	r0, [r7, #4]
     3de:	2430      	movs	r4, #48	; 0x30
     3e0:	01c9      	lsls	r1, r1, #7
     3e2:	1841      	adds	r1, r0, r1
     3e4:	188a      	adds	r2, r1, r2
     3e6:	1912      	adds	r2, r2, r4
     3e8:	7812      	ldrb	r2, [r2, #0]
     3ea:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3ec:	230f      	movs	r3, #15
     3ee:	18fb      	adds	r3, r7, r3
     3f0:	220f      	movs	r2, #15
     3f2:	18ba      	adds	r2, r7, r2
     3f4:	7812      	ldrb	r2, [r2, #0]
     3f6:	210f      	movs	r1, #15
     3f8:	400a      	ands	r2, r1
     3fa:	701a      	strb	r2, [r3, #0]
	tmp |= PORT_PMUX_PMUXO(data);
     3fc:	1c7b      	adds	r3, r7, #1
     3fe:	781b      	ldrb	r3, [r3, #0]
     400:	011b      	lsls	r3, r3, #4
     402:	b2d9      	uxtb	r1, r3
     404:	230f      	movs	r3, #15
     406:	18fb      	adds	r3, r7, r3
     408:	220f      	movs	r2, #15
     40a:	18ba      	adds	r2, r7, r2
     40c:	7812      	ldrb	r2, [r2, #0]
     40e:	430a      	orrs	r2, r1
     410:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     412:	1cfb      	adds	r3, r7, #3
     414:	781a      	ldrb	r2, [r3, #0]
     416:	1cbb      	adds	r3, r7, #2
     418:	781b      	ldrb	r3, [r3, #0]
     41a:	6879      	ldr	r1, [r7, #4]
     41c:	2030      	movs	r0, #48	; 0x30
     41e:	01d2      	lsls	r2, r2, #7
     420:	188a      	adds	r2, r1, r2
     422:	18d3      	adds	r3, r2, r3
     424:	181b      	adds	r3, r3, r0
     426:	220f      	movs	r2, #15
     428:	18ba      	adds	r2, r7, r2
     42a:	7812      	ldrb	r2, [r2, #0]
     42c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	46bd      	mov	sp, r7
     432:	b005      	add	sp, #20
     434:	bd90      	pop	{r4, r7, pc}

00000436 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     436:	b590      	push	{r4, r7, lr}
     438:	b085      	sub	sp, #20
     43a:	af00      	add	r7, sp, #0
     43c:	6078      	str	r0, [r7, #4]
     43e:	000c      	movs	r4, r1
     440:	0010      	movs	r0, r2
     442:	0019      	movs	r1, r3
     444:	1cfb      	adds	r3, r7, #3
     446:	1c22      	adds	r2, r4, #0
     448:	701a      	strb	r2, [r3, #0]
     44a:	1cbb      	adds	r3, r7, #2
     44c:	1c02      	adds	r2, r0, #0
     44e:	701a      	strb	r2, [r3, #0]
     450:	1c7b      	adds	r3, r7, #1
     452:	1c0a      	adds	r2, r1, #0
     454:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     456:	1cfb      	adds	r3, r7, #3
     458:	7819      	ldrb	r1, [r3, #0]
     45a:	1cbb      	adds	r3, r7, #2
     45c:	781a      	ldrb	r2, [r3, #0]
     45e:	230f      	movs	r3, #15
     460:	18fb      	adds	r3, r7, r3
     462:	6878      	ldr	r0, [r7, #4]
     464:	2440      	movs	r4, #64	; 0x40
     466:	01c9      	lsls	r1, r1, #7
     468:	1841      	adds	r1, r0, r1
     46a:	188a      	adds	r2, r1, r2
     46c:	1912      	adds	r2, r2, r4
     46e:	7812      	ldrb	r2, [r2, #0]
     470:	701a      	strb	r2, [r3, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     472:	230f      	movs	r3, #15
     474:	18fb      	adds	r3, r7, r3
     476:	220f      	movs	r2, #15
     478:	18ba      	adds	r2, r7, r2
     47a:	7812      	ldrb	r2, [r2, #0]
     47c:	2101      	movs	r1, #1
     47e:	438a      	bics	r2, r1
     480:	701a      	strb	r2, [r3, #0]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	1c7b      	adds	r3, r7, #1
     484:	7819      	ldrb	r1, [r3, #0]
     486:	230f      	movs	r3, #15
     488:	18fb      	adds	r3, r7, r3
     48a:	220f      	movs	r2, #15
     48c:	18ba      	adds	r2, r7, r2
     48e:	7812      	ldrb	r2, [r2, #0]
     490:	430a      	orrs	r2, r1
     492:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     494:	1cfb      	adds	r3, r7, #3
     496:	781a      	ldrb	r2, [r3, #0]
     498:	1cbb      	adds	r3, r7, #2
     49a:	781b      	ldrb	r3, [r3, #0]
     49c:	6879      	ldr	r1, [r7, #4]
     49e:	2040      	movs	r0, #64	; 0x40
     4a0:	01d2      	lsls	r2, r2, #7
     4a2:	188a      	adds	r2, r1, r2
     4a4:	18d3      	adds	r3, r2, r3
     4a6:	181b      	adds	r3, r3, r0
     4a8:	220f      	movs	r2, #15
     4aa:	18ba      	adds	r2, r7, r2
     4ac:	7812      	ldrb	r2, [r2, #0]
     4ae:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     4b0:	46c0      	nop			; (mov r8, r8)
     4b2:	46bd      	mov	sp, r7
     4b4:	b005      	add	sp, #20
     4b6:	bd90      	pop	{r4, r7, pc}

000004b8 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     4b8:	b5b0      	push	{r4, r5, r7, lr}
     4ba:	b082      	sub	sp, #8
     4bc:	af00      	add	r7, sp, #0
     4be:	6078      	str	r0, [r7, #4]
     4c0:	0008      	movs	r0, r1
     4c2:	0011      	movs	r1, r2
     4c4:	1cfb      	adds	r3, r7, #3
     4c6:	1c02      	adds	r2, r0, #0
     4c8:	701a      	strb	r2, [r3, #0]
     4ca:	1cbb      	adds	r3, r7, #2
     4cc:	1c0a      	adds	r2, r1, #0
     4ce:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4d0:	1cfb      	adds	r3, r7, #3
     4d2:	781a      	ldrb	r2, [r3, #0]
     4d4:	1cbb      	adds	r3, r7, #2
     4d6:	781b      	ldrb	r3, [r3, #0]
     4d8:	1cf9      	adds	r1, r7, #3
     4da:	7808      	ldrb	r0, [r1, #0]
     4dc:	1cb9      	adds	r1, r7, #2
     4de:	7809      	ldrb	r1, [r1, #0]
     4e0:	687c      	ldr	r4, [r7, #4]
     4e2:	2540      	movs	r5, #64	; 0x40
     4e4:	01c0      	lsls	r0, r0, #7
     4e6:	1820      	adds	r0, r4, r0
     4e8:	1841      	adds	r1, r0, r1
     4ea:	1949      	adds	r1, r1, r5
     4ec:	7809      	ldrb	r1, [r1, #0]
     4ee:	b2c9      	uxtb	r1, r1
     4f0:	2004      	movs	r0, #4
     4f2:	4301      	orrs	r1, r0
     4f4:	b2cc      	uxtb	r4, r1
     4f6:	6879      	ldr	r1, [r7, #4]
     4f8:	2040      	movs	r0, #64	; 0x40
     4fa:	01d2      	lsls	r2, r2, #7
     4fc:	188a      	adds	r2, r1, r2
     4fe:	18d3      	adds	r3, r2, r3
     500:	181b      	adds	r3, r3, r0
     502:	1c22      	adds	r2, r4, #0
     504:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     506:	46c0      	nop			; (mov r8, r8)
     508:	46bd      	mov	sp, r7
     50a:	b002      	add	sp, #8
     50c:	bdb0      	pop	{r4, r5, r7, pc}

0000050e <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     50e:	b5b0      	push	{r4, r5, r7, lr}
     510:	b082      	sub	sp, #8
     512:	af00      	add	r7, sp, #0
     514:	6078      	str	r0, [r7, #4]
     516:	0008      	movs	r0, r1
     518:	0011      	movs	r1, r2
     51a:	1cfb      	adds	r3, r7, #3
     51c:	1c02      	adds	r2, r0, #0
     51e:	701a      	strb	r2, [r3, #0]
     520:	1cbb      	adds	r3, r7, #2
     522:	1c0a      	adds	r2, r1, #0
     524:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     526:	1cfb      	adds	r3, r7, #3
     528:	781a      	ldrb	r2, [r3, #0]
     52a:	1cbb      	adds	r3, r7, #2
     52c:	781b      	ldrb	r3, [r3, #0]
     52e:	1cf9      	adds	r1, r7, #3
     530:	7808      	ldrb	r0, [r1, #0]
     532:	1cb9      	adds	r1, r7, #2
     534:	7809      	ldrb	r1, [r1, #0]
     536:	687c      	ldr	r4, [r7, #4]
     538:	2540      	movs	r5, #64	; 0x40
     53a:	01c0      	lsls	r0, r0, #7
     53c:	1820      	adds	r0, r4, r0
     53e:	1841      	adds	r1, r0, r1
     540:	1949      	adds	r1, r1, r5
     542:	7809      	ldrb	r1, [r1, #0]
     544:	b2c9      	uxtb	r1, r1
     546:	2004      	movs	r0, #4
     548:	4381      	bics	r1, r0
     54a:	b2cc      	uxtb	r4, r1
     54c:	6879      	ldr	r1, [r7, #4]
     54e:	2040      	movs	r0, #64	; 0x40
     550:	01d2      	lsls	r2, r2, #7
     552:	188a      	adds	r2, r1, r2
     554:	18d3      	adds	r3, r2, r3
     556:	181b      	adds	r3, r3, r0
     558:	1c22      	adds	r2, r4, #0
     55a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     55c:	46c0      	nop			; (mov r8, r8)
     55e:	46bd      	mov	sp, r7
     560:	b002      	add	sp, #8
     562:	bdb0      	pop	{r4, r5, r7, pc}

00000564 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     564:	b580      	push	{r7, lr}
     566:	b084      	sub	sp, #16
     568:	af00      	add	r7, sp, #0
     56a:	60f8      	str	r0, [r7, #12]
     56c:	607a      	str	r2, [r7, #4]
     56e:	230b      	movs	r3, #11
     570:	18fb      	adds	r3, r7, r3
     572:	1c0a      	adds	r2, r1, #0
     574:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     576:	230b      	movs	r3, #11
     578:	18fb      	adds	r3, r7, r3
     57a:	781b      	ldrb	r3, [r3, #0]
     57c:	68fa      	ldr	r2, [r7, #12]
     57e:	01db      	lsls	r3, r3, #7
     580:	18d3      	adds	r3, r2, r3
     582:	3328      	adds	r3, #40	; 0x28
     584:	687a      	ldr	r2, [r7, #4]
     586:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     588:	46c0      	nop			; (mov r8, r8)
     58a:	46bd      	mov	sp, r7
     58c:	b004      	add	sp, #16
     58e:	bd80      	pop	{r7, pc}

00000590 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     590:	b580      	push	{r7, lr}
     592:	b082      	sub	sp, #8
     594:	af00      	add	r7, sp, #0
     596:	6039      	str	r1, [r7, #0]
     598:	0011      	movs	r1, r2
     59a:	1dfb      	adds	r3, r7, #7
     59c:	1c02      	adds	r2, r0, #0
     59e:	701a      	strb	r2, [r3, #0]
     5a0:	1dbb      	adds	r3, r7, #6
     5a2:	1c0a      	adds	r2, r1, #0
     5a4:	701a      	strb	r2, [r3, #0]
	switch (direction) {
     5a6:	1dbb      	adds	r3, r7, #6
     5a8:	781b      	ldrb	r3, [r3, #0]
     5aa:	2b01      	cmp	r3, #1
     5ac:	d025      	beq.n	5fa <_gpio_set_direction+0x6a>
     5ae:	2b02      	cmp	r3, #2
     5b0:	d043      	beq.n	63a <_gpio_set_direction+0xaa>
     5b2:	2b00      	cmp	r3, #0
     5b4:	d163      	bne.n	67e <_gpio_set_direction+0xee>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     5b6:	683a      	ldr	r2, [r7, #0]
     5b8:	1dfb      	adds	r3, r7, #7
     5ba:	7819      	ldrb	r1, [r3, #0]
     5bc:	23c0      	movs	r3, #192	; 0xc0
     5be:	05db      	lsls	r3, r3, #23
     5c0:	0018      	movs	r0, r3
     5c2:	4b34      	ldr	r3, [pc, #208]	; (694 <_gpio_set_direction+0x104>)
     5c4:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     5c6:	683b      	ldr	r3, [r7, #0]
     5c8:	041b      	lsls	r3, r3, #16
     5ca:	0c1b      	lsrs	r3, r3, #16
     5cc:	2280      	movs	r2, #128	; 0x80
     5ce:	05d2      	lsls	r2, r2, #23
     5d0:	431a      	orrs	r2, r3
     5d2:	1dfb      	adds	r3, r7, #7
     5d4:	7819      	ldrb	r1, [r3, #0]
     5d6:	2382      	movs	r3, #130	; 0x82
     5d8:	05db      	lsls	r3, r3, #23
     5da:	0018      	movs	r0, r3
     5dc:	4b2e      	ldr	r3, [pc, #184]	; (698 <_gpio_set_direction+0x108>)
     5de:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     5e0:	683b      	ldr	r3, [r7, #0]
     5e2:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     5e4:	22c0      	movs	r2, #192	; 0xc0
     5e6:	0612      	lsls	r2, r2, #24
     5e8:	431a      	orrs	r2, r3
     5ea:	1dfb      	adds	r3, r7, #7
     5ec:	7819      	ldrb	r1, [r3, #0]
     5ee:	2382      	movs	r3, #130	; 0x82
     5f0:	05db      	lsls	r3, r3, #23
     5f2:	0018      	movs	r0, r3
     5f4:	4b28      	ldr	r3, [pc, #160]	; (698 <_gpio_set_direction+0x108>)
     5f6:	4798      	blx	r3
		break;
     5f8:	e047      	b.n	68a <_gpio_set_direction+0xfa>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, mask);
     5fa:	683a      	ldr	r2, [r7, #0]
     5fc:	1dfb      	adds	r3, r7, #7
     5fe:	7819      	ldrb	r1, [r3, #0]
     600:	23c0      	movs	r3, #192	; 0xc0
     602:	05db      	lsls	r3, r3, #23
     604:	0018      	movs	r0, r3
     606:	4b23      	ldr	r3, [pc, #140]	; (694 <_gpio_set_direction+0x104>)
     608:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     60a:	683b      	ldr	r3, [r7, #0]
     60c:	041b      	lsls	r3, r3, #16
     60e:	0c1b      	lsrs	r3, r3, #16
     610:	4a22      	ldr	r2, [pc, #136]	; (69c <_gpio_set_direction+0x10c>)
     612:	431a      	orrs	r2, r3
     614:	1dfb      	adds	r3, r7, #7
     616:	7819      	ldrb	r1, [r3, #0]
     618:	2382      	movs	r3, #130	; 0x82
     61a:	05db      	lsls	r3, r3, #23
     61c:	0018      	movs	r0, r3
     61e:	4b1e      	ldr	r3, [pc, #120]	; (698 <_gpio_set_direction+0x108>)
     620:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     622:	683b      	ldr	r3, [r7, #0]
     624:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     626:	4a1e      	ldr	r2, [pc, #120]	; (6a0 <_gpio_set_direction+0x110>)
     628:	431a      	orrs	r2, r3
     62a:	1dfb      	adds	r3, r7, #7
     62c:	7819      	ldrb	r1, [r3, #0]
     62e:	2382      	movs	r3, #130	; 0x82
     630:	05db      	lsls	r3, r3, #23
     632:	0018      	movs	r0, r3
     634:	4b18      	ldr	r3, [pc, #96]	; (698 <_gpio_set_direction+0x108>)
     636:	4798      	blx	r3
		break;
     638:	e027      	b.n	68a <_gpio_set_direction+0xfa>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT_IOBUS, port, mask);
     63a:	683a      	ldr	r2, [r7, #0]
     63c:	1dfb      	adds	r3, r7, #7
     63e:	7819      	ldrb	r1, [r3, #0]
     640:	23c0      	movs	r3, #192	; 0xc0
     642:	05db      	lsls	r3, r3, #23
     644:	0018      	movs	r0, r3
     646:	4b17      	ldr	r3, [pc, #92]	; (6a4 <_gpio_set_direction+0x114>)
     648:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     64a:	683b      	ldr	r3, [r7, #0]
     64c:	041b      	lsls	r3, r3, #16
     64e:	0c1b      	lsrs	r3, r3, #16
     650:	2280      	movs	r2, #128	; 0x80
     652:	05d2      	lsls	r2, r2, #23
     654:	431a      	orrs	r2, r3
     656:	1dfb      	adds	r3, r7, #7
     658:	7819      	ldrb	r1, [r3, #0]
     65a:	2382      	movs	r3, #130	; 0x82
     65c:	05db      	lsls	r3, r3, #23
     65e:	0018      	movs	r0, r3
     660:	4b0d      	ldr	r3, [pc, #52]	; (698 <_gpio_set_direction+0x108>)
     662:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     664:	683b      	ldr	r3, [r7, #0]
     666:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     668:	22c0      	movs	r2, #192	; 0xc0
     66a:	0612      	lsls	r2, r2, #24
     66c:	431a      	orrs	r2, r3
     66e:	1dfb      	adds	r3, r7, #7
     670:	7819      	ldrb	r1, [r3, #0]
     672:	2382      	movs	r3, #130	; 0x82
     674:	05db      	lsls	r3, r3, #23
     676:	0018      	movs	r0, r3
     678:	4b07      	ldr	r3, [pc, #28]	; (698 <_gpio_set_direction+0x108>)
     67a:	4798      	blx	r3
		break;
     67c:	e005      	b.n	68a <_gpio_set_direction+0xfa>

	default:
		ASSERT(false);
     67e:	4b0a      	ldr	r3, [pc, #40]	; (6a8 <_gpio_set_direction+0x118>)
     680:	2246      	movs	r2, #70	; 0x46
     682:	0019      	movs	r1, r3
     684:	2000      	movs	r0, #0
     686:	4b09      	ldr	r3, [pc, #36]	; (6ac <_gpio_set_direction+0x11c>)
     688:	4798      	blx	r3
	}
}
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	46bd      	mov	sp, r7
     68e:	b002      	add	sp, #8
     690:	bd80      	pop	{r7, pc}
     692:	46c0      	nop			; (mov r8, r8)
     694:	000002a5 	.word	0x000002a5
     698:	00000565 	.word	0x00000565
     69c:	40020000 	.word	0x40020000
     6a0:	c0020000 	.word	0xc0020000
     6a4:	00000279 	.word	0x00000279
     6a8:	0000841c 	.word	0x0000841c
     6ac:	00001b19 	.word	0x00001b19

000006b0 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     6b0:	b580      	push	{r7, lr}
     6b2:	b082      	sub	sp, #8
     6b4:	af00      	add	r7, sp, #0
     6b6:	6039      	str	r1, [r7, #0]
     6b8:	0011      	movs	r1, r2
     6ba:	1dfb      	adds	r3, r7, #7
     6bc:	1c02      	adds	r2, r0, #0
     6be:	701a      	strb	r2, [r3, #0]
     6c0:	1dbb      	adds	r3, r7, #6
     6c2:	1c0a      	adds	r2, r1, #0
     6c4:	701a      	strb	r2, [r3, #0]
	if (level) {
     6c6:	1dbb      	adds	r3, r7, #6
     6c8:	781b      	ldrb	r3, [r3, #0]
     6ca:	2b00      	cmp	r3, #0
     6cc:	d008      	beq.n	6e0 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
     6ce:	683a      	ldr	r2, [r7, #0]
     6d0:	1dfb      	adds	r3, r7, #7
     6d2:	7819      	ldrb	r1, [r3, #0]
     6d4:	23c0      	movs	r3, #192	; 0xc0
     6d6:	05db      	lsls	r3, r3, #23
     6d8:	0018      	movs	r0, r3
     6da:	4b07      	ldr	r3, [pc, #28]	; (6f8 <_gpio_set_level+0x48>)
     6dc:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
	}
}
     6de:	e007      	b.n	6f0 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
     6e0:	683a      	ldr	r2, [r7, #0]
     6e2:	1dfb      	adds	r3, r7, #7
     6e4:	7819      	ldrb	r1, [r3, #0]
     6e6:	23c0      	movs	r3, #192	; 0xc0
     6e8:	05db      	lsls	r3, r3, #23
     6ea:	0018      	movs	r0, r3
     6ec:	4b03      	ldr	r3, [pc, #12]	; (6fc <_gpio_set_level+0x4c>)
     6ee:	4798      	blx	r3
}
     6f0:	46c0      	nop			; (mov r8, r8)
     6f2:	46bd      	mov	sp, r7
     6f4:	b002      	add	sp, #8
     6f6:	bd80      	pop	{r7, pc}
     6f8:	000002d1 	.word	0x000002d1
     6fc:	000002fd 	.word	0x000002fd

00000700 <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     700:	b590      	push	{r4, r7, lr}
     702:	b083      	sub	sp, #12
     704:	af00      	add	r7, sp, #0
     706:	0004      	movs	r4, r0
     708:	0008      	movs	r0, r1
     70a:	0011      	movs	r1, r2
     70c:	1dfb      	adds	r3, r7, #7
     70e:	1c22      	adds	r2, r4, #0
     710:	701a      	strb	r2, [r3, #0]
     712:	1dbb      	adds	r3, r7, #6
     714:	1c02      	adds	r2, r0, #0
     716:	701a      	strb	r2, [r3, #0]
     718:	1d7b      	adds	r3, r7, #5
     71a:	1c0a      	adds	r2, r1, #0
     71c:	701a      	strb	r2, [r3, #0]
	switch (pull_mode) {
     71e:	1d7b      	adds	r3, r7, #5
     720:	781b      	ldrb	r3, [r3, #0]
     722:	2b01      	cmp	r3, #1
     724:	d00d      	beq.n	742 <_gpio_set_pin_pull_mode+0x42>
     726:	2b02      	cmp	r3, #2
     728:	d02b      	beq.n	782 <_gpio_set_pin_pull_mode+0x82>
     72a:	2b00      	cmp	r3, #0
     72c:	d149      	bne.n	7c2 <_gpio_set_pin_pull_mode+0xc2>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     72e:	1dbb      	adds	r3, r7, #6
     730:	781a      	ldrb	r2, [r3, #0]
     732:	1dfb      	adds	r3, r7, #7
     734:	7819      	ldrb	r1, [r3, #0]
     736:	2382      	movs	r3, #130	; 0x82
     738:	05db      	lsls	r3, r3, #23
     73a:	0018      	movs	r0, r3
     73c:	4b26      	ldr	r3, [pc, #152]	; (7d8 <_gpio_set_pin_pull_mode+0xd8>)
     73e:	4798      	blx	r3
		break;
     740:	e046      	b.n	7d0 <_gpio_set_pin_pull_mode+0xd0>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     742:	1dbb      	adds	r3, r7, #6
     744:	781b      	ldrb	r3, [r3, #0]
     746:	2201      	movs	r2, #1
     748:	409a      	lsls	r2, r3
     74a:	1dfb      	adds	r3, r7, #7
     74c:	7819      	ldrb	r1, [r3, #0]
     74e:	23c0      	movs	r3, #192	; 0xc0
     750:	05db      	lsls	r3, r3, #23
     752:	0018      	movs	r0, r3
     754:	4b21      	ldr	r3, [pc, #132]	; (7dc <_gpio_set_pin_pull_mode+0xdc>)
     756:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     758:	1dbb      	adds	r3, r7, #6
     75a:	781a      	ldrb	r2, [r3, #0]
     75c:	1dfb      	adds	r3, r7, #7
     75e:	7819      	ldrb	r1, [r3, #0]
     760:	2382      	movs	r3, #130	; 0x82
     762:	05db      	lsls	r3, r3, #23
     764:	0018      	movs	r0, r3
     766:	4b1e      	ldr	r3, [pc, #120]	; (7e0 <_gpio_set_pin_pull_mode+0xe0>)
     768:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT_IOBUS, port, 1U << pin);
     76a:	1dbb      	adds	r3, r7, #6
     76c:	781b      	ldrb	r3, [r3, #0]
     76e:	2201      	movs	r2, #1
     770:	409a      	lsls	r2, r3
     772:	1dfb      	adds	r3, r7, #7
     774:	7819      	ldrb	r1, [r3, #0]
     776:	23c0      	movs	r3, #192	; 0xc0
     778:	05db      	lsls	r3, r3, #23
     77a:	0018      	movs	r0, r3
     77c:	4b19      	ldr	r3, [pc, #100]	; (7e4 <_gpio_set_pin_pull_mode+0xe4>)
     77e:	4798      	blx	r3
		break;
     780:	e026      	b.n	7d0 <_gpio_set_pin_pull_mode+0xd0>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT_IOBUS, port, 1U << pin);
     782:	1dbb      	adds	r3, r7, #6
     784:	781b      	ldrb	r3, [r3, #0]
     786:	2201      	movs	r2, #1
     788:	409a      	lsls	r2, r3
     78a:	1dfb      	adds	r3, r7, #7
     78c:	7819      	ldrb	r1, [r3, #0]
     78e:	23c0      	movs	r3, #192	; 0xc0
     790:	05db      	lsls	r3, r3, #23
     792:	0018      	movs	r0, r3
     794:	4b11      	ldr	r3, [pc, #68]	; (7dc <_gpio_set_pin_pull_mode+0xdc>)
     796:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     798:	1dbb      	adds	r3, r7, #6
     79a:	781a      	ldrb	r2, [r3, #0]
     79c:	1dfb      	adds	r3, r7, #7
     79e:	7819      	ldrb	r1, [r3, #0]
     7a0:	2382      	movs	r3, #130	; 0x82
     7a2:	05db      	lsls	r3, r3, #23
     7a4:	0018      	movs	r0, r3
     7a6:	4b0e      	ldr	r3, [pc, #56]	; (7e0 <_gpio_set_pin_pull_mode+0xe0>)
     7a8:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT_IOBUS, port, 1U << pin);
     7aa:	1dbb      	adds	r3, r7, #6
     7ac:	781b      	ldrb	r3, [r3, #0]
     7ae:	2201      	movs	r2, #1
     7b0:	409a      	lsls	r2, r3
     7b2:	1dfb      	adds	r3, r7, #7
     7b4:	7819      	ldrb	r1, [r3, #0]
     7b6:	23c0      	movs	r3, #192	; 0xc0
     7b8:	05db      	lsls	r3, r3, #23
     7ba:	0018      	movs	r0, r3
     7bc:	4b0a      	ldr	r3, [pc, #40]	; (7e8 <_gpio_set_pin_pull_mode+0xe8>)
     7be:	4798      	blx	r3
		break;
     7c0:	e006      	b.n	7d0 <_gpio_set_pin_pull_mode+0xd0>

	default:
		ASSERT(false);
     7c2:	4b0a      	ldr	r3, [pc, #40]	; (7ec <_gpio_set_pin_pull_mode+0xec>)
     7c4:	2289      	movs	r2, #137	; 0x89
     7c6:	0019      	movs	r1, r3
     7c8:	2000      	movs	r0, #0
     7ca:	4b09      	ldr	r3, [pc, #36]	; (7f0 <_gpio_set_pin_pull_mode+0xf0>)
     7cc:	4798      	blx	r3
		break;
     7ce:	46c0      	nop			; (mov r8, r8)
	}
}
     7d0:	46c0      	nop			; (mov r8, r8)
     7d2:	46bd      	mov	sp, r7
     7d4:	b003      	add	sp, #12
     7d6:	bd90      	pop	{r4, r7, pc}
     7d8:	0000050f 	.word	0x0000050f
     7dc:	000002a5 	.word	0x000002a5
     7e0:	000004b9 	.word	0x000004b9
     7e4:	000002d1 	.word	0x000002d1
     7e8:	000002fd 	.word	0x000002fd
     7ec:	0000841c 	.word	0x0000841c
     7f0:	00001b19 	.word	0x00001b19

000007f4 <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     7f4:	b590      	push	{r4, r7, lr}
     7f6:	b085      	sub	sp, #20
     7f8:	af00      	add	r7, sp, #0
     7fa:	6078      	str	r0, [r7, #4]
     7fc:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     7fe:	687b      	ldr	r3, [r7, #4]
     800:	095a      	lsrs	r2, r3, #5
     802:	230f      	movs	r3, #15
     804:	18fb      	adds	r3, r7, r3
     806:	701a      	strb	r2, [r3, #0]
	uint8_t pin  = GPIO_PIN(gpio);
     808:	687b      	ldr	r3, [r7, #4]
     80a:	b2da      	uxtb	r2, r3
     80c:	230e      	movs	r3, #14
     80e:	18fb      	adds	r3, r7, r3
     810:	211f      	movs	r1, #31
     812:	400a      	ands	r2, r1
     814:	701a      	strb	r2, [r3, #0]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     816:	683b      	ldr	r3, [r7, #0]
     818:	3301      	adds	r3, #1
     81a:	d10b      	bne.n	834 <_gpio_set_pin_function+0x40>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     81c:	230e      	movs	r3, #14
     81e:	18fb      	adds	r3, r7, r3
     820:	781a      	ldrb	r2, [r3, #0]
     822:	230f      	movs	r3, #15
     824:	18fb      	adds	r3, r7, r3
     826:	7819      	ldrb	r1, [r3, #0]
     828:	2382      	movs	r3, #130	; 0x82
     82a:	05d8      	lsls	r0, r3, #23
     82c:	2300      	movs	r3, #0
     82e:	4c1b      	ldr	r4, [pc, #108]	; (89c <_gpio_set_pin_function+0xa8>)
     830:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     832:	e02f      	b.n	894 <_gpio_set_pin_function+0xa0>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     834:	230e      	movs	r3, #14
     836:	18fb      	adds	r3, r7, r3
     838:	781a      	ldrb	r2, [r3, #0]
     83a:	230f      	movs	r3, #15
     83c:	18fb      	adds	r3, r7, r3
     83e:	7819      	ldrb	r1, [r3, #0]
     840:	2382      	movs	r3, #130	; 0x82
     842:	05d8      	lsls	r0, r3, #23
     844:	2301      	movs	r3, #1
     846:	4c15      	ldr	r4, [pc, #84]	; (89c <_gpio_set_pin_function+0xa8>)
     848:	47a0      	blx	r4
		if (pin & 1) {
     84a:	230e      	movs	r3, #14
     84c:	18fb      	adds	r3, r7, r3
     84e:	781b      	ldrb	r3, [r3, #0]
     850:	2201      	movs	r2, #1
     852:	4013      	ands	r3, r2
     854:	d00f      	beq.n	876 <_gpio_set_pin_function+0x82>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     856:	230e      	movs	r3, #14
     858:	18fb      	adds	r3, r7, r3
     85a:	781b      	ldrb	r3, [r3, #0]
     85c:	085b      	lsrs	r3, r3, #1
     85e:	b2da      	uxtb	r2, r3
     860:	683b      	ldr	r3, [r7, #0]
     862:	b2dc      	uxtb	r4, r3
     864:	230f      	movs	r3, #15
     866:	18fb      	adds	r3, r7, r3
     868:	7819      	ldrb	r1, [r3, #0]
     86a:	2382      	movs	r3, #130	; 0x82
     86c:	05d8      	lsls	r0, r3, #23
     86e:	0023      	movs	r3, r4
     870:	4c0b      	ldr	r4, [pc, #44]	; (8a0 <_gpio_set_pin_function+0xac>)
     872:	47a0      	blx	r4
}
     874:	e00e      	b.n	894 <_gpio_set_pin_function+0xa0>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     876:	230e      	movs	r3, #14
     878:	18fb      	adds	r3, r7, r3
     87a:	781b      	ldrb	r3, [r3, #0]
     87c:	085b      	lsrs	r3, r3, #1
     87e:	b2da      	uxtb	r2, r3
     880:	683b      	ldr	r3, [r7, #0]
     882:	b2dc      	uxtb	r4, r3
     884:	230f      	movs	r3, #15
     886:	18fb      	adds	r3, r7, r3
     888:	7819      	ldrb	r1, [r3, #0]
     88a:	2382      	movs	r3, #130	; 0x82
     88c:	05d8      	lsls	r0, r3, #23
     88e:	0023      	movs	r3, r4
     890:	4c04      	ldr	r4, [pc, #16]	; (8a4 <_gpio_set_pin_function+0xb0>)
     892:	47a0      	blx	r4
}
     894:	46c0      	nop			; (mov r8, r8)
     896:	46bd      	mov	sp, r7
     898:	b005      	add	sp, #20
     89a:	bd90      	pop	{r4, r7, pc}
     89c:	00000437 	.word	0x00000437
     8a0:	000003b1 	.word	0x000003b1
     8a4:	00000329 	.word	0x00000329

000008a8 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     8a8:	b580      	push	{r7, lr}
     8aa:	b082      	sub	sp, #8
     8ac:	af00      	add	r7, sp, #0
     8ae:	0002      	movs	r2, r0
     8b0:	1dfb      	adds	r3, r7, #7
     8b2:	701a      	strb	r2, [r3, #0]
     8b4:	1dbb      	adds	r3, r7, #6
     8b6:	1c0a      	adds	r2, r1, #0
     8b8:	701a      	strb	r2, [r3, #0]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     8ba:	1dfb      	adds	r3, r7, #7
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	095b      	lsrs	r3, r3, #5
     8c0:	b2d8      	uxtb	r0, r3
     8c2:	1dfb      	adds	r3, r7, #7
     8c4:	781b      	ldrb	r3, [r3, #0]
     8c6:	221f      	movs	r2, #31
     8c8:	4013      	ands	r3, r2
     8ca:	b2d9      	uxtb	r1, r3
     8cc:	1dbb      	adds	r3, r7, #6
     8ce:	781b      	ldrb	r3, [r3, #0]
     8d0:	001a      	movs	r2, r3
     8d2:	4b03      	ldr	r3, [pc, #12]	; (8e0 <gpio_set_pin_pull_mode+0x38>)
     8d4:	4798      	blx	r3
}
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	46bd      	mov	sp, r7
     8da:	b002      	add	sp, #8
     8dc:	bd80      	pop	{r7, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	00000701 	.word	0x00000701

000008e4 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     8e4:	b580      	push	{r7, lr}
     8e6:	b082      	sub	sp, #8
     8e8:	af00      	add	r7, sp, #0
     8ea:	6078      	str	r0, [r7, #4]
     8ec:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     8ee:	683a      	ldr	r2, [r7, #0]
     8f0:	687b      	ldr	r3, [r7, #4]
     8f2:	0011      	movs	r1, r2
     8f4:	0018      	movs	r0, r3
     8f6:	4b03      	ldr	r3, [pc, #12]	; (904 <gpio_set_pin_function+0x20>)
     8f8:	4798      	blx	r3
}
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	46bd      	mov	sp, r7
     8fe:	b002      	add	sp, #8
     900:	bd80      	pop	{r7, pc}
     902:	46c0      	nop			; (mov r8, r8)
     904:	000007f5 	.word	0x000007f5

00000908 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     908:	b580      	push	{r7, lr}
     90a:	b082      	sub	sp, #8
     90c:	af00      	add	r7, sp, #0
     90e:	0002      	movs	r2, r0
     910:	1dfb      	adds	r3, r7, #7
     912:	701a      	strb	r2, [r3, #0]
     914:	1dbb      	adds	r3, r7, #6
     916:	1c0a      	adds	r2, r1, #0
     918:	701a      	strb	r2, [r3, #0]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     91a:	1dfb      	adds	r3, r7, #7
     91c:	781b      	ldrb	r3, [r3, #0]
     91e:	095b      	lsrs	r3, r3, #5
     920:	b2d8      	uxtb	r0, r3
     922:	1dfb      	adds	r3, r7, #7
     924:	781b      	ldrb	r3, [r3, #0]
     926:	221f      	movs	r2, #31
     928:	4013      	ands	r3, r2
     92a:	2201      	movs	r2, #1
     92c:	409a      	lsls	r2, r3
     92e:	0011      	movs	r1, r2
     930:	1dbb      	adds	r3, r7, #6
     932:	781b      	ldrb	r3, [r3, #0]
     934:	001a      	movs	r2, r3
     936:	4b03      	ldr	r3, [pc, #12]	; (944 <gpio_set_pin_direction+0x3c>)
     938:	4798      	blx	r3
}
     93a:	46c0      	nop			; (mov r8, r8)
     93c:	46bd      	mov	sp, r7
     93e:	b002      	add	sp, #8
     940:	bd80      	pop	{r7, pc}
     942:	46c0      	nop			; (mov r8, r8)
     944:	00000591 	.word	0x00000591

00000948 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     948:	b580      	push	{r7, lr}
     94a:	b082      	sub	sp, #8
     94c:	af00      	add	r7, sp, #0
     94e:	0002      	movs	r2, r0
     950:	1dfb      	adds	r3, r7, #7
     952:	701a      	strb	r2, [r3, #0]
     954:	1dbb      	adds	r3, r7, #6
     956:	1c0a      	adds	r2, r1, #0
     958:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     95a:	1dfb      	adds	r3, r7, #7
     95c:	781b      	ldrb	r3, [r3, #0]
     95e:	095b      	lsrs	r3, r3, #5
     960:	b2d8      	uxtb	r0, r3
     962:	1dfb      	adds	r3, r7, #7
     964:	781b      	ldrb	r3, [r3, #0]
     966:	221f      	movs	r2, #31
     968:	4013      	ands	r3, r2
     96a:	2201      	movs	r2, #1
     96c:	409a      	lsls	r2, r3
     96e:	0011      	movs	r1, r2
     970:	1dbb      	adds	r3, r7, #6
     972:	781b      	ldrb	r3, [r3, #0]
     974:	001a      	movs	r2, r3
     976:	4b03      	ldr	r3, [pc, #12]	; (984 <gpio_set_pin_level+0x3c>)
     978:	4798      	blx	r3
}
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	46bd      	mov	sp, r7
     97e:	b002      	add	sp, #8
     980:	bd80      	pop	{r7, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	000006b1 	.word	0x000006b1

00000988 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     988:	b580      	push	{r7, lr}
     98a:	af00      	add	r7, sp, #0
	_init_chip();
     98c:	4b02      	ldr	r3, [pc, #8]	; (998 <init_mcu+0x10>)
     98e:	4798      	blx	r3
}
     990:	46c0      	nop			; (mov r8, r8)
     992:	46bd      	mov	sp, r7
     994:	bd80      	pop	{r7, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	00002389 	.word	0x00002389

0000099c <WindSensor_PORT_init>:
struct usart_sync_descriptor UART;

struct pwm_descriptor StepperDriver;

void WindSensor_PORT_init(void)
{
     99c:	b580      	push	{r7, lr}
     99e:	af00      	add	r7, sp, #0

	// Disable digital pin circuitry
	gpio_set_pin_direction(PB09, GPIO_DIRECTION_OFF);
     9a0:	2100      	movs	r1, #0
     9a2:	2029      	movs	r0, #41	; 0x29
     9a4:	4b04      	ldr	r3, [pc, #16]	; (9b8 <WindSensor_PORT_init+0x1c>)
     9a6:	4798      	blx	r3

	gpio_set_pin_function(PB09, PINMUX_PB09B_ADC0_AIN3);
     9a8:	4b04      	ldr	r3, [pc, #16]	; (9bc <WindSensor_PORT_init+0x20>)
     9aa:	0019      	movs	r1, r3
     9ac:	2029      	movs	r0, #41	; 0x29
     9ae:	4b04      	ldr	r3, [pc, #16]	; (9c0 <WindSensor_PORT_init+0x24>)
     9b0:	4798      	blx	r3
}
     9b2:	46c0      	nop			; (mov r8, r8)
     9b4:	46bd      	mov	sp, r7
     9b6:	bd80      	pop	{r7, pc}
     9b8:	00000909 	.word	0x00000909
     9bc:	00290001 	.word	0x00290001
     9c0:	000008e5 	.word	0x000008e5

000009c4 <WindSensor_CLOCK_init>:

void WindSensor_CLOCK_init(void)
{
     9c4:	b580      	push	{r7, lr}
     9c6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_ADC0_bit(MCLK);
     9c8:	4b06      	ldr	r3, [pc, #24]	; (9e4 <WindSensor_CLOCK_init+0x20>)
     9ca:	0018      	movs	r0, r3
     9cc:	4b06      	ldr	r3, [pc, #24]	; (9e8 <WindSensor_CLOCK_init+0x24>)
     9ce:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     9d0:	4b06      	ldr	r3, [pc, #24]	; (9ec <WindSensor_CLOCK_init+0x28>)
     9d2:	2240      	movs	r2, #64	; 0x40
     9d4:	2121      	movs	r1, #33	; 0x21
     9d6:	0018      	movs	r0, r3
     9d8:	4b05      	ldr	r3, [pc, #20]	; (9f0 <WindSensor_CLOCK_init+0x2c>)
     9da:	4798      	blx	r3
}
     9dc:	46c0      	nop			; (mov r8, r8)
     9de:	46bd      	mov	sp, r7
     9e0:	bd80      	pop	{r7, pc}
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	40000800 	.word	0x40000800
     9e8:	0000023d 	.word	0x0000023d
     9ec:	40001c00 	.word	0x40001c00
     9f0:	000001bb 	.word	0x000001bb

000009f4 <WindSensor_init>:

void WindSensor_init(void)
{
     9f4:	b580      	push	{r7, lr}
     9f6:	af00      	add	r7, sp, #0
	WindSensor_CLOCK_init();
     9f8:	4b07      	ldr	r3, [pc, #28]	; (a18 <WindSensor_init+0x24>)
     9fa:	4798      	blx	r3
	WindSensor_PORT_init();
     9fc:	4b07      	ldr	r3, [pc, #28]	; (a1c <WindSensor_init+0x28>)
     9fe:	4798      	blx	r3
	adc_sync_init(&WindSensor, ADC0, _adc_get_adc_sync());
     a00:	4b07      	ldr	r3, [pc, #28]	; (a20 <WindSensor_init+0x2c>)
     a02:	4798      	blx	r3
     a04:	0002      	movs	r2, r0
     a06:	4907      	ldr	r1, [pc, #28]	; (a24 <WindSensor_init+0x30>)
     a08:	4b07      	ldr	r3, [pc, #28]	; (a28 <WindSensor_init+0x34>)
     a0a:	0018      	movs	r0, r3
     a0c:	4b07      	ldr	r3, [pc, #28]	; (a2c <WindSensor_init+0x38>)
     a0e:	4798      	blx	r3
}
     a10:	46c0      	nop			; (mov r8, r8)
     a12:	46bd      	mov	sp, r7
     a14:	bd80      	pop	{r7, pc}
     a16:	46c0      	nop			; (mov r8, r8)
     a18:	000009c5 	.word	0x000009c5
     a1c:	0000099d 	.word	0x0000099d
     a20:	00002359 	.word	0x00002359
     a24:	42004400 	.word	0x42004400
     a28:	200027b4 	.word	0x200027b4
     a2c:	00000ddd 	.word	0x00000ddd

00000a30 <TempSensor_PORT_init>:

void TempSensor_PORT_init(void)
{
     a30:	b580      	push	{r7, lr}
     a32:	af00      	add	r7, sp, #0

	// Disable digital pin circuitry
	gpio_set_pin_direction(PA08, GPIO_DIRECTION_OFF);
     a34:	2100      	movs	r1, #0
     a36:	2008      	movs	r0, #8
     a38:	4b04      	ldr	r3, [pc, #16]	; (a4c <TempSensor_PORT_init+0x1c>)
     a3a:	4798      	blx	r3

	gpio_set_pin_function(PA08, PINMUX_PA08B_ADC1_AIN10);
     a3c:	4b04      	ldr	r3, [pc, #16]	; (a50 <TempSensor_PORT_init+0x20>)
     a3e:	0019      	movs	r1, r3
     a40:	2008      	movs	r0, #8
     a42:	4b04      	ldr	r3, [pc, #16]	; (a54 <TempSensor_PORT_init+0x24>)
     a44:	4798      	blx	r3
}
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	46bd      	mov	sp, r7
     a4a:	bd80      	pop	{r7, pc}
     a4c:	00000909 	.word	0x00000909
     a50:	00080001 	.word	0x00080001
     a54:	000008e5 	.word	0x000008e5

00000a58 <TempSensor_CLOCK_init>:

void TempSensor_CLOCK_init(void)
{
     a58:	b580      	push	{r7, lr}
     a5a:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_ADC1_bit(MCLK);
     a5c:	4b06      	ldr	r3, [pc, #24]	; (a78 <TempSensor_CLOCK_init+0x20>)
     a5e:	0018      	movs	r0, r3
     a60:	4b06      	ldr	r3, [pc, #24]	; (a7c <TempSensor_CLOCK_init+0x24>)
     a62:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a64:	4b06      	ldr	r3, [pc, #24]	; (a80 <TempSensor_CLOCK_init+0x28>)
     a66:	2240      	movs	r2, #64	; 0x40
     a68:	2122      	movs	r1, #34	; 0x22
     a6a:	0018      	movs	r0, r3
     a6c:	4b05      	ldr	r3, [pc, #20]	; (a84 <TempSensor_CLOCK_init+0x2c>)
     a6e:	4798      	blx	r3
}
     a70:	46c0      	nop			; (mov r8, r8)
     a72:	46bd      	mov	sp, r7
     a74:	bd80      	pop	{r7, pc}
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	40000800 	.word	0x40000800
     a7c:	0000025b 	.word	0x0000025b
     a80:	40001c00 	.word	0x40001c00
     a84:	000001bb 	.word	0x000001bb

00000a88 <TempSensor_init>:

void TempSensor_init(void)
{
     a88:	b580      	push	{r7, lr}
     a8a:	af00      	add	r7, sp, #0
	TempSensor_CLOCK_init();
     a8c:	4b07      	ldr	r3, [pc, #28]	; (aac <TempSensor_init+0x24>)
     a8e:	4798      	blx	r3
	TempSensor_PORT_init();
     a90:	4b07      	ldr	r3, [pc, #28]	; (ab0 <TempSensor_init+0x28>)
     a92:	4798      	blx	r3
	adc_sync_init(&TempSensor, ADC1, _adc_get_adc_sync());
     a94:	4b07      	ldr	r3, [pc, #28]	; (ab4 <TempSensor_init+0x2c>)
     a96:	4798      	blx	r3
     a98:	0002      	movs	r2, r0
     a9a:	4907      	ldr	r1, [pc, #28]	; (ab8 <TempSensor_init+0x30>)
     a9c:	4b07      	ldr	r3, [pc, #28]	; (abc <TempSensor_init+0x34>)
     a9e:	0018      	movs	r0, r3
     aa0:	4b07      	ldr	r3, [pc, #28]	; (ac0 <TempSensor_init+0x38>)
     aa2:	4798      	blx	r3
}
     aa4:	46c0      	nop			; (mov r8, r8)
     aa6:	46bd      	mov	sp, r7
     aa8:	bd80      	pop	{r7, pc}
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	00000a59 	.word	0x00000a59
     ab0:	00000a31 	.word	0x00000a31
     ab4:	00002359 	.word	0x00002359
     ab8:	42004800 	.word	0x42004800
     abc:	200027b8 	.word	0x200027b8
     ac0:	00000ddd 	.word	0x00000ddd

00000ac4 <Scheduler_CLOCK_init>:

void Scheduler_CLOCK_init(void)
{
     ac4:	b580      	push	{r7, lr}
     ac6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
     ac8:	4b03      	ldr	r3, [pc, #12]	; (ad8 <Scheduler_CLOCK_init+0x14>)
     aca:	0018      	movs	r0, r3
     acc:	4b03      	ldr	r3, [pc, #12]	; (adc <Scheduler_CLOCK_init+0x18>)
     ace:	4798      	blx	r3
}
     ad0:	46c0      	nop			; (mov r8, r8)
     ad2:	46bd      	mov	sp, r7
     ad4:	bd80      	pop	{r7, pc}
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	40000800 	.word	0x40000800
     adc:	000001e5 	.word	0x000001e5

00000ae0 <Scheduler_init>:

void Scheduler_init(void)
{
     ae0:	b580      	push	{r7, lr}
     ae2:	af00      	add	r7, sp, #0
	Scheduler_CLOCK_init();
     ae4:	4b05      	ldr	r3, [pc, #20]	; (afc <Scheduler_init+0x1c>)
     ae6:	4798      	blx	r3
	calendar_os_init(&Scheduler, RTC);
     ae8:	4a05      	ldr	r2, [pc, #20]	; (b00 <Scheduler_init+0x20>)
     aea:	4b06      	ldr	r3, [pc, #24]	; (b04 <Scheduler_init+0x24>)
     aec:	0011      	movs	r1, r2
     aee:	0018      	movs	r0, r3
     af0:	4b05      	ldr	r3, [pc, #20]	; (b08 <Scheduler_init+0x28>)
     af2:	4798      	blx	r3
}
     af4:	46c0      	nop			; (mov r8, r8)
     af6:	46bd      	mov	sp, r7
     af8:	bd80      	pop	{r7, pc}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	00000ac5 	.word	0x00000ac5
     b00:	40002400 	.word	0x40002400
     b04:	200027bc 	.word	0x200027bc
     b08:	000015b5 	.word	0x000015b5

00000b0c <UART_PORT_init>:

void UART_PORT_init(void)
{
     b0c:	b580      	push	{r7, lr}
     b0e:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PA22, PINMUX_PA22C_SERCOM3_PAD0);
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <UART_PORT_init+0x20>)
     b12:	0019      	movs	r1, r3
     b14:	2016      	movs	r0, #22
     b16:	4b06      	ldr	r3, [pc, #24]	; (b30 <UART_PORT_init+0x24>)
     b18:	4798      	blx	r3

	gpio_set_pin_function(PA23, PINMUX_PA23C_SERCOM3_PAD1);
     b1a:	4b06      	ldr	r3, [pc, #24]	; (b34 <UART_PORT_init+0x28>)
     b1c:	0019      	movs	r1, r3
     b1e:	2017      	movs	r0, #23
     b20:	4b03      	ldr	r3, [pc, #12]	; (b30 <UART_PORT_init+0x24>)
     b22:	4798      	blx	r3
}
     b24:	46c0      	nop			; (mov r8, r8)
     b26:	46bd      	mov	sp, r7
     b28:	bd80      	pop	{r7, pc}
     b2a:	46c0      	nop			; (mov r8, r8)
     b2c:	00160002 	.word	0x00160002
     b30:	000008e5 	.word	0x000008e5
     b34:	00170002 	.word	0x00170002

00000b38 <UART_CLOCK_init>:

void UART_CLOCK_init(void)
{
     b38:	b580      	push	{r7, lr}
     b3a:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b3c:	4b09      	ldr	r3, [pc, #36]	; (b64 <UART_CLOCK_init+0x2c>)
     b3e:	2240      	movs	r2, #64	; 0x40
     b40:	2116      	movs	r1, #22
     b42:	0018      	movs	r0, r3
     b44:	4b08      	ldr	r3, [pc, #32]	; (b68 <UART_CLOCK_init+0x30>)
     b46:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b48:	4b06      	ldr	r3, [pc, #24]	; (b64 <UART_CLOCK_init+0x2c>)
     b4a:	2242      	movs	r2, #66	; 0x42
     b4c:	2112      	movs	r1, #18
     b4e:	0018      	movs	r0, r3
     b50:	4b05      	ldr	r3, [pc, #20]	; (b68 <UART_CLOCK_init+0x30>)
     b52:	4798      	blx	r3
	hri_mclk_set_APBCMASK_SERCOM3_bit(MCLK);
     b54:	4b05      	ldr	r3, [pc, #20]	; (b6c <UART_CLOCK_init+0x34>)
     b56:	0018      	movs	r0, r3
     b58:	4b05      	ldr	r3, [pc, #20]	; (b70 <UART_CLOCK_init+0x38>)
     b5a:	4798      	blx	r3
}
     b5c:	46c0      	nop			; (mov r8, r8)
     b5e:	46bd      	mov	sp, r7
     b60:	bd80      	pop	{r7, pc}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	40001c00 	.word	0x40001c00
     b68:	000001bb 	.word	0x000001bb
     b6c:	40000800 	.word	0x40000800
     b70:	00000203 	.word	0x00000203

00000b74 <UART_init>:

void UART_init(void)
{
     b74:	b580      	push	{r7, lr}
     b76:	af00      	add	r7, sp, #0
	UART_CLOCK_init();
     b78:	4b06      	ldr	r3, [pc, #24]	; (b94 <UART_init+0x20>)
     b7a:	4798      	blx	r3
	usart_sync_init(&UART, SERCOM3, (void *)NULL);
     b7c:	4906      	ldr	r1, [pc, #24]	; (b98 <UART_init+0x24>)
     b7e:	4b07      	ldr	r3, [pc, #28]	; (b9c <UART_init+0x28>)
     b80:	2200      	movs	r2, #0
     b82:	0018      	movs	r0, r3
     b84:	4b06      	ldr	r3, [pc, #24]	; (ba0 <UART_init+0x2c>)
     b86:	4798      	blx	r3
	UART_PORT_init();
     b88:	4b06      	ldr	r3, [pc, #24]	; (ba4 <UART_init+0x30>)
     b8a:	4798      	blx	r3
}
     b8c:	46c0      	nop			; (mov r8, r8)
     b8e:	46bd      	mov	sp, r7
     b90:	bd80      	pop	{r7, pc}
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	00000b39 	.word	0x00000b39
     b98:	42001000 	.word	0x42001000
     b9c:	200027a8 	.word	0x200027a8
     ba0:	00001871 	.word	0x00001871
     ba4:	00000b0d 	.word	0x00000b0d

00000ba8 <StepperDriver_PORT_init>:

void StepperDriver_PORT_init(void)
{
     ba8:	b580      	push	{r7, lr}
     baa:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PB12, PINMUX_PB12E_TC0_WO0);
     bac:	4b06      	ldr	r3, [pc, #24]	; (bc8 <StepperDriver_PORT_init+0x20>)
     bae:	0019      	movs	r1, r3
     bb0:	202c      	movs	r0, #44	; 0x2c
     bb2:	4b06      	ldr	r3, [pc, #24]	; (bcc <StepperDriver_PORT_init+0x24>)
     bb4:	4798      	blx	r3

	gpio_set_pin_function(PB13, PINMUX_PB13E_TC0_WO1);
     bb6:	4b06      	ldr	r3, [pc, #24]	; (bd0 <StepperDriver_PORT_init+0x28>)
     bb8:	0019      	movs	r1, r3
     bba:	202d      	movs	r0, #45	; 0x2d
     bbc:	4b03      	ldr	r3, [pc, #12]	; (bcc <StepperDriver_PORT_init+0x24>)
     bbe:	4798      	blx	r3
}
     bc0:	46c0      	nop			; (mov r8, r8)
     bc2:	46bd      	mov	sp, r7
     bc4:	bd80      	pop	{r7, pc}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	002c0004 	.word	0x002c0004
     bcc:	000008e5 	.word	0x000008e5
     bd0:	002d0004 	.word	0x002d0004

00000bd4 <StepperDriver_CLOCK_init>:

void StepperDriver_CLOCK_init(void)
{
     bd4:	b580      	push	{r7, lr}
     bd6:	af00      	add	r7, sp, #0
	hri_mclk_set_APBCMASK_TC0_bit(MCLK);
     bd8:	4b06      	ldr	r3, [pc, #24]	; (bf4 <StepperDriver_CLOCK_init+0x20>)
     bda:	0018      	movs	r0, r3
     bdc:	4b06      	ldr	r3, [pc, #24]	; (bf8 <StepperDriver_CLOCK_init+0x24>)
     bde:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     be0:	4b06      	ldr	r3, [pc, #24]	; (bfc <StepperDriver_CLOCK_init+0x28>)
     be2:	2240      	movs	r2, #64	; 0x40
     be4:	211e      	movs	r1, #30
     be6:	0018      	movs	r0, r3
     be8:	4b05      	ldr	r3, [pc, #20]	; (c00 <StepperDriver_CLOCK_init+0x2c>)
     bea:	4798      	blx	r3
}
     bec:	46c0      	nop			; (mov r8, r8)
     bee:	46bd      	mov	sp, r7
     bf0:	bd80      	pop	{r7, pc}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	40000800 	.word	0x40000800
     bf8:	0000021f 	.word	0x0000021f
     bfc:	40001c00 	.word	0x40001c00
     c00:	000001bb 	.word	0x000001bb

00000c04 <StepperDriver_init>:

void StepperDriver_init(void)
{
     c04:	b580      	push	{r7, lr}
     c06:	af00      	add	r7, sp, #0
	StepperDriver_CLOCK_init();
     c08:	4b07      	ldr	r3, [pc, #28]	; (c28 <StepperDriver_init+0x24>)
     c0a:	4798      	blx	r3
	StepperDriver_PORT_init();
     c0c:	4b07      	ldr	r3, [pc, #28]	; (c2c <StepperDriver_init+0x28>)
     c0e:	4798      	blx	r3
	pwm_init(&StepperDriver, TC0, _tc_get_pwm());
     c10:	4b07      	ldr	r3, [pc, #28]	; (c30 <StepperDriver_init+0x2c>)
     c12:	4798      	blx	r3
     c14:	0002      	movs	r2, r0
     c16:	4907      	ldr	r1, [pc, #28]	; (c34 <StepperDriver_init+0x30>)
     c18:	4b07      	ldr	r3, [pc, #28]	; (c38 <StepperDriver_init+0x34>)
     c1a:	0018      	movs	r0, r3
     c1c:	4b07      	ldr	r3, [pc, #28]	; (c3c <StepperDriver_init+0x38>)
     c1e:	4798      	blx	r3
}
     c20:	46c0      	nop			; (mov r8, r8)
     c22:	46bd      	mov	sp, r7
     c24:	bd80      	pop	{r7, pc}
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	00000bd5 	.word	0x00000bd5
     c2c:	00000ba9 	.word	0x00000ba9
     c30:	00003861 	.word	0x00003861
     c34:	42003000 	.word	0x42003000
     c38:	200027d4 	.word	0x200027d4
     c3c:	000016d5 	.word	0x000016d5

00000c40 <system_init>:

void system_init(void)
{
     c40:	b580      	push	{r7, lr}
     c42:	af00      	add	r7, sp, #0
	init_mcu();
     c44:	4b5b      	ldr	r3, [pc, #364]	; (db4 <system_init+0x174>)
     c46:	4798      	blx	r3

	// GPIO on PA09

	// Set pin direction to input
	gpio_set_pin_direction(Manual_1, GPIO_DIRECTION_IN);
     c48:	2101      	movs	r1, #1
     c4a:	2009      	movs	r0, #9
     c4c:	4b5a      	ldr	r3, [pc, #360]	; (db8 <system_init+0x178>)
     c4e:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_1,
     c50:	2101      	movs	r1, #1
     c52:	2009      	movs	r0, #9
     c54:	4b59      	ldr	r3, [pc, #356]	; (dbc <system_init+0x17c>)
     c56:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_1, GPIO_PIN_FUNCTION_OFF);
     c58:	2301      	movs	r3, #1
     c5a:	425b      	negs	r3, r3
     c5c:	0019      	movs	r1, r3
     c5e:	2009      	movs	r0, #9
     c60:	4b57      	ldr	r3, [pc, #348]	; (dc0 <system_init+0x180>)
     c62:	4798      	blx	r3

	// GPIO on PA10

	// Set pin direction to input
	gpio_set_pin_direction(Manual_2, GPIO_DIRECTION_IN);
     c64:	2101      	movs	r1, #1
     c66:	200a      	movs	r0, #10
     c68:	4b53      	ldr	r3, [pc, #332]	; (db8 <system_init+0x178>)
     c6a:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_2,
     c6c:	2101      	movs	r1, #1
     c6e:	200a      	movs	r0, #10
     c70:	4b52      	ldr	r3, [pc, #328]	; (dbc <system_init+0x17c>)
     c72:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_2, GPIO_PIN_FUNCTION_OFF);
     c74:	2301      	movs	r3, #1
     c76:	425b      	negs	r3, r3
     c78:	0019      	movs	r1, r3
     c7a:	200a      	movs	r0, #10
     c7c:	4b50      	ldr	r3, [pc, #320]	; (dc0 <system_init+0x180>)
     c7e:	4798      	blx	r3

	// GPIO on PA11

	// Set pin direction to input
	gpio_set_pin_direction(Manual_3_old, GPIO_DIRECTION_IN);
     c80:	2101      	movs	r1, #1
     c82:	200b      	movs	r0, #11
     c84:	4b4c      	ldr	r3, [pc, #304]	; (db8 <system_init+0x178>)
     c86:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_3_old,
     c88:	2101      	movs	r1, #1
     c8a:	200b      	movs	r0, #11
     c8c:	4b4b      	ldr	r3, [pc, #300]	; (dbc <system_init+0x17c>)
     c8e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_3_old, GPIO_PIN_FUNCTION_OFF);
     c90:	2301      	movs	r3, #1
     c92:	425b      	negs	r3, r3
     c94:	0019      	movs	r1, r3
     c96:	200b      	movs	r0, #11
     c98:	4b49      	ldr	r3, [pc, #292]	; (dc0 <system_init+0x180>)
     c9a:	4798      	blx	r3

	// GPIO on PA20

	// Set pin direction to input
	gpio_set_pin_direction(Right, GPIO_DIRECTION_IN);
     c9c:	2101      	movs	r1, #1
     c9e:	2014      	movs	r0, #20
     ca0:	4b45      	ldr	r3, [pc, #276]	; (db8 <system_init+0x178>)
     ca2:	4798      	blx	r3

	gpio_set_pin_pull_mode(Right,
     ca4:	2101      	movs	r1, #1
     ca6:	2014      	movs	r0, #20
     ca8:	4b44      	ldr	r3, [pc, #272]	; (dbc <system_init+0x17c>)
     caa:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Right, GPIO_PIN_FUNCTION_OFF);
     cac:	2301      	movs	r3, #1
     cae:	425b      	negs	r3, r3
     cb0:	0019      	movs	r1, r3
     cb2:	2014      	movs	r0, #20
     cb4:	4b42      	ldr	r3, [pc, #264]	; (dc0 <system_init+0x180>)
     cb6:	4798      	blx	r3

	// GPIO on PA21

	// Set pin direction to input
	gpio_set_pin_direction(Left, GPIO_DIRECTION_IN);
     cb8:	2101      	movs	r1, #1
     cba:	2015      	movs	r0, #21
     cbc:	4b3e      	ldr	r3, [pc, #248]	; (db8 <system_init+0x178>)
     cbe:	4798      	blx	r3

	gpio_set_pin_pull_mode(Left,
     cc0:	2101      	movs	r1, #1
     cc2:	2015      	movs	r0, #21
     cc4:	4b3d      	ldr	r3, [pc, #244]	; (dbc <system_init+0x17c>)
     cc6:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Left, GPIO_PIN_FUNCTION_OFF);
     cc8:	2301      	movs	r3, #1
     cca:	425b      	negs	r3, r3
     ccc:	0019      	movs	r1, r3
     cce:	2015      	movs	r0, #21
     cd0:	4b3b      	ldr	r3, [pc, #236]	; (dc0 <system_init+0x180>)
     cd2:	4798      	blx	r3

	// GPIO on PB03

	// Set pin direction to input
	gpio_set_pin_direction(Manual_6, GPIO_DIRECTION_IN);
     cd4:	2101      	movs	r1, #1
     cd6:	2023      	movs	r0, #35	; 0x23
     cd8:	4b37      	ldr	r3, [pc, #220]	; (db8 <system_init+0x178>)
     cda:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_6,
     cdc:	2101      	movs	r1, #1
     cde:	2023      	movs	r0, #35	; 0x23
     ce0:	4b36      	ldr	r3, [pc, #216]	; (dbc <system_init+0x17c>)
     ce2:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_6, GPIO_PIN_FUNCTION_OFF);
     ce4:	2301      	movs	r3, #1
     ce6:	425b      	negs	r3, r3
     ce8:	0019      	movs	r1, r3
     cea:	2023      	movs	r0, #35	; 0x23
     cec:	4b34      	ldr	r3, [pc, #208]	; (dc0 <system_init+0x180>)
     cee:	4798      	blx	r3

	// GPIO on PB08

	// Set pin direction to input
	gpio_set_pin_direction(Start_Cleaning, GPIO_DIRECTION_IN);
     cf0:	2101      	movs	r1, #1
     cf2:	2028      	movs	r0, #40	; 0x28
     cf4:	4b30      	ldr	r3, [pc, #192]	; (db8 <system_init+0x178>)
     cf6:	4798      	blx	r3

	gpio_set_pin_pull_mode(Start_Cleaning,
     cf8:	2101      	movs	r1, #1
     cfa:	2028      	movs	r0, #40	; 0x28
     cfc:	4b2f      	ldr	r3, [pc, #188]	; (dbc <system_init+0x17c>)
     cfe:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Start_Cleaning, GPIO_PIN_FUNCTION_OFF);
     d00:	2301      	movs	r3, #1
     d02:	425b      	negs	r3, r3
     d04:	0019      	movs	r1, r3
     d06:	2028      	movs	r0, #40	; 0x28
     d08:	4b2d      	ldr	r3, [pc, #180]	; (dc0 <system_init+0x180>)
     d0a:	4798      	blx	r3

	// GPIO on PB14

	// Set pin direction to input
	gpio_set_pin_direction(Manual_3, GPIO_DIRECTION_IN);
     d0c:	2101      	movs	r1, #1
     d0e:	202e      	movs	r0, #46	; 0x2e
     d10:	4b29      	ldr	r3, [pc, #164]	; (db8 <system_init+0x178>)
     d12:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_3,
     d14:	2101      	movs	r1, #1
     d16:	202e      	movs	r0, #46	; 0x2e
     d18:	4b28      	ldr	r3, [pc, #160]	; (dbc <system_init+0x17c>)
     d1a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_3, GPIO_PIN_FUNCTION_OFF);
     d1c:	2301      	movs	r3, #1
     d1e:	425b      	negs	r3, r3
     d20:	0019      	movs	r1, r3
     d22:	202e      	movs	r0, #46	; 0x2e
     d24:	4b26      	ldr	r3, [pc, #152]	; (dc0 <system_init+0x180>)
     d26:	4798      	blx	r3

	// GPIO on PB16

	// Set pin direction to input
	gpio_set_pin_direction(Manual_7, GPIO_DIRECTION_IN);
     d28:	2101      	movs	r1, #1
     d2a:	2030      	movs	r0, #48	; 0x30
     d2c:	4b22      	ldr	r3, [pc, #136]	; (db8 <system_init+0x178>)
     d2e:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_7,
     d30:	2101      	movs	r1, #1
     d32:	2030      	movs	r0, #48	; 0x30
     d34:	4b21      	ldr	r3, [pc, #132]	; (dbc <system_init+0x17c>)
     d36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_7, GPIO_PIN_FUNCTION_OFF);
     d38:	2301      	movs	r3, #1
     d3a:	425b      	negs	r3, r3
     d3c:	0019      	movs	r1, r3
     d3e:	2030      	movs	r0, #48	; 0x30
     d40:	4b1f      	ldr	r3, [pc, #124]	; (dc0 <system_init+0x180>)
     d42:	4798      	blx	r3

	// GPIO on PB17

	gpio_set_pin_level(Direction,
     d44:	2100      	movs	r1, #0
     d46:	2031      	movs	r0, #49	; 0x31
     d48:	4b1e      	ldr	r3, [pc, #120]	; (dc4 <system_init+0x184>)
     d4a:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(Direction, GPIO_DIRECTION_OUT);
     d4c:	2102      	movs	r1, #2
     d4e:	2031      	movs	r0, #49	; 0x31
     d50:	4b19      	ldr	r3, [pc, #100]	; (db8 <system_init+0x178>)
     d52:	4798      	blx	r3

	gpio_set_pin_function(Direction, GPIO_PIN_FUNCTION_OFF);
     d54:	2301      	movs	r3, #1
     d56:	425b      	negs	r3, r3
     d58:	0019      	movs	r1, r3
     d5a:	2031      	movs	r0, #49	; 0x31
     d5c:	4b18      	ldr	r3, [pc, #96]	; (dc0 <system_init+0x180>)
     d5e:	4798      	blx	r3

	// GPIO on PB30

	// Set pin direction to input
	gpio_set_pin_direction(Manual_4, GPIO_DIRECTION_IN);
     d60:	2101      	movs	r1, #1
     d62:	203e      	movs	r0, #62	; 0x3e
     d64:	4b14      	ldr	r3, [pc, #80]	; (db8 <system_init+0x178>)
     d66:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_4,
     d68:	2101      	movs	r1, #1
     d6a:	203e      	movs	r0, #62	; 0x3e
     d6c:	4b13      	ldr	r3, [pc, #76]	; (dbc <system_init+0x17c>)
     d6e:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_4, GPIO_PIN_FUNCTION_OFF);
     d70:	2301      	movs	r3, #1
     d72:	425b      	negs	r3, r3
     d74:	0019      	movs	r1, r3
     d76:	203e      	movs	r0, #62	; 0x3e
     d78:	4b11      	ldr	r3, [pc, #68]	; (dc0 <system_init+0x180>)
     d7a:	4798      	blx	r3

	// GPIO on PB31

	// Set pin direction to input
	gpio_set_pin_direction(Manual_5, GPIO_DIRECTION_IN);
     d7c:	2101      	movs	r1, #1
     d7e:	203f      	movs	r0, #63	; 0x3f
     d80:	4b0d      	ldr	r3, [pc, #52]	; (db8 <system_init+0x178>)
     d82:	4798      	blx	r3

	gpio_set_pin_pull_mode(Manual_5,
     d84:	2101      	movs	r1, #1
     d86:	203f      	movs	r0, #63	; 0x3f
     d88:	4b0c      	ldr	r3, [pc, #48]	; (dbc <system_init+0x17c>)
     d8a:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(Manual_5, GPIO_PIN_FUNCTION_OFF);
     d8c:	2301      	movs	r3, #1
     d8e:	425b      	negs	r3, r3
     d90:	0019      	movs	r1, r3
     d92:	203f      	movs	r0, #63	; 0x3f
     d94:	4b0a      	ldr	r3, [pc, #40]	; (dc0 <system_init+0x180>)
     d96:	4798      	blx	r3

	WindSensor_init();
     d98:	4b0b      	ldr	r3, [pc, #44]	; (dc8 <system_init+0x188>)
     d9a:	4798      	blx	r3

	TempSensor_init();
     d9c:	4b0b      	ldr	r3, [pc, #44]	; (dcc <system_init+0x18c>)
     d9e:	4798      	blx	r3

	Scheduler_init();
     da0:	4b0b      	ldr	r3, [pc, #44]	; (dd0 <system_init+0x190>)
     da2:	4798      	blx	r3

	UART_init();
     da4:	4b0b      	ldr	r3, [pc, #44]	; (dd4 <system_init+0x194>)
     da6:	4798      	blx	r3

	StepperDriver_init();
     da8:	4b0b      	ldr	r3, [pc, #44]	; (dd8 <system_init+0x198>)
     daa:	4798      	blx	r3
}
     dac:	46c0      	nop			; (mov r8, r8)
     dae:	46bd      	mov	sp, r7
     db0:	bd80      	pop	{r7, pc}
     db2:	46c0      	nop			; (mov r8, r8)
     db4:	00000989 	.word	0x00000989
     db8:	00000909 	.word	0x00000909
     dbc:	000008a9 	.word	0x000008a9
     dc0:	000008e5 	.word	0x000008e5
     dc4:	00000949 	.word	0x00000949
     dc8:	000009f5 	.word	0x000009f5
     dcc:	00000a89 	.word	0x00000a89
     dd0:	00000ae1 	.word	0x00000ae1
     dd4:	00000b75 	.word	0x00000b75
     dd8:	00000c05 	.word	0x00000c05

00000ddc <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     ddc:	b580      	push	{r7, lr}
     dde:	b084      	sub	sp, #16
     de0:	af00      	add	r7, sp, #0
     de2:	60f8      	str	r0, [r7, #12]
     de4:	60b9      	str	r1, [r7, #8]
     de6:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
     de8:	68fb      	ldr	r3, [r7, #12]
     dea:	2b00      	cmp	r3, #0
     dec:	d004      	beq.n	df8 <adc_sync_init+0x1c>
     dee:	68bb      	ldr	r3, [r7, #8]
     df0:	2b00      	cmp	r3, #0
     df2:	d001      	beq.n	df8 <adc_sync_init+0x1c>
     df4:	2301      	movs	r3, #1
     df6:	e000      	b.n	dfa <adc_sync_init+0x1e>
     df8:	2300      	movs	r3, #0
     dfa:	1c1a      	adds	r2, r3, #0
     dfc:	2301      	movs	r3, #1
     dfe:	4013      	ands	r3, r2
     e00:	b2db      	uxtb	r3, r3
     e02:	4908      	ldr	r1, [pc, #32]	; (e24 <adc_sync_init+0x48>)
     e04:	2239      	movs	r2, #57	; 0x39
     e06:	0018      	movs	r0, r3
     e08:	4b07      	ldr	r3, [pc, #28]	; (e28 <adc_sync_init+0x4c>)
     e0a:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     e0c:	68fb      	ldr	r3, [r7, #12]
     e0e:	68ba      	ldr	r2, [r7, #8]
     e10:	0011      	movs	r1, r2
     e12:	0018      	movs	r0, r3
     e14:	4b05      	ldr	r3, [pc, #20]	; (e2c <adc_sync_init+0x50>)
     e16:	4798      	blx	r3
     e18:	0003      	movs	r3, r0
}
     e1a:	0018      	movs	r0, r3
     e1c:	46bd      	mov	sp, r7
     e1e:	b004      	add	sp, #16
     e20:	bd80      	pop	{r7, pc}
     e22:	46c0      	nop			; (mov r8, r8)
     e24:	00008438 	.word	0x00008438
     e28:	00001b19 	.word	0x00001b19
     e2c:	00002221 	.word	0x00002221

00000e30 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     e30:	b580      	push	{r7, lr}
     e32:	b082      	sub	sp, #8
     e34:	af00      	add	r7, sp, #0
     e36:	6078      	str	r0, [r7, #4]
     e38:	000a      	movs	r2, r1
     e3a:	1cfb      	adds	r3, r7, #3
     e3c:	701a      	strb	r2, [r3, #0]
	ASSERT(descr);
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	1e5a      	subs	r2, r3, #1
     e42:	4193      	sbcs	r3, r2
     e44:	b2db      	uxtb	r3, r3
     e46:	4908      	ldr	r1, [pc, #32]	; (e68 <adc_sync_enable_channel+0x38>)
     e48:	224e      	movs	r2, #78	; 0x4e
     e4a:	0018      	movs	r0, r3
     e4c:	4b07      	ldr	r3, [pc, #28]	; (e6c <adc_sync_enable_channel+0x3c>)
     e4e:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
     e50:	687a      	ldr	r2, [r7, #4]
     e52:	1cfb      	adds	r3, r7, #3
     e54:	781b      	ldrb	r3, [r3, #0]
     e56:	0019      	movs	r1, r3
     e58:	0010      	movs	r0, r2
     e5a:	4b05      	ldr	r3, [pc, #20]	; (e70 <adc_sync_enable_channel+0x40>)
     e5c:	4798      	blx	r3

	return ERR_NONE;
     e5e:	2300      	movs	r3, #0
}
     e60:	0018      	movs	r0, r3
     e62:	46bd      	mov	sp, r7
     e64:	b002      	add	sp, #8
     e66:	bd80      	pop	{r7, pc}
     e68:	00008438 	.word	0x00008438
     e6c:	00001b19 	.word	0x00001b19
     e70:	00002275 	.word	0x00002275

00000e74 <adc_sync_disable_channel>:

/**
 * \brief Disable ADC
 */
int32_t adc_sync_disable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
     e74:	b580      	push	{r7, lr}
     e76:	b082      	sub	sp, #8
     e78:	af00      	add	r7, sp, #0
     e7a:	6078      	str	r0, [r7, #4]
     e7c:	000a      	movs	r2, r1
     e7e:	1cfb      	adds	r3, r7, #3
     e80:	701a      	strb	r2, [r3, #0]
	ASSERT(descr);
     e82:	687b      	ldr	r3, [r7, #4]
     e84:	1e5a      	subs	r2, r3, #1
     e86:	4193      	sbcs	r3, r2
     e88:	b2db      	uxtb	r3, r3
     e8a:	4908      	ldr	r1, [pc, #32]	; (eac <adc_sync_disable_channel+0x38>)
     e8c:	2259      	movs	r2, #89	; 0x59
     e8e:	0018      	movs	r0, r3
     e90:	4b07      	ldr	r3, [pc, #28]	; (eb0 <adc_sync_disable_channel+0x3c>)
     e92:	4798      	blx	r3
	_adc_sync_disable_channel(&descr->device, channel);
     e94:	687a      	ldr	r2, [r7, #4]
     e96:	1cfb      	adds	r3, r7, #3
     e98:	781b      	ldrb	r3, [r3, #0]
     e9a:	0019      	movs	r1, r3
     e9c:	0010      	movs	r0, r2
     e9e:	4b05      	ldr	r3, [pc, #20]	; (eb4 <adc_sync_disable_channel+0x40>)
     ea0:	4798      	blx	r3
	return ERR_NONE;
     ea2:	2300      	movs	r3, #0
}
     ea4:	0018      	movs	r0, r3
     ea6:	46bd      	mov	sp, r7
     ea8:	b002      	add	sp, #8
     eaa:	bd80      	pop	{r7, pc}
     eac:	00008438 	.word	0x00008438
     eb0:	00001b19 	.word	0x00001b19
     eb4:	00002299 	.word	0x00002299

00000eb8 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
     eb8:	b590      	push	{r4, r7, lr}
     eba:	b087      	sub	sp, #28
     ebc:	af00      	add	r7, sp, #0
     ebe:	60f8      	str	r0, [r7, #12]
     ec0:	0008      	movs	r0, r1
     ec2:	607a      	str	r2, [r7, #4]
     ec4:	0019      	movs	r1, r3
     ec6:	230b      	movs	r3, #11
     ec8:	18fb      	adds	r3, r7, r3
     eca:	1c02      	adds	r2, r0, #0
     ecc:	701a      	strb	r2, [r3, #0]
     ece:	2308      	movs	r3, #8
     ed0:	18fb      	adds	r3, r7, r3
     ed2:	1c0a      	adds	r2, r1, #0
     ed4:	801a      	strh	r2, [r3, #0]
	uint8_t  data_size;
	uint16_t offset = 0;
     ed6:	2316      	movs	r3, #22
     ed8:	18fb      	adds	r3, r7, r3
     eda:	2200      	movs	r2, #0
     edc:	801a      	strh	r2, [r3, #0]

	ASSERT(descr && buffer && length);
     ede:	68fb      	ldr	r3, [r7, #12]
     ee0:	2b00      	cmp	r3, #0
     ee2:	d009      	beq.n	ef8 <adc_sync_read_channel+0x40>
     ee4:	687b      	ldr	r3, [r7, #4]
     ee6:	2b00      	cmp	r3, #0
     ee8:	d006      	beq.n	ef8 <adc_sync_read_channel+0x40>
     eea:	2308      	movs	r3, #8
     eec:	18fb      	adds	r3, r7, r3
     eee:	881b      	ldrh	r3, [r3, #0]
     ef0:	2b00      	cmp	r3, #0
     ef2:	d001      	beq.n	ef8 <adc_sync_read_channel+0x40>
     ef4:	2301      	movs	r3, #1
     ef6:	e000      	b.n	efa <adc_sync_read_channel+0x42>
     ef8:	2300      	movs	r3, #0
     efa:	1c1a      	adds	r2, r3, #0
     efc:	2301      	movs	r3, #1
     efe:	4013      	ands	r3, r2
     f00:	b2db      	uxtb	r3, r3
     f02:	493a      	ldr	r1, [pc, #232]	; (fec <adc_sync_read_channel+0x134>)
     f04:	2267      	movs	r2, #103	; 0x67
     f06:	0018      	movs	r0, r3
     f08:	4b39      	ldr	r3, [pc, #228]	; (ff0 <adc_sync_read_channel+0x138>)
     f0a:	4798      	blx	r3
	data_size = _adc_sync_get_data_size(&descr->device);
     f0c:	68fb      	ldr	r3, [r7, #12]
     f0e:	2215      	movs	r2, #21
     f10:	18bc      	adds	r4, r7, r2
     f12:	0018      	movs	r0, r3
     f14:	4b37      	ldr	r3, [pc, #220]	; (ff4 <adc_sync_read_channel+0x13c>)
     f16:	4798      	blx	r3
     f18:	0003      	movs	r3, r0
     f1a:	7023      	strb	r3, [r4, #0]
	ASSERT(!(length % data_size));
     f1c:	2308      	movs	r3, #8
     f1e:	18fb      	adds	r3, r7, r3
     f20:	881a      	ldrh	r2, [r3, #0]
     f22:	2315      	movs	r3, #21
     f24:	18fb      	adds	r3, r7, r3
     f26:	7819      	ldrb	r1, [r3, #0]
     f28:	4b33      	ldr	r3, [pc, #204]	; (ff8 <adc_sync_read_channel+0x140>)
     f2a:	0010      	movs	r0, r2
     f2c:	4798      	blx	r3
     f2e:	000b      	movs	r3, r1
     f30:	425a      	negs	r2, r3
     f32:	4153      	adcs	r3, r2
     f34:	b2db      	uxtb	r3, r3
     f36:	492d      	ldr	r1, [pc, #180]	; (fec <adc_sync_read_channel+0x134>)
     f38:	2269      	movs	r2, #105	; 0x69
     f3a:	0018      	movs	r0, r3
     f3c:	4b2c      	ldr	r3, [pc, #176]	; (ff0 <adc_sync_read_channel+0x138>)
     f3e:	4798      	blx	r3

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
     f40:	68fb      	ldr	r3, [r7, #12]
     f42:	0018      	movs	r0, r3
     f44:	4b2d      	ldr	r3, [pc, #180]	; (ffc <adc_sync_read_channel+0x144>)
     f46:	4798      	blx	r3

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
     f48:	46c0      	nop			; (mov r8, r8)
     f4a:	68fa      	ldr	r2, [r7, #12]
     f4c:	230b      	movs	r3, #11
     f4e:	18fb      	adds	r3, r7, r3
     f50:	781b      	ldrb	r3, [r3, #0]
     f52:	0019      	movs	r1, r3
     f54:	0010      	movs	r0, r2
     f56:	4b2a      	ldr	r3, [pc, #168]	; (1000 <adc_sync_read_channel+0x148>)
     f58:	4798      	blx	r3
     f5a:	0003      	movs	r3, r0
     f5c:	001a      	movs	r2, r3
     f5e:	2301      	movs	r3, #1
     f60:	4053      	eors	r3, r2
     f62:	b2db      	uxtb	r3, r3
     f64:	2b00      	cmp	r3, #0
     f66:	d1f0      	bne.n	f4a <adc_sync_read_channel+0x92>
			;

		result         = _adc_sync_read_channel_data(&descr->device, channel);
     f68:	68fa      	ldr	r2, [r7, #12]
     f6a:	2312      	movs	r3, #18
     f6c:	18fc      	adds	r4, r7, r3
     f6e:	230b      	movs	r3, #11
     f70:	18fb      	adds	r3, r7, r3
     f72:	781b      	ldrb	r3, [r3, #0]
     f74:	0019      	movs	r1, r3
     f76:	0010      	movs	r0, r2
     f78:	4b22      	ldr	r3, [pc, #136]	; (1004 <adc_sync_read_channel+0x14c>)
     f7a:	4798      	blx	r3
     f7c:	0003      	movs	r3, r0
     f7e:	8023      	strh	r3, [r4, #0]
		buffer[offset] = result;
     f80:	2316      	movs	r3, #22
     f82:	18fb      	adds	r3, r7, r3
     f84:	881b      	ldrh	r3, [r3, #0]
     f86:	687a      	ldr	r2, [r7, #4]
     f88:	18d3      	adds	r3, r2, r3
     f8a:	2212      	movs	r2, #18
     f8c:	18ba      	adds	r2, r7, r2
     f8e:	8812      	ldrh	r2, [r2, #0]
     f90:	b2d2      	uxtb	r2, r2
     f92:	701a      	strb	r2, [r3, #0]
		if (1 < data_size) {
     f94:	2315      	movs	r3, #21
     f96:	18fb      	adds	r3, r7, r3
     f98:	781b      	ldrb	r3, [r3, #0]
     f9a:	2b01      	cmp	r3, #1
     f9c:	d90c      	bls.n	fb8 <adc_sync_read_channel+0x100>
			buffer[offset + 1] = result >> 8;
     f9e:	2316      	movs	r3, #22
     fa0:	18fb      	adds	r3, r7, r3
     fa2:	881b      	ldrh	r3, [r3, #0]
     fa4:	3301      	adds	r3, #1
     fa6:	687a      	ldr	r2, [r7, #4]
     fa8:	18d3      	adds	r3, r2, r3
     faa:	2212      	movs	r2, #18
     fac:	18ba      	adds	r2, r7, r2
     fae:	8812      	ldrh	r2, [r2, #0]
     fb0:	0a12      	lsrs	r2, r2, #8
     fb2:	b292      	uxth	r2, r2
     fb4:	b2d2      	uxtb	r2, r2
     fb6:	701a      	strb	r2, [r3, #0]
		}
		offset += data_size;
     fb8:	2315      	movs	r3, #21
     fba:	18fb      	adds	r3, r7, r3
     fbc:	781b      	ldrb	r3, [r3, #0]
     fbe:	b299      	uxth	r1, r3
     fc0:	2316      	movs	r3, #22
     fc2:	18fb      	adds	r3, r7, r3
     fc4:	2216      	movs	r2, #22
     fc6:	18ba      	adds	r2, r7, r2
     fc8:	8812      	ldrh	r2, [r2, #0]
     fca:	188a      	adds	r2, r1, r2
     fcc:	801a      	strh	r2, [r3, #0]
	} while (offset < length);
     fce:	2316      	movs	r3, #22
     fd0:	18fa      	adds	r2, r7, r3
     fd2:	2308      	movs	r3, #8
     fd4:	18fb      	adds	r3, r7, r3
     fd6:	8812      	ldrh	r2, [r2, #0]
     fd8:	881b      	ldrh	r3, [r3, #0]
     fda:	429a      	cmp	r2, r3
     fdc:	d3b0      	bcc.n	f40 <adc_sync_read_channel+0x88>

	return offset;
     fde:	2316      	movs	r3, #22
     fe0:	18fb      	adds	r3, r7, r3
     fe2:	881b      	ldrh	r3, [r3, #0]
}
     fe4:	0018      	movs	r0, r3
     fe6:	46bd      	mov	sp, r7
     fe8:	b007      	add	sp, #28
     fea:	bd90      	pop	{r4, r7, pc}
     fec:	00008438 	.word	0x00008438
     ff0:	00001b19 	.word	0x00001b19
     ff4:	000022bd 	.word	0x000022bd
     ff8:	000024ed 	.word	0x000024ed
     ffc:	00002311 	.word	0x00002311
    1000:	000022e9 	.word	0x000022e9
    1004:	00002331 	.word	0x00002331

00001008 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
    1008:	b580      	push	{r7, lr}
    100a:	b084      	sub	sp, #16
    100c:	af00      	add	r7, sp, #0
    100e:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1010:	f3ef 8310 	mrs	r3, PRIMASK
    1014:	60fb      	str	r3, [r7, #12]
  return(result);
    1016:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
    1018:	687b      	ldr	r3, [r7, #4]
    101a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    101c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    101e:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	46bd      	mov	sp, r7
    1026:	b004      	add	sp, #16
    1028:	bd80      	pop	{r7, pc}

0000102a <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
    102a:	b580      	push	{r7, lr}
    102c:	b084      	sub	sp, #16
    102e:	af00      	add	r7, sp, #0
    1030:	6078      	str	r0, [r7, #4]
    1032:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
    1036:	687b      	ldr	r3, [r7, #4]
    1038:	681b      	ldr	r3, [r3, #0]
    103a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    103c:	68fb      	ldr	r3, [r7, #12]
    103e:	f383 8810 	msr	PRIMASK, r3
}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	46bd      	mov	sp, r7
    1046:	b004      	add	sp, #16
    1048:	bd80      	pop	{r7, pc}

0000104a <leap_year>:
/** \brief leapyear check
 *  \retval false  not leapyear.
 *  \retval true  leapyear.
 */
static bool leap_year(uint16_t year)
{
    104a:	b580      	push	{r7, lr}
    104c:	b082      	sub	sp, #8
    104e:	af00      	add	r7, sp, #0
    1050:	0002      	movs	r2, r0
    1052:	1dbb      	adds	r3, r7, #6
    1054:	801a      	strh	r2, [r3, #0]
	if (year & 3) {
    1056:	1dbb      	adds	r3, r7, #6
    1058:	881b      	ldrh	r3, [r3, #0]
    105a:	2203      	movs	r2, #3
    105c:	4013      	ands	r3, r2
    105e:	d001      	beq.n	1064 <leap_year+0x1a>
		return false;
    1060:	2300      	movs	r3, #0
    1062:	e000      	b.n	1066 <leap_year+0x1c>
	} else {
		return true;
    1064:	2301      	movs	r3, #1
	}
}
    1066:	0018      	movs	r0, r3
    1068:	46bd      	mov	sp, r7
    106a:	b002      	add	sp, #8
    106c:	bd80      	pop	{r7, pc}
	...

00001070 <get_secs_in_month>:

/** \brief calculate the seconds in specified year/month
 *  \retval 0  month error.
 */
static uint32_t get_secs_in_month(uint32_t year, uint8_t month)
{
    1070:	b580      	push	{r7, lr}
    1072:	b084      	sub	sp, #16
    1074:	af00      	add	r7, sp, #0
    1076:	6078      	str	r0, [r7, #4]
    1078:	000a      	movs	r2, r1
    107a:	1cfb      	adds	r3, r7, #3
    107c:	701a      	strb	r2, [r3, #0]
	uint32_t sec_in_month = 0;
    107e:	2300      	movs	r3, #0
    1080:	60fb      	str	r3, [r7, #12]

	if (leap_year(year)) {
    1082:	687b      	ldr	r3, [r7, #4]
    1084:	b29b      	uxth	r3, r3
    1086:	0018      	movs	r0, r3
    1088:	4b17      	ldr	r3, [pc, #92]	; (10e8 <get_secs_in_month+0x78>)
    108a:	4798      	blx	r3
    108c:	1e03      	subs	r3, r0, #0
    108e:	d011      	beq.n	10b4 <get_secs_in_month+0x44>
		switch (month) {
    1090:	1cfb      	adds	r3, r7, #3
    1092:	781b      	ldrb	r3, [r3, #0]
    1094:	2b0c      	cmp	r3, #12
    1096:	d81f      	bhi.n	10d8 <get_secs_in_month+0x68>
    1098:	009a      	lsls	r2, r3, #2
    109a:	4b14      	ldr	r3, [pc, #80]	; (10ec <get_secs_in_month+0x7c>)
    109c:	18d3      	adds	r3, r2, r3
    109e:	681b      	ldr	r3, [r3, #0]
    10a0:	469f      	mov	pc, r3
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    10a2:	4b13      	ldr	r3, [pc, #76]	; (10f0 <get_secs_in_month+0x80>)
    10a4:	60fb      	str	r3, [r7, #12]
			break;
    10a6:	e01a      	b.n	10de <get_secs_in_month+0x6e>
		case 2:
			sec_in_month = SECS_IN_29DAYS;
    10a8:	4b12      	ldr	r3, [pc, #72]	; (10f4 <get_secs_in_month+0x84>)
    10aa:	60fb      	str	r3, [r7, #12]
			break;
    10ac:	e017      	b.n	10de <get_secs_in_month+0x6e>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    10ae:	4b12      	ldr	r3, [pc, #72]	; (10f8 <get_secs_in_month+0x88>)
    10b0:	60fb      	str	r3, [r7, #12]
			break;
    10b2:	e014      	b.n	10de <get_secs_in_month+0x6e>
		default:
			break;
		}
	} else {
		switch (month) {
    10b4:	1cfb      	adds	r3, r7, #3
    10b6:	781b      	ldrb	r3, [r3, #0]
    10b8:	2b0c      	cmp	r3, #12
    10ba:	d80f      	bhi.n	10dc <get_secs_in_month+0x6c>
    10bc:	009a      	lsls	r2, r3, #2
    10be:	4b0f      	ldr	r3, [pc, #60]	; (10fc <get_secs_in_month+0x8c>)
    10c0:	18d3      	adds	r3, r2, r3
    10c2:	681b      	ldr	r3, [r3, #0]
    10c4:	469f      	mov	pc, r3
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			sec_in_month = SECS_IN_31DAYS;
    10c6:	4b0a      	ldr	r3, [pc, #40]	; (10f0 <get_secs_in_month+0x80>)
    10c8:	60fb      	str	r3, [r7, #12]
			break;
    10ca:	e008      	b.n	10de <get_secs_in_month+0x6e>
		case 2:
			sec_in_month = SECS_IN_28DAYS;
    10cc:	4b0c      	ldr	r3, [pc, #48]	; (1100 <get_secs_in_month+0x90>)
    10ce:	60fb      	str	r3, [r7, #12]
			break;
    10d0:	e005      	b.n	10de <get_secs_in_month+0x6e>
		case 4:
		case 6:
		case 9:
		case 11:
			sec_in_month = SECS_IN_30DAYS;
    10d2:	4b09      	ldr	r3, [pc, #36]	; (10f8 <get_secs_in_month+0x88>)
    10d4:	60fb      	str	r3, [r7, #12]
			break;
    10d6:	e002      	b.n	10de <get_secs_in_month+0x6e>
			break;
    10d8:	46c0      	nop			; (mov r8, r8)
    10da:	e000      	b.n	10de <get_secs_in_month+0x6e>
		default:
			break;
    10dc:	46c0      	nop			; (mov r8, r8)
		}
	}

	return sec_in_month;
    10de:	68fb      	ldr	r3, [r7, #12]
}
    10e0:	0018      	movs	r0, r3
    10e2:	46bd      	mov	sp, r7
    10e4:	b004      	add	sp, #16
    10e6:	bd80      	pop	{r7, pc}
    10e8:	0000104b 	.word	0x0000104b
    10ec:	00008454 	.word	0x00008454
    10f0:	0028de80 	.word	0x0028de80
    10f4:	00263b80 	.word	0x00263b80
    10f8:	00278d00 	.word	0x00278d00
    10fc:	00008488 	.word	0x00008488
    1100:	0024ea00 	.word	0x0024ea00

00001104 <convert_timestamp_to_datetime>:

/** \brief convert timestamp to date/time
 */
static int32_t convert_timestamp_to_datetime(uint32_t ts, struct calendar_date_time *dt)
{
    1104:	b580      	push	{r7, lr}
    1106:	b088      	sub	sp, #32
    1108:	af00      	add	r7, sp, #0
    110a:	6078      	str	r0, [r7, #4]
    110c:	6039      	str	r1, [r7, #0]
	uint32_t tmp, sec_in_year, sec_in_month;
	uint32_t tmp_year    = DEFAULT_BASE_YEAR;
    110e:	4b4b      	ldr	r3, [pc, #300]	; (123c <convert_timestamp_to_datetime+0x138>)
    1110:	61bb      	str	r3, [r7, #24]
	uint8_t  tmp_month   = 1;
    1112:	2317      	movs	r3, #23
    1114:	18fb      	adds	r3, r7, r3
    1116:	2201      	movs	r2, #1
    1118:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_day     = 1;
    111a:	2316      	movs	r3, #22
    111c:	18fb      	adds	r3, r7, r3
    111e:	2201      	movs	r2, #1
    1120:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_hour    = 0;
    1122:	2315      	movs	r3, #21
    1124:	18fb      	adds	r3, r7, r3
    1126:	2200      	movs	r2, #0
    1128:	701a      	strb	r2, [r3, #0]
	uint8_t  tmp_minutes = 0;
    112a:	2314      	movs	r3, #20
    112c:	18fb      	adds	r3, r7, r3
    112e:	2200      	movs	r2, #0
    1130:	701a      	strb	r2, [r3, #0]

	tmp = ts;
    1132:	687b      	ldr	r3, [r7, #4]
    1134:	61fb      	str	r3, [r7, #28]

	/* Find year */
	while (true) {
		sec_in_year = leap_year(tmp_year) ? SECS_IN_LEAP_YEAR : SECS_IN_NON_LEAP_YEAR;
    1136:	69bb      	ldr	r3, [r7, #24]
    1138:	b29b      	uxth	r3, r3
    113a:	0018      	movs	r0, r3
    113c:	4b40      	ldr	r3, [pc, #256]	; (1240 <convert_timestamp_to_datetime+0x13c>)
    113e:	4798      	blx	r3
    1140:	1e03      	subs	r3, r0, #0
    1142:	d001      	beq.n	1148 <convert_timestamp_to_datetime+0x44>
    1144:	4b3f      	ldr	r3, [pc, #252]	; (1244 <convert_timestamp_to_datetime+0x140>)
    1146:	e000      	b.n	114a <convert_timestamp_to_datetime+0x46>
    1148:	4b3f      	ldr	r3, [pc, #252]	; (1248 <convert_timestamp_to_datetime+0x144>)
    114a:	613b      	str	r3, [r7, #16]

		if (tmp >= sec_in_year) {
    114c:	69fa      	ldr	r2, [r7, #28]
    114e:	693b      	ldr	r3, [r7, #16]
    1150:	429a      	cmp	r2, r3
    1152:	d307      	bcc.n	1164 <convert_timestamp_to_datetime+0x60>
			tmp -= sec_in_year;
    1154:	69fa      	ldr	r2, [r7, #28]
    1156:	693b      	ldr	r3, [r7, #16]
    1158:	1ad3      	subs	r3, r2, r3
    115a:	61fb      	str	r3, [r7, #28]
			tmp_year++;
    115c:	69bb      	ldr	r3, [r7, #24]
    115e:	3301      	adds	r3, #1
    1160:	61bb      	str	r3, [r7, #24]
    1162:	e7e8      	b.n	1136 <convert_timestamp_to_datetime+0x32>
			break;
		}
	}
	/* Find month of year */
	while (true) {
		sec_in_month = get_secs_in_month(tmp_year, tmp_month);
    1164:	2317      	movs	r3, #23
    1166:	18fb      	adds	r3, r7, r3
    1168:	781a      	ldrb	r2, [r3, #0]
    116a:	69bb      	ldr	r3, [r7, #24]
    116c:	0011      	movs	r1, r2
    116e:	0018      	movs	r0, r3
    1170:	4b36      	ldr	r3, [pc, #216]	; (124c <convert_timestamp_to_datetime+0x148>)
    1172:	4798      	blx	r3
    1174:	0003      	movs	r3, r0
    1176:	60fb      	str	r3, [r7, #12]

		if (tmp >= sec_in_month) {
    1178:	69fa      	ldr	r2, [r7, #28]
    117a:	68fb      	ldr	r3, [r7, #12]
    117c:	429a      	cmp	r2, r3
    117e:	d30b      	bcc.n	1198 <convert_timestamp_to_datetime+0x94>
			tmp -= sec_in_month;
    1180:	69fa      	ldr	r2, [r7, #28]
    1182:	68fb      	ldr	r3, [r7, #12]
    1184:	1ad3      	subs	r3, r2, r3
    1186:	61fb      	str	r3, [r7, #28]
			tmp_month++;
    1188:	2317      	movs	r3, #23
    118a:	18fb      	adds	r3, r7, r3
    118c:	781a      	ldrb	r2, [r3, #0]
    118e:	2317      	movs	r3, #23
    1190:	18fb      	adds	r3, r7, r3
    1192:	3201      	adds	r2, #1
    1194:	701a      	strb	r2, [r3, #0]
    1196:	e7e5      	b.n	1164 <convert_timestamp_to_datetime+0x60>
			break;
		}
	}
	/* Find day of month */
	while (true) {
		if (tmp >= SECS_IN_DAY) {
    1198:	69fb      	ldr	r3, [r7, #28]
    119a:	4a2d      	ldr	r2, [pc, #180]	; (1250 <convert_timestamp_to_datetime+0x14c>)
    119c:	4293      	cmp	r3, r2
    119e:	d90c      	bls.n	11ba <convert_timestamp_to_datetime+0xb6>
			tmp -= SECS_IN_DAY;
    11a0:	69fb      	ldr	r3, [r7, #28]
    11a2:	4a2c      	ldr	r2, [pc, #176]	; (1254 <convert_timestamp_to_datetime+0x150>)
    11a4:	4694      	mov	ip, r2
    11a6:	4463      	add	r3, ip
    11a8:	61fb      	str	r3, [r7, #28]
			tmp_day++;
    11aa:	2316      	movs	r3, #22
    11ac:	18fb      	adds	r3, r7, r3
    11ae:	781a      	ldrb	r2, [r3, #0]
    11b0:	2316      	movs	r3, #22
    11b2:	18fb      	adds	r3, r7, r3
    11b4:	3201      	adds	r2, #1
    11b6:	701a      	strb	r2, [r3, #0]
    11b8:	e7ee      	b.n	1198 <convert_timestamp_to_datetime+0x94>
			break;
		}
	}
	/* Find hour of day */
	while (true) {
		if (tmp >= SECS_IN_HOUR) {
    11ba:	69fb      	ldr	r3, [r7, #28]
    11bc:	4a26      	ldr	r2, [pc, #152]	; (1258 <convert_timestamp_to_datetime+0x154>)
    11be:	4293      	cmp	r3, r2
    11c0:	d90c      	bls.n	11dc <convert_timestamp_to_datetime+0xd8>
			tmp -= SECS_IN_HOUR;
    11c2:	69fb      	ldr	r3, [r7, #28]
    11c4:	4a25      	ldr	r2, [pc, #148]	; (125c <convert_timestamp_to_datetime+0x158>)
    11c6:	4694      	mov	ip, r2
    11c8:	4463      	add	r3, ip
    11ca:	61fb      	str	r3, [r7, #28]
			tmp_hour++;
    11cc:	2315      	movs	r3, #21
    11ce:	18fb      	adds	r3, r7, r3
    11d0:	781a      	ldrb	r2, [r3, #0]
    11d2:	2315      	movs	r3, #21
    11d4:	18fb      	adds	r3, r7, r3
    11d6:	3201      	adds	r2, #1
    11d8:	701a      	strb	r2, [r3, #0]
    11da:	e7ee      	b.n	11ba <convert_timestamp_to_datetime+0xb6>
			break;
		}
	}
	/* Find minute in hour */
	while (true) {
		if (tmp >= SECS_IN_MINUTE) {
    11dc:	69fb      	ldr	r3, [r7, #28]
    11de:	2b3b      	cmp	r3, #59	; 0x3b
    11e0:	d90a      	bls.n	11f8 <convert_timestamp_to_datetime+0xf4>
			tmp -= SECS_IN_MINUTE;
    11e2:	69fb      	ldr	r3, [r7, #28]
    11e4:	3b3c      	subs	r3, #60	; 0x3c
    11e6:	61fb      	str	r3, [r7, #28]
			tmp_minutes++;
    11e8:	2314      	movs	r3, #20
    11ea:	18fb      	adds	r3, r7, r3
    11ec:	781a      	ldrb	r2, [r3, #0]
    11ee:	2314      	movs	r3, #20
    11f0:	18fb      	adds	r3, r7, r3
    11f2:	3201      	adds	r2, #1
    11f4:	701a      	strb	r2, [r3, #0]
		if (tmp >= SECS_IN_MINUTE) {
    11f6:	e7f1      	b.n	11dc <convert_timestamp_to_datetime+0xd8>
		} else {
			break;
    11f8:	46c0      	nop			; (mov r8, r8)
		}
	}

	dt->date.year  = tmp_year;
    11fa:	69bb      	ldr	r3, [r7, #24]
    11fc:	b29a      	uxth	r2, r3
    11fe:	683b      	ldr	r3, [r7, #0]
    1200:	80da      	strh	r2, [r3, #6]
	dt->date.month = tmp_month;
    1202:	683b      	ldr	r3, [r7, #0]
    1204:	2217      	movs	r2, #23
    1206:	18ba      	adds	r2, r7, r2
    1208:	7812      	ldrb	r2, [r2, #0]
    120a:	715a      	strb	r2, [r3, #5]
	dt->date.day   = tmp_day;
    120c:	683b      	ldr	r3, [r7, #0]
    120e:	2216      	movs	r2, #22
    1210:	18ba      	adds	r2, r7, r2
    1212:	7812      	ldrb	r2, [r2, #0]
    1214:	711a      	strb	r2, [r3, #4]
	dt->time.hour  = tmp_hour;
    1216:	683b      	ldr	r3, [r7, #0]
    1218:	2215      	movs	r2, #21
    121a:	18ba      	adds	r2, r7, r2
    121c:	7812      	ldrb	r2, [r2, #0]
    121e:	709a      	strb	r2, [r3, #2]
	dt->time.min   = tmp_minutes;
    1220:	683b      	ldr	r3, [r7, #0]
    1222:	2214      	movs	r2, #20
    1224:	18ba      	adds	r2, r7, r2
    1226:	7812      	ldrb	r2, [r2, #0]
    1228:	705a      	strb	r2, [r3, #1]
	dt->time.sec   = tmp;
    122a:	69fb      	ldr	r3, [r7, #28]
    122c:	b2da      	uxtb	r2, r3
    122e:	683b      	ldr	r3, [r7, #0]
    1230:	701a      	strb	r2, [r3, #0]

	return 0;
    1232:	2300      	movs	r3, #0
}
    1234:	0018      	movs	r0, r3
    1236:	46bd      	mov	sp, r7
    1238:	b008      	add	sp, #32
    123a:	bd80      	pop	{r7, pc}
    123c:	000007b2 	.word	0x000007b2
    1240:	0000104b 	.word	0x0000104b
    1244:	01e28500 	.word	0x01e28500
    1248:	01e13380 	.word	0x01e13380
    124c:	00001071 	.word	0x00001071
    1250:	0001517f 	.word	0x0001517f
    1254:	fffeae80 	.word	0xfffeae80
    1258:	00000e0f 	.word	0x00000e0f
    125c:	fffff1f0 	.word	0xfffff1f0

00001260 <convert_datetime_to_timestamp>:

/** \brief convert date/time to timestamp
 *  \return timestamp
 */
static uint32_t convert_datetime_to_timestamp(struct calendar_date_time *dt)
{
    1260:	b580      	push	{r7, lr}
    1262:	b086      	sub	sp, #24
    1264:	af00      	add	r7, sp, #0
    1266:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0;
    1268:	2300      	movs	r3, #0
    126a:	617b      	str	r3, [r7, #20]
	uint32_t i   = 0;
    126c:	2300      	movs	r3, #0
    126e:	613b      	str	r3, [r7, #16]
	uint8_t  year, month, day, hour, minutes, seconds;

	year    = dt->date.year - DEFAULT_BASE_YEAR;
    1270:	687b      	ldr	r3, [r7, #4]
    1272:	88db      	ldrh	r3, [r3, #6]
    1274:	b2da      	uxtb	r2, r3
    1276:	230f      	movs	r3, #15
    1278:	18fb      	adds	r3, r7, r3
    127a:	324e      	adds	r2, #78	; 0x4e
    127c:	701a      	strb	r2, [r3, #0]
	month   = dt->date.month;
    127e:	230e      	movs	r3, #14
    1280:	18fb      	adds	r3, r7, r3
    1282:	687a      	ldr	r2, [r7, #4]
    1284:	7952      	ldrb	r2, [r2, #5]
    1286:	701a      	strb	r2, [r3, #0]
	day     = dt->date.day;
    1288:	230d      	movs	r3, #13
    128a:	18fb      	adds	r3, r7, r3
    128c:	687a      	ldr	r2, [r7, #4]
    128e:	7912      	ldrb	r2, [r2, #4]
    1290:	701a      	strb	r2, [r3, #0]
	hour    = dt->time.hour;
    1292:	230c      	movs	r3, #12
    1294:	18fb      	adds	r3, r7, r3
    1296:	687a      	ldr	r2, [r7, #4]
    1298:	7892      	ldrb	r2, [r2, #2]
    129a:	701a      	strb	r2, [r3, #0]
	minutes = dt->time.min;
    129c:	230b      	movs	r3, #11
    129e:	18fb      	adds	r3, r7, r3
    12a0:	687a      	ldr	r2, [r7, #4]
    12a2:	7852      	ldrb	r2, [r2, #1]
    12a4:	701a      	strb	r2, [r3, #0]
	seconds = dt->time.sec;
    12a6:	230a      	movs	r3, #10
    12a8:	18fb      	adds	r3, r7, r3
    12aa:	687a      	ldr	r2, [r7, #4]
    12ac:	7812      	ldrb	r2, [r2, #0]
    12ae:	701a      	strb	r2, [r3, #0]

	/* tot up year field */
	for (i = 0; i < year; ++i) {
    12b0:	2300      	movs	r3, #0
    12b2:	613b      	str	r3, [r7, #16]
    12b4:	e018      	b.n	12e8 <convert_datetime_to_timestamp+0x88>
		if (leap_year(DEFAULT_BASE_YEAR + i)) {
    12b6:	693b      	ldr	r3, [r7, #16]
    12b8:	b29b      	uxth	r3, r3
    12ba:	4a30      	ldr	r2, [pc, #192]	; (137c <convert_datetime_to_timestamp+0x11c>)
    12bc:	4694      	mov	ip, r2
    12be:	4463      	add	r3, ip
    12c0:	b29b      	uxth	r3, r3
    12c2:	0018      	movs	r0, r3
    12c4:	4b2e      	ldr	r3, [pc, #184]	; (1380 <convert_datetime_to_timestamp+0x120>)
    12c6:	4798      	blx	r3
    12c8:	1e03      	subs	r3, r0, #0
    12ca:	d005      	beq.n	12d8 <convert_datetime_to_timestamp+0x78>
			tmp += SECS_IN_LEAP_YEAR;
    12cc:	697b      	ldr	r3, [r7, #20]
    12ce:	4a2d      	ldr	r2, [pc, #180]	; (1384 <convert_datetime_to_timestamp+0x124>)
    12d0:	4694      	mov	ip, r2
    12d2:	4463      	add	r3, ip
    12d4:	617b      	str	r3, [r7, #20]
    12d6:	e004      	b.n	12e2 <convert_datetime_to_timestamp+0x82>
		} else {
			tmp += SECS_IN_NON_LEAP_YEAR;
    12d8:	697b      	ldr	r3, [r7, #20]
    12da:	4a2b      	ldr	r2, [pc, #172]	; (1388 <convert_datetime_to_timestamp+0x128>)
    12dc:	4694      	mov	ip, r2
    12de:	4463      	add	r3, ip
    12e0:	617b      	str	r3, [r7, #20]
	for (i = 0; i < year; ++i) {
    12e2:	693b      	ldr	r3, [r7, #16]
    12e4:	3301      	adds	r3, #1
    12e6:	613b      	str	r3, [r7, #16]
    12e8:	230f      	movs	r3, #15
    12ea:	18fb      	adds	r3, r7, r3
    12ec:	781a      	ldrb	r2, [r3, #0]
    12ee:	693b      	ldr	r3, [r7, #16]
    12f0:	429a      	cmp	r2, r3
    12f2:	d8e0      	bhi.n	12b6 <convert_datetime_to_timestamp+0x56>
		}
	}

	/* tot up month field */
	for (i = 1; i < month; ++i) {
    12f4:	2301      	movs	r3, #1
    12f6:	613b      	str	r3, [r7, #16]
    12f8:	e00f      	b.n	131a <convert_datetime_to_timestamp+0xba>
		tmp += get_secs_in_month(dt->date.year, i);
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	88db      	ldrh	r3, [r3, #6]
    12fe:	001a      	movs	r2, r3
    1300:	693b      	ldr	r3, [r7, #16]
    1302:	b2db      	uxtb	r3, r3
    1304:	0019      	movs	r1, r3
    1306:	0010      	movs	r0, r2
    1308:	4b20      	ldr	r3, [pc, #128]	; (138c <convert_datetime_to_timestamp+0x12c>)
    130a:	4798      	blx	r3
    130c:	0002      	movs	r2, r0
    130e:	697b      	ldr	r3, [r7, #20]
    1310:	189b      	adds	r3, r3, r2
    1312:	617b      	str	r3, [r7, #20]
	for (i = 1; i < month; ++i) {
    1314:	693b      	ldr	r3, [r7, #16]
    1316:	3301      	adds	r3, #1
    1318:	613b      	str	r3, [r7, #16]
    131a:	230e      	movs	r3, #14
    131c:	18fb      	adds	r3, r7, r3
    131e:	781a      	ldrb	r2, [r3, #0]
    1320:	693b      	ldr	r3, [r7, #16]
    1322:	429a      	cmp	r2, r3
    1324:	d8e9      	bhi.n	12fa <convert_datetime_to_timestamp+0x9a>
	}

	/* tot up day/hour/minute/second fields */
	tmp += (day - 1) * SECS_IN_DAY;
    1326:	230d      	movs	r3, #13
    1328:	18fb      	adds	r3, r7, r3
    132a:	781b      	ldrb	r3, [r3, #0]
    132c:	3b01      	subs	r3, #1
    132e:	4a18      	ldr	r2, [pc, #96]	; (1390 <convert_datetime_to_timestamp+0x130>)
    1330:	4353      	muls	r3, r2
    1332:	001a      	movs	r2, r3
    1334:	697b      	ldr	r3, [r7, #20]
    1336:	189b      	adds	r3, r3, r2
    1338:	617b      	str	r3, [r7, #20]
	tmp += hour * SECS_IN_HOUR;
    133a:	230c      	movs	r3, #12
    133c:	18fb      	adds	r3, r7, r3
    133e:	781b      	ldrb	r3, [r3, #0]
    1340:	22e1      	movs	r2, #225	; 0xe1
    1342:	0112      	lsls	r2, r2, #4
    1344:	4353      	muls	r3, r2
    1346:	001a      	movs	r2, r3
    1348:	697b      	ldr	r3, [r7, #20]
    134a:	189b      	adds	r3, r3, r2
    134c:	617b      	str	r3, [r7, #20]
	tmp += minutes * SECS_IN_MINUTE;
    134e:	230b      	movs	r3, #11
    1350:	18fb      	adds	r3, r7, r3
    1352:	781a      	ldrb	r2, [r3, #0]
    1354:	0013      	movs	r3, r2
    1356:	011b      	lsls	r3, r3, #4
    1358:	1a9b      	subs	r3, r3, r2
    135a:	009b      	lsls	r3, r3, #2
    135c:	001a      	movs	r2, r3
    135e:	697b      	ldr	r3, [r7, #20]
    1360:	189b      	adds	r3, r3, r2
    1362:	617b      	str	r3, [r7, #20]
	tmp += seconds;
    1364:	230a      	movs	r3, #10
    1366:	18fb      	adds	r3, r7, r3
    1368:	781b      	ldrb	r3, [r3, #0]
    136a:	697a      	ldr	r2, [r7, #20]
    136c:	18d3      	adds	r3, r2, r3
    136e:	617b      	str	r3, [r7, #20]

	return tmp;
    1370:	697b      	ldr	r3, [r7, #20]
}
    1372:	0018      	movs	r0, r3
    1374:	46bd      	mov	sp, r7
    1376:	b006      	add	sp, #24
    1378:	bd80      	pop	{r7, pc}
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	000007b2 	.word	0x000007b2
    1380:	0000104b 	.word	0x0000104b
    1384:	01e28500 	.word	0x01e28500
    1388:	01e13380 	.word	0x01e13380
    138c:	00001071 	.word	0x00001071
    1390:	00015180 	.word	0x00015180

00001394 <calibrate_timestamp>:

/** \brief calibrate timestamp to make desired timestamp ahead of current timestamp
 */
static void calibrate_timestamp(struct calendar_os_alarm *alarm, struct calendar_os_alarm *current_dt)
{
    1394:	b580      	push	{r7, lr}
    1396:	b084      	sub	sp, #16
    1398:	af00      	add	r7, sp, #0
    139a:	6078      	str	r0, [r7, #4]
    139c:	6039      	str	r1, [r7, #0]
	uint32_t alarm_ts;
	uint32_t current_ts = current_dt->cal_alarm.timestamp;
    139e:	683b      	ldr	r3, [r7, #0]
    13a0:	68db      	ldr	r3, [r3, #12]
    13a2:	60bb      	str	r3, [r7, #8]

	alarm_ts = alarm->cal_alarm.timestamp;
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	68db      	ldr	r3, [r3, #12]
    13a8:	60fb      	str	r3, [r7, #12]

	/* calibrate timestamp */
	switch (alarm->cal_alarm.option) {
    13aa:	687b      	ldr	r3, [r7, #4]
    13ac:	7c1b      	ldrb	r3, [r3, #16]
    13ae:	2b05      	cmp	r3, #5
    13b0:	d84a      	bhi.n	1448 <calibrate_timestamp+0xb4>
    13b2:	009a      	lsls	r2, r3, #2
    13b4:	4b2d      	ldr	r3, [pc, #180]	; (146c <calibrate_timestamp+0xd8>)
    13b6:	18d3      	adds	r3, r2, r3
    13b8:	681b      	ldr	r3, [r3, #0]
    13ba:	469f      	mov	pc, r3
	case CALENDAR_ALARM_MATCH_SEC:

		if (alarm_ts <= current_ts) {
    13bc:	68fa      	ldr	r2, [r7, #12]
    13be:	68bb      	ldr	r3, [r7, #8]
    13c0:	429a      	cmp	r2, r3
    13c2:	d843      	bhi.n	144c <calibrate_timestamp+0xb8>
			alarm_ts += SECS_IN_MINUTE;
    13c4:	68fb      	ldr	r3, [r7, #12]
    13c6:	333c      	adds	r3, #60	; 0x3c
    13c8:	60fb      	str	r3, [r7, #12]
		}

		break;
    13ca:	e03f      	b.n	144c <calibrate_timestamp+0xb8>
	case CALENDAR_ALARM_MATCH_MIN:

		if (alarm_ts <= current_ts) {
    13cc:	68fa      	ldr	r2, [r7, #12]
    13ce:	68bb      	ldr	r3, [r7, #8]
    13d0:	429a      	cmp	r2, r3
    13d2:	d83d      	bhi.n	1450 <calibrate_timestamp+0xbc>
			alarm_ts += SECS_IN_HOUR;
    13d4:	68fb      	ldr	r3, [r7, #12]
    13d6:	22e1      	movs	r2, #225	; 0xe1
    13d8:	0112      	lsls	r2, r2, #4
    13da:	4694      	mov	ip, r2
    13dc:	4463      	add	r3, ip
    13de:	60fb      	str	r3, [r7, #12]
		}

		break;
    13e0:	e036      	b.n	1450 <calibrate_timestamp+0xbc>
	case CALENDAR_ALARM_MATCH_HOUR:

		if (alarm_ts <= current_ts) {
    13e2:	68fa      	ldr	r2, [r7, #12]
    13e4:	68bb      	ldr	r3, [r7, #8]
    13e6:	429a      	cmp	r2, r3
    13e8:	d834      	bhi.n	1454 <calibrate_timestamp+0xc0>
			alarm_ts += SECS_IN_DAY;
    13ea:	68fb      	ldr	r3, [r7, #12]
    13ec:	4a20      	ldr	r2, [pc, #128]	; (1470 <calibrate_timestamp+0xdc>)
    13ee:	4694      	mov	ip, r2
    13f0:	4463      	add	r3, ip
    13f2:	60fb      	str	r3, [r7, #12]
		}

		break;
    13f4:	e02e      	b.n	1454 <calibrate_timestamp+0xc0>
	case CALENDAR_ALARM_MATCH_DAY:

		if (alarm_ts <= current_ts) {
    13f6:	68fa      	ldr	r2, [r7, #12]
    13f8:	68bb      	ldr	r3, [r7, #8]
    13fa:	429a      	cmp	r2, r3
    13fc:	d82c      	bhi.n	1458 <calibrate_timestamp+0xc4>
			alarm_ts += get_secs_in_month(current_dt->cal_alarm.datetime.date.year,
    13fe:	683b      	ldr	r3, [r7, #0]
    1400:	895b      	ldrh	r3, [r3, #10]
    1402:	001a      	movs	r2, r3
    1404:	683b      	ldr	r3, [r7, #0]
    1406:	7a5b      	ldrb	r3, [r3, #9]
    1408:	0019      	movs	r1, r3
    140a:	0010      	movs	r0, r2
    140c:	4b19      	ldr	r3, [pc, #100]	; (1474 <calibrate_timestamp+0xe0>)
    140e:	4798      	blx	r3
    1410:	0002      	movs	r2, r0
    1412:	68fb      	ldr	r3, [r7, #12]
    1414:	189b      	adds	r3, r3, r2
    1416:	60fb      	str	r3, [r7, #12]
			                              current_dt->cal_alarm.datetime.date.month);
		}

		break;
    1418:	e01e      	b.n	1458 <calibrate_timestamp+0xc4>
	case CALENDAR_ALARM_MATCH_MONTH:

		if (alarm_ts <= current_ts) {
    141a:	68fa      	ldr	r2, [r7, #12]
    141c:	68bb      	ldr	r3, [r7, #8]
    141e:	429a      	cmp	r2, r3
    1420:	d81c      	bhi.n	145c <calibrate_timestamp+0xc8>
			if (leap_year(current_dt->cal_alarm.datetime.date.year)) {
    1422:	683b      	ldr	r3, [r7, #0]
    1424:	895b      	ldrh	r3, [r3, #10]
    1426:	0018      	movs	r0, r3
    1428:	4b13      	ldr	r3, [pc, #76]	; (1478 <calibrate_timestamp+0xe4>)
    142a:	4798      	blx	r3
    142c:	1e03      	subs	r3, r0, #0
    142e:	d005      	beq.n	143c <calibrate_timestamp+0xa8>
				alarm_ts += SECS_IN_LEAP_YEAR;
    1430:	68fb      	ldr	r3, [r7, #12]
    1432:	4a12      	ldr	r2, [pc, #72]	; (147c <calibrate_timestamp+0xe8>)
    1434:	4694      	mov	ip, r2
    1436:	4463      	add	r3, ip
    1438:	60fb      	str	r3, [r7, #12]
			} else {
				alarm_ts += SECS_IN_NON_LEAP_YEAR;
			}
		}

		break;
    143a:	e00f      	b.n	145c <calibrate_timestamp+0xc8>
				alarm_ts += SECS_IN_NON_LEAP_YEAR;
    143c:	68fb      	ldr	r3, [r7, #12]
    143e:	4a10      	ldr	r2, [pc, #64]	; (1480 <calibrate_timestamp+0xec>)
    1440:	4694      	mov	ip, r2
    1442:	4463      	add	r3, ip
    1444:	60fb      	str	r3, [r7, #12]
		break;
    1446:	e009      	b.n	145c <calibrate_timestamp+0xc8>
	/* do nothing for year match */
	case CALENDAR_ALARM_MATCH_YEAR:
	default:
		break;
    1448:	46c0      	nop			; (mov r8, r8)
    144a:	e008      	b.n	145e <calibrate_timestamp+0xca>
		break;
    144c:	46c0      	nop			; (mov r8, r8)
    144e:	e006      	b.n	145e <calibrate_timestamp+0xca>
		break;
    1450:	46c0      	nop			; (mov r8, r8)
    1452:	e004      	b.n	145e <calibrate_timestamp+0xca>
		break;
    1454:	46c0      	nop			; (mov r8, r8)
    1456:	e002      	b.n	145e <calibrate_timestamp+0xca>
		break;
    1458:	46c0      	nop			; (mov r8, r8)
    145a:	e000      	b.n	145e <calibrate_timestamp+0xca>
		break;
    145c:	46c0      	nop			; (mov r8, r8)
	}

	/* desired timestamp after calibration */
	alarm->cal_alarm.timestamp = alarm_ts;
    145e:	687b      	ldr	r3, [r7, #4]
    1460:	68fa      	ldr	r2, [r7, #12]
    1462:	60da      	str	r2, [r3, #12]
}
    1464:	46c0      	nop			; (mov r8, r8)
    1466:	46bd      	mov	sp, r7
    1468:	b004      	add	sp, #16
    146a:	bd80      	pop	{r7, pc}
    146c:	000084bc 	.word	0x000084bc
    1470:	00015180 	.word	0x00015180
    1474:	00001071 	.word	0x00001071
    1478:	0000104b 	.word	0x0000104b
    147c:	01e28500 	.word	0x01e28500
    1480:	01e13380 	.word	0x01e13380

00001484 <fill_alarm>:

/** \brief complete alarm to absolute date/time, then fill up the timestamp
 */
static void fill_alarm(struct calendar_os_descriptor *const calendar, struct calendar_os_alarm *alarm)
{
    1484:	b580      	push	{r7, lr}
    1486:	b08a      	sub	sp, #40	; 0x28
    1488:	af00      	add	r7, sp, #0
    148a:	6078      	str	r0, [r7, #4]
    148c:	6039      	str	r1, [r7, #0]
	struct calendar_os_alarm current_dt;
	uint32_t                 tmp, current_ts;

	/* get current date/time */
	current_ts = _calendar_get_counter(&calendar->device);
    148e:	687b      	ldr	r3, [r7, #4]
    1490:	0018      	movs	r0, r3
    1492:	4b43      	ldr	r3, [pc, #268]	; (15a0 <fill_alarm+0x11c>)
    1494:	4798      	blx	r3
    1496:	0003      	movs	r3, r0
    1498:	627b      	str	r3, [r7, #36]	; 0x24
	convert_timestamp_to_datetime(current_ts, &current_dt.cal_alarm.datetime);
    149a:	2308      	movs	r3, #8
    149c:	18fb      	adds	r3, r7, r3
    149e:	1d1a      	adds	r2, r3, #4
    14a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14a2:	0011      	movs	r1, r2
    14a4:	0018      	movs	r0, r3
    14a6:	4b3f      	ldr	r3, [pc, #252]	; (15a4 <fill_alarm+0x120>)
    14a8:	4798      	blx	r3

	current_dt.cal_alarm.timestamp = current_ts;
    14aa:	2308      	movs	r3, #8
    14ac:	18fb      	adds	r3, r7, r3
    14ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    14b0:	60da      	str	r2, [r3, #12]

	/* complete alarm */
	switch (alarm->cal_alarm.option) {
    14b2:	683b      	ldr	r3, [r7, #0]
    14b4:	7c1b      	ldrb	r3, [r3, #16]
    14b6:	2b06      	cmp	r3, #6
    14b8:	d854      	bhi.n	1564 <fill_alarm+0xe0>
    14ba:	009a      	lsls	r2, r3, #2
    14bc:	4b3a      	ldr	r3, [pc, #232]	; (15a8 <fill_alarm+0x124>)
    14be:	18d3      	adds	r3, r2, r3
    14c0:	681b      	ldr	r3, [r3, #0]
    14c2:	469f      	mov	pc, r3
	case CALENDAR_ALARM_MATCH_SEC:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    14c4:	2308      	movs	r3, #8
    14c6:	18fb      	adds	r3, r7, r3
    14c8:	895a      	ldrh	r2, [r3, #10]
    14ca:	683b      	ldr	r3, [r7, #0]
    14cc:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    14ce:	2308      	movs	r3, #8
    14d0:	18fb      	adds	r3, r7, r3
    14d2:	7a5a      	ldrb	r2, [r3, #9]
    14d4:	683b      	ldr	r3, [r7, #0]
    14d6:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    14d8:	2308      	movs	r3, #8
    14da:	18fb      	adds	r3, r7, r3
    14dc:	7a1a      	ldrb	r2, [r3, #8]
    14de:	683b      	ldr	r3, [r7, #0]
    14e0:	721a      	strb	r2, [r3, #8]
		alarm->cal_alarm.datetime.time.hour  = current_dt.cal_alarm.datetime.time.hour;
    14e2:	2308      	movs	r3, #8
    14e4:	18fb      	adds	r3, r7, r3
    14e6:	799a      	ldrb	r2, [r3, #6]
    14e8:	683b      	ldr	r3, [r7, #0]
    14ea:	719a      	strb	r2, [r3, #6]
		alarm->cal_alarm.datetime.time.min   = current_dt.cal_alarm.datetime.time.min;
    14ec:	2308      	movs	r3, #8
    14ee:	18fb      	adds	r3, r7, r3
    14f0:	795a      	ldrb	r2, [r3, #5]
    14f2:	683b      	ldr	r3, [r7, #0]
    14f4:	715a      	strb	r2, [r3, #5]
		break;
    14f6:	e036      	b.n	1566 <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_MIN:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    14f8:	2308      	movs	r3, #8
    14fa:	18fb      	adds	r3, r7, r3
    14fc:	895a      	ldrh	r2, [r3, #10]
    14fe:	683b      	ldr	r3, [r7, #0]
    1500:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    1502:	2308      	movs	r3, #8
    1504:	18fb      	adds	r3, r7, r3
    1506:	7a5a      	ldrb	r2, [r3, #9]
    1508:	683b      	ldr	r3, [r7, #0]
    150a:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    150c:	2308      	movs	r3, #8
    150e:	18fb      	adds	r3, r7, r3
    1510:	7a1a      	ldrb	r2, [r3, #8]
    1512:	683b      	ldr	r3, [r7, #0]
    1514:	721a      	strb	r2, [r3, #8]
		alarm->cal_alarm.datetime.time.hour  = current_dt.cal_alarm.datetime.time.hour;
    1516:	2308      	movs	r3, #8
    1518:	18fb      	adds	r3, r7, r3
    151a:	799a      	ldrb	r2, [r3, #6]
    151c:	683b      	ldr	r3, [r7, #0]
    151e:	719a      	strb	r2, [r3, #6]
		break;
    1520:	e021      	b.n	1566 <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_HOUR:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    1522:	2308      	movs	r3, #8
    1524:	18fb      	adds	r3, r7, r3
    1526:	895a      	ldrh	r2, [r3, #10]
    1528:	683b      	ldr	r3, [r7, #0]
    152a:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    152c:	2308      	movs	r3, #8
    152e:	18fb      	adds	r3, r7, r3
    1530:	7a5a      	ldrb	r2, [r3, #9]
    1532:	683b      	ldr	r3, [r7, #0]
    1534:	725a      	strb	r2, [r3, #9]
		alarm->cal_alarm.datetime.date.day   = current_dt.cal_alarm.datetime.date.day;
    1536:	2308      	movs	r3, #8
    1538:	18fb      	adds	r3, r7, r3
    153a:	7a1a      	ldrb	r2, [r3, #8]
    153c:	683b      	ldr	r3, [r7, #0]
    153e:	721a      	strb	r2, [r3, #8]
		break;
    1540:	e011      	b.n	1566 <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_DAY:
		alarm->cal_alarm.datetime.date.year  = current_dt.cal_alarm.datetime.date.year;
    1542:	2308      	movs	r3, #8
    1544:	18fb      	adds	r3, r7, r3
    1546:	895a      	ldrh	r2, [r3, #10]
    1548:	683b      	ldr	r3, [r7, #0]
    154a:	815a      	strh	r2, [r3, #10]
		alarm->cal_alarm.datetime.date.month = current_dt.cal_alarm.datetime.date.month;
    154c:	2308      	movs	r3, #8
    154e:	18fb      	adds	r3, r7, r3
    1550:	7a5a      	ldrb	r2, [r3, #9]
    1552:	683b      	ldr	r3, [r7, #0]
    1554:	725a      	strb	r2, [r3, #9]
		break;
    1556:	e006      	b.n	1566 <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_MONTH:
		alarm->cal_alarm.datetime.date.year = current_dt.cal_alarm.datetime.date.year;
    1558:	2308      	movs	r3, #8
    155a:	18fb      	adds	r3, r7, r3
    155c:	895a      	ldrh	r2, [r3, #10]
    155e:	683b      	ldr	r3, [r7, #0]
    1560:	815a      	strh	r2, [r3, #10]
		break;
    1562:	e000      	b.n	1566 <fill_alarm+0xe2>
	case CALENDAR_ALARM_MATCH_YEAR:
		break;
	default:
		break;
    1564:	46c0      	nop			; (mov r8, r8)
	}

	/* fill up the timestamp */
	tmp                        = convert_datetime_to_timestamp(&alarm->cal_alarm.datetime);
    1566:	683b      	ldr	r3, [r7, #0]
    1568:	3304      	adds	r3, #4
    156a:	0018      	movs	r0, r3
    156c:	4b0f      	ldr	r3, [pc, #60]	; (15ac <fill_alarm+0x128>)
    156e:	4798      	blx	r3
    1570:	0003      	movs	r3, r0
    1572:	623b      	str	r3, [r7, #32]
	alarm->cal_alarm.timestamp = tmp;
    1574:	683b      	ldr	r3, [r7, #0]
    1576:	6a3a      	ldr	r2, [r7, #32]
    1578:	60da      	str	r2, [r3, #12]

	/* calibrate the timestamp */
	calibrate_timestamp(alarm, &current_dt);
    157a:	2308      	movs	r3, #8
    157c:	18fa      	adds	r2, r7, r3
    157e:	683b      	ldr	r3, [r7, #0]
    1580:	0011      	movs	r1, r2
    1582:	0018      	movs	r0, r3
    1584:	4b0a      	ldr	r3, [pc, #40]	; (15b0 <fill_alarm+0x12c>)
    1586:	4798      	blx	r3
	convert_timestamp_to_datetime(alarm->cal_alarm.timestamp, &alarm->cal_alarm.datetime);
    1588:	683b      	ldr	r3, [r7, #0]
    158a:	68da      	ldr	r2, [r3, #12]
    158c:	683b      	ldr	r3, [r7, #0]
    158e:	3304      	adds	r3, #4
    1590:	0019      	movs	r1, r3
    1592:	0010      	movs	r0, r2
    1594:	4b03      	ldr	r3, [pc, #12]	; (15a4 <fill_alarm+0x120>)
    1596:	4798      	blx	r3
}
    1598:	46c0      	nop			; (mov r8, r8)
    159a:	46bd      	mov	sp, r7
    159c:	b00a      	add	sp, #40	; 0x28
    159e:	bd80      	pop	{r7, pc}
    15a0:	00002ae5 	.word	0x00002ae5
    15a4:	00001105 	.word	0x00001105
    15a8:	000084d4 	.word	0x000084d4
    15ac:	00001261 	.word	0x00001261
    15b0:	00001395 	.word	0x00001395

000015b4 <calendar_os_init>:
}

/** \brief Initialize Calendar
 */
int32_t calendar_os_init(struct calendar_os_descriptor *const calendar, const void *hw)
{
    15b4:	b580      	push	{r7, lr}
    15b6:	b084      	sub	sp, #16
    15b8:	af00      	add	r7, sp, #0
    15ba:	6078      	str	r0, [r7, #4]
    15bc:	6039      	str	r1, [r7, #0]
	int32_t ret = 0;
    15be:	2300      	movs	r3, #0
    15c0:	60fb      	str	r3, [r7, #12]

	/* Sanity check arguments */
	ASSERT(calendar);
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	1e5a      	subs	r2, r3, #1
    15c6:	4193      	sbcs	r3, r2
    15c8:	b2d8      	uxtb	r0, r3
    15ca:	23c4      	movs	r3, #196	; 0xc4
    15cc:	33ff      	adds	r3, #255	; 0xff
    15ce:	001a      	movs	r2, r3
    15d0:	4b11      	ldr	r3, [pc, #68]	; (1618 <calendar_os_init+0x64>)
    15d2:	0019      	movs	r1, r3
    15d4:	4b11      	ldr	r3, [pc, #68]	; (161c <calendar_os_init+0x68>)
    15d6:	4798      	blx	r3

	ret = sem_init(&calendar->alarm_sem, 0);
    15d8:	687b      	ldr	r3, [r7, #4]
    15da:	3314      	adds	r3, #20
    15dc:	2100      	movs	r1, #0
    15de:	0018      	movs	r0, r3
    15e0:	4b0f      	ldr	r3, [pc, #60]	; (1620 <calendar_os_init+0x6c>)
    15e2:	4798      	blx	r3
    15e4:	0003      	movs	r3, r0
    15e6:	60fb      	str	r3, [r7, #12]
	if (ret < 0) {
    15e8:	68fb      	ldr	r3, [r7, #12]
    15ea:	2b00      	cmp	r3, #0
    15ec:	da01      	bge.n	15f2 <calendar_os_init+0x3e>
		return ret;
    15ee:	68fb      	ldr	r3, [r7, #12]
    15f0:	e00e      	b.n	1610 <calendar_os_init+0x5c>
	}

	calendar->device.hw = (void *)hw;
    15f2:	687b      	ldr	r3, [r7, #4]
    15f4:	683a      	ldr	r2, [r7, #0]
    15f6:	601a      	str	r2, [r3, #0]

	_calendar_init(&calendar->device);
    15f8:	687b      	ldr	r3, [r7, #4]
    15fa:	0018      	movs	r0, r3
    15fc:	4b09      	ldr	r3, [pc, #36]	; (1624 <calendar_os_init+0x70>)
    15fe:	4798      	blx	r3
	_calendar_enable(&calendar->device);
    1600:	687b      	ldr	r3, [r7, #4]
    1602:	0018      	movs	r0, r3
    1604:	4b08      	ldr	r3, [pc, #32]	; (1628 <calendar_os_init+0x74>)
    1606:	4798      	blx	r3
	calendar->alarms.head = NULL;
    1608:	687b      	ldr	r3, [r7, #4]
    160a:	2200      	movs	r2, #0
    160c:	611a      	str	r2, [r3, #16]

	return 0;
    160e:	2300      	movs	r3, #0
}
    1610:	0018      	movs	r0, r3
    1612:	46bd      	mov	sp, r7
    1614:	b004      	add	sp, #16
    1616:	bd80      	pop	{r7, pc}
    1618:	000084f0 	.word	0x000084f0
    161c:	00001b19 	.word	0x00001b19
    1620:	00004629 	.word	0x00004629
    1624:	000029f5 	.word	0x000029f5
    1628:	00002a95 	.word	0x00002a95

0000162c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    162c:	b580      	push	{r7, lr}
    162e:	b084      	sub	sp, #16
    1630:	af00      	add	r7, sp, #0
    1632:	60f8      	str	r0, [r7, #12]
    1634:	60b9      	str	r1, [r7, #8]
    1636:	1dbb      	adds	r3, r7, #6
    1638:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    163a:	68fb      	ldr	r3, [r7, #12]
    163c:	2b00      	cmp	r3, #0
    163e:	d004      	beq.n	164a <io_write+0x1e>
    1640:	68bb      	ldr	r3, [r7, #8]
    1642:	2b00      	cmp	r3, #0
    1644:	d001      	beq.n	164a <io_write+0x1e>
    1646:	2301      	movs	r3, #1
    1648:	e000      	b.n	164c <io_write+0x20>
    164a:	2300      	movs	r3, #0
    164c:	1c1a      	adds	r2, r3, #0
    164e:	2301      	movs	r3, #1
    1650:	4013      	ands	r3, r2
    1652:	b2db      	uxtb	r3, r3
    1654:	4908      	ldr	r1, [pc, #32]	; (1678 <io_write+0x4c>)
    1656:	2234      	movs	r2, #52	; 0x34
    1658:	0018      	movs	r0, r3
    165a:	4b08      	ldr	r3, [pc, #32]	; (167c <io_write+0x50>)
    165c:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    165e:	68fb      	ldr	r3, [r7, #12]
    1660:	681b      	ldr	r3, [r3, #0]
    1662:	1dba      	adds	r2, r7, #6
    1664:	8812      	ldrh	r2, [r2, #0]
    1666:	68b9      	ldr	r1, [r7, #8]
    1668:	68f8      	ldr	r0, [r7, #12]
    166a:	4798      	blx	r3
    166c:	0003      	movs	r3, r0
}
    166e:	0018      	movs	r0, r3
    1670:	46bd      	mov	sp, r7
    1672:	b004      	add	sp, #16
    1674:	bd80      	pop	{r7, pc}
    1676:	46c0      	nop			; (mov r8, r8)
    1678:	00008510 	.word	0x00008510
    167c:	00001b19 	.word	0x00001b19

00001680 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1680:	b580      	push	{r7, lr}
    1682:	b084      	sub	sp, #16
    1684:	af00      	add	r7, sp, #0
    1686:	60f8      	str	r0, [r7, #12]
    1688:	60b9      	str	r1, [r7, #8]
    168a:	1dbb      	adds	r3, r7, #6
    168c:	801a      	strh	r2, [r3, #0]
	ASSERT(io_descr && buf);
    168e:	68fb      	ldr	r3, [r7, #12]
    1690:	2b00      	cmp	r3, #0
    1692:	d004      	beq.n	169e <io_read+0x1e>
    1694:	68bb      	ldr	r3, [r7, #8]
    1696:	2b00      	cmp	r3, #0
    1698:	d001      	beq.n	169e <io_read+0x1e>
    169a:	2301      	movs	r3, #1
    169c:	e000      	b.n	16a0 <io_read+0x20>
    169e:	2300      	movs	r3, #0
    16a0:	1c1a      	adds	r2, r3, #0
    16a2:	2301      	movs	r3, #1
    16a4:	4013      	ands	r3, r2
    16a6:	b2db      	uxtb	r3, r3
    16a8:	4908      	ldr	r1, [pc, #32]	; (16cc <io_read+0x4c>)
    16aa:	223d      	movs	r2, #61	; 0x3d
    16ac:	0018      	movs	r0, r3
    16ae:	4b08      	ldr	r3, [pc, #32]	; (16d0 <io_read+0x50>)
    16b0:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    16b2:	68fb      	ldr	r3, [r7, #12]
    16b4:	685b      	ldr	r3, [r3, #4]
    16b6:	1dba      	adds	r2, r7, #6
    16b8:	8812      	ldrh	r2, [r2, #0]
    16ba:	68b9      	ldr	r1, [r7, #8]
    16bc:	68f8      	ldr	r0, [r7, #12]
    16be:	4798      	blx	r3
    16c0:	0003      	movs	r3, r0
}
    16c2:	0018      	movs	r0, r3
    16c4:	46bd      	mov	sp, r7
    16c6:	b004      	add	sp, #16
    16c8:	bd80      	pop	{r7, pc}
    16ca:	46c0      	nop			; (mov r8, r8)
    16cc:	00008510 	.word	0x00008510
    16d0:	00001b19 	.word	0x00001b19

000016d4 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    16d4:	b580      	push	{r7, lr}
    16d6:	b084      	sub	sp, #16
    16d8:	af00      	add	r7, sp, #0
    16da:	60f8      	str	r0, [r7, #12]
    16dc:	60b9      	str	r1, [r7, #8]
    16de:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    16e0:	68fb      	ldr	r3, [r7, #12]
    16e2:	2b00      	cmp	r3, #0
    16e4:	d004      	beq.n	16f0 <pwm_init+0x1c>
    16e6:	68bb      	ldr	r3, [r7, #8]
    16e8:	2b00      	cmp	r3, #0
    16ea:	d001      	beq.n	16f0 <pwm_init+0x1c>
    16ec:	2301      	movs	r3, #1
    16ee:	e000      	b.n	16f2 <pwm_init+0x1e>
    16f0:	2300      	movs	r3, #0
    16f2:	1c1a      	adds	r2, r3, #0
    16f4:	2301      	movs	r3, #1
    16f6:	4013      	ands	r3, r2
    16f8:	b2db      	uxtb	r3, r3
    16fa:	490b      	ldr	r1, [pc, #44]	; (1728 <pwm_init+0x54>)
    16fc:	2233      	movs	r2, #51	; 0x33
    16fe:	0018      	movs	r0, r3
    1700:	4b0a      	ldr	r3, [pc, #40]	; (172c <pwm_init+0x58>)
    1702:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1704:	68fb      	ldr	r3, [r7, #12]
    1706:	68ba      	ldr	r2, [r7, #8]
    1708:	0011      	movs	r1, r2
    170a:	0018      	movs	r0, r3
    170c:	4b08      	ldr	r3, [pc, #32]	; (1730 <pwm_init+0x5c>)
    170e:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1710:	68fb      	ldr	r3, [r7, #12]
    1712:	4a08      	ldr	r2, [pc, #32]	; (1734 <pwm_init+0x60>)
    1714:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1716:	68fb      	ldr	r3, [r7, #12]
    1718:	4a07      	ldr	r2, [pc, #28]	; (1738 <pwm_init+0x64>)
    171a:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    171c:	2300      	movs	r3, #0
}
    171e:	0018      	movs	r0, r3
    1720:	46bd      	mov	sp, r7
    1722:	b004      	add	sp, #16
    1724:	bd80      	pop	{r7, pc}
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	00008524 	.word	0x00008524
    172c:	00001b19 	.word	0x00001b19
    1730:	0000347d 	.word	0x0000347d
    1734:	00001825 	.word	0x00001825
    1738:	0000184b 	.word	0x0000184b

0000173c <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    173c:	b580      	push	{r7, lr}
    173e:	b082      	sub	sp, #8
    1740:	af00      	add	r7, sp, #0
    1742:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1744:	687b      	ldr	r3, [r7, #4]
    1746:	1e5a      	subs	r2, r3, #1
    1748:	4193      	sbcs	r3, r2
    174a:	b2db      	uxtb	r3, r3
    174c:	490b      	ldr	r1, [pc, #44]	; (177c <pwm_enable+0x40>)
    174e:	224a      	movs	r2, #74	; 0x4a
    1750:	0018      	movs	r0, r3
    1752:	4b0b      	ldr	r3, [pc, #44]	; (1780 <pwm_enable+0x44>)
    1754:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	0018      	movs	r0, r3
    175a:	4b0a      	ldr	r3, [pc, #40]	; (1784 <pwm_enable+0x48>)
    175c:	4798      	blx	r3
    175e:	1e03      	subs	r3, r0, #0
    1760:	d002      	beq.n	1768 <pwm_enable+0x2c>
		return ERR_DENIED;
    1762:	2311      	movs	r3, #17
    1764:	425b      	negs	r3, r3
    1766:	e004      	b.n	1772 <pwm_enable+0x36>
	}
	_pwm_enable(&descr->device);
    1768:	687b      	ldr	r3, [r7, #4]
    176a:	0018      	movs	r0, r3
    176c:	4b06      	ldr	r3, [pc, #24]	; (1788 <pwm_enable+0x4c>)
    176e:	4798      	blx	r3

	return ERR_NONE;
    1770:	2300      	movs	r3, #0
}
    1772:	0018      	movs	r0, r3
    1774:	46bd      	mov	sp, r7
    1776:	b002      	add	sp, #8
    1778:	bd80      	pop	{r7, pc}
    177a:	46c0      	nop			; (mov r8, r8)
    177c:	00008524 	.word	0x00008524
    1780:	00001b19 	.word	0x00001b19
    1784:	00003841 	.word	0x00003841
    1788:	000036e5 	.word	0x000036e5

0000178c <pwm_disable>:

/**
 * \brief Stop pwm
 */
int32_t pwm_disable(struct pwm_descriptor *const descr)
{
    178c:	b580      	push	{r7, lr}
    178e:	b082      	sub	sp, #8
    1790:	af00      	add	r7, sp, #0
    1792:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1794:	687b      	ldr	r3, [r7, #4]
    1796:	1e5a      	subs	r2, r3, #1
    1798:	4193      	sbcs	r3, r2
    179a:	b2db      	uxtb	r3, r3
    179c:	490d      	ldr	r1, [pc, #52]	; (17d4 <pwm_disable+0x48>)
    179e:	2258      	movs	r2, #88	; 0x58
    17a0:	0018      	movs	r0, r3
    17a2:	4b0d      	ldr	r3, [pc, #52]	; (17d8 <pwm_disable+0x4c>)
    17a4:	4798      	blx	r3
	if (!_pwm_is_enabled(&descr->device)) {
    17a6:	687b      	ldr	r3, [r7, #4]
    17a8:	0018      	movs	r0, r3
    17aa:	4b0c      	ldr	r3, [pc, #48]	; (17dc <pwm_disable+0x50>)
    17ac:	4798      	blx	r3
    17ae:	0003      	movs	r3, r0
    17b0:	001a      	movs	r2, r3
    17b2:	2301      	movs	r3, #1
    17b4:	4053      	eors	r3, r2
    17b6:	b2db      	uxtb	r3, r3
    17b8:	2b00      	cmp	r3, #0
    17ba:	d002      	beq.n	17c2 <pwm_disable+0x36>
		return ERR_DENIED;
    17bc:	2311      	movs	r3, #17
    17be:	425b      	negs	r3, r3
    17c0:	e004      	b.n	17cc <pwm_disable+0x40>
	}
	_pwm_disable(&descr->device);
    17c2:	687b      	ldr	r3, [r7, #4]
    17c4:	0018      	movs	r0, r3
    17c6:	4b06      	ldr	r3, [pc, #24]	; (17e0 <pwm_disable+0x54>)
    17c8:	4798      	blx	r3

	return ERR_NONE;
    17ca:	2300      	movs	r3, #0
}
    17cc:	0018      	movs	r0, r3
    17ce:	46bd      	mov	sp, r7
    17d0:	b002      	add	sp, #8
    17d2:	bd80      	pop	{r7, pc}
    17d4:	00008524 	.word	0x00008524
    17d8:	00001b19 	.word	0x00001b19
    17dc:	00003841 	.word	0x00003841
    17e0:	00003705 	.word	0x00003705

000017e4 <pwm_set_parameters>:

/**
 * \brief Change PWM parameter
 */
int32_t pwm_set_parameters(struct pwm_descriptor *const descr, const pwm_period_t period, const pwm_period_t duty_cycle)
{
    17e4:	b580      	push	{r7, lr}
    17e6:	b084      	sub	sp, #16
    17e8:	af00      	add	r7, sp, #0
    17ea:	60f8      	str	r0, [r7, #12]
    17ec:	60b9      	str	r1, [r7, #8]
    17ee:	607a      	str	r2, [r7, #4]
	ASSERT(descr);
    17f0:	68fb      	ldr	r3, [r7, #12]
    17f2:	1e5a      	subs	r2, r3, #1
    17f4:	4193      	sbcs	r3, r2
    17f6:	b2db      	uxtb	r3, r3
    17f8:	4907      	ldr	r1, [pc, #28]	; (1818 <pwm_set_parameters+0x34>)
    17fa:	227c      	movs	r2, #124	; 0x7c
    17fc:	0018      	movs	r0, r3
    17fe:	4b07      	ldr	r3, [pc, #28]	; (181c <pwm_set_parameters+0x38>)
    1800:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
    1802:	68fb      	ldr	r3, [r7, #12]
    1804:	687a      	ldr	r2, [r7, #4]
    1806:	68b9      	ldr	r1, [r7, #8]
    1808:	0018      	movs	r0, r3
    180a:	4b05      	ldr	r3, [pc, #20]	; (1820 <pwm_set_parameters+0x3c>)
    180c:	4798      	blx	r3
	return ERR_NONE;
    180e:	2300      	movs	r3, #0
}
    1810:	0018      	movs	r0, r3
    1812:	46bd      	mov	sp, r7
    1814:	b004      	add	sp, #16
    1816:	bd80      	pop	{r7, pc}
    1818:	00008524 	.word	0x00008524
    181c:	00001b19 	.word	0x00001b19
    1820:	00003725 	.word	0x00003725

00001824 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1824:	b580      	push	{r7, lr}
    1826:	b084      	sub	sp, #16
    1828:	af00      	add	r7, sp, #0
    182a:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    182c:	687b      	ldr	r3, [r7, #4]
    182e:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    1830:	68fb      	ldr	r3, [r7, #12]
    1832:	695b      	ldr	r3, [r3, #20]
    1834:	2b00      	cmp	r3, #0
    1836:	d004      	beq.n	1842 <pwm_period_expired+0x1e>
		descr->pwm_cb.period(descr);
    1838:	68fb      	ldr	r3, [r7, #12]
    183a:	695b      	ldr	r3, [r3, #20]
    183c:	68fa      	ldr	r2, [r7, #12]
    183e:	0010      	movs	r0, r2
    1840:	4798      	blx	r3
	}
}
    1842:	46c0      	nop			; (mov r8, r8)
    1844:	46bd      	mov	sp, r7
    1846:	b004      	add	sp, #16
    1848:	bd80      	pop	{r7, pc}

0000184a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    184a:	b580      	push	{r7, lr}
    184c:	b084      	sub	sp, #16
    184e:	af00      	add	r7, sp, #0
    1850:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1852:	687b      	ldr	r3, [r7, #4]
    1854:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    1856:	68fb      	ldr	r3, [r7, #12]
    1858:	699b      	ldr	r3, [r3, #24]
    185a:	2b00      	cmp	r3, #0
    185c:	d004      	beq.n	1868 <pwm_detect_fault+0x1e>
		descr->pwm_cb.error(descr);
    185e:	68fb      	ldr	r3, [r7, #12]
    1860:	699b      	ldr	r3, [r3, #24]
    1862:	68fa      	ldr	r2, [r7, #12]
    1864:	0010      	movs	r0, r2
    1866:	4798      	blx	r3
	}
}
    1868:	46c0      	nop			; (mov r8, r8)
    186a:	46bd      	mov	sp, r7
    186c:	b004      	add	sp, #16
    186e:	bd80      	pop	{r7, pc}

00001870 <usart_sync_init>:

/**
 * \brief Initialize usart interface
 */
int32_t usart_sync_init(struct usart_sync_descriptor *const descr, void *const hw, void *const func)
{
    1870:	b580      	push	{r7, lr}
    1872:	b086      	sub	sp, #24
    1874:	af00      	add	r7, sp, #0
    1876:	60f8      	str	r0, [r7, #12]
    1878:	60b9      	str	r1, [r7, #8]
    187a:	607a      	str	r2, [r7, #4]
	int32_t init_status;
	ASSERT(descr && hw);
    187c:	68fb      	ldr	r3, [r7, #12]
    187e:	2b00      	cmp	r3, #0
    1880:	d004      	beq.n	188c <usart_sync_init+0x1c>
    1882:	68bb      	ldr	r3, [r7, #8]
    1884:	2b00      	cmp	r3, #0
    1886:	d001      	beq.n	188c <usart_sync_init+0x1c>
    1888:	2301      	movs	r3, #1
    188a:	e000      	b.n	188e <usart_sync_init+0x1e>
    188c:	2300      	movs	r3, #0
    188e:	1c1a      	adds	r2, r3, #0
    1890:	2301      	movs	r3, #1
    1892:	4013      	ands	r3, r2
    1894:	b2db      	uxtb	r3, r3
    1896:	490f      	ldr	r1, [pc, #60]	; (18d4 <usart_sync_init+0x64>)
    1898:	2234      	movs	r2, #52	; 0x34
    189a:	0018      	movs	r0, r3
    189c:	4b0e      	ldr	r3, [pc, #56]	; (18d8 <usart_sync_init+0x68>)
    189e:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
    18a0:	68fb      	ldr	r3, [r7, #12]
    18a2:	3308      	adds	r3, #8
    18a4:	68ba      	ldr	r2, [r7, #8]
    18a6:	0011      	movs	r1, r2
    18a8:	0018      	movs	r0, r3
    18aa:	4b0c      	ldr	r3, [pc, #48]	; (18dc <usart_sync_init+0x6c>)
    18ac:	4798      	blx	r3
    18ae:	0003      	movs	r3, r0
    18b0:	617b      	str	r3, [r7, #20]
	if (init_status) {
    18b2:	697b      	ldr	r3, [r7, #20]
    18b4:	2b00      	cmp	r3, #0
    18b6:	d001      	beq.n	18bc <usart_sync_init+0x4c>
		return init_status;
    18b8:	697b      	ldr	r3, [r7, #20]
    18ba:	e006      	b.n	18ca <usart_sync_init+0x5a>
	}

	descr->io.read  = usart_sync_read;
    18bc:	68fb      	ldr	r3, [r7, #12]
    18be:	4a08      	ldr	r2, [pc, #32]	; (18e0 <usart_sync_init+0x70>)
    18c0:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_sync_write;
    18c2:	68fb      	ldr	r3, [r7, #12]
    18c4:	4a07      	ldr	r2, [pc, #28]	; (18e4 <usart_sync_init+0x74>)
    18c6:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    18c8:	2300      	movs	r3, #0
}
    18ca:	0018      	movs	r0, r3
    18cc:	46bd      	mov	sp, r7
    18ce:	b006      	add	sp, #24
    18d0:	bd80      	pop	{r7, pc}
    18d2:	46c0      	nop			; (mov r8, r8)
    18d4:	0000853c 	.word	0x0000853c
    18d8:	00001b19 	.word	0x00001b19
    18dc:	00002da9 	.word	0x00002da9
    18e0:	00001a7d 	.word	0x00001a7d
    18e4:	000019a9 	.word	0x000019a9

000018e8 <usart_sync_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_sync_enable(struct usart_sync_descriptor *const descr)
{
    18e8:	b580      	push	{r7, lr}
    18ea:	b082      	sub	sp, #8
    18ec:	af00      	add	r7, sp, #0
    18ee:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    18f0:	687b      	ldr	r3, [r7, #4]
    18f2:	1e5a      	subs	r2, r3, #1
    18f4:	4193      	sbcs	r3, r2
    18f6:	b2db      	uxtb	r3, r3
    18f8:	4907      	ldr	r1, [pc, #28]	; (1918 <usart_sync_enable+0x30>)
    18fa:	2253      	movs	r2, #83	; 0x53
    18fc:	0018      	movs	r0, r3
    18fe:	4b07      	ldr	r3, [pc, #28]	; (191c <usart_sync_enable+0x34>)
    1900:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
    1902:	687b      	ldr	r3, [r7, #4]
    1904:	3308      	adds	r3, #8
    1906:	0018      	movs	r0, r3
    1908:	4b05      	ldr	r3, [pc, #20]	; (1920 <usart_sync_enable+0x38>)
    190a:	4798      	blx	r3

	return ERR_NONE;
    190c:	2300      	movs	r3, #0
}
    190e:	0018      	movs	r0, r3
    1910:	46bd      	mov	sp, r7
    1912:	b002      	add	sp, #8
    1914:	bd80      	pop	{r7, pc}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	0000853c 	.word	0x0000853c
    191c:	00001b19 	.word	0x00001b19
    1920:	00002de9 	.word	0x00002de9

00001924 <usart_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t usart_sync_get_io_descriptor(struct usart_sync_descriptor *const descr, struct io_descriptor **io)
{
    1924:	b580      	push	{r7, lr}
    1926:	b082      	sub	sp, #8
    1928:	af00      	add	r7, sp, #0
    192a:	6078      	str	r0, [r7, #4]
    192c:	6039      	str	r1, [r7, #0]
	ASSERT(descr && io);
    192e:	687b      	ldr	r3, [r7, #4]
    1930:	2b00      	cmp	r3, #0
    1932:	d004      	beq.n	193e <usart_sync_get_io_descriptor+0x1a>
    1934:	683b      	ldr	r3, [r7, #0]
    1936:	2b00      	cmp	r3, #0
    1938:	d001      	beq.n	193e <usart_sync_get_io_descriptor+0x1a>
    193a:	2301      	movs	r3, #1
    193c:	e000      	b.n	1940 <usart_sync_get_io_descriptor+0x1c>
    193e:	2300      	movs	r3, #0
    1940:	1c1a      	adds	r2, r3, #0
    1942:	2301      	movs	r3, #1
    1944:	4013      	ands	r3, r2
    1946:	b2db      	uxtb	r3, r3
    1948:	4906      	ldr	r1, [pc, #24]	; (1964 <usart_sync_get_io_descriptor+0x40>)
    194a:	2269      	movs	r2, #105	; 0x69
    194c:	0018      	movs	r0, r3
    194e:	4b06      	ldr	r3, [pc, #24]	; (1968 <usart_sync_get_io_descriptor+0x44>)
    1950:	4798      	blx	r3

	*io = &descr->io;
    1952:	687a      	ldr	r2, [r7, #4]
    1954:	683b      	ldr	r3, [r7, #0]
    1956:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    1958:	2300      	movs	r3, #0
}
    195a:	0018      	movs	r0, r3
    195c:	46bd      	mov	sp, r7
    195e:	b002      	add	sp, #8
    1960:	bd80      	pop	{r7, pc}
    1962:	46c0      	nop			; (mov r8, r8)
    1964:	0000853c 	.word	0x0000853c
    1968:	00001b19 	.word	0x00001b19

0000196c <usart_sync_is_rx_not_empty>:

/**
 * \brief Check if the usart receiver is not empty
 */
int32_t usart_sync_is_rx_not_empty(const struct usart_sync_descriptor *const descr)
{
    196c:	b580      	push	{r7, lr}
    196e:	b082      	sub	sp, #8
    1970:	af00      	add	r7, sp, #0
    1972:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    1974:	687b      	ldr	r3, [r7, #4]
    1976:	1e5a      	subs	r2, r3, #1
    1978:	4193      	sbcs	r3, r2
    197a:	b2db      	uxtb	r3, r3
    197c:	4907      	ldr	r1, [pc, #28]	; (199c <usart_sync_is_rx_not_empty+0x30>)
    197e:	22d7      	movs	r2, #215	; 0xd7
    1980:	0018      	movs	r0, r3
    1982:	4b07      	ldr	r3, [pc, #28]	; (19a0 <usart_sync_is_rx_not_empty+0x34>)
    1984:	4798      	blx	r3
	return _usart_sync_is_byte_received(&descr->device);
    1986:	687b      	ldr	r3, [r7, #4]
    1988:	3308      	adds	r3, #8
    198a:	0018      	movs	r0, r3
    198c:	4b05      	ldr	r3, [pc, #20]	; (19a4 <usart_sync_is_rx_not_empty+0x38>)
    198e:	4798      	blx	r3
    1990:	0003      	movs	r3, r0
}
    1992:	0018      	movs	r0, r3
    1994:	46bd      	mov	sp, r7
    1996:	b002      	add	sp, #8
    1998:	bd80      	pop	{r7, pc}
    199a:	46c0      	nop			; (mov r8, r8)
    199c:	0000853c 	.word	0x0000853c
    19a0:	00001b19 	.word	0x00001b19
    19a4:	00002e99 	.word	0x00002e99

000019a8 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    19a8:	b580      	push	{r7, lr}
    19aa:	b086      	sub	sp, #24
    19ac:	af00      	add	r7, sp, #0
    19ae:	60f8      	str	r0, [r7, #12]
    19b0:	60b9      	str	r1, [r7, #8]
    19b2:	1dbb      	adds	r3, r7, #6
    19b4:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    19b6:	2300      	movs	r3, #0
    19b8:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    19ba:	68fb      	ldr	r3, [r7, #12]
    19bc:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    19be:	68fb      	ldr	r3, [r7, #12]
    19c0:	2b00      	cmp	r3, #0
    19c2:	d008      	beq.n	19d6 <usart_sync_write+0x2e>
    19c4:	68bb      	ldr	r3, [r7, #8]
    19c6:	2b00      	cmp	r3, #0
    19c8:	d005      	beq.n	19d6 <usart_sync_write+0x2e>
    19ca:	1dbb      	adds	r3, r7, #6
    19cc:	881b      	ldrh	r3, [r3, #0]
    19ce:	2b00      	cmp	r3, #0
    19d0:	d001      	beq.n	19d6 <usart_sync_write+0x2e>
    19d2:	2301      	movs	r3, #1
    19d4:	e000      	b.n	19d8 <usart_sync_write+0x30>
    19d6:	2300      	movs	r3, #0
    19d8:	1c1a      	adds	r2, r3, #0
    19da:	2301      	movs	r3, #1
    19dc:	4013      	ands	r3, r2
    19de:	b2db      	uxtb	r3, r3
    19e0:	4921      	ldr	r1, [pc, #132]	; (1a68 <usart_sync_write+0xc0>)
    19e2:	22f1      	movs	r2, #241	; 0xf1
    19e4:	0018      	movs	r0, r3
    19e6:	4b21      	ldr	r3, [pc, #132]	; (1a6c <usart_sync_write+0xc4>)
    19e8:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	693b      	ldr	r3, [r7, #16]
    19ee:	3308      	adds	r3, #8
    19f0:	0018      	movs	r0, r3
    19f2:	4b1f      	ldr	r3, [pc, #124]	; (1a70 <usart_sync_write+0xc8>)
    19f4:	4798      	blx	r3
    19f6:	0003      	movs	r3, r0
    19f8:	001a      	movs	r2, r3
    19fa:	2301      	movs	r3, #1
    19fc:	4053      	eors	r3, r2
    19fe:	b2db      	uxtb	r3, r3
    1a00:	2b00      	cmp	r3, #0
    1a02:	d1f3      	bne.n	19ec <usart_sync_write+0x44>
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
    1a04:	693b      	ldr	r3, [r7, #16]
    1a06:	3308      	adds	r3, #8
    1a08:	0018      	movs	r0, r3
    1a0a:	68ba      	ldr	r2, [r7, #8]
    1a0c:	697b      	ldr	r3, [r7, #20]
    1a0e:	18d3      	adds	r3, r2, r3
    1a10:	781b      	ldrb	r3, [r3, #0]
    1a12:	0019      	movs	r1, r3
    1a14:	4b17      	ldr	r3, [pc, #92]	; (1a74 <usart_sync_write+0xcc>)
    1a16:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
    1a18:	46c0      	nop			; (mov r8, r8)
    1a1a:	693b      	ldr	r3, [r7, #16]
    1a1c:	3308      	adds	r3, #8
    1a1e:	0018      	movs	r0, r3
    1a20:	4b13      	ldr	r3, [pc, #76]	; (1a70 <usart_sync_write+0xc8>)
    1a22:	4798      	blx	r3
    1a24:	0003      	movs	r3, r0
    1a26:	001a      	movs	r2, r3
    1a28:	2301      	movs	r3, #1
    1a2a:	4053      	eors	r3, r2
    1a2c:	b2db      	uxtb	r3, r3
    1a2e:	2b00      	cmp	r3, #0
    1a30:	d1f3      	bne.n	1a1a <usart_sync_write+0x72>
			;
	} while (++offset < length);
    1a32:	697b      	ldr	r3, [r7, #20]
    1a34:	3301      	adds	r3, #1
    1a36:	617b      	str	r3, [r7, #20]
    1a38:	1dbb      	adds	r3, r7, #6
    1a3a:	881b      	ldrh	r3, [r3, #0]
    1a3c:	697a      	ldr	r2, [r7, #20]
    1a3e:	429a      	cmp	r2, r3
    1a40:	d3e0      	bcc.n	1a04 <usart_sync_write+0x5c>
	while (!_usart_sync_is_transmit_done(&descr->device))
    1a42:	46c0      	nop			; (mov r8, r8)
    1a44:	693b      	ldr	r3, [r7, #16]
    1a46:	3308      	adds	r3, #8
    1a48:	0018      	movs	r0, r3
    1a4a:	4b0b      	ldr	r3, [pc, #44]	; (1a78 <usart_sync_write+0xd0>)
    1a4c:	4798      	blx	r3
    1a4e:	0003      	movs	r3, r0
    1a50:	001a      	movs	r2, r3
    1a52:	2301      	movs	r3, #1
    1a54:	4053      	eors	r3, r2
    1a56:	b2db      	uxtb	r3, r3
    1a58:	2b00      	cmp	r3, #0
    1a5a:	d1f3      	bne.n	1a44 <usart_sync_write+0x9c>
		;
	return (int32_t)offset;
    1a5c:	697b      	ldr	r3, [r7, #20]
}
    1a5e:	0018      	movs	r0, r3
    1a60:	46bd      	mov	sp, r7
    1a62:	b006      	add	sp, #24
    1a64:	bd80      	pop	{r7, pc}
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	0000853c 	.word	0x0000853c
    1a6c:	00001b19 	.word	0x00001b19
    1a70:	00002e59 	.word	0x00002e59
    1a74:	00002e09 	.word	0x00002e09
    1a78:	00002e79 	.word	0x00002e79

00001a7c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1a7c:	b590      	push	{r4, r7, lr}
    1a7e:	b087      	sub	sp, #28
    1a80:	af00      	add	r7, sp, #0
    1a82:	60f8      	str	r0, [r7, #12]
    1a84:	60b9      	str	r1, [r7, #8]
    1a86:	1dbb      	adds	r3, r7, #6
    1a88:	801a      	strh	r2, [r3, #0]
	uint32_t                      offset = 0;
    1a8a:	2300      	movs	r3, #0
    1a8c:	617b      	str	r3, [r7, #20]
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);
    1a8e:	68fb      	ldr	r3, [r7, #12]
    1a90:	613b      	str	r3, [r7, #16]

	ASSERT(io_descr && buf && length);
    1a92:	68fb      	ldr	r3, [r7, #12]
    1a94:	2b00      	cmp	r3, #0
    1a96:	d008      	beq.n	1aaa <usart_sync_read+0x2e>
    1a98:	68bb      	ldr	r3, [r7, #8]
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d005      	beq.n	1aaa <usart_sync_read+0x2e>
    1a9e:	1dbb      	adds	r3, r7, #6
    1aa0:	881b      	ldrh	r3, [r3, #0]
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	d001      	beq.n	1aaa <usart_sync_read+0x2e>
    1aa6:	2301      	movs	r3, #1
    1aa8:	e000      	b.n	1aac <usart_sync_read+0x30>
    1aaa:	2300      	movs	r3, #0
    1aac:	1c1a      	adds	r2, r3, #0
    1aae:	2301      	movs	r3, #1
    1ab0:	4013      	ands	r3, r2
    1ab2:	b2d8      	uxtb	r0, r3
    1ab4:	2386      	movs	r3, #134	; 0x86
    1ab6:	005a      	lsls	r2, r3, #1
    1ab8:	4b13      	ldr	r3, [pc, #76]	; (1b08 <usart_sync_read+0x8c>)
    1aba:	0019      	movs	r1, r3
    1abc:	4b13      	ldr	r3, [pc, #76]	; (1b0c <usart_sync_read+0x90>)
    1abe:	4798      	blx	r3
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
    1ac0:	46c0      	nop			; (mov r8, r8)
    1ac2:	693b      	ldr	r3, [r7, #16]
    1ac4:	3308      	adds	r3, #8
    1ac6:	0018      	movs	r0, r3
    1ac8:	4b11      	ldr	r3, [pc, #68]	; (1b10 <usart_sync_read+0x94>)
    1aca:	4798      	blx	r3
    1acc:	0003      	movs	r3, r0
    1ace:	001a      	movs	r2, r3
    1ad0:	2301      	movs	r3, #1
    1ad2:	4053      	eors	r3, r2
    1ad4:	b2db      	uxtb	r3, r3
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	d1f3      	bne.n	1ac2 <usart_sync_read+0x46>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
    1ada:	68ba      	ldr	r2, [r7, #8]
    1adc:	697b      	ldr	r3, [r7, #20]
    1ade:	18d4      	adds	r4, r2, r3
    1ae0:	693b      	ldr	r3, [r7, #16]
    1ae2:	3308      	adds	r3, #8
    1ae4:	0018      	movs	r0, r3
    1ae6:	4b0b      	ldr	r3, [pc, #44]	; (1b14 <usart_sync_read+0x98>)
    1ae8:	4798      	blx	r3
    1aea:	0003      	movs	r3, r0
    1aec:	7023      	strb	r3, [r4, #0]
	} while (++offset < length);
    1aee:	697b      	ldr	r3, [r7, #20]
    1af0:	3301      	adds	r3, #1
    1af2:	617b      	str	r3, [r7, #20]
    1af4:	1dbb      	adds	r3, r7, #6
    1af6:	881b      	ldrh	r3, [r3, #0]
    1af8:	697a      	ldr	r2, [r7, #20]
    1afa:	429a      	cmp	r2, r3
    1afc:	d3e0      	bcc.n	1ac0 <usart_sync_read+0x44>

	return (int32_t)offset;
    1afe:	697b      	ldr	r3, [r7, #20]
}
    1b00:	0018      	movs	r0, r3
    1b02:	46bd      	mov	sp, r7
    1b04:	b007      	add	sp, #28
    1b06:	bd90      	pop	{r4, r7, pc}
    1b08:	0000853c 	.word	0x0000853c
    1b0c:	00001b19 	.word	0x00001b19
    1b10:	00002e99 	.word	0x00002e99
    1b14:	00002e35 	.word	0x00002e35

00001b18 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    1b18:	b580      	push	{r7, lr}
    1b1a:	b084      	sub	sp, #16
    1b1c:	af00      	add	r7, sp, #0
    1b1e:	60b9      	str	r1, [r7, #8]
    1b20:	607a      	str	r2, [r7, #4]
    1b22:	230f      	movs	r3, #15
    1b24:	18fb      	adds	r3, r7, r3
    1b26:	1c02      	adds	r2, r0, #0
    1b28:	701a      	strb	r2, [r3, #0]
	if (!(condition)) {
    1b2a:	230f      	movs	r3, #15
    1b2c:	18fb      	adds	r3, r7, r3
    1b2e:	781b      	ldrb	r3, [r3, #0]
    1b30:	2201      	movs	r2, #1
    1b32:	4053      	eors	r3, r2
    1b34:	b2db      	uxtb	r3, r3
    1b36:	2b00      	cmp	r3, #0
    1b38:	d000      	beq.n	1b3c <assert+0x24>
		__asm("BKPT #0");
    1b3a:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1b3c:	46c0      	nop			; (mov r8, r8)
    1b3e:	46bd      	mov	sp, r7
    1b40:	b004      	add	sp, #16
    1b42:	bd80      	pop	{r7, pc}

00001b44 <hri_adc_wait_for_sync>:
typedef uint8_t  hri_adc_sampctrl_reg_t;
typedef uint8_t  hri_adc_seqstatus_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
    1b44:	b580      	push	{r7, lr}
    1b46:	b082      	sub	sp, #8
    1b48:	af00      	add	r7, sp, #0
    1b4a:	6078      	str	r0, [r7, #4]
    1b4c:	000a      	movs	r2, r1
    1b4e:	1cbb      	adds	r3, r7, #2
    1b50:	801a      	strh	r2, [r3, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1b52:	46c0      	nop			; (mov r8, r8)
    1b54:	687b      	ldr	r3, [r7, #4]
    1b56:	8c1b      	ldrh	r3, [r3, #32]
    1b58:	b29b      	uxth	r3, r3
    1b5a:	1cba      	adds	r2, r7, #2
    1b5c:	8812      	ldrh	r2, [r2, #0]
    1b5e:	4013      	ands	r3, r2
    1b60:	b29b      	uxth	r3, r3
    1b62:	2b00      	cmp	r3, #0
    1b64:	d1f6      	bne.n	1b54 <hri_adc_wait_for_sync+0x10>
	};
}
    1b66:	46c0      	nop			; (mov r8, r8)
    1b68:	46bd      	mov	sp, r7
    1b6a:	b002      	add	sp, #8
    1b6c:	bd80      	pop	{r7, pc}

00001b6e <hri_adc_is_syncing>:

static inline bool hri_adc_is_syncing(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
    1b6e:	b580      	push	{r7, lr}
    1b70:	b082      	sub	sp, #8
    1b72:	af00      	add	r7, sp, #0
    1b74:	6078      	str	r0, [r7, #4]
    1b76:	000a      	movs	r2, r1
    1b78:	1cbb      	adds	r3, r7, #2
    1b7a:	801a      	strh	r2, [r3, #0]
	return ((Adc *)hw)->SYNCBUSY.reg & reg;
    1b7c:	687b      	ldr	r3, [r7, #4]
    1b7e:	8c1b      	ldrh	r3, [r3, #32]
    1b80:	b29b      	uxth	r3, r3
    1b82:	1cba      	adds	r2, r7, #2
    1b84:	8812      	ldrh	r2, [r2, #0]
    1b86:	4013      	ands	r3, r2
    1b88:	b29b      	uxth	r3, r3
    1b8a:	1e5a      	subs	r2, r3, #1
    1b8c:	4193      	sbcs	r3, r2
    1b8e:	b2db      	uxtb	r3, r3
}
    1b90:	0018      	movs	r0, r3
    1b92:	46bd      	mov	sp, r7
    1b94:	b002      	add	sp, #8
    1b96:	bd80      	pop	{r7, pc}

00001b98 <hri_adc_get_interrupt_RESRDY_bit>:
{
	((Adc *)hw)->INTFLAG.reg = ADC_INTFLAG_WINMON;
}

static inline bool hri_adc_get_interrupt_RESRDY_bit(const void *const hw)
{
    1b98:	b580      	push	{r7, lr}
    1b9a:	b082      	sub	sp, #8
    1b9c:	af00      	add	r7, sp, #0
    1b9e:	6078      	str	r0, [r7, #4]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    1ba0:	687b      	ldr	r3, [r7, #4]
    1ba2:	799b      	ldrb	r3, [r3, #6]
    1ba4:	b2db      	uxtb	r3, r3
    1ba6:	001a      	movs	r2, r3
    1ba8:	2301      	movs	r3, #1
    1baa:	4013      	ands	r3, r2
    1bac:	1e5a      	subs	r2, r3, #1
    1bae:	4193      	sbcs	r3, r2
    1bb0:	b2db      	uxtb	r3, r3
}
    1bb2:	0018      	movs	r0, r3
    1bb4:	46bd      	mov	sp, r7
    1bb6:	b002      	add	sp, #8
    1bb8:	bd80      	pop	{r7, pc}

00001bba <hri_adc_read_RESULT_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
    1bba:	b580      	push	{r7, lr}
    1bbc:	b082      	sub	sp, #8
    1bbe:	af00      	add	r7, sp, #0
    1bc0:	6078      	str	r0, [r7, #4]
	return ((Adc *)hw)->RESULT.reg;
    1bc2:	687b      	ldr	r3, [r7, #4]
    1bc4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1bc6:	b29b      	uxth	r3, r3
}
    1bc8:	0018      	movs	r0, r3
    1bca:	46bd      	mov	sp, r7
    1bcc:	b002      	add	sp, #8
    1bce:	bd80      	pop	{r7, pc}

00001bd0 <hri_adc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & ADC_CTRLA_SWRST) >> ADC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_adc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    1bd0:	b580      	push	{r7, lr}
    1bd2:	b082      	sub	sp, #8
    1bd4:	af00      	add	r7, sp, #0
    1bd6:	6078      	str	r0, [r7, #4]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    1bd8:	687b      	ldr	r3, [r7, #4]
    1bda:	781b      	ldrb	r3, [r3, #0]
    1bdc:	b2db      	uxtb	r3, r3
    1bde:	2202      	movs	r2, #2
    1be0:	4313      	orrs	r3, r2
    1be2:	b2da      	uxtb	r2, r3
    1be4:	687b      	ldr	r3, [r7, #4]
    1be6:	701a      	strb	r2, [r3, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    1be8:	687b      	ldr	r3, [r7, #4]
    1bea:	2103      	movs	r1, #3
    1bec:	0018      	movs	r0, r3
    1bee:	4b03      	ldr	r3, [pc, #12]	; (1bfc <hri_adc_set_CTRLA_ENABLE_bit+0x2c>)
    1bf0:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	46bd      	mov	sp, r7
    1bf6:	b002      	add	sp, #8
    1bf8:	bd80      	pop	{r7, pc}
    1bfa:	46c0      	nop			; (mov r8, r8)
    1bfc:	00001b45 	.word	0x00001b45

00001c00 <hri_adc_clear_CTRLA_ENABLE_bit>:
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_adc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    1c00:	b580      	push	{r7, lr}
    1c02:	b082      	sub	sp, #8
    1c04:	af00      	add	r7, sp, #0
    1c06:	6078      	str	r0, [r7, #4]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    1c08:	687b      	ldr	r3, [r7, #4]
    1c0a:	781b      	ldrb	r3, [r3, #0]
    1c0c:	b2db      	uxtb	r3, r3
    1c0e:	2202      	movs	r2, #2
    1c10:	4393      	bics	r3, r2
    1c12:	b2da      	uxtb	r2, r3
    1c14:	687b      	ldr	r3, [r7, #4]
    1c16:	701a      	strb	r2, [r3, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    1c18:	687b      	ldr	r3, [r7, #4]
    1c1a:	2103      	movs	r1, #3
    1c1c:	0018      	movs	r0, r3
    1c1e:	4b03      	ldr	r3, [pc, #12]	; (1c2c <hri_adc_clear_CTRLA_ENABLE_bit+0x2c>)
    1c20:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1c22:	46c0      	nop			; (mov r8, r8)
    1c24:	46bd      	mov	sp, r7
    1c26:	b002      	add	sp, #8
    1c28:	bd80      	pop	{r7, pc}
    1c2a:	46c0      	nop			; (mov r8, r8)
    1c2c:	00001b45 	.word	0x00001b45

00001c30 <hri_adc_get_CTRLA_reg>:
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
    1c30:	b580      	push	{r7, lr}
    1c32:	b084      	sub	sp, #16
    1c34:	af00      	add	r7, sp, #0
    1c36:	6078      	str	r0, [r7, #4]
    1c38:	000a      	movs	r2, r1
    1c3a:	1cfb      	adds	r3, r7, #3
    1c3c:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    1c3e:	687b      	ldr	r3, [r7, #4]
    1c40:	2103      	movs	r1, #3
    1c42:	0018      	movs	r0, r3
    1c44:	4b0b      	ldr	r3, [pc, #44]	; (1c74 <hri_adc_get_CTRLA_reg+0x44>)
    1c46:	4798      	blx	r3
	tmp = ((Adc *)hw)->CTRLA.reg;
    1c48:	230f      	movs	r3, #15
    1c4a:	18fb      	adds	r3, r7, r3
    1c4c:	687a      	ldr	r2, [r7, #4]
    1c4e:	7812      	ldrb	r2, [r2, #0]
    1c50:	701a      	strb	r2, [r3, #0]
	tmp &= mask;
    1c52:	230f      	movs	r3, #15
    1c54:	18fb      	adds	r3, r7, r3
    1c56:	220f      	movs	r2, #15
    1c58:	18ba      	adds	r2, r7, r2
    1c5a:	1cf9      	adds	r1, r7, #3
    1c5c:	7812      	ldrb	r2, [r2, #0]
    1c5e:	7809      	ldrb	r1, [r1, #0]
    1c60:	400a      	ands	r2, r1
    1c62:	701a      	strb	r2, [r3, #0]
	return tmp;
    1c64:	230f      	movs	r3, #15
    1c66:	18fb      	adds	r3, r7, r3
    1c68:	781b      	ldrb	r3, [r3, #0]
}
    1c6a:	0018      	movs	r0, r3
    1c6c:	46bd      	mov	sp, r7
    1c6e:	b004      	add	sp, #16
    1c70:	bd80      	pop	{r7, pc}
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	00001b45 	.word	0x00001b45

00001c78 <hri_adc_write_CTRLA_reg>:

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
    1c78:	b580      	push	{r7, lr}
    1c7a:	b082      	sub	sp, #8
    1c7c:	af00      	add	r7, sp, #0
    1c7e:	6078      	str	r0, [r7, #4]
    1c80:	000a      	movs	r2, r1
    1c82:	1cfb      	adds	r3, r7, #3
    1c84:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	1cfa      	adds	r2, r7, #3
    1c8a:	7812      	ldrb	r2, [r2, #0]
    1c8c:	701a      	strb	r2, [r3, #0]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
    1c8e:	687b      	ldr	r3, [r7, #4]
    1c90:	2103      	movs	r1, #3
    1c92:	0018      	movs	r0, r3
    1c94:	4b02      	ldr	r3, [pc, #8]	; (1ca0 <hri_adc_write_CTRLA_reg+0x28>)
    1c96:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1c98:	46c0      	nop			; (mov r8, r8)
    1c9a:	46bd      	mov	sp, r7
    1c9c:	b002      	add	sp, #8
    1c9e:	bd80      	pop	{r7, pc}
    1ca0:	00001b45 	.word	0x00001b45

00001ca4 <hri_adc_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
    1ca4:	b580      	push	{r7, lr}
    1ca6:	b082      	sub	sp, #8
    1ca8:	af00      	add	r7, sp, #0
    1caa:	6078      	str	r0, [r7, #4]
    1cac:	000a      	movs	r2, r1
    1cae:	1cfb      	adds	r3, r7, #3
    1cb0:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1cb2:	687b      	ldr	r3, [r7, #4]
    1cb4:	1cfa      	adds	r2, r7, #3
    1cb6:	7812      	ldrb	r2, [r2, #0]
    1cb8:	705a      	strb	r2, [r3, #1]
	ADC_CRITICAL_SECTION_LEAVE();
}
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	46bd      	mov	sp, r7
    1cbe:	b002      	add	sp, #8
    1cc0:	bd80      	pop	{r7, pc}

00001cc2 <hri_adc_write_REFCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
    1cc2:	b580      	push	{r7, lr}
    1cc4:	b082      	sub	sp, #8
    1cc6:	af00      	add	r7, sp, #0
    1cc8:	6078      	str	r0, [r7, #4]
    1cca:	000a      	movs	r2, r1
    1ccc:	1cfb      	adds	r3, r7, #3
    1cce:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1cd0:	687b      	ldr	r3, [r7, #4]
    1cd2:	1cfa      	adds	r2, r7, #3
    1cd4:	7812      	ldrb	r2, [r2, #0]
    1cd6:	709a      	strb	r2, [r3, #2]
	ADC_CRITICAL_SECTION_LEAVE();
}
    1cd8:	46c0      	nop			; (mov r8, r8)
    1cda:	46bd      	mov	sp, r7
    1cdc:	b002      	add	sp, #8
    1cde:	bd80      	pop	{r7, pc}

00001ce0 <hri_adc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
    1ce0:	b580      	push	{r7, lr}
    1ce2:	b082      	sub	sp, #8
    1ce4:	af00      	add	r7, sp, #0
    1ce6:	6078      	str	r0, [r7, #4]
    1ce8:	000a      	movs	r2, r1
    1cea:	1cfb      	adds	r3, r7, #3
    1cec:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
    1cee:	687b      	ldr	r3, [r7, #4]
    1cf0:	1cfa      	adds	r2, r7, #3
    1cf2:	7812      	ldrb	r2, [r2, #0]
    1cf4:	70da      	strb	r2, [r3, #3]
	ADC_CRITICAL_SECTION_LEAVE();
}
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	46bd      	mov	sp, r7
    1cfa:	b002      	add	sp, #8
    1cfc:	bd80      	pop	{r7, pc}
	...

00001d00 <hri_adc_write_INPUTCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_INPUTCTRL_reg(const void *const hw, hri_adc_inputctrl_reg_t data)
{
    1d00:	b580      	push	{r7, lr}
    1d02:	b082      	sub	sp, #8
    1d04:	af00      	add	r7, sp, #0
    1d06:	6078      	str	r0, [r7, #4]
    1d08:	000a      	movs	r2, r1
    1d0a:	1cbb      	adds	r3, r7, #2
    1d0c:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->INPUTCTRL.reg = data;
    1d0e:	687b      	ldr	r3, [r7, #4]
    1d10:	1cba      	adds	r2, r7, #2
    1d12:	8812      	ldrh	r2, [r2, #0]
    1d14:	811a      	strh	r2, [r3, #8]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    1d16:	4a05      	ldr	r2, [pc, #20]	; (1d2c <hri_adc_write_INPUTCTRL_reg+0x2c>)
    1d18:	687b      	ldr	r3, [r7, #4]
    1d1a:	0011      	movs	r1, r2
    1d1c:	0018      	movs	r0, r3
    1d1e:	4b04      	ldr	r3, [pc, #16]	; (1d30 <hri_adc_write_INPUTCTRL_reg+0x30>)
    1d20:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	46bd      	mov	sp, r7
    1d26:	b002      	add	sp, #8
    1d28:	bd80      	pop	{r7, pc}
    1d2a:	46c0      	nop			; (mov r8, r8)
    1d2c:	000007ff 	.word	0x000007ff
    1d30:	00001b45 	.word	0x00001b45

00001d34 <hri_adc_read_CTRLC_RESSEL_bf>:
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline hri_adc_ctrlc_reg_t hri_adc_read_CTRLC_RESSEL_bf(const void *const hw)
{
    1d34:	b580      	push	{r7, lr}
    1d36:	b084      	sub	sp, #16
    1d38:	af00      	add	r7, sp, #0
    1d3a:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	tmp = ((Adc *)hw)->CTRLC.reg;
    1d3c:	230e      	movs	r3, #14
    1d3e:	18fb      	adds	r3, r7, r3
    1d40:	687a      	ldr	r2, [r7, #4]
    1d42:	8952      	ldrh	r2, [r2, #10]
    1d44:	801a      	strh	r2, [r3, #0]
	tmp = (tmp & ADC_CTRLC_RESSEL_Msk) >> ADC_CTRLC_RESSEL_Pos;
    1d46:	230e      	movs	r3, #14
    1d48:	18fb      	adds	r3, r7, r3
    1d4a:	881b      	ldrh	r3, [r3, #0]
    1d4c:	091b      	lsrs	r3, r3, #4
    1d4e:	b29a      	uxth	r2, r3
    1d50:	230e      	movs	r3, #14
    1d52:	18fb      	adds	r3, r7, r3
    1d54:	2103      	movs	r1, #3
    1d56:	400a      	ands	r2, r1
    1d58:	801a      	strh	r2, [r3, #0]
	return tmp;
    1d5a:	230e      	movs	r3, #14
    1d5c:	18fb      	adds	r3, r7, r3
    1d5e:	881b      	ldrh	r3, [r3, #0]
}
    1d60:	0018      	movs	r0, r3
    1d62:	46bd      	mov	sp, r7
    1d64:	b004      	add	sp, #16
    1d66:	bd80      	pop	{r7, pc}

00001d68 <hri_adc_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_CTRLC_reg(const void *const hw, hri_adc_ctrlc_reg_t data)
{
    1d68:	b580      	push	{r7, lr}
    1d6a:	b082      	sub	sp, #8
    1d6c:	af00      	add	r7, sp, #0
    1d6e:	6078      	str	r0, [r7, #4]
    1d70:	000a      	movs	r2, r1
    1d72:	1cbb      	adds	r3, r7, #2
    1d74:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLC.reg = data;
    1d76:	687b      	ldr	r3, [r7, #4]
    1d78:	1cba      	adds	r2, r7, #2
    1d7a:	8812      	ldrh	r2, [r2, #0]
    1d7c:	815a      	strh	r2, [r3, #10]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    1d7e:	4a05      	ldr	r2, [pc, #20]	; (1d94 <hri_adc_write_CTRLC_reg+0x2c>)
    1d80:	687b      	ldr	r3, [r7, #4]
    1d82:	0011      	movs	r1, r2
    1d84:	0018      	movs	r0, r3
    1d86:	4b04      	ldr	r3, [pc, #16]	; (1d98 <hri_adc_write_CTRLC_reg+0x30>)
    1d88:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1d8a:	46c0      	nop			; (mov r8, r8)
    1d8c:	46bd      	mov	sp, r7
    1d8e:	b002      	add	sp, #8
    1d90:	bd80      	pop	{r7, pc}
    1d92:	46c0      	nop			; (mov r8, r8)
    1d94:	000007ff 	.word	0x000007ff
    1d98:	00001b45 	.word	0x00001b45

00001d9c <hri_adc_write_AVGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
    1d9c:	b580      	push	{r7, lr}
    1d9e:	b082      	sub	sp, #8
    1da0:	af00      	add	r7, sp, #0
    1da2:	6078      	str	r0, [r7, #4]
    1da4:	000a      	movs	r2, r1
    1da6:	1cfb      	adds	r3, r7, #3
    1da8:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1daa:	687b      	ldr	r3, [r7, #4]
    1dac:	1cfa      	adds	r2, r7, #3
    1dae:	7812      	ldrb	r2, [r2, #0]
    1db0:	731a      	strb	r2, [r3, #12]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    1db2:	4a05      	ldr	r2, [pc, #20]	; (1dc8 <hri_adc_write_AVGCTRL_reg+0x2c>)
    1db4:	687b      	ldr	r3, [r7, #4]
    1db6:	0011      	movs	r1, r2
    1db8:	0018      	movs	r0, r3
    1dba:	4b04      	ldr	r3, [pc, #16]	; (1dcc <hri_adc_write_AVGCTRL_reg+0x30>)
    1dbc:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	46bd      	mov	sp, r7
    1dc2:	b002      	add	sp, #8
    1dc4:	bd80      	pop	{r7, pc}
    1dc6:	46c0      	nop			; (mov r8, r8)
    1dc8:	000007ff 	.word	0x000007ff
    1dcc:	00001b45 	.word	0x00001b45

00001dd0 <hri_adc_write_SAMPCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
    1dd0:	b580      	push	{r7, lr}
    1dd2:	b082      	sub	sp, #8
    1dd4:	af00      	add	r7, sp, #0
    1dd6:	6078      	str	r0, [r7, #4]
    1dd8:	000a      	movs	r2, r1
    1dda:	1cfb      	adds	r3, r7, #3
    1ddc:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	1cfa      	adds	r2, r7, #3
    1de2:	7812      	ldrb	r2, [r2, #0]
    1de4:	735a      	strb	r2, [r3, #13]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    1de6:	4a05      	ldr	r2, [pc, #20]	; (1dfc <hri_adc_write_SAMPCTRL_reg+0x2c>)
    1de8:	687b      	ldr	r3, [r7, #4]
    1dea:	0011      	movs	r1, r2
    1dec:	0018      	movs	r0, r3
    1dee:	4b04      	ldr	r3, [pc, #16]	; (1e00 <hri_adc_write_SAMPCTRL_reg+0x30>)
    1df0:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1df2:	46c0      	nop			; (mov r8, r8)
    1df4:	46bd      	mov	sp, r7
    1df6:	b002      	add	sp, #8
    1df8:	bd80      	pop	{r7, pc}
    1dfa:	46c0      	nop			; (mov r8, r8)
    1dfc:	000007ff 	.word	0x000007ff
    1e00:	00001b45 	.word	0x00001b45

00001e04 <hri_adc_write_WINLT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
    1e04:	b580      	push	{r7, lr}
    1e06:	b082      	sub	sp, #8
    1e08:	af00      	add	r7, sp, #0
    1e0a:	6078      	str	r0, [r7, #4]
    1e0c:	000a      	movs	r2, r1
    1e0e:	1cbb      	adds	r3, r7, #2
    1e10:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	1cba      	adds	r2, r7, #2
    1e16:	8812      	ldrh	r2, [r2, #0]
    1e18:	81da      	strh	r2, [r3, #14]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_WINLT);
    1e1a:	687b      	ldr	r3, [r7, #4]
    1e1c:	2140      	movs	r1, #64	; 0x40
    1e1e:	0018      	movs	r0, r3
    1e20:	4b02      	ldr	r3, [pc, #8]	; (1e2c <hri_adc_write_WINLT_reg+0x28>)
    1e22:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1e24:	46c0      	nop			; (mov r8, r8)
    1e26:	46bd      	mov	sp, r7
    1e28:	b002      	add	sp, #8
    1e2a:	bd80      	pop	{r7, pc}
    1e2c:	00001b45 	.word	0x00001b45

00001e30 <hri_adc_write_WINUT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
    1e30:	b580      	push	{r7, lr}
    1e32:	b082      	sub	sp, #8
    1e34:	af00      	add	r7, sp, #0
    1e36:	6078      	str	r0, [r7, #4]
    1e38:	000a      	movs	r2, r1
    1e3a:	1cbb      	adds	r3, r7, #2
    1e3c:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1e3e:	687b      	ldr	r3, [r7, #4]
    1e40:	1cba      	adds	r2, r7, #2
    1e42:	8812      	ldrh	r2, [r2, #0]
    1e44:	821a      	strh	r2, [r3, #16]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_WINUT);
    1e46:	687b      	ldr	r3, [r7, #4]
    1e48:	2180      	movs	r1, #128	; 0x80
    1e4a:	0018      	movs	r0, r3
    1e4c:	4b02      	ldr	r3, [pc, #8]	; (1e58 <hri_adc_write_WINUT_reg+0x28>)
    1e4e:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1e50:	46c0      	nop			; (mov r8, r8)
    1e52:	46bd      	mov	sp, r7
    1e54:	b002      	add	sp, #8
    1e56:	bd80      	pop	{r7, pc}
    1e58:	00001b45 	.word	0x00001b45

00001e5c <hri_adc_write_GAINCORR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
    1e5c:	b580      	push	{r7, lr}
    1e5e:	b082      	sub	sp, #8
    1e60:	af00      	add	r7, sp, #0
    1e62:	6078      	str	r0, [r7, #4]
    1e64:	000a      	movs	r2, r1
    1e66:	1cbb      	adds	r3, r7, #2
    1e68:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1e6a:	687b      	ldr	r3, [r7, #4]
    1e6c:	1cba      	adds	r2, r7, #2
    1e6e:	8812      	ldrh	r2, [r2, #0]
    1e70:	825a      	strh	r2, [r3, #18]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_GAINCORR);
    1e72:	2380      	movs	r3, #128	; 0x80
    1e74:	005a      	lsls	r2, r3, #1
    1e76:	687b      	ldr	r3, [r7, #4]
    1e78:	0011      	movs	r1, r2
    1e7a:	0018      	movs	r0, r3
    1e7c:	4b02      	ldr	r3, [pc, #8]	; (1e88 <hri_adc_write_GAINCORR_reg+0x2c>)
    1e7e:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1e80:	46c0      	nop			; (mov r8, r8)
    1e82:	46bd      	mov	sp, r7
    1e84:	b002      	add	sp, #8
    1e86:	bd80      	pop	{r7, pc}
    1e88:	00001b45 	.word	0x00001b45

00001e8c <hri_adc_write_OFFSETCORR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
    1e8c:	b580      	push	{r7, lr}
    1e8e:	b082      	sub	sp, #8
    1e90:	af00      	add	r7, sp, #0
    1e92:	6078      	str	r0, [r7, #4]
    1e94:	000a      	movs	r2, r1
    1e96:	1cbb      	adds	r3, r7, #2
    1e98:	801a      	strh	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1e9a:	687b      	ldr	r3, [r7, #4]
    1e9c:	1cba      	adds	r2, r7, #2
    1e9e:	8812      	ldrh	r2, [r2, #0]
    1ea0:	829a      	strh	r2, [r3, #20]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_OFFSETCORR);
    1ea2:	2380      	movs	r3, #128	; 0x80
    1ea4:	009a      	lsls	r2, r3, #2
    1ea6:	687b      	ldr	r3, [r7, #4]
    1ea8:	0011      	movs	r1, r2
    1eaa:	0018      	movs	r0, r3
    1eac:	4b02      	ldr	r3, [pc, #8]	; (1eb8 <hri_adc_write_OFFSETCORR_reg+0x2c>)
    1eae:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1eb0:	46c0      	nop			; (mov r8, r8)
    1eb2:	46bd      	mov	sp, r7
    1eb4:	b002      	add	sp, #8
    1eb6:	bd80      	pop	{r7, pc}
    1eb8:	00001b45 	.word	0x00001b45

00001ebc <hri_adc_set_SWTRIG_START_bit>:
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
	ADC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
    1ebc:	b580      	push	{r7, lr}
    1ebe:	b082      	sub	sp, #8
    1ec0:	af00      	add	r7, sp, #0
    1ec2:	6078      	str	r0, [r7, #4]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    1ec4:	687b      	ldr	r3, [r7, #4]
    1ec6:	7e1b      	ldrb	r3, [r3, #24]
    1ec8:	b2db      	uxtb	r3, r3
    1eca:	2202      	movs	r2, #2
    1ecc:	4313      	orrs	r3, r2
    1ece:	b2da      	uxtb	r2, r3
    1ed0:	687b      	ldr	r3, [r7, #4]
    1ed2:	761a      	strb	r2, [r3, #24]
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
    1ed4:	4a04      	ldr	r2, [pc, #16]	; (1ee8 <hri_adc_set_SWTRIG_START_bit+0x2c>)
    1ed6:	687b      	ldr	r3, [r7, #4]
    1ed8:	0011      	movs	r1, r2
    1eda:	0018      	movs	r0, r3
    1edc:	4b03      	ldr	r3, [pc, #12]	; (1eec <hri_adc_set_SWTRIG_START_bit+0x30>)
    1ede:	4798      	blx	r3
	ADC_CRITICAL_SECTION_LEAVE();
}
    1ee0:	46c0      	nop			; (mov r8, r8)
    1ee2:	46bd      	mov	sp, r7
    1ee4:	b002      	add	sp, #8
    1ee6:	bd80      	pop	{r7, pc}
    1ee8:	000007ff 	.word	0x000007ff
    1eec:	00001b45 	.word	0x00001b45

00001ef0 <hri_adc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
    1ef0:	b580      	push	{r7, lr}
    1ef2:	b082      	sub	sp, #8
    1ef4:	af00      	add	r7, sp, #0
    1ef6:	6078      	str	r0, [r7, #4]
    1ef8:	000a      	movs	r2, r1
    1efa:	1cfb      	adds	r3, r7, #3
    1efc:	701a      	strb	r2, [r3, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
    1efe:	687b      	ldr	r3, [r7, #4]
    1f00:	1cfa      	adds	r2, r7, #3
    1f02:	7812      	ldrb	r2, [r2, #0]
    1f04:	771a      	strb	r2, [r3, #28]
	ADC_CRITICAL_SECTION_LEAVE();
}
    1f06:	46c0      	nop			; (mov r8, r8)
    1f08:	46bd      	mov	sp, r7
    1f0a:	b002      	add	sp, #8
    1f0c:	bd80      	pop	{r7, pc}

00001f0e <hri_adc_write_SEQCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_adc_write_SEQCTRL_reg(const void *const hw, hri_adc_seqctrl_reg_t data)
{
    1f0e:	b580      	push	{r7, lr}
    1f10:	b082      	sub	sp, #8
    1f12:	af00      	add	r7, sp, #0
    1f14:	6078      	str	r0, [r7, #4]
    1f16:	6039      	str	r1, [r7, #0]
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SEQCTRL.reg = data;
    1f18:	687b      	ldr	r3, [r7, #4]
    1f1a:	683a      	ldr	r2, [r7, #0]
    1f1c:	629a      	str	r2, [r3, #40]	; 0x28
	ADC_CRITICAL_SECTION_LEAVE();
}
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	46bd      	mov	sp, r7
    1f22:	b002      	add	sp, #8
    1f24:	bd80      	pop	{r7, pc}
	...

00001f28 <_adc_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
    1f28:	b580      	push	{r7, lr}
    1f2a:	b082      	sub	sp, #8
    1f2c:	af00      	add	r7, sp, #0
    1f2e:	6078      	str	r0, [r7, #4]
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    1f30:	687b      	ldr	r3, [r7, #4]
    1f32:	4a04      	ldr	r2, [pc, #16]	; (1f44 <_adc_get_hardware_index+0x1c>)
    1f34:	4694      	mov	ip, r2
    1f36:	4463      	add	r3, ip
    1f38:	0a9b      	lsrs	r3, r3, #10
    1f3a:	b2db      	uxtb	r3, r3
}
    1f3c:	0018      	movs	r0, r3
    1f3e:	46bd      	mov	sp, r7
    1f40:	b002      	add	sp, #8
    1f42:	bd80      	pop	{r7, pc}
    1f44:	bdffbc00 	.word	0xbdffbc00

00001f48 <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
    1f48:	b590      	push	{r4, r7, lr}
    1f4a:	b085      	sub	sp, #20
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	6078      	str	r0, [r7, #4]
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
    1f50:	687b      	ldr	r3, [r7, #4]
    1f52:	220e      	movs	r2, #14
    1f54:	18bc      	adds	r4, r7, r2
    1f56:	0018      	movs	r0, r3
    1f58:	4b18      	ldr	r3, [pc, #96]	; (1fbc <_adc_get_regs+0x74>)
    1f5a:	4798      	blx	r3
    1f5c:	0003      	movs	r3, r0
    1f5e:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1f60:	230f      	movs	r3, #15
    1f62:	18fb      	adds	r3, r7, r3
    1f64:	2200      	movs	r2, #0
    1f66:	701a      	strb	r2, [r3, #0]
    1f68:	e018      	b.n	1f9c <_adc_get_regs+0x54>
		if (_adcs[i].number == n) {
    1f6a:	230f      	movs	r3, #15
    1f6c:	18fb      	adds	r3, r7, r3
    1f6e:	781a      	ldrb	r2, [r3, #0]
    1f70:	4913      	ldr	r1, [pc, #76]	; (1fc0 <_adc_get_regs+0x78>)
    1f72:	0013      	movs	r3, r2
    1f74:	00db      	lsls	r3, r3, #3
    1f76:	1a9b      	subs	r3, r3, r2
    1f78:	009b      	lsls	r3, r3, #2
    1f7a:	5c5b      	ldrb	r3, [r3, r1]
    1f7c:	220e      	movs	r2, #14
    1f7e:	18ba      	adds	r2, r7, r2
    1f80:	7812      	ldrb	r2, [r2, #0]
    1f82:	429a      	cmp	r2, r3
    1f84:	d103      	bne.n	1f8e <_adc_get_regs+0x46>
			return i;
    1f86:	230f      	movs	r3, #15
    1f88:	18fb      	adds	r3, r7, r3
    1f8a:	781b      	ldrb	r3, [r3, #0]
    1f8c:	e012      	b.n	1fb4 <_adc_get_regs+0x6c>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    1f8e:	230f      	movs	r3, #15
    1f90:	18fb      	adds	r3, r7, r3
    1f92:	781a      	ldrb	r2, [r3, #0]
    1f94:	230f      	movs	r3, #15
    1f96:	18fb      	adds	r3, r7, r3
    1f98:	3201      	adds	r2, #1
    1f9a:	701a      	strb	r2, [r3, #0]
    1f9c:	230f      	movs	r3, #15
    1f9e:	18fb      	adds	r3, r7, r3
    1fa0:	781b      	ldrb	r3, [r3, #0]
    1fa2:	2b01      	cmp	r3, #1
    1fa4:	d9e1      	bls.n	1f6a <_adc_get_regs+0x22>
		}
	}

	ASSERT(false);
    1fa6:	4b07      	ldr	r3, [pc, #28]	; (1fc4 <_adc_get_regs+0x7c>)
    1fa8:	228d      	movs	r2, #141	; 0x8d
    1faa:	0019      	movs	r1, r3
    1fac:	2000      	movs	r0, #0
    1fae:	4b06      	ldr	r3, [pc, #24]	; (1fc8 <_adc_get_regs+0x80>)
    1fb0:	4798      	blx	r3
	return 0;
    1fb2:	2300      	movs	r3, #0
}
    1fb4:	0018      	movs	r0, r3
    1fb6:	46bd      	mov	sp, r7
    1fb8:	b005      	add	sp, #20
    1fba:	bd90      	pop	{r4, r7, pc}
    1fbc:	00001f29 	.word	0x00001f29
    1fc0:	00008558 	.word	0x00008558
    1fc4:	00008590 	.word	0x00008590
    1fc8:	00001b19 	.word	0x00001b19

00001fcc <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
    1fcc:	b580      	push	{r7, lr}
    1fce:	b082      	sub	sp, #8
    1fd0:	af00      	add	r7, sp, #0
    1fd2:	6078      	str	r0, [r7, #4]
    1fd4:	000a      	movs	r2, r1
    1fd6:	1cfb      	adds	r3, r7, #3
    1fd8:	701a      	strb	r2, [r3, #0]

	if (!hri_adc_is_syncing(hw, ADC_SYNCBUSY_SWRST)) {
    1fda:	687b      	ldr	r3, [r7, #4]
    1fdc:	2101      	movs	r1, #1
    1fde:	0018      	movs	r0, r3
    1fe0:	4b7c      	ldr	r3, [pc, #496]	; (21d4 <STACK_SIZE+0x1d4>)
    1fe2:	4798      	blx	r3
    1fe4:	0003      	movs	r3, r0
    1fe6:	001a      	movs	r2, r3
    1fe8:	2301      	movs	r3, #1
    1fea:	4053      	eors	r3, r2
    1fec:	b2db      	uxtb	r3, r3
    1fee:	2b00      	cmp	r3, #0
    1ff0:	d014      	beq.n	201c <STACK_SIZE+0x1c>
		if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
    1ff2:	687b      	ldr	r3, [r7, #4]
    1ff4:	2102      	movs	r1, #2
    1ff6:	0018      	movs	r0, r3
    1ff8:	4b77      	ldr	r3, [pc, #476]	; (21d8 <STACK_SIZE+0x1d8>)
    1ffa:	4798      	blx	r3
    1ffc:	1e03      	subs	r3, r0, #0
    1ffe:	d008      	beq.n	2012 <STACK_SIZE+0x12>
			hri_adc_clear_CTRLA_ENABLE_bit(hw);
    2000:	687b      	ldr	r3, [r7, #4]
    2002:	0018      	movs	r0, r3
    2004:	4b75      	ldr	r3, [pc, #468]	; (21dc <STACK_SIZE+0x1dc>)
    2006:	4798      	blx	r3
			hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_ENABLE);
    2008:	687b      	ldr	r3, [r7, #4]
    200a:	2102      	movs	r1, #2
    200c:	0018      	movs	r0, r3
    200e:	4b74      	ldr	r3, [pc, #464]	; (21e0 <STACK_SIZE+0x1e0>)
    2010:	4798      	blx	r3
		}
		hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
    2012:	687b      	ldr	r3, [r7, #4]
    2014:	2101      	movs	r1, #1
    2016:	0018      	movs	r0, r3
    2018:	4b72      	ldr	r3, [pc, #456]	; (21e4 <STACK_SIZE+0x1e4>)
    201a:	4798      	blx	r3
	}
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
    201c:	687b      	ldr	r3, [r7, #4]
    201e:	2101      	movs	r1, #1
    2020:	0018      	movs	r0, r3
    2022:	4b6f      	ldr	r3, [pc, #444]	; (21e0 <STACK_SIZE+0x1e0>)
    2024:	4798      	blx	r3

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    2026:	1cfb      	adds	r3, r7, #3
    2028:	781a      	ldrb	r2, [r3, #0]
    202a:	496f      	ldr	r1, [pc, #444]	; (21e8 <STACK_SIZE+0x1e8>)
    202c:	0013      	movs	r3, r2
    202e:	00db      	lsls	r3, r3, #3
    2030:	1a9b      	subs	r3, r3, r2
    2032:	009b      	lsls	r3, r3, #2
    2034:	18cb      	adds	r3, r1, r3
    2036:	3302      	adds	r3, #2
    2038:	781a      	ldrb	r2, [r3, #0]
    203a:	687b      	ldr	r3, [r7, #4]
    203c:	0011      	movs	r1, r2
    203e:	0018      	movs	r0, r3
    2040:	4b6a      	ldr	r3, [pc, #424]	; (21ec <STACK_SIZE+0x1ec>)
    2042:	4798      	blx	r3
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    2044:	1cfb      	adds	r3, r7, #3
    2046:	781a      	ldrb	r2, [r3, #0]
    2048:	4967      	ldr	r1, [pc, #412]	; (21e8 <STACK_SIZE+0x1e8>)
    204a:	0013      	movs	r3, r2
    204c:	00db      	lsls	r3, r3, #3
    204e:	1a9b      	subs	r3, r3, r2
    2050:	009b      	lsls	r3, r3, #2
    2052:	18cb      	adds	r3, r1, r3
    2054:	3303      	adds	r3, #3
    2056:	781a      	ldrb	r2, [r3, #0]
    2058:	687b      	ldr	r3, [r7, #4]
    205a:	0011      	movs	r1, r2
    205c:	0018      	movs	r0, r3
    205e:	4b64      	ldr	r3, [pc, #400]	; (21f0 <STACK_SIZE+0x1f0>)
    2060:	4798      	blx	r3
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    2062:	1cfb      	adds	r3, r7, #3
    2064:	781a      	ldrb	r2, [r3, #0]
    2066:	4960      	ldr	r1, [pc, #384]	; (21e8 <STACK_SIZE+0x1e8>)
    2068:	0013      	movs	r3, r2
    206a:	00db      	lsls	r3, r3, #3
    206c:	1a9b      	subs	r3, r3, r2
    206e:	009b      	lsls	r3, r3, #2
    2070:	18cb      	adds	r3, r1, r3
    2072:	3304      	adds	r3, #4
    2074:	781a      	ldrb	r2, [r3, #0]
    2076:	687b      	ldr	r3, [r7, #4]
    2078:	0011      	movs	r1, r2
    207a:	0018      	movs	r0, r3
    207c:	4b5d      	ldr	r3, [pc, #372]	; (21f4 <STACK_SIZE+0x1f4>)
    207e:	4798      	blx	r3
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2080:	1cfb      	adds	r3, r7, #3
    2082:	781a      	ldrb	r2, [r3, #0]
    2084:	4958      	ldr	r1, [pc, #352]	; (21e8 <STACK_SIZE+0x1e8>)
    2086:	0013      	movs	r3, r2
    2088:	00db      	lsls	r3, r3, #3
    208a:	1a9b      	subs	r3, r3, r2
    208c:	009b      	lsls	r3, r3, #2
    208e:	18cb      	adds	r3, r1, r3
    2090:	3306      	adds	r3, #6
    2092:	881a      	ldrh	r2, [r3, #0]
    2094:	687b      	ldr	r3, [r7, #4]
    2096:	0011      	movs	r1, r2
    2098:	0018      	movs	r0, r3
    209a:	4b57      	ldr	r3, [pc, #348]	; (21f8 <STACK_SIZE+0x1f8>)
    209c:	4798      	blx	r3
	hri_adc_write_CTRLC_reg(hw, _adcs[i].ctrl_c);
    209e:	1cfb      	adds	r3, r7, #3
    20a0:	781a      	ldrb	r2, [r3, #0]
    20a2:	4951      	ldr	r1, [pc, #324]	; (21e8 <STACK_SIZE+0x1e8>)
    20a4:	0013      	movs	r3, r2
    20a6:	00db      	lsls	r3, r3, #3
    20a8:	1a9b      	subs	r3, r3, r2
    20aa:	009b      	lsls	r3, r3, #2
    20ac:	18cb      	adds	r3, r1, r3
    20ae:	3308      	adds	r3, #8
    20b0:	881a      	ldrh	r2, [r3, #0]
    20b2:	687b      	ldr	r3, [r7, #4]
    20b4:	0011      	movs	r1, r2
    20b6:	0018      	movs	r0, r3
    20b8:	4b50      	ldr	r3, [pc, #320]	; (21fc <STACK_SIZE+0x1fc>)
    20ba:	4798      	blx	r3
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    20bc:	1cfb      	adds	r3, r7, #3
    20be:	781a      	ldrb	r2, [r3, #0]
    20c0:	4949      	ldr	r1, [pc, #292]	; (21e8 <STACK_SIZE+0x1e8>)
    20c2:	0013      	movs	r3, r2
    20c4:	00db      	lsls	r3, r3, #3
    20c6:	1a9b      	subs	r3, r3, r2
    20c8:	009b      	lsls	r3, r3, #2
    20ca:	18cb      	adds	r3, r1, r3
    20cc:	330a      	adds	r3, #10
    20ce:	781a      	ldrb	r2, [r3, #0]
    20d0:	687b      	ldr	r3, [r7, #4]
    20d2:	0011      	movs	r1, r2
    20d4:	0018      	movs	r0, r3
    20d6:	4b4a      	ldr	r3, [pc, #296]	; (2200 <STACK_SIZE+0x200>)
    20d8:	4798      	blx	r3
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    20da:	1cfb      	adds	r3, r7, #3
    20dc:	781a      	ldrb	r2, [r3, #0]
    20de:	4942      	ldr	r1, [pc, #264]	; (21e8 <STACK_SIZE+0x1e8>)
    20e0:	0013      	movs	r3, r2
    20e2:	00db      	lsls	r3, r3, #3
    20e4:	1a9b      	subs	r3, r3, r2
    20e6:	009b      	lsls	r3, r3, #2
    20e8:	18cb      	adds	r3, r1, r3
    20ea:	330b      	adds	r3, #11
    20ec:	781a      	ldrb	r2, [r3, #0]
    20ee:	687b      	ldr	r3, [r7, #4]
    20f0:	0011      	movs	r1, r2
    20f2:	0018      	movs	r0, r3
    20f4:	4b43      	ldr	r3, [pc, #268]	; (2204 <STACK_SIZE+0x204>)
    20f6:	4798      	blx	r3
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    20f8:	1cfb      	adds	r3, r7, #3
    20fa:	781a      	ldrb	r2, [r3, #0]
    20fc:	493a      	ldr	r1, [pc, #232]	; (21e8 <STACK_SIZE+0x1e8>)
    20fe:	0013      	movs	r3, r2
    2100:	00db      	lsls	r3, r3, #3
    2102:	1a9b      	subs	r3, r3, r2
    2104:	009b      	lsls	r3, r3, #2
    2106:	18cb      	adds	r3, r1, r3
    2108:	330c      	adds	r3, #12
    210a:	881a      	ldrh	r2, [r3, #0]
    210c:	687b      	ldr	r3, [r7, #4]
    210e:	0011      	movs	r1, r2
    2110:	0018      	movs	r0, r3
    2112:	4b3d      	ldr	r3, [pc, #244]	; (2208 <STACK_SIZE+0x208>)
    2114:	4798      	blx	r3
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    2116:	1cfb      	adds	r3, r7, #3
    2118:	781a      	ldrb	r2, [r3, #0]
    211a:	4933      	ldr	r1, [pc, #204]	; (21e8 <STACK_SIZE+0x1e8>)
    211c:	0013      	movs	r3, r2
    211e:	00db      	lsls	r3, r3, #3
    2120:	1a9b      	subs	r3, r3, r2
    2122:	009b      	lsls	r3, r3, #2
    2124:	18cb      	adds	r3, r1, r3
    2126:	330e      	adds	r3, #14
    2128:	881a      	ldrh	r2, [r3, #0]
    212a:	687b      	ldr	r3, [r7, #4]
    212c:	0011      	movs	r1, r2
    212e:	0018      	movs	r0, r3
    2130:	4b36      	ldr	r3, [pc, #216]	; (220c <STACK_SIZE+0x20c>)
    2132:	4798      	blx	r3
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    2134:	1cfb      	adds	r3, r7, #3
    2136:	781a      	ldrb	r2, [r3, #0]
    2138:	492b      	ldr	r1, [pc, #172]	; (21e8 <STACK_SIZE+0x1e8>)
    213a:	0013      	movs	r3, r2
    213c:	00db      	lsls	r3, r3, #3
    213e:	1a9b      	subs	r3, r3, r2
    2140:	009b      	lsls	r3, r3, #2
    2142:	18cb      	adds	r3, r1, r3
    2144:	3310      	adds	r3, #16
    2146:	881a      	ldrh	r2, [r3, #0]
    2148:	687b      	ldr	r3, [r7, #4]
    214a:	0011      	movs	r1, r2
    214c:	0018      	movs	r0, r3
    214e:	4b30      	ldr	r3, [pc, #192]	; (2210 <STACK_SIZE+0x210>)
    2150:	4798      	blx	r3
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    2152:	1cfb      	adds	r3, r7, #3
    2154:	781a      	ldrb	r2, [r3, #0]
    2156:	4924      	ldr	r1, [pc, #144]	; (21e8 <STACK_SIZE+0x1e8>)
    2158:	0013      	movs	r3, r2
    215a:	00db      	lsls	r3, r3, #3
    215c:	1a9b      	subs	r3, r3, r2
    215e:	009b      	lsls	r3, r3, #2
    2160:	18cb      	adds	r3, r1, r3
    2162:	3312      	adds	r3, #18
    2164:	881a      	ldrh	r2, [r3, #0]
    2166:	687b      	ldr	r3, [r7, #4]
    2168:	0011      	movs	r1, r2
    216a:	0018      	movs	r0, r3
    216c:	4b29      	ldr	r3, [pc, #164]	; (2214 <STACK_SIZE+0x214>)
    216e:	4798      	blx	r3
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    2170:	1cfb      	adds	r3, r7, #3
    2172:	781a      	ldrb	r2, [r3, #0]
    2174:	491c      	ldr	r1, [pc, #112]	; (21e8 <STACK_SIZE+0x1e8>)
    2176:	0013      	movs	r3, r2
    2178:	00db      	lsls	r3, r3, #3
    217a:	1a9b      	subs	r3, r3, r2
    217c:	009b      	lsls	r3, r3, #2
    217e:	18cb      	adds	r3, r1, r3
    2180:	3314      	adds	r3, #20
    2182:	781a      	ldrb	r2, [r3, #0]
    2184:	687b      	ldr	r3, [r7, #4]
    2186:	0011      	movs	r1, r2
    2188:	0018      	movs	r0, r3
    218a:	4b23      	ldr	r3, [pc, #140]	; (2218 <STACK_SIZE+0x218>)
    218c:	4798      	blx	r3
	hri_adc_write_SEQCTRL_reg(hw, _adcs[i].seq_ctrl);
    218e:	1cfb      	adds	r3, r7, #3
    2190:	781a      	ldrb	r2, [r3, #0]
    2192:	4915      	ldr	r1, [pc, #84]	; (21e8 <STACK_SIZE+0x1e8>)
    2194:	0013      	movs	r3, r2
    2196:	00db      	lsls	r3, r3, #3
    2198:	1a9b      	subs	r3, r3, r2
    219a:	009b      	lsls	r3, r3, #2
    219c:	18cb      	adds	r3, r1, r3
    219e:	3318      	adds	r3, #24
    21a0:	681a      	ldr	r2, [r3, #0]
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	0011      	movs	r1, r2
    21a6:	0018      	movs	r0, r3
    21a8:	4b1c      	ldr	r3, [pc, #112]	; (221c <STACK_SIZE+0x21c>)
    21aa:	4798      	blx	r3
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    21ac:	1cfb      	adds	r3, r7, #3
    21ae:	781a      	ldrb	r2, [r3, #0]
    21b0:	490d      	ldr	r1, [pc, #52]	; (21e8 <STACK_SIZE+0x1e8>)
    21b2:	0013      	movs	r3, r2
    21b4:	00db      	lsls	r3, r3, #3
    21b6:	1a9b      	subs	r3, r3, r2
    21b8:	009b      	lsls	r3, r3, #2
    21ba:	18cb      	adds	r3, r1, r3
    21bc:	3301      	adds	r3, #1
    21be:	781a      	ldrb	r2, [r3, #0]
    21c0:	687b      	ldr	r3, [r7, #4]
    21c2:	0011      	movs	r1, r2
    21c4:	0018      	movs	r0, r3
    21c6:	4b07      	ldr	r3, [pc, #28]	; (21e4 <STACK_SIZE+0x1e4>)
    21c8:	4798      	blx	r3

	return ERR_NONE;
    21ca:	2300      	movs	r3, #0
}
    21cc:	0018      	movs	r0, r3
    21ce:	46bd      	mov	sp, r7
    21d0:	b002      	add	sp, #8
    21d2:	bd80      	pop	{r7, pc}
    21d4:	00001b6f 	.word	0x00001b6f
    21d8:	00001c31 	.word	0x00001c31
    21dc:	00001c01 	.word	0x00001c01
    21e0:	00001b45 	.word	0x00001b45
    21e4:	00001c79 	.word	0x00001c79
    21e8:	00008558 	.word	0x00008558
    21ec:	00001ca5 	.word	0x00001ca5
    21f0:	00001cc3 	.word	0x00001cc3
    21f4:	00001ce1 	.word	0x00001ce1
    21f8:	00001d01 	.word	0x00001d01
    21fc:	00001d69 	.word	0x00001d69
    2200:	00001d9d 	.word	0x00001d9d
    2204:	00001dd1 	.word	0x00001dd1
    2208:	00001e05 	.word	0x00001e05
    220c:	00001e31 	.word	0x00001e31
    2210:	00001e5d 	.word	0x00001e5d
    2214:	00001e8d 	.word	0x00001e8d
    2218:	00001ef1 	.word	0x00001ef1
    221c:	00001f0f 	.word	0x00001f0f

00002220 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    2220:	b580      	push	{r7, lr}
    2222:	b082      	sub	sp, #8
    2224:	af00      	add	r7, sp, #0
    2226:	6078      	str	r0, [r7, #4]
    2228:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    222a:	687b      	ldr	r3, [r7, #4]
    222c:	1e5a      	subs	r2, r3, #1
    222e:	4193      	sbcs	r3, r2
    2230:	b2db      	uxtb	r3, r3
    2232:	490c      	ldr	r1, [pc, #48]	; (2264 <_adc_sync_init+0x44>)
    2234:	22d4      	movs	r2, #212	; 0xd4
    2236:	0018      	movs	r0, r3
    2238:	4b0b      	ldr	r3, [pc, #44]	; (2268 <_adc_sync_init+0x48>)
    223a:	4798      	blx	r3

	device->hw = hw;
    223c:	687b      	ldr	r3, [r7, #4]
    223e:	683a      	ldr	r2, [r7, #0]
    2240:	601a      	str	r2, [r3, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    2242:	683b      	ldr	r3, [r7, #0]
    2244:	0018      	movs	r0, r3
    2246:	4b09      	ldr	r3, [pc, #36]	; (226c <_adc_sync_init+0x4c>)
    2248:	4798      	blx	r3
    224a:	0003      	movs	r3, r0
    224c:	001a      	movs	r2, r3
    224e:	683b      	ldr	r3, [r7, #0]
    2250:	0011      	movs	r1, r2
    2252:	0018      	movs	r0, r3
    2254:	4b06      	ldr	r3, [pc, #24]	; (2270 <_adc_sync_init+0x50>)
    2256:	4798      	blx	r3
    2258:	0003      	movs	r3, r0
}
    225a:	0018      	movs	r0, r3
    225c:	46bd      	mov	sp, r7
    225e:	b002      	add	sp, #8
    2260:	bd80      	pop	{r7, pc}
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	00008590 	.word	0x00008590
    2268:	00001b19 	.word	0x00001b19
    226c:	00001f49 	.word	0x00001f49
    2270:	00001fcd 	.word	0x00001fcd

00002274 <_adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
    2274:	b580      	push	{r7, lr}
    2276:	b082      	sub	sp, #8
    2278:	af00      	add	r7, sp, #0
    227a:	6078      	str	r0, [r7, #4]
    227c:	000a      	movs	r2, r1
    227e:	1cfb      	adds	r3, r7, #3
    2280:	701a      	strb	r2, [r3, #0]
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    2282:	687b      	ldr	r3, [r7, #4]
    2284:	681b      	ldr	r3, [r3, #0]
    2286:	0018      	movs	r0, r3
    2288:	4b02      	ldr	r3, [pc, #8]	; (2294 <_adc_sync_enable_channel+0x20>)
    228a:	4798      	blx	r3
}
    228c:	46c0      	nop			; (mov r8, r8)
    228e:	46bd      	mov	sp, r7
    2290:	b002      	add	sp, #8
    2292:	bd80      	pop	{r7, pc}
    2294:	00001bd1 	.word	0x00001bd1

00002298 <_adc_sync_disable_channel>:

/**
 * \brief Disable ADC
 */
void _adc_sync_disable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
    2298:	b580      	push	{r7, lr}
    229a:	b082      	sub	sp, #8
    229c:	af00      	add	r7, sp, #0
    229e:	6078      	str	r0, [r7, #4]
    22a0:	000a      	movs	r2, r1
    22a2:	1cfb      	adds	r3, r7, #3
    22a4:	701a      	strb	r2, [r3, #0]
	(void)channel;

	hri_adc_clear_CTRLA_ENABLE_bit(device->hw);
    22a6:	687b      	ldr	r3, [r7, #4]
    22a8:	681b      	ldr	r3, [r3, #0]
    22aa:	0018      	movs	r0, r3
    22ac:	4b02      	ldr	r3, [pc, #8]	; (22b8 <_adc_sync_disable_channel+0x20>)
    22ae:	4798      	blx	r3
}
    22b0:	46c0      	nop			; (mov r8, r8)
    22b2:	46bd      	mov	sp, r7
    22b4:	b002      	add	sp, #8
    22b6:	bd80      	pop	{r7, pc}
    22b8:	00001c01 	.word	0x00001c01

000022bc <_adc_sync_get_data_size>:

/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
    22bc:	b580      	push	{r7, lr}
    22be:	b082      	sub	sp, #8
    22c0:	af00      	add	r7, sp, #0
    22c2:	6078      	str	r0, [r7, #4]
	return hri_adc_read_CTRLC_RESSEL_bf(device->hw) == ADC_CTRLC_RESSEL_8BIT_Val ? 1 : 2;
    22c4:	687b      	ldr	r3, [r7, #4]
    22c6:	681b      	ldr	r3, [r3, #0]
    22c8:	0018      	movs	r0, r3
    22ca:	4b06      	ldr	r3, [pc, #24]	; (22e4 <_adc_sync_get_data_size+0x28>)
    22cc:	4798      	blx	r3
    22ce:	0003      	movs	r3, r0
    22d0:	2b03      	cmp	r3, #3
    22d2:	d101      	bne.n	22d8 <_adc_sync_get_data_size+0x1c>
    22d4:	2301      	movs	r3, #1
    22d6:	e000      	b.n	22da <_adc_sync_get_data_size+0x1e>
    22d8:	2302      	movs	r3, #2
}
    22da:	0018      	movs	r0, r3
    22dc:	46bd      	mov	sp, r7
    22de:	b002      	add	sp, #8
    22e0:	bd80      	pop	{r7, pc}
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	00001d35 	.word	0x00001d35

000022e8 <_adc_sync_is_channel_conversion_done>:

/**
 * \brief Check if conversion is done
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
    22e8:	b580      	push	{r7, lr}
    22ea:	b082      	sub	sp, #8
    22ec:	af00      	add	r7, sp, #0
    22ee:	6078      	str	r0, [r7, #4]
    22f0:	000a      	movs	r2, r1
    22f2:	1cfb      	adds	r3, r7, #3
    22f4:	701a      	strb	r2, [r3, #0]
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    22f6:	687b      	ldr	r3, [r7, #4]
    22f8:	681b      	ldr	r3, [r3, #0]
    22fa:	0018      	movs	r0, r3
    22fc:	4b03      	ldr	r3, [pc, #12]	; (230c <_adc_sync_is_channel_conversion_done+0x24>)
    22fe:	4798      	blx	r3
    2300:	0003      	movs	r3, r0
}
    2302:	0018      	movs	r0, r3
    2304:	46bd      	mov	sp, r7
    2306:	b002      	add	sp, #8
    2308:	bd80      	pop	{r7, pc}
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	00001b99 	.word	0x00001b99

00002310 <_adc_sync_convert>:

/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
    2310:	b580      	push	{r7, lr}
    2312:	b082      	sub	sp, #8
    2314:	af00      	add	r7, sp, #0
    2316:	6078      	str	r0, [r7, #4]
	hri_adc_set_SWTRIG_START_bit(device->hw);
    2318:	687b      	ldr	r3, [r7, #4]
    231a:	681b      	ldr	r3, [r3, #0]
    231c:	0018      	movs	r0, r3
    231e:	4b03      	ldr	r3, [pc, #12]	; (232c <_adc_sync_convert+0x1c>)
    2320:	4798      	blx	r3
}
    2322:	46c0      	nop			; (mov r8, r8)
    2324:	46bd      	mov	sp, r7
    2326:	b002      	add	sp, #8
    2328:	bd80      	pop	{r7, pc}
    232a:	46c0      	nop			; (mov r8, r8)
    232c:	00001ebd 	.word	0x00001ebd

00002330 <_adc_sync_read_channel_data>:

/**
 * \brief Retrieve the conversion result
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
    2330:	b580      	push	{r7, lr}
    2332:	b082      	sub	sp, #8
    2334:	af00      	add	r7, sp, #0
    2336:	6078      	str	r0, [r7, #4]
    2338:	000a      	movs	r2, r1
    233a:	1cfb      	adds	r3, r7, #3
    233c:	701a      	strb	r2, [r3, #0]
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    233e:	687b      	ldr	r3, [r7, #4]
    2340:	681b      	ldr	r3, [r3, #0]
    2342:	0018      	movs	r0, r3
    2344:	4b03      	ldr	r3, [pc, #12]	; (2354 <_adc_sync_read_channel_data+0x24>)
    2346:	4798      	blx	r3
    2348:	0003      	movs	r3, r0
}
    234a:	0018      	movs	r0, r3
    234c:	46bd      	mov	sp, r7
    234e:	b002      	add	sp, #8
    2350:	bd80      	pop	{r7, pc}
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	00001bbb 	.word	0x00001bbb

00002358 <_adc_get_adc_sync>:

/**
 * \brief Retrieve ADC sync helper functions
 */
void *_adc_get_adc_sync(void)
{
    2358:	b580      	push	{r7, lr}
    235a:	af00      	add	r7, sp, #0
	return (void *)NULL;
    235c:	2300      	movs	r3, #0
}
    235e:	0018      	movs	r0, r3
    2360:	46bd      	mov	sp, r7
    2362:	bd80      	pop	{r7, pc}

00002364 <hri_nvmctrl_set_CTRLB_RWS_bf>:
	((Nvmctrl *)hw)->CTRLB.reg ^= NVMCTRL_CTRLB_MANW;
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
    2364:	b580      	push	{r7, lr}
    2366:	b082      	sub	sp, #8
    2368:	af00      	add	r7, sp, #0
    236a:	6078      	str	r0, [r7, #4]
    236c:	6039      	str	r1, [r7, #0]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
    236e:	687b      	ldr	r3, [r7, #4]
    2370:	685a      	ldr	r2, [r3, #4]
    2372:	683b      	ldr	r3, [r7, #0]
    2374:	005b      	lsls	r3, r3, #1
    2376:	211e      	movs	r1, #30
    2378:	400b      	ands	r3, r1
    237a:	431a      	orrs	r2, r3
    237c:	687b      	ldr	r3, [r7, #4]
    237e:	605a      	str	r2, [r3, #4]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    2380:	46c0      	nop			; (mov r8, r8)
    2382:	46bd      	mov	sp, r7
    2384:	b002      	add	sp, #8
    2386:	bd80      	pop	{r7, pc}

00002388 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2388:	b580      	push	{r7, lr}
    238a:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    238c:	4b0a      	ldr	r3, [pc, #40]	; (23b8 <_init_chip+0x30>)
    238e:	2100      	movs	r1, #0
    2390:	0018      	movs	r0, r3
    2392:	4b0a      	ldr	r3, [pc, #40]	; (23bc <_init_chip+0x34>)
    2394:	4798      	blx	r3

	_osc32kctrl_init_sources();
    2396:	4b0a      	ldr	r3, [pc, #40]	; (23c0 <_init_chip+0x38>)
    2398:	4798      	blx	r3
	_oscctrl_init_sources();
    239a:	4b0a      	ldr	r3, [pc, #40]	; (23c4 <_init_chip+0x3c>)
    239c:	4798      	blx	r3
	_mclk_init();
    239e:	4b0a      	ldr	r3, [pc, #40]	; (23c8 <_init_chip+0x40>)
    23a0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    23a2:	4b0a      	ldr	r3, [pc, #40]	; (23cc <_init_chip+0x44>)
    23a4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    23a6:	20ff      	movs	r0, #255	; 0xff
    23a8:	4b09      	ldr	r3, [pc, #36]	; (23d0 <_init_chip+0x48>)
    23aa:	4798      	blx	r3

	_div_init();
    23ac:	4b09      	ldr	r3, [pc, #36]	; (23d4 <_init_chip+0x4c>)
    23ae:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
    23b0:	46c0      	nop			; (mov r8, r8)
    23b2:	46bd      	mov	sp, r7
    23b4:	bd80      	pop	{r7, pc}
    23b6:	46c0      	nop			; (mov r8, r8)
    23b8:	41004000 	.word	0x41004000
    23bc:	00002365 	.word	0x00002365
    23c0:	000026c5 	.word	0x000026c5
    23c4:	00002809 	.word	0x00002809
    23c8:	0000264d 	.word	0x0000264d
    23cc:	00002885 	.word	0x00002885
    23d0:	000025e5 	.word	0x000025e5
    23d4:	0000248d 	.word	0x0000248d

000023d8 <hri_divas_write_CTRLA_DLZ_bit>:
	tmp = (tmp & DIVAS_CTRLA_DLZ) >> DIVAS_CTRLA_DLZ_Pos;
	return (bool)tmp;
}

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
    23d8:	b580      	push	{r7, lr}
    23da:	b084      	sub	sp, #16
    23dc:	af00      	add	r7, sp, #0
    23de:	6078      	str	r0, [r7, #4]
    23e0:	000a      	movs	r2, r1
    23e2:	1cfb      	adds	r3, r7, #3
    23e4:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
    23e6:	230f      	movs	r3, #15
    23e8:	18fb      	adds	r3, r7, r3
    23ea:	687a      	ldr	r2, [r7, #4]
    23ec:	7812      	ldrb	r2, [r2, #0]
    23ee:	701a      	strb	r2, [r3, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
    23f0:	230f      	movs	r3, #15
    23f2:	18fb      	adds	r3, r7, r3
    23f4:	220f      	movs	r2, #15
    23f6:	18ba      	adds	r2, r7, r2
    23f8:	7812      	ldrb	r2, [r2, #0]
    23fa:	2102      	movs	r1, #2
    23fc:	438a      	bics	r2, r1
    23fe:	701a      	strb	r2, [r3, #0]
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
    2400:	1cfb      	adds	r3, r7, #3
    2402:	781b      	ldrb	r3, [r3, #0]
    2404:	005b      	lsls	r3, r3, #1
    2406:	b25a      	sxtb	r2, r3
    2408:	230f      	movs	r3, #15
    240a:	18fb      	adds	r3, r7, r3
    240c:	781b      	ldrb	r3, [r3, #0]
    240e:	b25b      	sxtb	r3, r3
    2410:	4313      	orrs	r3, r2
    2412:	b25a      	sxtb	r2, r3
    2414:	230f      	movs	r3, #15
    2416:	18fb      	adds	r3, r7, r3
    2418:	701a      	strb	r2, [r3, #0]
	((Divas *)hw)->CTRLA.reg = tmp;
    241a:	687b      	ldr	r3, [r7, #4]
    241c:	220f      	movs	r2, #15
    241e:	18ba      	adds	r2, r7, r2
    2420:	7812      	ldrb	r2, [r2, #0]
    2422:	701a      	strb	r2, [r3, #0]
	DIVAS_CRITICAL_SECTION_LEAVE();
}
    2424:	46c0      	nop			; (mov r8, r8)
    2426:	46bd      	mov	sp, r7
    2428:	b004      	add	sp, #16
    242a:	bd80      	pop	{r7, pc}

0000242c <_divas_div>:
 *  \param[in] s Indicate operation mode: signed/unsigned
 *  \param[in] n The dividend
 *  \param[in] d The divisor
 */
static inline void _divas_div(const uint8_t s, const uint32_t n, const uint32_t d)
{
    242c:	b580      	push	{r7, lr}
    242e:	b084      	sub	sp, #16
    2430:	af00      	add	r7, sp, #0
    2432:	60b9      	str	r1, [r7, #8]
    2434:	607a      	str	r2, [r7, #4]
    2436:	230f      	movs	r3, #15
    2438:	18fb      	adds	r3, r7, r3
    243a:	1c02      	adds	r2, r0, #0
    243c:	701a      	strb	r2, [r3, #0]
	DIVAS->CTRLA.bit.SIGNED = s;
    243e:	2390      	movs	r3, #144	; 0x90
    2440:	05da      	lsls	r2, r3, #23
    2442:	230f      	movs	r3, #15
    2444:	18fb      	adds	r3, r7, r3
    2446:	781b      	ldrb	r3, [r3, #0]
    2448:	2101      	movs	r1, #1
    244a:	400b      	ands	r3, r1
    244c:	b2d9      	uxtb	r1, r3
    244e:	7813      	ldrb	r3, [r2, #0]
    2450:	2001      	movs	r0, #1
    2452:	4008      	ands	r0, r1
    2454:	2101      	movs	r1, #1
    2456:	438b      	bics	r3, r1
    2458:	1c19      	adds	r1, r3, #0
    245a:	1c03      	adds	r3, r0, #0
    245c:	430b      	orrs	r3, r1
    245e:	7013      	strb	r3, [r2, #0]
	DIVAS->DIVIDEND.reg     = n;
    2460:	2390      	movs	r3, #144	; 0x90
    2462:	05db      	lsls	r3, r3, #23
    2464:	68ba      	ldr	r2, [r7, #8]
    2466:	609a      	str	r2, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
    2468:	2390      	movs	r3, #144	; 0x90
    246a:	05db      	lsls	r3, r3, #23
    246c:	687a      	ldr	r2, [r7, #4]
    246e:	60da      	str	r2, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
    2470:	46c0      	nop			; (mov r8, r8)
    2472:	2390      	movs	r3, #144	; 0x90
    2474:	05db      	lsls	r3, r3, #23
    2476:	791b      	ldrb	r3, [r3, #4]
    2478:	07db      	lsls	r3, r3, #31
    247a:	0fdb      	lsrs	r3, r3, #31
    247c:	b2db      	uxtb	r3, r3
    247e:	2b00      	cmp	r3, #0
    2480:	d1f7      	bne.n	2472 <_divas_div+0x46>
		/* Wait the division is complete. */
	}
}
    2482:	46c0      	nop			; (mov r8, r8)
    2484:	46bd      	mov	sp, r7
    2486:	b004      	add	sp, #16
    2488:	bd80      	pop	{r7, pc}
	...

0000248c <_div_init>:

/**
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
    248c:	b580      	push	{r7, lr}
    248e:	af00      	add	r7, sp, #0
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
    2490:	2390      	movs	r3, #144	; 0x90
    2492:	05db      	lsls	r3, r3, #23
    2494:	2100      	movs	r1, #0
    2496:	0018      	movs	r0, r3
    2498:	4b02      	ldr	r3, [pc, #8]	; (24a4 <_div_init+0x18>)
    249a:	4798      	blx	r3
}
    249c:	46c0      	nop			; (mov r8, r8)
    249e:	46bd      	mov	sp, r7
    24a0:	bd80      	pop	{r7, pc}
    24a2:	46c0      	nop			; (mov r8, r8)
    24a4:	000023d9 	.word	0x000023d9

000024a8 <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
    24a8:	b580      	push	{r7, lr}
    24aa:	b086      	sub	sp, #24
    24ac:	af00      	add	r7, sp, #0
    24ae:	6078      	str	r0, [r7, #4]
    24b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    24b2:	f3ef 8310 	mrs	r3, PRIMASK
    24b6:	60fb      	str	r3, [r7, #12]
  return(result);
    24b8:	68fb      	ldr	r3, [r7, #12]
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
    24ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    24bc:	b672      	cpsid	i
	_divas_div(0, numerator, denominator);
    24be:	683a      	ldr	r2, [r7, #0]
    24c0:	687b      	ldr	r3, [r7, #4]
    24c2:	0019      	movs	r1, r3
    24c4:	2000      	movs	r0, #0
    24c6:	4b08      	ldr	r3, [pc, #32]	; (24e8 <__aeabi_uidiv+0x40>)
    24c8:	4798      	blx	r3
	res = _divas_result32();
    24ca:	2390      	movs	r3, #144	; 0x90
    24cc:	05db      	lsls	r3, r3, #23
    24ce:	691b      	ldr	r3, [r3, #16]
    24d0:	617b      	str	r3, [r7, #20]
	_DIVAS_CRITICAL_LEAVE();
    24d2:	68bb      	ldr	r3, [r7, #8]
    24d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    24d6:	693b      	ldr	r3, [r7, #16]
    24d8:	f383 8810 	msr	PRIMASK, r3
	return res;
    24dc:	697b      	ldr	r3, [r7, #20]
}
    24de:	0018      	movs	r0, r3
    24e0:	46bd      	mov	sp, r7
    24e2:	b006      	add	sp, #24
    24e4:	bd80      	pop	{r7, pc}
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	0000242d 	.word	0x0000242d

000024ec <__aeabi_idivmod>:

/**
 * \brief Do signed division, return result and remainder
 */
uint64_t __aeabi_idivmod(int numerator, int denominator)
{
    24ec:	b590      	push	{r4, r7, lr}
    24ee:	b089      	sub	sp, #36	; 0x24
    24f0:	af00      	add	r7, sp, #0
    24f2:	6078      	str	r0, [r7, #4]
    24f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    24f6:	f3ef 8310 	mrs	r3, PRIMASK
    24fa:	613b      	str	r3, [r7, #16]
  return(result);
    24fc:	693b      	ldr	r3, [r7, #16]
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
    24fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    2500:	b672      	cpsid	i
	_divas_div(1, numerator, denominator);
    2502:	687b      	ldr	r3, [r7, #4]
    2504:	683a      	ldr	r2, [r7, #0]
    2506:	0019      	movs	r1, r3
    2508:	2001      	movs	r0, #1
    250a:	4b09      	ldr	r3, [pc, #36]	; (2530 <__aeabi_idivmod+0x44>)
    250c:	4798      	blx	r3
	res = _divas_result64();
    250e:	4b09      	ldr	r3, [pc, #36]	; (2534 <__aeabi_idivmod+0x48>)
    2510:	685c      	ldr	r4, [r3, #4]
    2512:	681b      	ldr	r3, [r3, #0]
    2514:	61bb      	str	r3, [r7, #24]
    2516:	61fc      	str	r4, [r7, #28]
	_DIVAS_CRITICAL_LEAVE();
    2518:	68fb      	ldr	r3, [r7, #12]
    251a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    251c:	697b      	ldr	r3, [r7, #20]
    251e:	f383 8810 	msr	PRIMASK, r3
	return res;
    2522:	69bb      	ldr	r3, [r7, #24]
    2524:	69fc      	ldr	r4, [r7, #28]
}
    2526:	0018      	movs	r0, r3
    2528:	0021      	movs	r1, r4
    252a:	46bd      	mov	sp, r7
    252c:	b009      	add	sp, #36	; 0x24
    252e:	bd90      	pop	{r4, r7, pc}
    2530:	0000242d 	.word	0x0000242d
    2534:	48000010 	.word	0x48000010

00002538 <__aeabi_uidivmod>:

/**
 * \brief Do unsigned division, return result and remainder
 */
uint64_t __aeabi_uidivmod(unsigned numerator, unsigned denominator)
{
    2538:	b590      	push	{r4, r7, lr}
    253a:	b089      	sub	sp, #36	; 0x24
    253c:	af00      	add	r7, sp, #0
    253e:	6078      	str	r0, [r7, #4]
    2540:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    2542:	f3ef 8310 	mrs	r3, PRIMASK
    2546:	613b      	str	r3, [r7, #16]
  return(result);
    2548:	693b      	ldr	r3, [r7, #16]
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
    254a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    254c:	b672      	cpsid	i
	_divas_div(0, numerator, denominator);
    254e:	683a      	ldr	r2, [r7, #0]
    2550:	687b      	ldr	r3, [r7, #4]
    2552:	0019      	movs	r1, r3
    2554:	2000      	movs	r0, #0
    2556:	4b09      	ldr	r3, [pc, #36]	; (257c <__aeabi_uidivmod+0x44>)
    2558:	4798      	blx	r3
	res = _divas_result64();
    255a:	4b09      	ldr	r3, [pc, #36]	; (2580 <__aeabi_uidivmod+0x48>)
    255c:	685c      	ldr	r4, [r3, #4]
    255e:	681b      	ldr	r3, [r3, #0]
    2560:	61bb      	str	r3, [r7, #24]
    2562:	61fc      	str	r4, [r7, #28]
	_DIVAS_CRITICAL_LEAVE();
    2564:	68fb      	ldr	r3, [r7, #12]
    2566:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2568:	697b      	ldr	r3, [r7, #20]
    256a:	f383 8810 	msr	PRIMASK, r3
	return res;
    256e:	69bb      	ldr	r3, [r7, #24]
    2570:	69fc      	ldr	r4, [r7, #28]
}
    2572:	0018      	movs	r0, r3
    2574:	0021      	movs	r1, r4
    2576:	46bd      	mov	sp, r7
    2578:	b009      	add	sp, #36	; 0x24
    257a:	bd90      	pop	{r4, r7, pc}
    257c:	0000242d 	.word	0x0000242d
    2580:	48000010 	.word	0x48000010

00002584 <hri_gclk_wait_for_sync>:
{
    2584:	b580      	push	{r7, lr}
    2586:	b082      	sub	sp, #8
    2588:	af00      	add	r7, sp, #0
    258a:	6078      	str	r0, [r7, #4]
    258c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    258e:	46c0      	nop			; (mov r8, r8)
    2590:	687b      	ldr	r3, [r7, #4]
    2592:	685b      	ldr	r3, [r3, #4]
    2594:	683a      	ldr	r2, [r7, #0]
    2596:	4013      	ands	r3, r2
    2598:	d1fa      	bne.n	2590 <hri_gclk_wait_for_sync+0xc>
}
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	46bd      	mov	sp, r7
    259e:	b002      	add	sp, #8
    25a0:	bd80      	pop	{r7, pc}
	...

000025a4 <hri_gclk_write_GENCTRL_reg>:
{
    25a4:	b580      	push	{r7, lr}
    25a6:	b084      	sub	sp, #16
    25a8:	af00      	add	r7, sp, #0
    25aa:	60f8      	str	r0, [r7, #12]
    25ac:	607a      	str	r2, [r7, #4]
    25ae:	230b      	movs	r3, #11
    25b0:	18fb      	adds	r3, r7, r3
    25b2:	1c0a      	adds	r2, r1, #0
    25b4:	701a      	strb	r2, [r3, #0]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    25b6:	230b      	movs	r3, #11
    25b8:	18fb      	adds	r3, r7, r3
    25ba:	781a      	ldrb	r2, [r3, #0]
    25bc:	68fb      	ldr	r3, [r7, #12]
    25be:	3208      	adds	r2, #8
    25c0:	0092      	lsls	r2, r2, #2
    25c2:	6879      	ldr	r1, [r7, #4]
    25c4:	50d1      	str	r1, [r2, r3]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    25c6:	4a05      	ldr	r2, [pc, #20]	; (25dc <hri_gclk_write_GENCTRL_reg+0x38>)
    25c8:	68fb      	ldr	r3, [r7, #12]
    25ca:	0011      	movs	r1, r2
    25cc:	0018      	movs	r0, r3
    25ce:	4b04      	ldr	r3, [pc, #16]	; (25e0 <hri_gclk_write_GENCTRL_reg+0x3c>)
    25d0:	4798      	blx	r3
}
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	46bd      	mov	sp, r7
    25d6:	b004      	add	sp, #16
    25d8:	bd80      	pop	{r7, pc}
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	000007fd 	.word	0x000007fd
    25e0:	00002585 	.word	0x00002585

000025e4 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    25e4:	b580      	push	{r7, lr}
    25e6:	b082      	sub	sp, #8
    25e8:	af00      	add	r7, sp, #0
    25ea:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    25ec:	687b      	ldr	r3, [r7, #4]
    25ee:	2201      	movs	r2, #1
    25f0:	4013      	ands	r3, r2
    25f2:	d005      	beq.n	2600 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    25f4:	4a09      	ldr	r2, [pc, #36]	; (261c <_gclk_init_generators_by_fref+0x38>)
    25f6:	4b0a      	ldr	r3, [pc, #40]	; (2620 <_gclk_init_generators_by_fref+0x3c>)
    25f8:	2100      	movs	r1, #0
    25fa:	0018      	movs	r0, r3
    25fc:	4b09      	ldr	r3, [pc, #36]	; (2624 <_gclk_init_generators_by_fref+0x40>)
    25fe:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2600:	687b      	ldr	r3, [r7, #4]
    2602:	2204      	movs	r2, #4
    2604:	4013      	ands	r3, r2
    2606:	d005      	beq.n	2614 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    2608:	4a07      	ldr	r2, [pc, #28]	; (2628 <_gclk_init_generators_by_fref+0x44>)
    260a:	4b05      	ldr	r3, [pc, #20]	; (2620 <_gclk_init_generators_by_fref+0x3c>)
    260c:	2102      	movs	r1, #2
    260e:	0018      	movs	r0, r3
    2610:	4b04      	ldr	r3, [pc, #16]	; (2624 <_gclk_init_generators_by_fref+0x40>)
    2612:	4798      	blx	r3
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
    2614:	46c0      	nop			; (mov r8, r8)
    2616:	46bd      	mov	sp, r7
    2618:	b002      	add	sp, #8
    261a:	bd80      	pop	{r7, pc}
    261c:	00010106 	.word	0x00010106
    2620:	40001c00 	.word	0x40001c00
    2624:	000025a5 	.word	0x000025a5
    2628:	00010103 	.word	0x00010103

0000262c <hri_mclk_write_CPUDIV_reg>:
{
    262c:	b580      	push	{r7, lr}
    262e:	b082      	sub	sp, #8
    2630:	af00      	add	r7, sp, #0
    2632:	6078      	str	r0, [r7, #4]
    2634:	000a      	movs	r2, r1
    2636:	1cfb      	adds	r3, r7, #3
    2638:	701a      	strb	r2, [r3, #0]
	((Mclk *)hw)->CPUDIV.reg = data;
    263a:	687b      	ldr	r3, [r7, #4]
    263c:	1cfa      	adds	r2, r7, #3
    263e:	7812      	ldrb	r2, [r2, #0]
    2640:	711a      	strb	r2, [r3, #4]
}
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	46bd      	mov	sp, r7
    2646:	b002      	add	sp, #8
    2648:	bd80      	pop	{r7, pc}
	...

0000264c <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    264c:	b580      	push	{r7, lr}
    264e:	b082      	sub	sp, #8
    2650:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    2652:	4b05      	ldr	r3, [pc, #20]	; (2668 <_mclk_init+0x1c>)
    2654:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
    2656:	687b      	ldr	r3, [r7, #4]
    2658:	2101      	movs	r1, #1
    265a:	0018      	movs	r0, r3
    265c:	4b03      	ldr	r3, [pc, #12]	; (266c <_mclk_init+0x20>)
    265e:	4798      	blx	r3
}
    2660:	46c0      	nop			; (mov r8, r8)
    2662:	46bd      	mov	sp, r7
    2664:	b002      	add	sp, #8
    2666:	bd80      	pop	{r7, pc}
    2668:	40000800 	.word	0x40000800
    266c:	0000262d 	.word	0x0000262d

00002670 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    2670:	b580      	push	{r7, lr}
    2672:	b082      	sub	sp, #8
    2674:	af00      	add	r7, sp, #0
    2676:	6078      	str	r0, [r7, #4]
    2678:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    267a:	687b      	ldr	r3, [r7, #4]
    267c:	683a      	ldr	r2, [r7, #0]
    267e:	611a      	str	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    2680:	46c0      	nop			; (mov r8, r8)
    2682:	46bd      	mov	sp, r7
    2684:	b002      	add	sp, #8
    2686:	bd80      	pop	{r7, pc}

00002688 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    2688:	b580      	push	{r7, lr}
    268a:	b084      	sub	sp, #16
    268c:	af00      	add	r7, sp, #0
    268e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2690:	687b      	ldr	r3, [r7, #4]
    2692:	69db      	ldr	r3, [r3, #28]
    2694:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    2696:	68fb      	ldr	r3, [r7, #12]
    2698:	0a1b      	lsrs	r3, r3, #8
    269a:	221f      	movs	r2, #31
    269c:	4013      	ands	r3, r2
    269e:	60fb      	str	r3, [r7, #12]
	return tmp;
    26a0:	68fb      	ldr	r3, [r7, #12]
}
    26a2:	0018      	movs	r0, r3
    26a4:	46bd      	mov	sp, r7
    26a6:	b004      	add	sp, #16
    26a8:	bd80      	pop	{r7, pc}

000026aa <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    26aa:	b580      	push	{r7, lr}
    26ac:	b082      	sub	sp, #8
    26ae:	af00      	add	r7, sp, #0
    26b0:	6078      	str	r0, [r7, #4]
    26b2:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    26b4:	687b      	ldr	r3, [r7, #4]
    26b6:	683a      	ldr	r2, [r7, #0]
    26b8:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    26ba:	46c0      	nop			; (mov r8, r8)
    26bc:	46bd      	mov	sp, r7
    26be:	b002      	add	sp, #8
    26c0:	bd80      	pop	{r7, pc}
	...

000026c4 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    26c4:	b580      	push	{r7, lr}
    26c6:	b082      	sub	sp, #8
    26c8:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    26ca:	4b10      	ldr	r3, [pc, #64]	; (270c <_osc32kctrl_init_sources+0x48>)
    26cc:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    26ce:	1cbb      	adds	r3, r7, #2
    26d0:	2200      	movs	r2, #0
    26d2:	801a      	strh	r2, [r3, #0]
	        | (CONF_OSC32K_RUNSTDBY << OSC32KCTRL_OSC32K_RUNSTDBY_Pos)
	        | (CONF_OSC32K_EN1K << OSC32KCTRL_OSC32K_EN1K_Pos) | (CONF_OSC32K_EN32K << OSC32KCTRL_OSC32K_EN32K_Pos)
	        | (CONF_OSC32K_ENABLE << OSC32KCTRL_OSC32K_ENABLE_Pos));
#endif
#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    26d4:	687b      	ldr	r3, [r7, #4]
    26d6:	0018      	movs	r0, r3
    26d8:	4b0d      	ldr	r3, [pc, #52]	; (2710 <_osc32kctrl_init_sources+0x4c>)
    26da:	4798      	blx	r3
    26dc:	0002      	movs	r2, r0
    26de:	1cbb      	adds	r3, r7, #2
    26e0:	801a      	strh	r2, [r3, #0]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    26e2:	1cbb      	adds	r3, r7, #2
    26e4:	881b      	ldrh	r3, [r3, #0]
    26e6:	021b      	lsls	r3, r3, #8
    26e8:	001a      	movs	r2, r3
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    26ea:	23f8      	movs	r3, #248	; 0xf8
    26ec:	015b      	lsls	r3, r3, #5
    26ee:	401a      	ands	r2, r3
    26f0:	687b      	ldr	r3, [r7, #4]
    26f2:	0011      	movs	r1, r2
    26f4:	0018      	movs	r0, r3
    26f6:	4b07      	ldr	r3, [pc, #28]	; (2714 <_osc32kctrl_init_sources+0x50>)
    26f8:	4798      	blx	r3
#if CONF_OSC32K_ENABLE == 1 && CONF_OSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_OSC32KRDY_bit(hw))
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	2100      	movs	r1, #0
    26fe:	0018      	movs	r0, r3
    2700:	4b05      	ldr	r3, [pc, #20]	; (2718 <_osc32kctrl_init_sources+0x54>)
    2702:	4798      	blx	r3
	(void)calib;
}
    2704:	46c0      	nop			; (mov r8, r8)
    2706:	46bd      	mov	sp, r7
    2708:	b002      	add	sp, #8
    270a:	bd80      	pop	{r7, pc}
    270c:	40001400 	.word	0x40001400
    2710:	00002689 	.word	0x00002689
    2714:	000026ab 	.word	0x000026ab
    2718:	00002671 	.word	0x00002671

0000271c <hri_oscctrl_osc48msyncbusy_wait_for_sync>:
typedef uint8_t  hri_oscctrl_osc48mctrl_reg_t;
typedef uint8_t  hri_oscctrl_osc48mdiv_reg_t;
typedef uint8_t  hri_oscctrl_osc48mstup_reg_t;

static inline void hri_oscctrl_osc48msyncbusy_wait_for_sync(const void *const hw, hri_oscctrl_osc48msyncbusy_reg_t reg)
{
    271c:	b580      	push	{r7, lr}
    271e:	b082      	sub	sp, #8
    2720:	af00      	add	r7, sp, #0
    2722:	6078      	str	r0, [r7, #4]
    2724:	6039      	str	r1, [r7, #0]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
    2726:	46c0      	nop			; (mov r8, r8)
    2728:	687b      	ldr	r3, [r7, #4]
    272a:	699b      	ldr	r3, [r3, #24]
    272c:	683a      	ldr	r2, [r7, #0]
    272e:	4013      	ands	r3, r2
    2730:	d1fa      	bne.n	2728 <hri_oscctrl_osc48msyncbusy_wait_for_sync+0xc>
	};
}
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	46bd      	mov	sp, r7
    2736:	b002      	add	sp, #8
    2738:	bd80      	pop	{r7, pc}

0000273a <hri_oscctrl_get_STATUS_OSC48MRDY_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCCKSW) >> OSCCTRL_STATUS_XOSCCKSW_Pos;
}

static inline bool hri_oscctrl_get_STATUS_OSC48MRDY_bit(const void *const hw)
{
    273a:	b580      	push	{r7, lr}
    273c:	b082      	sub	sp, #8
    273e:	af00      	add	r7, sp, #0
    2740:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
    2742:	687b      	ldr	r3, [r7, #4]
    2744:	68db      	ldr	r3, [r3, #12]
    2746:	091b      	lsrs	r3, r3, #4
    2748:	2201      	movs	r2, #1
    274a:	4013      	ands	r3, r2
    274c:	1e5a      	subs	r2, r3, #1
    274e:	4193      	sbcs	r3, r2
    2750:	b2db      	uxtb	r3, r3
}
    2752:	0018      	movs	r0, r3
    2754:	46bd      	mov	sp, r7
    2756:	b002      	add	sp, #8
    2758:	bd80      	pop	{r7, pc}

0000275a <hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit>:
{
	return ((Oscctrl *)hw)->STATUS.reg;
}

static inline bool hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(const void *const hw)
{
    275a:	b580      	push	{r7, lr}
    275c:	b082      	sub	sp, #8
    275e:	af00      	add	r7, sp, #0
    2760:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
    2762:	687b      	ldr	r3, [r7, #4]
    2764:	699b      	ldr	r3, [r3, #24]
	       >> OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV_Pos;
    2766:	089b      	lsrs	r3, r3, #2
    2768:	2201      	movs	r2, #1
    276a:	4013      	ands	r3, r2
    276c:	1e5a      	subs	r2, r3, #1
    276e:	4193      	sbcs	r3, r2
    2770:	b2db      	uxtb	r3, r3
}
    2772:	0018      	movs	r0, r3
    2774:	46bd      	mov	sp, r7
    2776:	b002      	add	sp, #8
    2778:	bd80      	pop	{r7, pc}

0000277a <hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit>:
	((Oscctrl *)hw)->OSC48MCTRL.reg ^= OSCCTRL_OSC48MCTRL_RUNSTDBY;
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}

static inline void hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(const void *const hw)
{
    277a:	b580      	push	{r7, lr}
    277c:	b082      	sub	sp, #8
    277e:	af00      	add	r7, sp, #0
    2780:	6078      	str	r0, [r7, #4]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
    2782:	687b      	ldr	r3, [r7, #4]
    2784:	7d1b      	ldrb	r3, [r3, #20]
    2786:	b2db      	uxtb	r3, r3
    2788:	2280      	movs	r2, #128	; 0x80
    278a:	4252      	negs	r2, r2
    278c:	4313      	orrs	r3, r2
    278e:	b2da      	uxtb	r2, r3
    2790:	687b      	ldr	r3, [r7, #4]
    2792:	751a      	strb	r2, [r3, #20]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    2794:	46c0      	nop			; (mov r8, r8)
    2796:	46bd      	mov	sp, r7
    2798:	b002      	add	sp, #8
    279a:	bd80      	pop	{r7, pc}

0000279c <hri_oscctrl_write_OSC48MCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
    279c:	b580      	push	{r7, lr}
    279e:	b082      	sub	sp, #8
    27a0:	af00      	add	r7, sp, #0
    27a2:	6078      	str	r0, [r7, #4]
    27a4:	000a      	movs	r2, r1
    27a6:	1cfb      	adds	r3, r7, #3
    27a8:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
    27aa:	687b      	ldr	r3, [r7, #4]
    27ac:	1cfa      	adds	r2, r7, #3
    27ae:	7812      	ldrb	r2, [r2, #0]
    27b0:	751a      	strb	r2, [r3, #20]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    27b2:	46c0      	nop			; (mov r8, r8)
    27b4:	46bd      	mov	sp, r7
    27b6:	b002      	add	sp, #8
    27b8:	bd80      	pop	{r7, pc}
	...

000027bc <hri_oscctrl_write_OSC48MDIV_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
    27bc:	b580      	push	{r7, lr}
    27be:	b082      	sub	sp, #8
    27c0:	af00      	add	r7, sp, #0
    27c2:	6078      	str	r0, [r7, #4]
    27c4:	000a      	movs	r2, r1
    27c6:	1cfb      	adds	r3, r7, #3
    27c8:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
    27ca:	687b      	ldr	r3, [r7, #4]
    27cc:	1cfa      	adds	r2, r7, #3
    27ce:	7812      	ldrb	r2, [r2, #0]
    27d0:	755a      	strb	r2, [r3, #21]
	hri_oscctrl_osc48msyncbusy_wait_for_sync(hw, OSCCTRL_OSC48MSYNCBUSY_MASK);
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	2104      	movs	r1, #4
    27d6:	0018      	movs	r0, r3
    27d8:	4b02      	ldr	r3, [pc, #8]	; (27e4 <hri_oscctrl_write_OSC48MDIV_reg+0x28>)
    27da:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    27dc:	46c0      	nop			; (mov r8, r8)
    27de:	46bd      	mov	sp, r7
    27e0:	b002      	add	sp, #8
    27e2:	bd80      	pop	{r7, pc}
    27e4:	0000271d 	.word	0x0000271d

000027e8 <hri_oscctrl_write_OSC48MSTUP_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
    27e8:	b580      	push	{r7, lr}
    27ea:	b082      	sub	sp, #8
    27ec:	af00      	add	r7, sp, #0
    27ee:	6078      	str	r0, [r7, #4]
    27f0:	000a      	movs	r2, r1
    27f2:	1cfb      	adds	r3, r7, #3
    27f4:	701a      	strb	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
    27f6:	687b      	ldr	r3, [r7, #4]
    27f8:	1cfa      	adds	r2, r7, #3
    27fa:	7812      	ldrb	r2, [r2, #0]
    27fc:	759a      	strb	r2, [r3, #22]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	46bd      	mov	sp, r7
    2802:	b002      	add	sp, #8
    2804:	bd80      	pop	{r7, pc}
	...

00002808 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    2808:	b580      	push	{r7, lr}
    280a:	b082      	sub	sp, #8
    280c:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    280e:	4b16      	ldr	r3, [pc, #88]	; (2868 <_oscctrl_init_sources+0x60>)
    2810:	607b      	str	r3, [r7, #4]
	        | (CONF_XOSC_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));

	hri_oscctrl_write_EVCTRL_reg(hw, (CONF_XOSC_CFDEO << OSCCTRL_EVCTRL_CFDEO_Pos));
#endif
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
    2812:	687b      	ldr	r3, [r7, #4]
    2814:	2102      	movs	r1, #2
    2816:	0018      	movs	r0, r3
    2818:	4b14      	ldr	r3, [pc, #80]	; (286c <_oscctrl_init_sources+0x64>)
    281a:	4798      	blx	r3
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
    281c:	687b      	ldr	r3, [r7, #4]
    281e:	210b      	movs	r1, #11
    2820:	0018      	movs	r0, r3
    2822:	4b13      	ldr	r3, [pc, #76]	; (2870 <_oscctrl_init_sources+0x68>)
    2824:	4798      	blx	r3
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
    2826:	46c0      	nop			; (mov r8, r8)
    2828:	687b      	ldr	r3, [r7, #4]
    282a:	0018      	movs	r0, r3
    282c:	4b11      	ldr	r3, [pc, #68]	; (2874 <_oscctrl_init_sources+0x6c>)
    282e:	4798      	blx	r3
    2830:	1e03      	subs	r3, r0, #0
    2832:	d1f9      	bne.n	2828 <_oscctrl_init_sources+0x20>
		;
	hri_oscctrl_write_OSC48MSTUP_reg(hw, OSCCTRL_OSC48MSTUP_STARTUP(CONF_OSC48M_STARTUP));
    2834:	687b      	ldr	r3, [r7, #4]
    2836:	2107      	movs	r1, #7
    2838:	0018      	movs	r0, r3
    283a:	4b0f      	ldr	r3, [pc, #60]	; (2878 <_oscctrl_init_sources+0x70>)
    283c:	4798      	blx	r3
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
    283e:	46c0      	nop			; (mov r8, r8)
    2840:	687b      	ldr	r3, [r7, #4]
    2842:	0018      	movs	r0, r3
    2844:	4b0d      	ldr	r3, [pc, #52]	; (287c <_oscctrl_init_sources+0x74>)
    2846:	4798      	blx	r3
    2848:	0003      	movs	r3, r0
    284a:	001a      	movs	r2, r3
    284c:	2301      	movs	r3, #1
    284e:	4053      	eors	r3, r2
    2850:	b2db      	uxtb	r3, r3
    2852:	2b00      	cmp	r3, #0
    2854:	d1f4      	bne.n	2840 <_oscctrl_init_sources+0x38>
		;
#endif
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
    2856:	687b      	ldr	r3, [r7, #4]
    2858:	0018      	movs	r0, r3
    285a:	4b09      	ldr	r3, [pc, #36]	; (2880 <_oscctrl_init_sources+0x78>)
    285c:	4798      	blx	r3
#endif
#endif
	(void)hw;
}
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	46bd      	mov	sp, r7
    2862:	b002      	add	sp, #8
    2864:	bd80      	pop	{r7, pc}
    2866:	46c0      	nop			; (mov r8, r8)
    2868:	40001000 	.word	0x40001000
    286c:	0000279d 	.word	0x0000279d
    2870:	000027bd 	.word	0x000027bd
    2874:	0000275b 	.word	0x0000275b
    2878:	000027e9 	.word	0x000027e9
    287c:	0000273b 	.word	0x0000273b
    2880:	0000277b 	.word	0x0000277b

00002884 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    2884:	b580      	push	{r7, lr}
    2886:	b082      	sub	sp, #8
    2888:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    288a:	4b03      	ldr	r3, [pc, #12]	; (2898 <_oscctrl_init_referenced_generators+0x14>)
    288c:	607b      	str	r3, [r7, #4]
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
    288e:	46c0      	nop			; (mov r8, r8)
    2890:	46bd      	mov	sp, r7
    2892:	b002      	add	sp, #8
    2894:	bd80      	pop	{r7, pc}
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	40001000 	.word	0x40001000

0000289c <hri_rtcmode0_wait_for_sync>:
typedef uint8_t  hri_rtc_freqcorr_reg_t;
typedef uint8_t  hri_rtcalarm_mask_reg_t;
typedef uint8_t  hri_rtcmode2_mask_reg_t;

static inline void hri_rtcmode0_wait_for_sync(const void *const hw, hri_rtcmode0_syncbusy_reg_t reg)
{
    289c:	b580      	push	{r7, lr}
    289e:	b082      	sub	sp, #8
    28a0:	af00      	add	r7, sp, #0
    28a2:	6078      	str	r0, [r7, #4]
    28a4:	6039      	str	r1, [r7, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    28a6:	46c0      	nop			; (mov r8, r8)
    28a8:	687b      	ldr	r3, [r7, #4]
    28aa:	691b      	ldr	r3, [r3, #16]
    28ac:	683a      	ldr	r2, [r7, #0]
    28ae:	4013      	ands	r3, r2
    28b0:	d1fa      	bne.n	28a8 <hri_rtcmode0_wait_for_sync+0xc>
	};
}
    28b2:	46c0      	nop			; (mov r8, r8)
    28b4:	46bd      	mov	sp, r7
    28b6:	b002      	add	sp, #8
    28b8:	bd80      	pop	{r7, pc}

000028ba <hri_rtcmode0_clear_interrupt_CMP0_bit>:
{
	return (((Rtc *)hw)->MODE0.INTFLAG.reg & RTC_MODE0_INTFLAG_CMP0) >> RTC_MODE0_INTFLAG_CMP0_Pos;
}

static inline void hri_rtcmode0_clear_interrupt_CMP0_bit(const void *const hw)
{
    28ba:	b580      	push	{r7, lr}
    28bc:	b082      	sub	sp, #8
    28be:	af00      	add	r7, sp, #0
    28c0:	6078      	str	r0, [r7, #4]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    28c2:	687b      	ldr	r3, [r7, #4]
    28c4:	2280      	movs	r2, #128	; 0x80
    28c6:	0052      	lsls	r2, r2, #1
    28c8:	819a      	strh	r2, [r3, #12]
}
    28ca:	46c0      	nop			; (mov r8, r8)
    28cc:	46bd      	mov	sp, r7
    28ce:	b002      	add	sp, #8
    28d0:	bd80      	pop	{r7, pc}

000028d2 <hri_rtcmode0_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
    28d2:	b580      	push	{r7, lr}
    28d4:	b082      	sub	sp, #8
    28d6:	af00      	add	r7, sp, #0
    28d8:	6078      	str	r0, [r7, #4]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	899b      	ldrh	r3, [r3, #12]
    28de:	b29b      	uxth	r3, r3
}
    28e0:	0018      	movs	r0, r3
    28e2:	46bd      	mov	sp, r7
    28e4:	b002      	add	sp, #8
    28e6:	bd80      	pop	{r7, pc}

000028e8 <hri_rtcmode0_set_CTRLA_SWRST_bit>:
{
	return ((Rtc *)hw)->MODE2.SYNCBUSY.reg;
}

static inline void hri_rtcmode0_set_CTRLA_SWRST_bit(const void *const hw)
{
    28e8:	b580      	push	{r7, lr}
    28ea:	b082      	sub	sp, #8
    28ec:	af00      	add	r7, sp, #0
    28ee:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    28f0:	687b      	ldr	r3, [r7, #4]
    28f2:	881b      	ldrh	r3, [r3, #0]
    28f4:	b29b      	uxth	r3, r3
    28f6:	2201      	movs	r2, #1
    28f8:	4313      	orrs	r3, r2
    28fa:	b29a      	uxth	r2, r3
    28fc:	687b      	ldr	r3, [r7, #4]
    28fe:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST);
    2900:	687b      	ldr	r3, [r7, #4]
    2902:	2101      	movs	r1, #1
    2904:	0018      	movs	r0, r3
    2906:	4b03      	ldr	r3, [pc, #12]	; (2914 <hri_rtcmode0_set_CTRLA_SWRST_bit+0x2c>)
    2908:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    290a:	46c0      	nop			; (mov r8, r8)
    290c:	46bd      	mov	sp, r7
    290e:	b002      	add	sp, #8
    2910:	bd80      	pop	{r7, pc}
    2912:	46c0      	nop			; (mov r8, r8)
    2914:	0000289d 	.word	0x0000289d

00002918 <hri_rtcmode0_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & RTC_MODE0_CTRLA_SWRST) >> RTC_MODE0_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_rtcmode0_set_CTRLA_ENABLE_bit(const void *const hw)
{
    2918:	b580      	push	{r7, lr}
    291a:	b082      	sub	sp, #8
    291c:	af00      	add	r7, sp, #0
    291e:	6078      	str	r0, [r7, #4]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    2920:	687b      	ldr	r3, [r7, #4]
    2922:	881b      	ldrh	r3, [r3, #0]
    2924:	b29b      	uxth	r3, r3
    2926:	2202      	movs	r2, #2
    2928:	4313      	orrs	r3, r2
    292a:	b29a      	uxth	r2, r3
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    2930:	4a04      	ldr	r2, [pc, #16]	; (2944 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x2c>)
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	0011      	movs	r1, r2
    2936:	0018      	movs	r0, r3
    2938:	4b03      	ldr	r3, [pc, #12]	; (2948 <hri_rtcmode0_set_CTRLA_ENABLE_bit+0x30>)
    293a:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    293c:	46c0      	nop			; (mov r8, r8)
    293e:	46bd      	mov	sp, r7
    2940:	b002      	add	sp, #8
    2942:	bd80      	pop	{r7, pc}
    2944:	00008003 	.word	0x00008003
    2948:	0000289d 	.word	0x0000289d

0000294c <hri_rtcmode0_get_CTRLA_ENABLE_bit>:

static inline bool hri_rtcmode0_get_CTRLA_ENABLE_bit(const void *const hw)
{
    294c:	b580      	push	{r7, lr}
    294e:	b084      	sub	sp, #16
    2950:	af00      	add	r7, sp, #0
    2952:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    2954:	4a0f      	ldr	r2, [pc, #60]	; (2994 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x48>)
    2956:	687b      	ldr	r3, [r7, #4]
    2958:	0011      	movs	r1, r2
    295a:	0018      	movs	r0, r3
    295c:	4b0e      	ldr	r3, [pc, #56]	; (2998 <hri_rtcmode0_get_CTRLA_ENABLE_bit+0x4c>)
    295e:	4798      	blx	r3
	tmp = ((Rtc *)hw)->MODE0.CTRLA.reg;
    2960:	230e      	movs	r3, #14
    2962:	18fb      	adds	r3, r7, r3
    2964:	687a      	ldr	r2, [r7, #4]
    2966:	8812      	ldrh	r2, [r2, #0]
    2968:	801a      	strh	r2, [r3, #0]
	tmp = (tmp & RTC_MODE0_CTRLA_ENABLE) >> RTC_MODE0_CTRLA_ENABLE_Pos;
    296a:	230e      	movs	r3, #14
    296c:	18fb      	adds	r3, r7, r3
    296e:	881b      	ldrh	r3, [r3, #0]
    2970:	085b      	lsrs	r3, r3, #1
    2972:	b29a      	uxth	r2, r3
    2974:	230e      	movs	r3, #14
    2976:	18fb      	adds	r3, r7, r3
    2978:	2101      	movs	r1, #1
    297a:	400a      	ands	r2, r1
    297c:	801a      	strh	r2, [r3, #0]
	return (bool)tmp;
    297e:	230e      	movs	r3, #14
    2980:	18fb      	adds	r3, r7, r3
    2982:	881b      	ldrh	r3, [r3, #0]
    2984:	1e5a      	subs	r2, r3, #1
    2986:	4193      	sbcs	r3, r2
    2988:	b2db      	uxtb	r3, r3
}
    298a:	0018      	movs	r0, r3
    298c:	46bd      	mov	sp, r7
    298e:	b004      	add	sp, #16
    2990:	bd80      	pop	{r7, pc}
    2992:	46c0      	nop			; (mov r8, r8)
    2994:	00008003 	.word	0x00008003
    2998:	0000289d 	.word	0x0000289d

0000299c <hri_rtcmode0_write_CTRLA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
    299c:	b580      	push	{r7, lr}
    299e:	b082      	sub	sp, #8
    29a0:	af00      	add	r7, sp, #0
    29a2:	6078      	str	r0, [r7, #4]
    29a4:	000a      	movs	r2, r1
    29a6:	1cbb      	adds	r3, r7, #2
    29a8:	801a      	strh	r2, [r3, #0]
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    29aa:	687b      	ldr	r3, [r7, #4]
    29ac:	1cba      	adds	r2, r7, #2
    29ae:	8812      	ldrh	r2, [r2, #0]
    29b0:	801a      	strh	r2, [r3, #0]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_SWRST | RTC_MODE0_SYNCBUSY_ENABLE | RTC_MODE0_SYNCBUSY_COUNTSYNC);
    29b2:	4a05      	ldr	r2, [pc, #20]	; (29c8 <hri_rtcmode0_write_CTRLA_reg+0x2c>)
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	0011      	movs	r1, r2
    29b8:	0018      	movs	r0, r3
    29ba:	4b04      	ldr	r3, [pc, #16]	; (29cc <hri_rtcmode0_write_CTRLA_reg+0x30>)
    29bc:	4798      	blx	r3
	RTC_CRITICAL_SECTION_LEAVE();
}
    29be:	46c0      	nop			; (mov r8, r8)
    29c0:	46bd      	mov	sp, r7
    29c2:	b002      	add	sp, #8
    29c4:	bd80      	pop	{r7, pc}
    29c6:	46c0      	nop			; (mov r8, r8)
    29c8:	00008003 	.word	0x00008003
    29cc:	0000289d 	.word	0x0000289d

000029d0 <hri_rtcmode0_read_COUNT_reg>:
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
	RTC_CRITICAL_SECTION_LEAVE();
}

static inline hri_rtcmode0_count_reg_t hri_rtcmode0_read_COUNT_reg(const void *const hw)
{
    29d0:	b580      	push	{r7, lr}
    29d2:	b082      	sub	sp, #8
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
	hri_rtcmode0_wait_for_sync(hw, RTC_MODE0_SYNCBUSY_COUNT);
    29d8:	687b      	ldr	r3, [r7, #4]
    29da:	2108      	movs	r1, #8
    29dc:	0018      	movs	r0, r3
    29de:	4b04      	ldr	r3, [pc, #16]	; (29f0 <hri_rtcmode0_read_COUNT_reg+0x20>)
    29e0:	4798      	blx	r3
	return ((Rtc *)hw)->MODE0.COUNT.reg;
    29e2:	687b      	ldr	r3, [r7, #4]
    29e4:	699b      	ldr	r3, [r3, #24]
}
    29e6:	0018      	movs	r0, r3
    29e8:	46bd      	mov	sp, r7
    29ea:	b002      	add	sp, #8
    29ec:	bd80      	pop	{r7, pc}
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	0000289d 	.word	0x0000289d

000029f4 <_calendar_init>:

/**
 * \brief Initializes the RTC module with given configurations.
 */
int32_t _calendar_init(struct calendar_dev *const dev)
{
    29f4:	b580      	push	{r7, lr}
    29f6:	b082      	sub	sp, #8
    29f8:	af00      	add	r7, sp, #0
    29fa:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    29fc:	687b      	ldr	r3, [r7, #4]
    29fe:	2b00      	cmp	r3, #0
    2a00:	d005      	beq.n	2a0e <_calendar_init+0x1a>
    2a02:	687b      	ldr	r3, [r7, #4]
    2a04:	681b      	ldr	r3, [r3, #0]
    2a06:	2b00      	cmp	r3, #0
    2a08:	d001      	beq.n	2a0e <_calendar_init+0x1a>
    2a0a:	2301      	movs	r3, #1
    2a0c:	e000      	b.n	2a10 <_calendar_init+0x1c>
    2a0e:	2300      	movs	r3, #0
    2a10:	1c1a      	adds	r2, r3, #0
    2a12:	2301      	movs	r3, #1
    2a14:	4013      	ands	r3, r2
    2a16:	b2db      	uxtb	r3, r3
    2a18:	4917      	ldr	r1, [pc, #92]	; (2a78 <_calendar_init+0x84>)
    2a1a:	222f      	movs	r2, #47	; 0x2f
    2a1c:	0018      	movs	r0, r3
    2a1e:	4b17      	ldr	r3, [pc, #92]	; (2a7c <_calendar_init+0x88>)
    2a20:	4798      	blx	r3

	_rtc_dev = dev;
    2a22:	4b17      	ldr	r3, [pc, #92]	; (2a80 <_calendar_init+0x8c>)
    2a24:	687a      	ldr	r2, [r7, #4]
    2a26:	601a      	str	r2, [r3, #0]

	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	681b      	ldr	r3, [r3, #0]
    2a2c:	2101      	movs	r1, #1
    2a2e:	0018      	movs	r0, r3
    2a30:	4b14      	ldr	r3, [pc, #80]	; (2a84 <_calendar_init+0x90>)
    2a32:	4798      	blx	r3
	if (hri_rtcmode0_get_CTRLA_ENABLE_bit(dev->hw)) {
    2a34:	687b      	ldr	r3, [r7, #4]
    2a36:	681b      	ldr	r3, [r3, #0]
    2a38:	0018      	movs	r0, r3
    2a3a:	4b13      	ldr	r3, [pc, #76]	; (2a88 <_calendar_init+0x94>)
    2a3c:	4798      	blx	r3
    2a3e:	1e03      	subs	r3, r0, #0
    2a40:	d002      	beq.n	2a48 <_calendar_init+0x54>
#if !CONF_RTC_INIT_RESET
		return ERR_DENIED;
    2a42:	2311      	movs	r3, #17
    2a44:	425b      	negs	r3, r3
    2a46:	e013      	b.n	2a70 <_calendar_init+0x7c>
#else
		hri_rtcmode0_clear_CTRLA_ENABLE_bit(dev->hw);
		hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_ENABLE);
#endif
	}
	hri_rtcmode0_set_CTRLA_SWRST_bit(dev->hw);
    2a48:	687b      	ldr	r3, [r7, #4]
    2a4a:	681b      	ldr	r3, [r3, #0]
    2a4c:	0018      	movs	r0, r3
    2a4e:	4b0f      	ldr	r3, [pc, #60]	; (2a8c <_calendar_init+0x98>)
    2a50:	4798      	blx	r3
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    2a52:	687b      	ldr	r3, [r7, #4]
    2a54:	681b      	ldr	r3, [r3, #0]
    2a56:	2101      	movs	r1, #1
    2a58:	0018      	movs	r0, r3
    2a5a:	4b0a      	ldr	r3, [pc, #40]	; (2a84 <_calendar_init+0x90>)
    2a5c:	4798      	blx	r3
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC);
    2a5e:	687b      	ldr	r3, [r7, #4]
    2a60:	681a      	ldr	r2, [r3, #0]
    2a62:	238b      	movs	r3, #139	; 0x8b
    2a64:	021b      	lsls	r3, r3, #8
    2a66:	0019      	movs	r1, r3
    2a68:	0010      	movs	r0, r2
    2a6a:	4b09      	ldr	r3, [pc, #36]	; (2a90 <_calendar_init+0x9c>)
    2a6c:	4798      	blx	r3

	return ERR_NONE;
    2a6e:	2300      	movs	r3, #0
}
    2a70:	0018      	movs	r0, r3
    2a72:	46bd      	mov	sp, r7
    2a74:	b002      	add	sp, #8
    2a76:	bd80      	pop	{r7, pc}
    2a78:	000085a8 	.word	0x000085a8
    2a7c:	00001b19 	.word	0x00001b19
    2a80:	20000048 	.word	0x20000048
    2a84:	0000289d 	.word	0x0000289d
    2a88:	0000294d 	.word	0x0000294d
    2a8c:	000028e9 	.word	0x000028e9
    2a90:	0000299d 	.word	0x0000299d

00002a94 <_calendar_enable>:

/**
 * \brief Enable the RTC module
 */
int32_t _calendar_enable(struct calendar_dev *const dev)
{
    2a94:	b580      	push	{r7, lr}
    2a96:	b082      	sub	sp, #8
    2a98:	af00      	add	r7, sp, #0
    2a9a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    2a9c:	687b      	ldr	r3, [r7, #4]
    2a9e:	2b00      	cmp	r3, #0
    2aa0:	d005      	beq.n	2aae <_calendar_enable+0x1a>
    2aa2:	687b      	ldr	r3, [r7, #4]
    2aa4:	681b      	ldr	r3, [r3, #0]
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d001      	beq.n	2aae <_calendar_enable+0x1a>
    2aaa:	2301      	movs	r3, #1
    2aac:	e000      	b.n	2ab0 <_calendar_enable+0x1c>
    2aae:	2300      	movs	r3, #0
    2ab0:	1c1a      	adds	r2, r3, #0
    2ab2:	2301      	movs	r3, #1
    2ab4:	4013      	ands	r3, r2
    2ab6:	b2db      	uxtb	r3, r3
    2ab8:	4907      	ldr	r1, [pc, #28]	; (2ad8 <_calendar_enable+0x44>)
    2aba:	2263      	movs	r2, #99	; 0x63
    2abc:	0018      	movs	r0, r3
    2abe:	4b07      	ldr	r3, [pc, #28]	; (2adc <_calendar_enable+0x48>)
    2ac0:	4798      	blx	r3

	hri_rtcmode0_set_CTRLA_ENABLE_bit(dev->hw);
    2ac2:	687b      	ldr	r3, [r7, #4]
    2ac4:	681b      	ldr	r3, [r3, #0]
    2ac6:	0018      	movs	r0, r3
    2ac8:	4b05      	ldr	r3, [pc, #20]	; (2ae0 <_calendar_enable+0x4c>)
    2aca:	4798      	blx	r3

	return ERR_NONE;
    2acc:	2300      	movs	r3, #0
}
    2ace:	0018      	movs	r0, r3
    2ad0:	46bd      	mov	sp, r7
    2ad2:	b002      	add	sp, #8
    2ad4:	bd80      	pop	{r7, pc}
    2ad6:	46c0      	nop			; (mov r8, r8)
    2ad8:	000085a8 	.word	0x000085a8
    2adc:	00001b19 	.word	0x00001b19
    2ae0:	00002919 	.word	0x00002919

00002ae4 <_calendar_get_counter>:

/**
 * \brief Get current counter
 */
uint32_t _calendar_get_counter(struct calendar_dev *const dev)
{
    2ae4:	b580      	push	{r7, lr}
    2ae6:	b082      	sub	sp, #8
    2ae8:	af00      	add	r7, sp, #0
    2aea:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->hw);
    2aec:	687b      	ldr	r3, [r7, #4]
    2aee:	2b00      	cmp	r3, #0
    2af0:	d005      	beq.n	2afe <_calendar_get_counter+0x1a>
    2af2:	687b      	ldr	r3, [r7, #4]
    2af4:	681b      	ldr	r3, [r3, #0]
    2af6:	2b00      	cmp	r3, #0
    2af8:	d001      	beq.n	2afe <_calendar_get_counter+0x1a>
    2afa:	2301      	movs	r3, #1
    2afc:	e000      	b.n	2b00 <_calendar_get_counter+0x1c>
    2afe:	2300      	movs	r3, #0
    2b00:	1c1a      	adds	r2, r3, #0
    2b02:	2301      	movs	r3, #1
    2b04:	4013      	ands	r3, r2
    2b06:	b2db      	uxtb	r3, r3
    2b08:	4907      	ldr	r1, [pc, #28]	; (2b28 <_calendar_get_counter+0x44>)
    2b0a:	2287      	movs	r2, #135	; 0x87
    2b0c:	0018      	movs	r0, r3
    2b0e:	4b07      	ldr	r3, [pc, #28]	; (2b2c <_calendar_get_counter+0x48>)
    2b10:	4798      	blx	r3

	return hri_rtcmode0_read_COUNT_reg(dev->hw);
    2b12:	687b      	ldr	r3, [r7, #4]
    2b14:	681b      	ldr	r3, [r3, #0]
    2b16:	0018      	movs	r0, r3
    2b18:	4b05      	ldr	r3, [pc, #20]	; (2b30 <_calendar_get_counter+0x4c>)
    2b1a:	4798      	blx	r3
    2b1c:	0003      	movs	r3, r0
}
    2b1e:	0018      	movs	r0, r3
    2b20:	46bd      	mov	sp, r7
    2b22:	b002      	add	sp, #8
    2b24:	bd80      	pop	{r7, pc}
    2b26:	46c0      	nop			; (mov r8, r8)
    2b28:	000085a8 	.word	0x000085a8
    2b2c:	00001b19 	.word	0x00001b19
    2b30:	000029d1 	.word	0x000029d1

00002b34 <_rtc_interrupt_handler>:
 * \brief RTC interrupt handler
 *
 * \param[in] dev The pointer to calendar device struct
 */
static void _rtc_interrupt_handler(struct calendar_dev *dev)
{
    2b34:	b590      	push	{r4, r7, lr}
    2b36:	b085      	sub	sp, #20
    2b38:	af00      	add	r7, sp, #0
    2b3a:	6078      	str	r0, [r7, #4]
	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    2b3c:	687b      	ldr	r3, [r7, #4]
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	220e      	movs	r2, #14
    2b42:	18bc      	adds	r4, r7, r2
    2b44:	0018      	movs	r0, r3
    2b46:	4b0c      	ldr	r3, [pc, #48]	; (2b78 <_rtc_interrupt_handler+0x44>)
    2b48:	4798      	blx	r3
    2b4a:	0003      	movs	r3, r0
    2b4c:	8023      	strh	r3, [r4, #0]

	if (interrupt_status & RTC_MODE0_INTFLAG_CMP0) {
    2b4e:	230e      	movs	r3, #14
    2b50:	18fb      	adds	r3, r7, r3
    2b52:	881a      	ldrh	r2, [r3, #0]
    2b54:	2380      	movs	r3, #128	; 0x80
    2b56:	005b      	lsls	r3, r3, #1
    2b58:	4013      	ands	r3, r2
    2b5a:	d009      	beq.n	2b70 <_rtc_interrupt_handler+0x3c>
		dev->callback(dev);
    2b5c:	687b      	ldr	r3, [r7, #4]
    2b5e:	685b      	ldr	r3, [r3, #4]
    2b60:	687a      	ldr	r2, [r7, #4]
    2b62:	0010      	movs	r0, r2
    2b64:	4798      	blx	r3

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    2b66:	687b      	ldr	r3, [r7, #4]
    2b68:	681b      	ldr	r3, [r3, #0]
    2b6a:	0018      	movs	r0, r3
    2b6c:	4b03      	ldr	r3, [pc, #12]	; (2b7c <_rtc_interrupt_handler+0x48>)
    2b6e:	4798      	blx	r3
	}
}
    2b70:	46c0      	nop			; (mov r8, r8)
    2b72:	46bd      	mov	sp, r7
    2b74:	b005      	add	sp, #20
    2b76:	bd90      	pop	{r4, r7, pc}
    2b78:	000028d3 	.word	0x000028d3
    2b7c:	000028bb 	.word	0x000028bb

00002b80 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    2b80:	b580      	push	{r7, lr}
    2b82:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(_rtc_dev);
    2b84:	4b03      	ldr	r3, [pc, #12]	; (2b94 <RTC_Handler+0x14>)
    2b86:	681b      	ldr	r3, [r3, #0]
    2b88:	0018      	movs	r0, r3
    2b8a:	4b03      	ldr	r3, [pc, #12]	; (2b98 <RTC_Handler+0x18>)
    2b8c:	4798      	blx	r3
}
    2b8e:	46c0      	nop			; (mov r8, r8)
    2b90:	46bd      	mov	sp, r7
    2b92:	bd80      	pop	{r7, pc}
    2b94:	20000048 	.word	0x20000048
    2b98:	00002b35 	.word	0x00002b35

00002b9c <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    2b9c:	b580      	push	{r7, lr}
    2b9e:	b082      	sub	sp, #8
    2ba0:	af00      	add	r7, sp, #0
    2ba2:	6078      	str	r0, [r7, #4]
    2ba4:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2ba6:	46c0      	nop			; (mov r8, r8)
    2ba8:	687b      	ldr	r3, [r7, #4]
    2baa:	69db      	ldr	r3, [r3, #28]
    2bac:	683a      	ldr	r2, [r7, #0]
    2bae:	4013      	ands	r3, r2
    2bb0:	d1fa      	bne.n	2ba8 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	46bd      	mov	sp, r7
    2bb6:	b002      	add	sp, #8
    2bb8:	bd80      	pop	{r7, pc}

00002bba <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    2bba:	b580      	push	{r7, lr}
    2bbc:	b082      	sub	sp, #8
    2bbe:	af00      	add	r7, sp, #0
    2bc0:	6078      	str	r0, [r7, #4]
    2bc2:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    2bc4:	687b      	ldr	r3, [r7, #4]
    2bc6:	69db      	ldr	r3, [r3, #28]
    2bc8:	683a      	ldr	r2, [r7, #0]
    2bca:	4013      	ands	r3, r2
    2bcc:	1e5a      	subs	r2, r3, #1
    2bce:	4193      	sbcs	r3, r2
    2bd0:	b2db      	uxtb	r3, r3
}
    2bd2:	0018      	movs	r0, r3
    2bd4:	46bd      	mov	sp, r7
    2bd6:	b002      	add	sp, #8
    2bd8:	bd80      	pop	{r7, pc}

00002bda <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    2bda:	b580      	push	{r7, lr}
    2bdc:	b082      	sub	sp, #8
    2bde:	af00      	add	r7, sp, #0
    2be0:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2be2:	687b      	ldr	r3, [r7, #4]
    2be4:	7e1b      	ldrb	r3, [r3, #24]
    2be6:	b2db      	uxtb	r3, r3
    2be8:	001a      	movs	r2, r3
    2bea:	2301      	movs	r3, #1
    2bec:	4013      	ands	r3, r2
    2bee:	1e5a      	subs	r2, r3, #1
    2bf0:	4193      	sbcs	r3, r2
    2bf2:	b2db      	uxtb	r3, r3
}
    2bf4:	0018      	movs	r0, r3
    2bf6:	46bd      	mov	sp, r7
    2bf8:	b002      	add	sp, #8
    2bfa:	bd80      	pop	{r7, pc}

00002bfc <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    2bfc:	b580      	push	{r7, lr}
    2bfe:	b082      	sub	sp, #8
    2c00:	af00      	add	r7, sp, #0
    2c02:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    2c04:	687b      	ldr	r3, [r7, #4]
    2c06:	7e1b      	ldrb	r3, [r3, #24]
    2c08:	b2db      	uxtb	r3, r3
    2c0a:	085b      	lsrs	r3, r3, #1
    2c0c:	2201      	movs	r2, #1
    2c0e:	4013      	ands	r3, r2
    2c10:	1e5a      	subs	r2, r3, #1
    2c12:	4193      	sbcs	r3, r2
    2c14:	b2db      	uxtb	r3, r3
}
    2c16:	0018      	movs	r0, r3
    2c18:	46bd      	mov	sp, r7
    2c1a:	b002      	add	sp, #8
    2c1c:	bd80      	pop	{r7, pc}

00002c1e <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    2c1e:	b580      	push	{r7, lr}
    2c20:	b082      	sub	sp, #8
    2c22:	af00      	add	r7, sp, #0
    2c24:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2c26:	687b      	ldr	r3, [r7, #4]
    2c28:	7e1b      	ldrb	r3, [r3, #24]
    2c2a:	b2db      	uxtb	r3, r3
    2c2c:	089b      	lsrs	r3, r3, #2
    2c2e:	2201      	movs	r2, #1
    2c30:	4013      	ands	r3, r2
    2c32:	1e5a      	subs	r2, r3, #1
    2c34:	4193      	sbcs	r3, r2
    2c36:	b2db      	uxtb	r3, r3
}
    2c38:	0018      	movs	r0, r3
    2c3a:	46bd      	mov	sp, r7
    2c3c:	b002      	add	sp, #8
    2c3e:	bd80      	pop	{r7, pc}

00002c40 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    2c40:	b580      	push	{r7, lr}
    2c42:	b082      	sub	sp, #8
    2c44:	af00      	add	r7, sp, #0
    2c46:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2c48:	687b      	ldr	r3, [r7, #4]
    2c4a:	681b      	ldr	r3, [r3, #0]
    2c4c:	2202      	movs	r2, #2
    2c4e:	431a      	orrs	r2, r3
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2c54:	687b      	ldr	r3, [r7, #4]
    2c56:	2103      	movs	r1, #3
    2c58:	0018      	movs	r0, r3
    2c5a:	4b03      	ldr	r3, [pc, #12]	; (2c68 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x28>)
    2c5c:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2c5e:	46c0      	nop			; (mov r8, r8)
    2c60:	46bd      	mov	sp, r7
    2c62:	b002      	add	sp, #8
    2c64:	bd80      	pop	{r7, pc}
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	00002b9d 	.word	0x00002b9d

00002c6c <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    2c6c:	b580      	push	{r7, lr}
    2c6e:	b082      	sub	sp, #8
    2c70:	af00      	add	r7, sp, #0
    2c72:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	681b      	ldr	r3, [r3, #0]
    2c78:	2202      	movs	r2, #2
    2c7a:	4393      	bics	r3, r2
    2c7c:	001a      	movs	r2, r3
    2c7e:	687b      	ldr	r3, [r7, #4]
    2c80:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2c82:	687b      	ldr	r3, [r7, #4]
    2c84:	2103      	movs	r1, #3
    2c86:	0018      	movs	r0, r3
    2c88:	4b02      	ldr	r3, [pc, #8]	; (2c94 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x28>)
    2c8a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2c8c:	46c0      	nop			; (mov r8, r8)
    2c8e:	46bd      	mov	sp, r7
    2c90:	b002      	add	sp, #8
    2c92:	bd80      	pop	{r7, pc}
    2c94:	00002b9d 	.word	0x00002b9d

00002c98 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    2c98:	b580      	push	{r7, lr}
    2c9a:	b084      	sub	sp, #16
    2c9c:	af00      	add	r7, sp, #0
    2c9e:	6078      	str	r0, [r7, #4]
    2ca0:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2ca2:	687b      	ldr	r3, [r7, #4]
    2ca4:	2103      	movs	r1, #3
    2ca6:	0018      	movs	r0, r3
    2ca8:	4b06      	ldr	r3, [pc, #24]	; (2cc4 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    2caa:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2cac:	687b      	ldr	r3, [r7, #4]
    2cae:	681b      	ldr	r3, [r3, #0]
    2cb0:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    2cb2:	68fb      	ldr	r3, [r7, #12]
    2cb4:	683a      	ldr	r2, [r7, #0]
    2cb6:	4013      	ands	r3, r2
    2cb8:	60fb      	str	r3, [r7, #12]
	return tmp;
    2cba:	68fb      	ldr	r3, [r7, #12]
}
    2cbc:	0018      	movs	r0, r3
    2cbe:	46bd      	mov	sp, r7
    2cc0:	b004      	add	sp, #16
    2cc2:	bd80      	pop	{r7, pc}
    2cc4:	00002b9d 	.word	0x00002b9d

00002cc8 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    2cc8:	b580      	push	{r7, lr}
    2cca:	b082      	sub	sp, #8
    2ccc:	af00      	add	r7, sp, #0
    2cce:	6078      	str	r0, [r7, #4]
    2cd0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2cd2:	687b      	ldr	r3, [r7, #4]
    2cd4:	683a      	ldr	r2, [r7, #0]
    2cd6:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    2cd8:	687b      	ldr	r3, [r7, #4]
    2cda:	2103      	movs	r1, #3
    2cdc:	0018      	movs	r0, r3
    2cde:	4b03      	ldr	r3, [pc, #12]	; (2cec <hri_sercomusart_write_CTRLA_reg+0x24>)
    2ce0:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2ce2:	46c0      	nop			; (mov r8, r8)
    2ce4:	46bd      	mov	sp, r7
    2ce6:	b002      	add	sp, #8
    2ce8:	bd80      	pop	{r7, pc}
    2cea:	46c0      	nop			; (mov r8, r8)
    2cec:	00002b9d 	.word	0x00002b9d

00002cf0 <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    2cf0:	b580      	push	{r7, lr}
    2cf2:	b082      	sub	sp, #8
    2cf4:	af00      	add	r7, sp, #0
    2cf6:	6078      	str	r0, [r7, #4]
    2cf8:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	683a      	ldr	r2, [r7, #0]
    2cfe:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    2d00:	687b      	ldr	r3, [r7, #4]
    2d02:	2107      	movs	r1, #7
    2d04:	0018      	movs	r0, r3
    2d06:	4b03      	ldr	r3, [pc, #12]	; (2d14 <hri_sercomusart_write_CTRLB_reg+0x24>)
    2d08:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2d0a:	46c0      	nop			; (mov r8, r8)
    2d0c:	46bd      	mov	sp, r7
    2d0e:	b002      	add	sp, #8
    2d10:	bd80      	pop	{r7, pc}
    2d12:	46c0      	nop			; (mov r8, r8)
    2d14:	00002b9d 	.word	0x00002b9d

00002d18 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    2d18:	b580      	push	{r7, lr}
    2d1a:	b082      	sub	sp, #8
    2d1c:	af00      	add	r7, sp, #0
    2d1e:	6078      	str	r0, [r7, #4]
    2d20:	000a      	movs	r2, r1
    2d22:	1cbb      	adds	r3, r7, #2
    2d24:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    2d26:	687b      	ldr	r3, [r7, #4]
    2d28:	1cba      	adds	r2, r7, #2
    2d2a:	8812      	ldrh	r2, [r2, #0]
    2d2c:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	46bd      	mov	sp, r7
    2d32:	b002      	add	sp, #8
    2d34:	bd80      	pop	{r7, pc}

00002d36 <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    2d36:	b580      	push	{r7, lr}
    2d38:	b082      	sub	sp, #8
    2d3a:	af00      	add	r7, sp, #0
    2d3c:	6078      	str	r0, [r7, #4]
    2d3e:	000a      	movs	r2, r1
    2d40:	1cfb      	adds	r3, r7, #3
    2d42:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    2d44:	687b      	ldr	r3, [r7, #4]
    2d46:	1cfa      	adds	r2, r7, #3
    2d48:	7812      	ldrb	r2, [r2, #0]
    2d4a:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2d4c:	46c0      	nop			; (mov r8, r8)
    2d4e:	46bd      	mov	sp, r7
    2d50:	b002      	add	sp, #8
    2d52:	bd80      	pop	{r7, pc}

00002d54 <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    2d54:	b580      	push	{r7, lr}
    2d56:	b082      	sub	sp, #8
    2d58:	af00      	add	r7, sp, #0
    2d5a:	6078      	str	r0, [r7, #4]
    2d5c:	000a      	movs	r2, r1
    2d5e:	1cbb      	adds	r3, r7, #2
    2d60:	801a      	strh	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    2d62:	687b      	ldr	r3, [r7, #4]
    2d64:	1cba      	adds	r2, r7, #2
    2d66:	8812      	ldrh	r2, [r2, #0]
    2d68:	851a      	strh	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2d6a:	46c0      	nop			; (mov r8, r8)
    2d6c:	46bd      	mov	sp, r7
    2d6e:	b002      	add	sp, #8
    2d70:	bd80      	pop	{r7, pc}

00002d72 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    2d72:	b580      	push	{r7, lr}
    2d74:	b082      	sub	sp, #8
    2d76:	af00      	add	r7, sp, #0
    2d78:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    2d7a:	687b      	ldr	r3, [r7, #4]
    2d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2d7e:	b29b      	uxth	r3, r3
}
    2d80:	0018      	movs	r0, r3
    2d82:	46bd      	mov	sp, r7
    2d84:	b002      	add	sp, #8
    2d86:	bd80      	pop	{r7, pc}

00002d88 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    2d88:	b580      	push	{r7, lr}
    2d8a:	b082      	sub	sp, #8
    2d8c:	af00      	add	r7, sp, #0
    2d8e:	6078      	str	r0, [r7, #4]
    2d90:	000a      	movs	r2, r1
    2d92:	1cfb      	adds	r3, r7, #3
    2d94:	701a      	strb	r2, [r3, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	1cfa      	adds	r2, r7, #3
    2d9a:	2130      	movs	r1, #48	; 0x30
    2d9c:	7812      	ldrb	r2, [r2, #0]
    2d9e:	545a      	strb	r2, [r3, r1]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    2da0:	46c0      	nop			; (mov r8, r8)
    2da2:	46bd      	mov	sp, r7
    2da4:	b002      	add	sp, #8
    2da6:	bd80      	pop	{r7, pc}

00002da8 <_usart_sync_init>:

/**
 * \brief Initialize synchronous SERCOM USART
 */
int32_t _usart_sync_init(struct _usart_sync_device *const device, void *const hw)
{
    2da8:	b580      	push	{r7, lr}
    2daa:	b082      	sub	sp, #8
    2dac:	af00      	add	r7, sp, #0
    2dae:	6078      	str	r0, [r7, #4]
    2db0:	6039      	str	r1, [r7, #0]
	ASSERT(device);
    2db2:	687b      	ldr	r3, [r7, #4]
    2db4:	1e5a      	subs	r2, r3, #1
    2db6:	4193      	sbcs	r3, r2
    2db8:	b2db      	uxtb	r3, r3
    2dba:	4908      	ldr	r1, [pc, #32]	; (2ddc <_usart_sync_init+0x34>)
    2dbc:	22b4      	movs	r2, #180	; 0xb4
    2dbe:	0018      	movs	r0, r3
    2dc0:	4b07      	ldr	r3, [pc, #28]	; (2de0 <_usart_sync_init+0x38>)
    2dc2:	4798      	blx	r3

	device->hw = hw;
    2dc4:	687b      	ldr	r3, [r7, #4]
    2dc6:	683a      	ldr	r2, [r7, #0]
    2dc8:	601a      	str	r2, [r3, #0]

	return _usart_init(hw);
    2dca:	683b      	ldr	r3, [r7, #0]
    2dcc:	0018      	movs	r0, r3
    2dce:	4b05      	ldr	r3, [pc, #20]	; (2de4 <_usart_sync_init+0x3c>)
    2dd0:	4798      	blx	r3
    2dd2:	0003      	movs	r3, r0
}
    2dd4:	0018      	movs	r0, r3
    2dd6:	46bd      	mov	sp, r7
    2dd8:	b002      	add	sp, #8
    2dda:	bd80      	pop	{r7, pc}
    2ddc:	000085c0 	.word	0x000085c0
    2de0:	00001b19 	.word	0x00001b19
    2de4:	00002f61 	.word	0x00002f61

00002de8 <_usart_sync_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_sync_enable(struct _usart_sync_device *const device)
{
    2de8:	b580      	push	{r7, lr}
    2dea:	b082      	sub	sp, #8
    2dec:	af00      	add	r7, sp, #0
    2dee:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2df0:	687b      	ldr	r3, [r7, #4]
    2df2:	681b      	ldr	r3, [r3, #0]
    2df4:	0018      	movs	r0, r3
    2df6:	4b03      	ldr	r3, [pc, #12]	; (2e04 <_usart_sync_enable+0x1c>)
    2df8:	4798      	blx	r3
}
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	46bd      	mov	sp, r7
    2dfe:	b002      	add	sp, #8
    2e00:	bd80      	pop	{r7, pc}
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	00002c41 	.word	0x00002c41

00002e08 <_usart_sync_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_sync_write_byte(struct _usart_sync_device *const device, uint8_t data)
{
    2e08:	b580      	push	{r7, lr}
    2e0a:	b082      	sub	sp, #8
    2e0c:	af00      	add	r7, sp, #0
    2e0e:	6078      	str	r0, [r7, #4]
    2e10:	000a      	movs	r2, r1
    2e12:	1cfb      	adds	r3, r7, #3
    2e14:	701a      	strb	r2, [r3, #0]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2e16:	687b      	ldr	r3, [r7, #4]
    2e18:	681a      	ldr	r2, [r3, #0]
    2e1a:	1cfb      	adds	r3, r7, #3
    2e1c:	781b      	ldrb	r3, [r3, #0]
    2e1e:	b29b      	uxth	r3, r3
    2e20:	0019      	movs	r1, r3
    2e22:	0010      	movs	r0, r2
    2e24:	4b02      	ldr	r3, [pc, #8]	; (2e30 <_usart_sync_write_byte+0x28>)
    2e26:	4798      	blx	r3
}
    2e28:	46c0      	nop			; (mov r8, r8)
    2e2a:	46bd      	mov	sp, r7
    2e2c:	b002      	add	sp, #8
    2e2e:	bd80      	pop	{r7, pc}
    2e30:	00002d55 	.word	0x00002d55

00002e34 <_usart_sync_read_byte>:

/**
 * \brief Read a byte from the given SERCOM USART instance
 */
uint8_t _usart_sync_read_byte(const struct _usart_sync_device *const device)
{
    2e34:	b580      	push	{r7, lr}
    2e36:	b082      	sub	sp, #8
    2e38:	af00      	add	r7, sp, #0
    2e3a:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_read_DATA_reg(device->hw);
    2e3c:	687b      	ldr	r3, [r7, #4]
    2e3e:	681b      	ldr	r3, [r3, #0]
    2e40:	0018      	movs	r0, r3
    2e42:	4b04      	ldr	r3, [pc, #16]	; (2e54 <_usart_sync_read_byte+0x20>)
    2e44:	4798      	blx	r3
    2e46:	0003      	movs	r3, r0
    2e48:	b2db      	uxtb	r3, r3
}
    2e4a:	0018      	movs	r0, r3
    2e4c:	46bd      	mov	sp, r7
    2e4e:	b002      	add	sp, #8
    2e50:	bd80      	pop	{r7, pc}
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	00002d73 	.word	0x00002d73

00002e58 <_usart_sync_is_ready_to_send>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_sync_is_ready_to_send(const struct _usart_sync_device *const device)
{
    2e58:	b580      	push	{r7, lr}
    2e5a:	b082      	sub	sp, #8
    2e5c:	af00      	add	r7, sp, #0
    2e5e:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    2e60:	687b      	ldr	r3, [r7, #4]
    2e62:	681b      	ldr	r3, [r3, #0]
    2e64:	0018      	movs	r0, r3
    2e66:	4b03      	ldr	r3, [pc, #12]	; (2e74 <_usart_sync_is_ready_to_send+0x1c>)
    2e68:	4798      	blx	r3
    2e6a:	0003      	movs	r3, r0
}
    2e6c:	0018      	movs	r0, r3
    2e6e:	46bd      	mov	sp, r7
    2e70:	b002      	add	sp, #8
    2e72:	bd80      	pop	{r7, pc}
    2e74:	00002bdb 	.word	0x00002bdb

00002e78 <_usart_sync_is_transmit_done>:

/**
 * \brief Check if USART transmission complete
 */
bool _usart_sync_is_transmit_done(const struct _usart_sync_device *const device)
{
    2e78:	b580      	push	{r7, lr}
    2e7a:	b082      	sub	sp, #8
    2e7c:	af00      	add	r7, sp, #0
    2e7e:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    2e80:	687b      	ldr	r3, [r7, #4]
    2e82:	681b      	ldr	r3, [r3, #0]
    2e84:	0018      	movs	r0, r3
    2e86:	4b03      	ldr	r3, [pc, #12]	; (2e94 <_usart_sync_is_transmit_done+0x1c>)
    2e88:	4798      	blx	r3
    2e8a:	0003      	movs	r3, r0
}
    2e8c:	0018      	movs	r0, r3
    2e8e:	46bd      	mov	sp, r7
    2e90:	b002      	add	sp, #8
    2e92:	bd80      	pop	{r7, pc}
    2e94:	00002bfd 	.word	0x00002bfd

00002e98 <_usart_sync_is_byte_received>:

/**
 * \brief Check if there is data received by USART
 */
bool _usart_sync_is_byte_received(const struct _usart_sync_device *const device)
{
    2e98:	b580      	push	{r7, lr}
    2e9a:	b082      	sub	sp, #8
    2e9c:	af00      	add	r7, sp, #0
    2e9e:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    2ea0:	687b      	ldr	r3, [r7, #4]
    2ea2:	681b      	ldr	r3, [r3, #0]
    2ea4:	0018      	movs	r0, r3
    2ea6:	4b03      	ldr	r3, [pc, #12]	; (2eb4 <_usart_sync_is_byte_received+0x1c>)
    2ea8:	4798      	blx	r3
    2eaa:	0003      	movs	r3, r0
}
    2eac:	0018      	movs	r0, r3
    2eae:	46bd      	mov	sp, r7
    2eb0:	b002      	add	sp, #8
    2eb2:	bd80      	pop	{r7, pc}
    2eb4:	00002c1f 	.word	0x00002c1f

00002eb8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2eb8:	b580      	push	{r7, lr}
    2eba:	b082      	sub	sp, #8
    2ebc:	af00      	add	r7, sp, #0
    2ebe:	6078      	str	r0, [r7, #4]
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	4a04      	ldr	r2, [pc, #16]	; (2ed4 <_sercom_get_hardware_index+0x1c>)
    2ec4:	4694      	mov	ip, r2
    2ec6:	4463      	add	r3, ip
    2ec8:	0a9b      	lsrs	r3, r3, #10
    2eca:	b2db      	uxtb	r3, r3
}
    2ecc:	0018      	movs	r0, r3
    2ece:	46bd      	mov	sp, r7
    2ed0:	b002      	add	sp, #8
    2ed2:	bd80      	pop	{r7, pc}
    2ed4:	bdfffc00 	.word	0xbdfffc00

00002ed8 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    2ed8:	b590      	push	{r4, r7, lr}
    2eda:	b085      	sub	sp, #20
    2edc:	af00      	add	r7, sp, #0
    2ede:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2ee0:	230e      	movs	r3, #14
    2ee2:	18fc      	adds	r4, r7, r3
    2ee4:	687b      	ldr	r3, [r7, #4]
    2ee6:	0018      	movs	r0, r3
    2ee8:	4b18      	ldr	r3, [pc, #96]	; (2f4c <_get_sercom_index+0x74>)
    2eea:	4798      	blx	r3
    2eec:	0003      	movs	r3, r0
    2eee:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2ef0:	230f      	movs	r3, #15
    2ef2:	18fb      	adds	r3, r7, r3
    2ef4:	2200      	movs	r2, #0
    2ef6:	701a      	strb	r2, [r3, #0]
    2ef8:	e018      	b.n	2f2c <_get_sercom_index+0x54>
		if (_usarts[i].number == sercom_offset) {
    2efa:	230f      	movs	r3, #15
    2efc:	18fb      	adds	r3, r7, r3
    2efe:	781a      	ldrb	r2, [r3, #0]
    2f00:	4913      	ldr	r1, [pc, #76]	; (2f50 <_get_sercom_index+0x78>)
    2f02:	0013      	movs	r3, r2
    2f04:	009b      	lsls	r3, r3, #2
    2f06:	189b      	adds	r3, r3, r2
    2f08:	009b      	lsls	r3, r3, #2
    2f0a:	5c5b      	ldrb	r3, [r3, r1]
    2f0c:	220e      	movs	r2, #14
    2f0e:	18ba      	adds	r2, r7, r2
    2f10:	7812      	ldrb	r2, [r2, #0]
    2f12:	429a      	cmp	r2, r3
    2f14:	d103      	bne.n	2f1e <_get_sercom_index+0x46>
			return i;
    2f16:	230f      	movs	r3, #15
    2f18:	18fb      	adds	r3, r7, r3
    2f1a:	781b      	ldrb	r3, [r3, #0]
    2f1c:	e012      	b.n	2f44 <_get_sercom_index+0x6c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2f1e:	230f      	movs	r3, #15
    2f20:	18fb      	adds	r3, r7, r3
    2f22:	781a      	ldrb	r2, [r3, #0]
    2f24:	230f      	movs	r3, #15
    2f26:	18fb      	adds	r3, r7, r3
    2f28:	3201      	adds	r2, #1
    2f2a:	701a      	strb	r2, [r3, #0]
    2f2c:	230f      	movs	r3, #15
    2f2e:	18fb      	adds	r3, r7, r3
    2f30:	781b      	ldrb	r3, [r3, #0]
    2f32:	2b00      	cmp	r3, #0
    2f34:	d0e1      	beq.n	2efa <_get_sercom_index+0x22>
		}
	}

	ASSERT(false);
    2f36:	4a07      	ldr	r2, [pc, #28]	; (2f54 <_get_sercom_index+0x7c>)
    2f38:	4b07      	ldr	r3, [pc, #28]	; (2f58 <_get_sercom_index+0x80>)
    2f3a:	0019      	movs	r1, r3
    2f3c:	2000      	movs	r0, #0
    2f3e:	4b07      	ldr	r3, [pc, #28]	; (2f5c <_get_sercom_index+0x84>)
    2f40:	4798      	blx	r3
	return 0;
    2f42:	2300      	movs	r3, #0
}
    2f44:	0018      	movs	r0, r3
    2f46:	46bd      	mov	sp, r7
    2f48:	b005      	add	sp, #20
    2f4a:	bd90      	pop	{r4, r7, pc}
    2f4c:	00002eb9 	.word	0x00002eb9
    2f50:	20000000 	.word	0x20000000
    2f54:	0000023a 	.word	0x0000023a
    2f58:	000085c0 	.word	0x000085c0
    2f5c:	00001b19 	.word	0x00001b19

00002f60 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    2f60:	b590      	push	{r4, r7, lr}
    2f62:	b085      	sub	sp, #20
    2f64:	af00      	add	r7, sp, #0
    2f66:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    2f68:	230f      	movs	r3, #15
    2f6a:	18fc      	adds	r4, r7, r3
    2f6c:	687b      	ldr	r3, [r7, #4]
    2f6e:	0018      	movs	r0, r3
    2f70:	4b6f      	ldr	r3, [pc, #444]	; (3130 <_usart_init+0x1d0>)
    2f72:	4798      	blx	r3
    2f74:	0003      	movs	r3, r0
    2f76:	7023      	strb	r3, [r4, #0]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    2f78:	687b      	ldr	r3, [r7, #4]
    2f7a:	2101      	movs	r1, #1
    2f7c:	0018      	movs	r0, r3
    2f7e:	4b6d      	ldr	r3, [pc, #436]	; (3134 <_usart_init+0x1d4>)
    2f80:	4798      	blx	r3
    2f82:	0003      	movs	r3, r0
    2f84:	001a      	movs	r2, r3
    2f86:	2301      	movs	r3, #1
    2f88:	4053      	eors	r3, r2
    2f8a:	b2db      	uxtb	r3, r3
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	d025      	beq.n	2fdc <_usart_init+0x7c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    2f90:	230f      	movs	r3, #15
    2f92:	18fb      	adds	r3, r7, r3
    2f94:	781a      	ldrb	r2, [r3, #0]
    2f96:	4968      	ldr	r1, [pc, #416]	; (3138 <_usart_init+0x1d8>)
    2f98:	0013      	movs	r3, r2
    2f9a:	009b      	lsls	r3, r3, #2
    2f9c:	189b      	adds	r3, r3, r2
    2f9e:	009b      	lsls	r3, r3, #2
    2fa0:	18cb      	adds	r3, r1, r3
    2fa2:	3304      	adds	r3, #4
    2fa4:	681b      	ldr	r3, [r3, #0]
    2fa6:	221c      	movs	r2, #28
    2fa8:	4013      	ands	r3, r2
    2faa:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    2fac:	687b      	ldr	r3, [r7, #4]
    2fae:	2102      	movs	r1, #2
    2fb0:	0018      	movs	r0, r3
    2fb2:	4b62      	ldr	r3, [pc, #392]	; (313c <_usart_init+0x1dc>)
    2fb4:	4798      	blx	r3
    2fb6:	1e03      	subs	r3, r0, #0
    2fb8:	d008      	beq.n	2fcc <_usart_init+0x6c>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    2fba:	687b      	ldr	r3, [r7, #4]
    2fbc:	0018      	movs	r0, r3
    2fbe:	4b60      	ldr	r3, [pc, #384]	; (3140 <_usart_init+0x1e0>)
    2fc0:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    2fc2:	687b      	ldr	r3, [r7, #4]
    2fc4:	2102      	movs	r1, #2
    2fc6:	0018      	movs	r0, r3
    2fc8:	4b5e      	ldr	r3, [pc, #376]	; (3144 <_usart_init+0x1e4>)
    2fca:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    2fcc:	68bb      	ldr	r3, [r7, #8]
    2fce:	2201      	movs	r2, #1
    2fd0:	431a      	orrs	r2, r3
    2fd2:	687b      	ldr	r3, [r7, #4]
    2fd4:	0011      	movs	r1, r2
    2fd6:	0018      	movs	r0, r3
    2fd8:	4b5b      	ldr	r3, [pc, #364]	; (3148 <_usart_init+0x1e8>)
    2fda:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    2fdc:	687b      	ldr	r3, [r7, #4]
    2fde:	2101      	movs	r1, #1
    2fe0:	0018      	movs	r0, r3
    2fe2:	4b58      	ldr	r3, [pc, #352]	; (3144 <_usart_init+0x1e4>)
    2fe4:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2fe6:	230f      	movs	r3, #15
    2fe8:	18fb      	adds	r3, r7, r3
    2fea:	781a      	ldrb	r2, [r3, #0]
    2fec:	4952      	ldr	r1, [pc, #328]	; (3138 <_usart_init+0x1d8>)
    2fee:	0013      	movs	r3, r2
    2ff0:	009b      	lsls	r3, r3, #2
    2ff2:	189b      	adds	r3, r3, r2
    2ff4:	009b      	lsls	r3, r3, #2
    2ff6:	18cb      	adds	r3, r1, r3
    2ff8:	3304      	adds	r3, #4
    2ffa:	681a      	ldr	r2, [r3, #0]
    2ffc:	687b      	ldr	r3, [r7, #4]
    2ffe:	0011      	movs	r1, r2
    3000:	0018      	movs	r0, r3
    3002:	4b51      	ldr	r3, [pc, #324]	; (3148 <_usart_init+0x1e8>)
    3004:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    3006:	230f      	movs	r3, #15
    3008:	18fb      	adds	r3, r7, r3
    300a:	781a      	ldrb	r2, [r3, #0]
    300c:	494a      	ldr	r1, [pc, #296]	; (3138 <_usart_init+0x1d8>)
    300e:	0013      	movs	r3, r2
    3010:	009b      	lsls	r3, r3, #2
    3012:	189b      	adds	r3, r3, r2
    3014:	009b      	lsls	r3, r3, #2
    3016:	18cb      	adds	r3, r1, r3
    3018:	3308      	adds	r3, #8
    301a:	681a      	ldr	r2, [r3, #0]
    301c:	687b      	ldr	r3, [r7, #4]
    301e:	0011      	movs	r1, r2
    3020:	0018      	movs	r0, r3
    3022:	4b4a      	ldr	r3, [pc, #296]	; (314c <_usart_init+0x1ec>)
    3024:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    3026:	230f      	movs	r3, #15
    3028:	18fb      	adds	r3, r7, r3
    302a:	781a      	ldrb	r2, [r3, #0]
    302c:	4942      	ldr	r1, [pc, #264]	; (3138 <_usart_init+0x1d8>)
    302e:	0013      	movs	r3, r2
    3030:	009b      	lsls	r3, r3, #2
    3032:	189b      	adds	r3, r3, r2
    3034:	009b      	lsls	r3, r3, #2
    3036:	18cb      	adds	r3, r1, r3
    3038:	3304      	adds	r3, #4
    303a:	681a      	ldr	r2, [r3, #0]
    303c:	2380      	movs	r3, #128	; 0x80
    303e:	019b      	lsls	r3, r3, #6
    3040:	4013      	ands	r3, r2
    3042:	d10e      	bne.n	3062 <_usart_init+0x102>
    3044:	230f      	movs	r3, #15
    3046:	18fb      	adds	r3, r7, r3
    3048:	781a      	ldrb	r2, [r3, #0]
    304a:	493b      	ldr	r1, [pc, #236]	; (3138 <_usart_init+0x1d8>)
    304c:	0013      	movs	r3, r2
    304e:	009b      	lsls	r3, r3, #2
    3050:	189b      	adds	r3, r3, r2
    3052:	009b      	lsls	r3, r3, #2
    3054:	18cb      	adds	r3, r1, r3
    3056:	3304      	adds	r3, #4
    3058:	681a      	ldr	r2, [r3, #0]
    305a:	23c0      	movs	r3, #192	; 0xc0
    305c:	01db      	lsls	r3, r3, #7
    305e:	4013      	ands	r3, r2
    3060:	d030      	beq.n	30c4 <_usart_init+0x164>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3062:	230f      	movs	r3, #15
    3064:	18fb      	adds	r3, r7, r3
    3066:	781a      	ldrb	r2, [r3, #0]
    3068:	4933      	ldr	r1, [pc, #204]	; (3138 <_usart_init+0x1d8>)
    306a:	0013      	movs	r3, r2
    306c:	009b      	lsls	r3, r3, #2
    306e:	189b      	adds	r3, r3, r2
    3070:	009b      	lsls	r3, r3, #2
    3072:	18cb      	adds	r3, r1, r3
    3074:	330c      	adds	r3, #12
    3076:	881b      	ldrh	r3, [r3, #0]
    3078:	04db      	lsls	r3, r3, #19
    307a:	0cdb      	lsrs	r3, r3, #19
    307c:	b299      	uxth	r1, r3
    307e:	687a      	ldr	r2, [r7, #4]
    3080:	8993      	ldrh	r3, [r2, #12]
    3082:	04c9      	lsls	r1, r1, #19
    3084:	0cc8      	lsrs	r0, r1, #19
    3086:	0b5b      	lsrs	r3, r3, #13
    3088:	035b      	lsls	r3, r3, #13
    308a:	1c19      	adds	r1, r3, #0
    308c:	1c03      	adds	r3, r0, #0
    308e:	430b      	orrs	r3, r1
    3090:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3092:	230f      	movs	r3, #15
    3094:	18fb      	adds	r3, r7, r3
    3096:	781a      	ldrb	r2, [r3, #0]
    3098:	4927      	ldr	r1, [pc, #156]	; (3138 <_usart_init+0x1d8>)
    309a:	0013      	movs	r3, r2
    309c:	009b      	lsls	r3, r3, #2
    309e:	189b      	adds	r3, r3, r2
    30a0:	009b      	lsls	r3, r3, #2
    30a2:	18cb      	adds	r3, r1, r3
    30a4:	330e      	adds	r3, #14
    30a6:	781b      	ldrb	r3, [r3, #0]
    30a8:	1c1a      	adds	r2, r3, #0
    30aa:	2307      	movs	r3, #7
    30ac:	4013      	ands	r3, r2
    30ae:	b2d9      	uxtb	r1, r3
    30b0:	687a      	ldr	r2, [r7, #4]
    30b2:	8993      	ldrh	r3, [r2, #12]
    30b4:	0348      	lsls	r0, r1, #13
    30b6:	04db      	lsls	r3, r3, #19
    30b8:	0cdb      	lsrs	r3, r3, #19
    30ba:	1c19      	adds	r1, r3, #0
    30bc:	1c03      	adds	r3, r0, #0
    30be:	430b      	orrs	r3, r1
    30c0:	8193      	strh	r3, [r2, #12]
    30c2:	e00f      	b.n	30e4 <_usart_init+0x184>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    30c4:	230f      	movs	r3, #15
    30c6:	18fb      	adds	r3, r7, r3
    30c8:	781a      	ldrb	r2, [r3, #0]
    30ca:	491b      	ldr	r1, [pc, #108]	; (3138 <_usart_init+0x1d8>)
    30cc:	0013      	movs	r3, r2
    30ce:	009b      	lsls	r3, r3, #2
    30d0:	189b      	adds	r3, r3, r2
    30d2:	009b      	lsls	r3, r3, #2
    30d4:	18cb      	adds	r3, r1, r3
    30d6:	330c      	adds	r3, #12
    30d8:	881a      	ldrh	r2, [r3, #0]
    30da:	687b      	ldr	r3, [r7, #4]
    30dc:	0011      	movs	r1, r2
    30de:	0018      	movs	r0, r3
    30e0:	4b1b      	ldr	r3, [pc, #108]	; (3150 <_usart_init+0x1f0>)
    30e2:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    30e4:	230f      	movs	r3, #15
    30e6:	18fb      	adds	r3, r7, r3
    30e8:	781a      	ldrb	r2, [r3, #0]
    30ea:	4913      	ldr	r1, [pc, #76]	; (3138 <_usart_init+0x1d8>)
    30ec:	0013      	movs	r3, r2
    30ee:	009b      	lsls	r3, r3, #2
    30f0:	189b      	adds	r3, r3, r2
    30f2:	009b      	lsls	r3, r3, #2
    30f4:	18cb      	adds	r3, r1, r3
    30f6:	330f      	adds	r3, #15
    30f8:	781a      	ldrb	r2, [r3, #0]
    30fa:	687b      	ldr	r3, [r7, #4]
    30fc:	0011      	movs	r1, r2
    30fe:	0018      	movs	r0, r3
    3100:	4b14      	ldr	r3, [pc, #80]	; (3154 <_usart_init+0x1f4>)
    3102:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    3104:	230f      	movs	r3, #15
    3106:	18fb      	adds	r3, r7, r3
    3108:	781a      	ldrb	r2, [r3, #0]
    310a:	490b      	ldr	r1, [pc, #44]	; (3138 <_usart_init+0x1d8>)
    310c:	0013      	movs	r3, r2
    310e:	009b      	lsls	r3, r3, #2
    3110:	189b      	adds	r3, r3, r2
    3112:	009b      	lsls	r3, r3, #2
    3114:	18cb      	adds	r3, r1, r3
    3116:	3310      	adds	r3, #16
    3118:	781a      	ldrb	r2, [r3, #0]
    311a:	687b      	ldr	r3, [r7, #4]
    311c:	0011      	movs	r1, r2
    311e:	0018      	movs	r0, r3
    3120:	4b0d      	ldr	r3, [pc, #52]	; (3158 <_usart_init+0x1f8>)
    3122:	4798      	blx	r3

	return ERR_NONE;
    3124:	2300      	movs	r3, #0
}
    3126:	0018      	movs	r0, r3
    3128:	46bd      	mov	sp, r7
    312a:	b005      	add	sp, #20
    312c:	bd90      	pop	{r4, r7, pc}
    312e:	46c0      	nop			; (mov r8, r8)
    3130:	00002ed9 	.word	0x00002ed9
    3134:	00002bbb 	.word	0x00002bbb
    3138:	20000000 	.word	0x20000000
    313c:	00002c99 	.word	0x00002c99
    3140:	00002c6d 	.word	0x00002c6d
    3144:	00002b9d 	.word	0x00002b9d
    3148:	00002cc9 	.word	0x00002cc9
    314c:	00002cf1 	.word	0x00002cf1
    3150:	00002d19 	.word	0x00002d19
    3154:	00002d37 	.word	0x00002d37
    3158:	00002d89 	.word	0x00002d89

0000315c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    315c:	b580      	push	{r7, lr}
    315e:	b082      	sub	sp, #8
    3160:	af00      	add	r7, sp, #0
    3162:	0002      	movs	r2, r0
    3164:	1dfb      	adds	r3, r7, #7
    3166:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    3168:	1dfb      	adds	r3, r7, #7
    316a:	781b      	ldrb	r3, [r3, #0]
    316c:	2b7f      	cmp	r3, #127	; 0x7f
    316e:	d809      	bhi.n	3184 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3170:	4b06      	ldr	r3, [pc, #24]	; (318c <__NVIC_EnableIRQ+0x30>)
    3172:	1dfa      	adds	r2, r7, #7
    3174:	7812      	ldrb	r2, [r2, #0]
    3176:	0011      	movs	r1, r2
    3178:	221f      	movs	r2, #31
    317a:	400a      	ands	r2, r1
    317c:	2101      	movs	r1, #1
    317e:	4091      	lsls	r1, r2
    3180:	000a      	movs	r2, r1
    3182:	601a      	str	r2, [r3, #0]
  }
}
    3184:	46c0      	nop			; (mov r8, r8)
    3186:	46bd      	mov	sp, r7
    3188:	b002      	add	sp, #8
    318a:	bd80      	pop	{r7, pc}
    318c:	e000e100 	.word	0xe000e100

00003190 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    3190:	b580      	push	{r7, lr}
    3192:	b082      	sub	sp, #8
    3194:	af00      	add	r7, sp, #0
    3196:	0002      	movs	r2, r0
    3198:	1dfb      	adds	r3, r7, #7
    319a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    319c:	1dfb      	adds	r3, r7, #7
    319e:	781b      	ldrb	r3, [r3, #0]
    31a0:	2b7f      	cmp	r3, #127	; 0x7f
    31a2:	d80e      	bhi.n	31c2 <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31a4:	4909      	ldr	r1, [pc, #36]	; (31cc <__NVIC_DisableIRQ+0x3c>)
    31a6:	1dfb      	adds	r3, r7, #7
    31a8:	781b      	ldrb	r3, [r3, #0]
    31aa:	001a      	movs	r2, r3
    31ac:	231f      	movs	r3, #31
    31ae:	4013      	ands	r3, r2
    31b0:	2201      	movs	r2, #1
    31b2:	409a      	lsls	r2, r3
    31b4:	0013      	movs	r3, r2
    31b6:	2280      	movs	r2, #128	; 0x80
    31b8:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
    31ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31be:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    31c2:	46c0      	nop			; (mov r8, r8)
    31c4:	46bd      	mov	sp, r7
    31c6:	b002      	add	sp, #8
    31c8:	bd80      	pop	{r7, pc}
    31ca:	46c0      	nop			; (mov r8, r8)
    31cc:	e000e100 	.word	0xe000e100

000031d0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    31d0:	b580      	push	{r7, lr}
    31d2:	b082      	sub	sp, #8
    31d4:	af00      	add	r7, sp, #0
    31d6:	0002      	movs	r2, r0
    31d8:	1dfb      	adds	r3, r7, #7
    31da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
    31dc:	1dfb      	adds	r3, r7, #7
    31de:	781b      	ldrb	r3, [r3, #0]
    31e0:	2b7f      	cmp	r3, #127	; 0x7f
    31e2:	d80a      	bhi.n	31fa <__NVIC_ClearPendingIRQ+0x2a>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31e4:	4907      	ldr	r1, [pc, #28]	; (3204 <__NVIC_ClearPendingIRQ+0x34>)
    31e6:	1dfb      	adds	r3, r7, #7
    31e8:	781b      	ldrb	r3, [r3, #0]
    31ea:	001a      	movs	r2, r3
    31ec:	231f      	movs	r3, #31
    31ee:	4013      	ands	r3, r2
    31f0:	2201      	movs	r2, #1
    31f2:	409a      	lsls	r2, r3
    31f4:	23c0      	movs	r3, #192	; 0xc0
    31f6:	005b      	lsls	r3, r3, #1
    31f8:	50ca      	str	r2, [r1, r3]
  }
}
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	46bd      	mov	sp, r7
    31fe:	b002      	add	sp, #8
    3200:	bd80      	pop	{r7, pc}
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	e000e100 	.word	0xe000e100

00003208 <hri_tc_wait_for_sync>:
typedef uint8_t  hri_tccount8_count_reg_t;
typedef uint8_t  hri_tccount8_per_reg_t;
typedef uint8_t  hri_tccount8_perbuf_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    3208:	b580      	push	{r7, lr}
    320a:	b082      	sub	sp, #8
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
    3210:	6039      	str	r1, [r7, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3212:	46c0      	nop			; (mov r8, r8)
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	691b      	ldr	r3, [r3, #16]
    3218:	683a      	ldr	r2, [r7, #0]
    321a:	4013      	ands	r3, r2
    321c:	d1fa      	bne.n	3214 <hri_tc_wait_for_sync+0xc>
	};
}
    321e:	46c0      	nop			; (mov r8, r8)
    3220:	46bd      	mov	sp, r7
    3222:	b002      	add	sp, #8
    3224:	bd80      	pop	{r7, pc}

00003226 <hri_tc_is_syncing>:

static inline bool hri_tc_is_syncing(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
    3226:	b580      	push	{r7, lr}
    3228:	b082      	sub	sp, #8
    322a:	af00      	add	r7, sp, #0
    322c:	6078      	str	r0, [r7, #4]
    322e:	6039      	str	r1, [r7, #0]
	return ((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg;
    3230:	687b      	ldr	r3, [r7, #4]
    3232:	691b      	ldr	r3, [r3, #16]
    3234:	683a      	ldr	r2, [r7, #0]
    3236:	4013      	ands	r3, r2
    3238:	1e5a      	subs	r2, r3, #1
    323a:	4193      	sbcs	r3, r2
    323c:	b2db      	uxtb	r3, r3
}
    323e:	0018      	movs	r0, r3
    3240:	46bd      	mov	sp, r7
    3242:	b002      	add	sp, #8
    3244:	bd80      	pop	{r7, pc}

00003246 <hri_tc_get_interrupt_OVF_bit>:
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
    3246:	b580      	push	{r7, lr}
    3248:	b082      	sub	sp, #8
    324a:	af00      	add	r7, sp, #0
    324c:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    324e:	687b      	ldr	r3, [r7, #4]
    3250:	7a9b      	ldrb	r3, [r3, #10]
    3252:	b2db      	uxtb	r3, r3
    3254:	001a      	movs	r2, r3
    3256:	2301      	movs	r3, #1
    3258:	4013      	ands	r3, r2
    325a:	1e5a      	subs	r2, r3, #1
    325c:	4193      	sbcs	r3, r2
    325e:	b2db      	uxtb	r3, r3
}
    3260:	0018      	movs	r0, r3
    3262:	46bd      	mov	sp, r7
    3264:	b002      	add	sp, #8
    3266:	bd80      	pop	{r7, pc}

00003268 <hri_tc_clear_interrupt_OVF_bit>:

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
    3268:	b580      	push	{r7, lr}
    326a:	b082      	sub	sp, #8
    326c:	af00      	add	r7, sp, #0
    326e:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    3270:	687b      	ldr	r3, [r7, #4]
    3272:	2201      	movs	r2, #1
    3274:	729a      	strb	r2, [r3, #10]
}
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	46bd      	mov	sp, r7
    327a:	b002      	add	sp, #8
    327c:	bd80      	pop	{r7, pc}

0000327e <hri_tc_clear_interrupt_ERR_bit>:
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
    327e:	b580      	push	{r7, lr}
    3280:	b082      	sub	sp, #8
    3282:	af00      	add	r7, sp, #0
    3284:	6078      	str	r0, [r7, #4]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    3286:	687b      	ldr	r3, [r7, #4]
    3288:	2202      	movs	r2, #2
    328a:	729a      	strb	r2, [r3, #10]
}
    328c:	46c0      	nop			; (mov r8, r8)
    328e:	46bd      	mov	sp, r7
    3290:	b002      	add	sp, #8
    3292:	bd80      	pop	{r7, pc}

00003294 <hri_tc_get_INTEN_ERR_bit>:
{
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
    3294:	b580      	push	{r7, lr}
    3296:	b082      	sub	sp, #8
    3298:	af00      	add	r7, sp, #0
    329a:	6078      	str	r0, [r7, #4]
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	7a5b      	ldrb	r3, [r3, #9]
    32a0:	b2db      	uxtb	r3, r3
    32a2:	085b      	lsrs	r3, r3, #1
    32a4:	2201      	movs	r2, #1
    32a6:	4013      	ands	r3, r2
    32a8:	1e5a      	subs	r2, r3, #1
    32aa:	4193      	sbcs	r3, r2
    32ac:	b2db      	uxtb	r3, r3
}
    32ae:	0018      	movs	r0, r3
    32b0:	46bd      	mov	sp, r7
    32b2:	b002      	add	sp, #8
    32b4:	bd80      	pop	{r7, pc}
	...

000032b8 <hri_tc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TC_CTRLA_SWRST) >> TC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    32b8:	b580      	push	{r7, lr}
    32ba:	b082      	sub	sp, #8
    32bc:	af00      	add	r7, sp, #0
    32be:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    32c0:	687b      	ldr	r3, [r7, #4]
    32c2:	681b      	ldr	r3, [r3, #0]
    32c4:	2202      	movs	r2, #2
    32c6:	431a      	orrs	r2, r3
    32c8:	687b      	ldr	r3, [r7, #4]
    32ca:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    32cc:	687b      	ldr	r3, [r7, #4]
    32ce:	2103      	movs	r1, #3
    32d0:	0018      	movs	r0, r3
    32d2:	4b03      	ldr	r3, [pc, #12]	; (32e0 <hri_tc_set_CTRLA_ENABLE_bit+0x28>)
    32d4:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    32d6:	46c0      	nop			; (mov r8, r8)
    32d8:	46bd      	mov	sp, r7
    32da:	b002      	add	sp, #8
    32dc:	bd80      	pop	{r7, pc}
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	00003209 	.word	0x00003209

000032e4 <hri_tc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    32e4:	b580      	push	{r7, lr}
    32e6:	b084      	sub	sp, #16
    32e8:	af00      	add	r7, sp, #0
    32ea:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    32ec:	687b      	ldr	r3, [r7, #4]
    32ee:	2103      	movs	r1, #3
    32f0:	0018      	movs	r0, r3
    32f2:	4b09      	ldr	r3, [pc, #36]	; (3318 <hri_tc_get_CTRLA_ENABLE_bit+0x34>)
    32f4:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    32f6:	687b      	ldr	r3, [r7, #4]
    32f8:	681b      	ldr	r3, [r3, #0]
    32fa:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    32fc:	68fb      	ldr	r3, [r7, #12]
    32fe:	085b      	lsrs	r3, r3, #1
    3300:	2201      	movs	r2, #1
    3302:	4013      	ands	r3, r2
    3304:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    3306:	68fb      	ldr	r3, [r7, #12]
    3308:	1e5a      	subs	r2, r3, #1
    330a:	4193      	sbcs	r3, r2
    330c:	b2db      	uxtb	r3, r3
}
    330e:	0018      	movs	r0, r3
    3310:	46bd      	mov	sp, r7
    3312:	b004      	add	sp, #16
    3314:	bd80      	pop	{r7, pc}
    3316:	46c0      	nop			; (mov r8, r8)
    3318:	00003209 	.word	0x00003209

0000331c <hri_tc_clear_CTRLA_ENABLE_bit>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    331c:	b580      	push	{r7, lr}
    331e:	b082      	sub	sp, #8
    3320:	af00      	add	r7, sp, #0
    3322:	6078      	str	r0, [r7, #4]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3324:	687b      	ldr	r3, [r7, #4]
    3326:	681b      	ldr	r3, [r3, #0]
    3328:	2202      	movs	r2, #2
    332a:	4393      	bics	r3, r2
    332c:	001a      	movs	r2, r3
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3332:	687b      	ldr	r3, [r7, #4]
    3334:	2103      	movs	r1, #3
    3336:	0018      	movs	r0, r3
    3338:	4b02      	ldr	r3, [pc, #8]	; (3344 <hri_tc_clear_CTRLA_ENABLE_bit+0x28>)
    333a:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    333c:	46c0      	nop			; (mov r8, r8)
    333e:	46bd      	mov	sp, r7
    3340:	b002      	add	sp, #8
    3342:	bd80      	pop	{r7, pc}
    3344:	00003209 	.word	0x00003209

00003348 <hri_tc_get_CTRLA_reg>:
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
    3348:	b580      	push	{r7, lr}
    334a:	b084      	sub	sp, #16
    334c:	af00      	add	r7, sp, #0
    334e:	6078      	str	r0, [r7, #4]
    3350:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3352:	687b      	ldr	r3, [r7, #4]
    3354:	2103      	movs	r1, #3
    3356:	0018      	movs	r0, r3
    3358:	4b06      	ldr	r3, [pc, #24]	; (3374 <hri_tc_get_CTRLA_reg+0x2c>)
    335a:	4798      	blx	r3
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    335c:	687b      	ldr	r3, [r7, #4]
    335e:	681b      	ldr	r3, [r3, #0]
    3360:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3362:	68fb      	ldr	r3, [r7, #12]
    3364:	683a      	ldr	r2, [r7, #0]
    3366:	4013      	ands	r3, r2
    3368:	60fb      	str	r3, [r7, #12]
	return tmp;
    336a:	68fb      	ldr	r3, [r7, #12]
}
    336c:	0018      	movs	r0, r3
    336e:	46bd      	mov	sp, r7
    3370:	b004      	add	sp, #16
    3372:	bd80      	pop	{r7, pc}
    3374:	00003209 	.word	0x00003209

00003378 <hri_tc_write_CTRLA_reg>:

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
    3378:	b580      	push	{r7, lr}
    337a:	b082      	sub	sp, #8
    337c:	af00      	add	r7, sp, #0
    337e:	6078      	str	r0, [r7, #4]
    3380:	6039      	str	r1, [r7, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    3382:	687b      	ldr	r3, [r7, #4]
    3384:	683a      	ldr	r2, [r7, #0]
    3386:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
    3388:	687b      	ldr	r3, [r7, #4]
    338a:	2103      	movs	r1, #3
    338c:	0018      	movs	r0, r3
    338e:	4b03      	ldr	r3, [pc, #12]	; (339c <hri_tc_write_CTRLA_reg+0x24>)
    3390:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    3392:	46c0      	nop			; (mov r8, r8)
    3394:	46bd      	mov	sp, r7
    3396:	b002      	add	sp, #8
    3398:	bd80      	pop	{r7, pc}
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	00003209 	.word	0x00003209

000033a0 <hri_tc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
    33a0:	b580      	push	{r7, lr}
    33a2:	b082      	sub	sp, #8
    33a4:	af00      	add	r7, sp, #0
    33a6:	6078      	str	r0, [r7, #4]
    33a8:	000a      	movs	r2, r1
    33aa:	1cbb      	adds	r3, r7, #2
    33ac:	801a      	strh	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    33ae:	687b      	ldr	r3, [r7, #4]
    33b0:	1cba      	adds	r2, r7, #2
    33b2:	8812      	ldrh	r2, [r2, #0]
    33b4:	80da      	strh	r2, [r3, #6]
	TC_CRITICAL_SECTION_LEAVE();
}
    33b6:	46c0      	nop			; (mov r8, r8)
    33b8:	46bd      	mov	sp, r7
    33ba:	b002      	add	sp, #8
    33bc:	bd80      	pop	{r7, pc}

000033be <hri_tc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_WAVE_reg(const void *const hw, hri_tc_wave_reg_t data)
{
    33be:	b580      	push	{r7, lr}
    33c0:	b082      	sub	sp, #8
    33c2:	af00      	add	r7, sp, #0
    33c4:	6078      	str	r0, [r7, #4]
    33c6:	000a      	movs	r2, r1
    33c8:	1cfb      	adds	r3, r7, #3
    33ca:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.WAVE.reg = data;
    33cc:	687b      	ldr	r3, [r7, #4]
    33ce:	1cfa      	adds	r2, r7, #3
    33d0:	7812      	ldrb	r2, [r2, #0]
    33d2:	731a      	strb	r2, [r3, #12]
	TC_CRITICAL_SECTION_LEAVE();
}
    33d4:	46c0      	nop			; (mov r8, r8)
    33d6:	46bd      	mov	sp, r7
    33d8:	b002      	add	sp, #8
    33da:	bd80      	pop	{r7, pc}

000033dc <hri_tc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
    33dc:	b580      	push	{r7, lr}
    33de:	b082      	sub	sp, #8
    33e0:	af00      	add	r7, sp, #0
    33e2:	6078      	str	r0, [r7, #4]
    33e4:	000a      	movs	r2, r1
    33e6:	1cfb      	adds	r3, r7, #3
    33e8:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    33ea:	687b      	ldr	r3, [r7, #4]
    33ec:	1cfa      	adds	r2, r7, #3
    33ee:	7812      	ldrb	r2, [r2, #0]
    33f0:	73da      	strb	r2, [r3, #15]
	TC_CRITICAL_SECTION_LEAVE();
}
    33f2:	46c0      	nop			; (mov r8, r8)
    33f4:	46bd      	mov	sp, r7
    33f6:	b002      	add	sp, #8
    33f8:	bd80      	pop	{r7, pc}
	...

000033fc <hri_tccount16_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
    33fc:	b580      	push	{r7, lr}
    33fe:	b082      	sub	sp, #8
    3400:	af00      	add	r7, sp, #0
    3402:	6078      	str	r0, [r7, #4]
    3404:	0008      	movs	r0, r1
    3406:	0011      	movs	r1, r2
    3408:	1cfb      	adds	r3, r7, #3
    340a:	1c02      	adds	r2, r0, #0
    340c:	701a      	strb	r2, [r3, #0]
    340e:	003b      	movs	r3, r7
    3410:	1c0a      	adds	r2, r1, #0
    3412:	801a      	strh	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3414:	1cfb      	adds	r3, r7, #3
    3416:	781b      	ldrb	r3, [r3, #0]
    3418:	687a      	ldr	r2, [r7, #4]
    341a:	330c      	adds	r3, #12
    341c:	005b      	lsls	r3, r3, #1
    341e:	18d3      	adds	r3, r2, r3
    3420:	3304      	adds	r3, #4
    3422:	003a      	movs	r2, r7
    3424:	8812      	ldrh	r2, [r2, #0]
    3426:	801a      	strh	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    3428:	687b      	ldr	r3, [r7, #4]
    342a:	21c0      	movs	r1, #192	; 0xc0
    342c:	0018      	movs	r0, r3
    342e:	4b03      	ldr	r3, [pc, #12]	; (343c <hri_tccount16_write_CC_reg+0x40>)
    3430:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    3432:	46c0      	nop			; (mov r8, r8)
    3434:	46bd      	mov	sp, r7
    3436:	b002      	add	sp, #8
    3438:	bd80      	pop	{r7, pc}
    343a:	46c0      	nop			; (mov r8, r8)
    343c:	00003209 	.word	0x00003209

00003440 <hri_tccount32_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
    3440:	b580      	push	{r7, lr}
    3442:	b084      	sub	sp, #16
    3444:	af00      	add	r7, sp, #0
    3446:	60f8      	str	r0, [r7, #12]
    3448:	607a      	str	r2, [r7, #4]
    344a:	230b      	movs	r3, #11
    344c:	18fb      	adds	r3, r7, r3
    344e:	1c0a      	adds	r2, r1, #0
    3450:	701a      	strb	r2, [r3, #0]
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3452:	230b      	movs	r3, #11
    3454:	18fb      	adds	r3, r7, r3
    3456:	781b      	ldrb	r3, [r3, #0]
    3458:	68fa      	ldr	r2, [r7, #12]
    345a:	3306      	adds	r3, #6
    345c:	009b      	lsls	r3, r3, #2
    345e:	18d3      	adds	r3, r2, r3
    3460:	3304      	adds	r3, #4
    3462:	687a      	ldr	r2, [r7, #4]
    3464:	601a      	str	r2, [r3, #0]
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_CC0 | TC_SYNCBUSY_CC1);
    3466:	68fb      	ldr	r3, [r7, #12]
    3468:	21c0      	movs	r1, #192	; 0xc0
    346a:	0018      	movs	r0, r3
    346c:	4b02      	ldr	r3, [pc, #8]	; (3478 <hri_tccount32_write_CC_reg+0x38>)
    346e:	4798      	blx	r3
	TC_CRITICAL_SECTION_LEAVE();
}
    3470:	46c0      	nop			; (mov r8, r8)
    3472:	46bd      	mov	sp, r7
    3474:	b004      	add	sp, #16
    3476:	bd80      	pop	{r7, pc}
    3478:	00003209 	.word	0x00003209

0000347c <_pwm_init>:
static inline uint8_t _get_hardware_offset(const void *const hw);
/**
 * \brief Initialize TC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    347c:	b590      	push	{r4, r7, lr}
    347e:	b085      	sub	sp, #20
    3480:	af00      	add	r7, sp, #0
    3482:	6078      	str	r0, [r7, #4]
    3484:	6039      	str	r1, [r7, #0]
	int8_t i   = get_tc_index(hw);
    3486:	230f      	movs	r3, #15
    3488:	18fc      	adds	r4, r7, r3
    348a:	683b      	ldr	r3, [r7, #0]
    348c:	0018      	movs	r0, r3
    348e:	4b85      	ldr	r3, [pc, #532]	; (36a4 <_pwm_init+0x228>)
    3490:	4798      	blx	r3
    3492:	0003      	movs	r3, r0
    3494:	7023      	strb	r3, [r4, #0]
	device->hw = hw;
    3496:	687b      	ldr	r3, [r7, #4]
    3498:	683a      	ldr	r2, [r7, #0]
    349a:	611a      	str	r2, [r3, #16]

	if (!hri_tc_is_syncing(hw, TC_SYNCBUSY_SWRST)) {
    349c:	683b      	ldr	r3, [r7, #0]
    349e:	2101      	movs	r1, #1
    34a0:	0018      	movs	r0, r3
    34a2:	4b81      	ldr	r3, [pc, #516]	; (36a8 <_pwm_init+0x22c>)
    34a4:	4798      	blx	r3
    34a6:	0003      	movs	r3, r0
    34a8:	001a      	movs	r2, r3
    34aa:	2301      	movs	r3, #1
    34ac:	4053      	eors	r3, r2
    34ae:	b2db      	uxtb	r3, r3
    34b0:	2b00      	cmp	r3, #0
    34b2:	d014      	beq.n	34de <_pwm_init+0x62>
		if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    34b4:	683b      	ldr	r3, [r7, #0]
    34b6:	2102      	movs	r1, #2
    34b8:	0018      	movs	r0, r3
    34ba:	4b7c      	ldr	r3, [pc, #496]	; (36ac <_pwm_init+0x230>)
    34bc:	4798      	blx	r3
    34be:	1e03      	subs	r3, r0, #0
    34c0:	d008      	beq.n	34d4 <_pwm_init+0x58>
			hri_tc_clear_CTRLA_ENABLE_bit(hw);
    34c2:	683b      	ldr	r3, [r7, #0]
    34c4:	0018      	movs	r0, r3
    34c6:	4b7a      	ldr	r3, [pc, #488]	; (36b0 <_pwm_init+0x234>)
    34c8:	4798      	blx	r3
			hri_tc_wait_for_sync(hw, TC_SYNCBUSY_ENABLE);
    34ca:	683b      	ldr	r3, [r7, #0]
    34cc:	2102      	movs	r1, #2
    34ce:	0018      	movs	r0, r3
    34d0:	4b78      	ldr	r3, [pc, #480]	; (36b4 <_pwm_init+0x238>)
    34d2:	4798      	blx	r3
		}
		hri_tc_write_CTRLA_reg(hw, TC_CTRLA_SWRST);
    34d4:	683b      	ldr	r3, [r7, #0]
    34d6:	2101      	movs	r1, #1
    34d8:	0018      	movs	r0, r3
    34da:	4b77      	ldr	r3, [pc, #476]	; (36b8 <_pwm_init+0x23c>)
    34dc:	4798      	blx	r3
	}
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST);
    34de:	683b      	ldr	r3, [r7, #0]
    34e0:	2101      	movs	r1, #1
    34e2:	0018      	movs	r0, r3
    34e4:	4b73      	ldr	r3, [pc, #460]	; (36b4 <_pwm_init+0x238>)
    34e6:	4798      	blx	r3

	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    34e8:	230f      	movs	r3, #15
    34ea:	18fb      	adds	r3, r7, r3
    34ec:	2200      	movs	r2, #0
    34ee:	569a      	ldrsb	r2, [r3, r2]
    34f0:	4972      	ldr	r1, [pc, #456]	; (36bc <_pwm_init+0x240>)
    34f2:	0013      	movs	r3, r2
    34f4:	009b      	lsls	r3, r3, #2
    34f6:	189b      	adds	r3, r3, r2
    34f8:	009b      	lsls	r3, r3, #2
    34fa:	18cb      	adds	r3, r1, r3
    34fc:	3304      	adds	r3, #4
    34fe:	681a      	ldr	r2, [r3, #0]
    3500:	683b      	ldr	r3, [r7, #0]
    3502:	0011      	movs	r1, r2
    3504:	0018      	movs	r0, r3
    3506:	4b6c      	ldr	r3, [pc, #432]	; (36b8 <_pwm_init+0x23c>)
    3508:	4798      	blx	r3
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    350a:	230f      	movs	r3, #15
    350c:	18fb      	adds	r3, r7, r3
    350e:	2200      	movs	r2, #0
    3510:	569a      	ldrsb	r2, [r3, r2]
    3512:	496a      	ldr	r1, [pc, #424]	; (36bc <_pwm_init+0x240>)
    3514:	0013      	movs	r3, r2
    3516:	009b      	lsls	r3, r3, #2
    3518:	189b      	adds	r3, r3, r2
    351a:	009b      	lsls	r3, r3, #2
    351c:	18cb      	adds	r3, r1, r3
    351e:	330a      	adds	r3, #10
    3520:	781a      	ldrb	r2, [r3, #0]
    3522:	683b      	ldr	r3, [r7, #0]
    3524:	0011      	movs	r1, r2
    3526:	0018      	movs	r0, r3
    3528:	4b65      	ldr	r3, [pc, #404]	; (36c0 <_pwm_init+0x244>)
    352a:	4798      	blx	r3
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    352c:	230f      	movs	r3, #15
    352e:	18fb      	adds	r3, r7, r3
    3530:	2200      	movs	r2, #0
    3532:	569a      	ldrsb	r2, [r3, r2]
    3534:	4961      	ldr	r1, [pc, #388]	; (36bc <_pwm_init+0x240>)
    3536:	0013      	movs	r3, r2
    3538:	009b      	lsls	r3, r3, #2
    353a:	189b      	adds	r3, r3, r2
    353c:	009b      	lsls	r3, r3, #2
    353e:	18cb      	adds	r3, r1, r3
    3540:	3308      	adds	r3, #8
    3542:	881a      	ldrh	r2, [r3, #0]
    3544:	683b      	ldr	r3, [r7, #0]
    3546:	0011      	movs	r1, r2
    3548:	0018      	movs	r0, r3
    354a:	4b5e      	ldr	r3, [pc, #376]	; (36c4 <_pwm_init+0x248>)
    354c:	4798      	blx	r3
	hri_tc_write_WAVE_reg(hw, TC_WAVE_WAVEGEN_MPWM_Val);
    354e:	683b      	ldr	r3, [r7, #0]
    3550:	2103      	movs	r1, #3
    3552:	0018      	movs	r0, r3
    3554:	4b5c      	ldr	r3, [pc, #368]	; (36c8 <_pwm_init+0x24c>)
    3556:	4798      	blx	r3

	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3558:	230f      	movs	r3, #15
    355a:	18fb      	adds	r3, r7, r3
    355c:	2200      	movs	r2, #0
    355e:	569a      	ldrsb	r2, [r3, r2]
    3560:	4956      	ldr	r1, [pc, #344]	; (36bc <_pwm_init+0x240>)
    3562:	0013      	movs	r3, r2
    3564:	009b      	lsls	r3, r3, #2
    3566:	189b      	adds	r3, r3, r2
    3568:	009b      	lsls	r3, r3, #2
    356a:	18cb      	adds	r3, r1, r3
    356c:	3304      	adds	r3, #4
    356e:	681b      	ldr	r3, [r3, #0]
    3570:	220c      	movs	r2, #12
    3572:	4013      	ands	r3, r2
    3574:	2b08      	cmp	r3, #8
    3576:	d122      	bne.n	35be <_pwm_init+0x142>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3578:	230f      	movs	r3, #15
    357a:	18fb      	adds	r3, r7, r3
    357c:	2200      	movs	r2, #0
    357e:	569a      	ldrsb	r2, [r3, r2]
    3580:	494e      	ldr	r1, [pc, #312]	; (36bc <_pwm_init+0x240>)
    3582:	0013      	movs	r3, r2
    3584:	009b      	lsls	r3, r3, #2
    3586:	189b      	adds	r3, r3, r2
    3588:	009b      	lsls	r3, r3, #2
    358a:	18cb      	adds	r3, r1, r3
    358c:	330c      	adds	r3, #12
    358e:	681a      	ldr	r2, [r3, #0]
    3590:	683b      	ldr	r3, [r7, #0]
    3592:	2100      	movs	r1, #0
    3594:	0018      	movs	r0, r3
    3596:	4b4d      	ldr	r3, [pc, #308]	; (36cc <_pwm_init+0x250>)
    3598:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    359a:	230f      	movs	r3, #15
    359c:	18fb      	adds	r3, r7, r3
    359e:	2200      	movs	r2, #0
    35a0:	569a      	ldrsb	r2, [r3, r2]
    35a2:	4946      	ldr	r1, [pc, #280]	; (36bc <_pwm_init+0x240>)
    35a4:	0013      	movs	r3, r2
    35a6:	009b      	lsls	r3, r3, #2
    35a8:	189b      	adds	r3, r3, r2
    35aa:	009b      	lsls	r3, r3, #2
    35ac:	18cb      	adds	r3, r1, r3
    35ae:	3310      	adds	r3, #16
    35b0:	681a      	ldr	r2, [r3, #0]
    35b2:	683b      	ldr	r3, [r7, #0]
    35b4:	2101      	movs	r1, #1
    35b6:	0018      	movs	r0, r3
    35b8:	4b44      	ldr	r3, [pc, #272]	; (36cc <_pwm_init+0x250>)
    35ba:	4798      	blx	r3
    35bc:	e036      	b.n	362c <_pwm_init+0x1b0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    35be:	230f      	movs	r3, #15
    35c0:	18fb      	adds	r3, r7, r3
    35c2:	2200      	movs	r2, #0
    35c4:	569a      	ldrsb	r2, [r3, r2]
    35c6:	493d      	ldr	r1, [pc, #244]	; (36bc <_pwm_init+0x240>)
    35c8:	0013      	movs	r3, r2
    35ca:	009b      	lsls	r3, r3, #2
    35cc:	189b      	adds	r3, r3, r2
    35ce:	009b      	lsls	r3, r3, #2
    35d0:	18cb      	adds	r3, r1, r3
    35d2:	3304      	adds	r3, #4
    35d4:	681b      	ldr	r3, [r3, #0]
    35d6:	220c      	movs	r2, #12
    35d8:	4013      	ands	r3, r2
    35da:	d124      	bne.n	3626 <_pwm_init+0x1aa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    35dc:	230f      	movs	r3, #15
    35de:	18fb      	adds	r3, r7, r3
    35e0:	2200      	movs	r2, #0
    35e2:	569a      	ldrsb	r2, [r3, r2]
    35e4:	4935      	ldr	r1, [pc, #212]	; (36bc <_pwm_init+0x240>)
    35e6:	0013      	movs	r3, r2
    35e8:	009b      	lsls	r3, r3, #2
    35ea:	189b      	adds	r3, r3, r2
    35ec:	009b      	lsls	r3, r3, #2
    35ee:	18cb      	adds	r3, r1, r3
    35f0:	330c      	adds	r3, #12
    35f2:	681b      	ldr	r3, [r3, #0]
    35f4:	b29a      	uxth	r2, r3
    35f6:	683b      	ldr	r3, [r7, #0]
    35f8:	2100      	movs	r1, #0
    35fa:	0018      	movs	r0, r3
    35fc:	4b34      	ldr	r3, [pc, #208]	; (36d0 <_pwm_init+0x254>)
    35fe:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    3600:	230f      	movs	r3, #15
    3602:	18fb      	adds	r3, r7, r3
    3604:	2200      	movs	r2, #0
    3606:	569a      	ldrsb	r2, [r3, r2]
    3608:	492c      	ldr	r1, [pc, #176]	; (36bc <_pwm_init+0x240>)
    360a:	0013      	movs	r3, r2
    360c:	009b      	lsls	r3, r3, #2
    360e:	189b      	adds	r3, r3, r2
    3610:	009b      	lsls	r3, r3, #2
    3612:	18cb      	adds	r3, r1, r3
    3614:	3310      	adds	r3, #16
    3616:	681b      	ldr	r3, [r3, #0]
    3618:	b29a      	uxth	r2, r3
    361a:	683b      	ldr	r3, [r7, #0]
    361c:	2101      	movs	r1, #1
    361e:	0018      	movs	r0, r3
    3620:	4b2b      	ldr	r3, [pc, #172]	; (36d0 <_pwm_init+0x254>)
    3622:	4798      	blx	r3
    3624:	e002      	b.n	362c <_pwm_init+0x1b0>
	} else {
		/* 8-bit resolution is not accepted by duty cycle control */
		return -1;
    3626:	2301      	movs	r3, #1
    3628:	425b      	negs	r3, r3
    362a:	e036      	b.n	369a <_pwm_init+0x21e>
	}

	_tc_init_irq_param(hw, (void *)device);
    362c:	687a      	ldr	r2, [r7, #4]
    362e:	683b      	ldr	r3, [r7, #0]
    3630:	0011      	movs	r1, r2
    3632:	0018      	movs	r0, r3
    3634:	4b27      	ldr	r3, [pc, #156]	; (36d4 <_pwm_init+0x258>)
    3636:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    3638:	230f      	movs	r3, #15
    363a:	18fb      	adds	r3, r7, r3
    363c:	2200      	movs	r2, #0
    363e:	569a      	ldrsb	r2, [r3, r2]
    3640:	491e      	ldr	r1, [pc, #120]	; (36bc <_pwm_init+0x240>)
    3642:	0013      	movs	r3, r2
    3644:	009b      	lsls	r3, r3, #2
    3646:	189b      	adds	r3, r3, r2
    3648:	009b      	lsls	r3, r3, #2
    364a:	18cb      	adds	r3, r1, r3
    364c:	3301      	adds	r3, #1
    364e:	781b      	ldrb	r3, [r3, #0]
    3650:	b25b      	sxtb	r3, r3
    3652:	0018      	movs	r0, r3
    3654:	4b20      	ldr	r3, [pc, #128]	; (36d8 <_pwm_init+0x25c>)
    3656:	4798      	blx	r3
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    3658:	230f      	movs	r3, #15
    365a:	18fb      	adds	r3, r7, r3
    365c:	2200      	movs	r2, #0
    365e:	569a      	ldrsb	r2, [r3, r2]
    3660:	4916      	ldr	r1, [pc, #88]	; (36bc <_pwm_init+0x240>)
    3662:	0013      	movs	r3, r2
    3664:	009b      	lsls	r3, r3, #2
    3666:	189b      	adds	r3, r3, r2
    3668:	009b      	lsls	r3, r3, #2
    366a:	18cb      	adds	r3, r1, r3
    366c:	3301      	adds	r3, #1
    366e:	781b      	ldrb	r3, [r3, #0]
    3670:	b25b      	sxtb	r3, r3
    3672:	0018      	movs	r0, r3
    3674:	4b19      	ldr	r3, [pc, #100]	; (36dc <_pwm_init+0x260>)
    3676:	4798      	blx	r3
	NVIC_EnableIRQ(_tcs[i].irq);
    3678:	230f      	movs	r3, #15
    367a:	18fb      	adds	r3, r7, r3
    367c:	2200      	movs	r2, #0
    367e:	569a      	ldrsb	r2, [r3, r2]
    3680:	490e      	ldr	r1, [pc, #56]	; (36bc <_pwm_init+0x240>)
    3682:	0013      	movs	r3, r2
    3684:	009b      	lsls	r3, r3, #2
    3686:	189b      	adds	r3, r3, r2
    3688:	009b      	lsls	r3, r3, #2
    368a:	18cb      	adds	r3, r1, r3
    368c:	3301      	adds	r3, #1
    368e:	781b      	ldrb	r3, [r3, #0]
    3690:	b25b      	sxtb	r3, r3
    3692:	0018      	movs	r0, r3
    3694:	4b12      	ldr	r3, [pc, #72]	; (36e0 <_pwm_init+0x264>)
    3696:	4798      	blx	r3

	return 0;
    3698:	2300      	movs	r3, #0
}
    369a:	0018      	movs	r0, r3
    369c:	46bd      	mov	sp, r7
    369e:	b005      	add	sp, #20
    36a0:	bd90      	pop	{r4, r7, pc}
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	000038fd 	.word	0x000038fd
    36a8:	00003227 	.word	0x00003227
    36ac:	00003349 	.word	0x00003349
    36b0:	0000331d 	.word	0x0000331d
    36b4:	00003209 	.word	0x00003209
    36b8:	00003379 	.word	0x00003379
    36bc:	20000014 	.word	0x20000014
    36c0:	000033dd 	.word	0x000033dd
    36c4:	000033a1 	.word	0x000033a1
    36c8:	000033bf 	.word	0x000033bf
    36cc:	00003441 	.word	0x00003441
    36d0:	000033fd 	.word	0x000033fd
    36d4:	00003989 	.word	0x00003989
    36d8:	00003191 	.word	0x00003191
    36dc:	000031d1 	.word	0x000031d1
    36e0:	0000315d 	.word	0x0000315d

000036e4 <_pwm_enable>:
}
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    36e4:	b580      	push	{r7, lr}
    36e6:	b082      	sub	sp, #8
    36e8:	af00      	add	r7, sp, #0
    36ea:	6078      	str	r0, [r7, #4]
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    36ec:	687b      	ldr	r3, [r7, #4]
    36ee:	691b      	ldr	r3, [r3, #16]
    36f0:	0018      	movs	r0, r3
    36f2:	4b03      	ldr	r3, [pc, #12]	; (3700 <_pwm_enable+0x1c>)
    36f4:	4798      	blx	r3
}
    36f6:	46c0      	nop			; (mov r8, r8)
    36f8:	46bd      	mov	sp, r7
    36fa:	b002      	add	sp, #8
    36fc:	bd80      	pop	{r7, pc}
    36fe:	46c0      	nop			; (mov r8, r8)
    3700:	000032b9 	.word	0x000032b9

00003704 <_pwm_disable>:
/**
 * \brief Stop PWM
 */
void _pwm_disable(struct _pwm_device *const device)
{
    3704:	b580      	push	{r7, lr}
    3706:	b082      	sub	sp, #8
    3708:	af00      	add	r7, sp, #0
    370a:	6078      	str	r0, [r7, #4]
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    370c:	687b      	ldr	r3, [r7, #4]
    370e:	691b      	ldr	r3, [r3, #16]
    3710:	0018      	movs	r0, r3
    3712:	4b03      	ldr	r3, [pc, #12]	; (3720 <_pwm_disable+0x1c>)
    3714:	4798      	blx	r3
}
    3716:	46c0      	nop			; (mov r8, r8)
    3718:	46bd      	mov	sp, r7
    371a:	b002      	add	sp, #8
    371c:	bd80      	pop	{r7, pc}
    371e:	46c0      	nop			; (mov r8, r8)
    3720:	0000331d 	.word	0x0000331d

00003724 <_pwm_set_param>:
/**
 * \brief Set PWM parameter
 */
void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
    3724:	b590      	push	{r4, r7, lr}
    3726:	b087      	sub	sp, #28
    3728:	af00      	add	r7, sp, #0
    372a:	60f8      	str	r0, [r7, #12]
    372c:	60b9      	str	r1, [r7, #8]
    372e:	607a      	str	r2, [r7, #4]
	void *const hw = device->hw;
    3730:	68fb      	ldr	r3, [r7, #12]
    3732:	691b      	ldr	r3, [r3, #16]
    3734:	617b      	str	r3, [r7, #20]
	int8_t      i  = get_tc_index(hw);
    3736:	2313      	movs	r3, #19
    3738:	18fc      	adds	r4, r7, r3
    373a:	697b      	ldr	r3, [r7, #20]
    373c:	0018      	movs	r0, r3
    373e:	4b3c      	ldr	r3, [pc, #240]	; (3830 <_pwm_set_param+0x10c>)
    3740:	4798      	blx	r3
    3742:	0003      	movs	r3, r0
    3744:	7023      	strb	r3, [r4, #0]

	_tcs[i].cc0 = period;
    3746:	2313      	movs	r3, #19
    3748:	18fb      	adds	r3, r7, r3
    374a:	2200      	movs	r2, #0
    374c:	569a      	ldrsb	r2, [r3, r2]
    374e:	4939      	ldr	r1, [pc, #228]	; (3834 <_pwm_set_param+0x110>)
    3750:	0013      	movs	r3, r2
    3752:	009b      	lsls	r3, r3, #2
    3754:	189b      	adds	r3, r3, r2
    3756:	009b      	lsls	r3, r3, #2
    3758:	18cb      	adds	r3, r1, r3
    375a:	330c      	adds	r3, #12
    375c:	68ba      	ldr	r2, [r7, #8]
    375e:	601a      	str	r2, [r3, #0]
	_tcs[i].cc1 = duty_cycle;
    3760:	2313      	movs	r3, #19
    3762:	18fb      	adds	r3, r7, r3
    3764:	2200      	movs	r2, #0
    3766:	569a      	ldrsb	r2, [r3, r2]
    3768:	4932      	ldr	r1, [pc, #200]	; (3834 <_pwm_set_param+0x110>)
    376a:	0013      	movs	r3, r2
    376c:	009b      	lsls	r3, r3, #2
    376e:	189b      	adds	r3, r3, r2
    3770:	009b      	lsls	r3, r3, #2
    3772:	18cb      	adds	r3, r1, r3
    3774:	3310      	adds	r3, #16
    3776:	687a      	ldr	r2, [r7, #4]
    3778:	601a      	str	r2, [r3, #0]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    377a:	2313      	movs	r3, #19
    377c:	18fb      	adds	r3, r7, r3
    377e:	2200      	movs	r2, #0
    3780:	569a      	ldrsb	r2, [r3, r2]
    3782:	492c      	ldr	r1, [pc, #176]	; (3834 <_pwm_set_param+0x110>)
    3784:	0013      	movs	r3, r2
    3786:	009b      	lsls	r3, r3, #2
    3788:	189b      	adds	r3, r3, r2
    378a:	009b      	lsls	r3, r3, #2
    378c:	18cb      	adds	r3, r1, r3
    378e:	3304      	adds	r3, #4
    3790:	681b      	ldr	r3, [r3, #0]
    3792:	220c      	movs	r2, #12
    3794:	4013      	ands	r3, r2
    3796:	2b08      	cmp	r3, #8
    3798:	d122      	bne.n	37e0 <_pwm_set_param+0xbc>
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    379a:	2313      	movs	r3, #19
    379c:	18fb      	adds	r3, r7, r3
    379e:	2200      	movs	r2, #0
    37a0:	569a      	ldrsb	r2, [r3, r2]
    37a2:	4924      	ldr	r1, [pc, #144]	; (3834 <_pwm_set_param+0x110>)
    37a4:	0013      	movs	r3, r2
    37a6:	009b      	lsls	r3, r3, #2
    37a8:	189b      	adds	r3, r3, r2
    37aa:	009b      	lsls	r3, r3, #2
    37ac:	18cb      	adds	r3, r1, r3
    37ae:	330c      	adds	r3, #12
    37b0:	681a      	ldr	r2, [r3, #0]
    37b2:	697b      	ldr	r3, [r7, #20]
    37b4:	2100      	movs	r1, #0
    37b6:	0018      	movs	r0, r3
    37b8:	4b1f      	ldr	r3, [pc, #124]	; (3838 <_pwm_set_param+0x114>)
    37ba:	4798      	blx	r3
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    37bc:	2313      	movs	r3, #19
    37be:	18fb      	adds	r3, r7, r3
    37c0:	2200      	movs	r2, #0
    37c2:	569a      	ldrsb	r2, [r3, r2]
    37c4:	491b      	ldr	r1, [pc, #108]	; (3834 <_pwm_set_param+0x110>)
    37c6:	0013      	movs	r3, r2
    37c8:	009b      	lsls	r3, r3, #2
    37ca:	189b      	adds	r3, r3, r2
    37cc:	009b      	lsls	r3, r3, #2
    37ce:	18cb      	adds	r3, r1, r3
    37d0:	3310      	adds	r3, #16
    37d2:	681a      	ldr	r2, [r3, #0]
    37d4:	697b      	ldr	r3, [r7, #20]
    37d6:	2101      	movs	r1, #1
    37d8:	0018      	movs	r0, r3
    37da:	4b17      	ldr	r3, [pc, #92]	; (3838 <_pwm_set_param+0x114>)
    37dc:	4798      	blx	r3
	} else {
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
	}
}
    37de:	e023      	b.n	3828 <_pwm_set_param+0x104>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    37e0:	2313      	movs	r3, #19
    37e2:	18fb      	adds	r3, r7, r3
    37e4:	2200      	movs	r2, #0
    37e6:	569a      	ldrsb	r2, [r3, r2]
    37e8:	4912      	ldr	r1, [pc, #72]	; (3834 <_pwm_set_param+0x110>)
    37ea:	0013      	movs	r3, r2
    37ec:	009b      	lsls	r3, r3, #2
    37ee:	189b      	adds	r3, r3, r2
    37f0:	009b      	lsls	r3, r3, #2
    37f2:	18cb      	adds	r3, r1, r3
    37f4:	330c      	adds	r3, #12
    37f6:	681b      	ldr	r3, [r3, #0]
    37f8:	b29a      	uxth	r2, r3
    37fa:	697b      	ldr	r3, [r7, #20]
    37fc:	2100      	movs	r1, #0
    37fe:	0018      	movs	r0, r3
    3800:	4b0e      	ldr	r3, [pc, #56]	; (383c <_pwm_set_param+0x118>)
    3802:	4798      	blx	r3
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    3804:	2313      	movs	r3, #19
    3806:	18fb      	adds	r3, r7, r3
    3808:	2200      	movs	r2, #0
    380a:	569a      	ldrsb	r2, [r3, r2]
    380c:	4909      	ldr	r1, [pc, #36]	; (3834 <_pwm_set_param+0x110>)
    380e:	0013      	movs	r3, r2
    3810:	009b      	lsls	r3, r3, #2
    3812:	189b      	adds	r3, r3, r2
    3814:	009b      	lsls	r3, r3, #2
    3816:	18cb      	adds	r3, r1, r3
    3818:	3310      	adds	r3, #16
    381a:	681b      	ldr	r3, [r3, #0]
    381c:	b29a      	uxth	r2, r3
    381e:	697b      	ldr	r3, [r7, #20]
    3820:	2101      	movs	r1, #1
    3822:	0018      	movs	r0, r3
    3824:	4b05      	ldr	r3, [pc, #20]	; (383c <_pwm_set_param+0x118>)
    3826:	4798      	blx	r3
}
    3828:	46c0      	nop			; (mov r8, r8)
    382a:	46bd      	mov	sp, r7
    382c:	b007      	add	sp, #28
    382e:	bd90      	pop	{r4, r7, pc}
    3830:	000038fd 	.word	0x000038fd
    3834:	20000014 	.word	0x20000014
    3838:	00003441 	.word	0x00003441
    383c:	000033fd 	.word	0x000033fd

00003840 <_pwm_is_enabled>:
}
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    3840:	b580      	push	{r7, lr}
    3842:	b082      	sub	sp, #8
    3844:	af00      	add	r7, sp, #0
    3846:	6078      	str	r0, [r7, #4]
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    3848:	687b      	ldr	r3, [r7, #4]
    384a:	691b      	ldr	r3, [r3, #16]
    384c:	0018      	movs	r0, r3
    384e:	4b03      	ldr	r3, [pc, #12]	; (385c <_pwm_is_enabled+0x1c>)
    3850:	4798      	blx	r3
    3852:	0003      	movs	r3, r0
}
    3854:	0018      	movs	r0, r3
    3856:	46bd      	mov	sp, r7
    3858:	b002      	add	sp, #8
    385a:	bd80      	pop	{r7, pc}
    385c:	000032e5 	.word	0x000032e5

00003860 <_tc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tc_get_pwm(void)
{
    3860:	b580      	push	{r7, lr}
    3862:	af00      	add	r7, sp, #0
	return NULL;
    3864:	2300      	movs	r3, #0
}
    3866:	0018      	movs	r0, r3
    3868:	46bd      	mov	sp, r7
    386a:	bd80      	pop	{r7, pc}

0000386c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    386c:	b580      	push	{r7, lr}
    386e:	b084      	sub	sp, #16
    3870:	af00      	add	r7, sp, #0
    3872:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    3874:	687b      	ldr	r3, [r7, #4]
    3876:	691b      	ldr	r3, [r3, #16]
    3878:	60fb      	str	r3, [r7, #12]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    387a:	68fb      	ldr	r3, [r7, #12]
    387c:	0018      	movs	r0, r3
    387e:	4b14      	ldr	r3, [pc, #80]	; (38d0 <tc_pwm_interrupt_handler+0x64>)
    3880:	4798      	blx	r3
    3882:	1e03      	subs	r3, r0, #0
    3884:	d00c      	beq.n	38a0 <tc_pwm_interrupt_handler+0x34>
		hri_tc_clear_interrupt_OVF_bit(hw);
    3886:	68fb      	ldr	r3, [r7, #12]
    3888:	0018      	movs	r0, r3
    388a:	4b12      	ldr	r3, [pc, #72]	; (38d4 <tc_pwm_interrupt_handler+0x68>)
    388c:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    388e:	687b      	ldr	r3, [r7, #4]
    3890:	681b      	ldr	r3, [r3, #0]
    3892:	2b00      	cmp	r3, #0
    3894:	d004      	beq.n	38a0 <tc_pwm_interrupt_handler+0x34>
			device->callback.pwm_period_cb(device);
    3896:	687b      	ldr	r3, [r7, #4]
    3898:	681b      	ldr	r3, [r3, #0]
    389a:	687a      	ldr	r2, [r7, #4]
    389c:	0010      	movs	r0, r2
    389e:	4798      	blx	r3
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    38a0:	68fb      	ldr	r3, [r7, #12]
    38a2:	0018      	movs	r0, r3
    38a4:	4b0c      	ldr	r3, [pc, #48]	; (38d8 <tc_pwm_interrupt_handler+0x6c>)
    38a6:	4798      	blx	r3
    38a8:	1e03      	subs	r3, r0, #0
    38aa:	d00c      	beq.n	38c6 <tc_pwm_interrupt_handler+0x5a>
		hri_tc_clear_interrupt_ERR_bit(hw);
    38ac:	68fb      	ldr	r3, [r7, #12]
    38ae:	0018      	movs	r0, r3
    38b0:	4b0a      	ldr	r3, [pc, #40]	; (38dc <tc_pwm_interrupt_handler+0x70>)
    38b2:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    38b4:	687b      	ldr	r3, [r7, #4]
    38b6:	685b      	ldr	r3, [r3, #4]
    38b8:	2b00      	cmp	r3, #0
    38ba:	d004      	beq.n	38c6 <tc_pwm_interrupt_handler+0x5a>
			device->callback.pwm_error_cb(device);
    38bc:	687b      	ldr	r3, [r7, #4]
    38be:	685b      	ldr	r3, [r3, #4]
    38c0:	687a      	ldr	r2, [r7, #4]
    38c2:	0010      	movs	r0, r2
    38c4:	4798      	blx	r3
		}
	}
}
    38c6:	46c0      	nop			; (mov r8, r8)
    38c8:	46bd      	mov	sp, r7
    38ca:	b004      	add	sp, #16
    38cc:	bd80      	pop	{r7, pc}
    38ce:	46c0      	nop			; (mov r8, r8)
    38d0:	00003247 	.word	0x00003247
    38d4:	00003269 	.word	0x00003269
    38d8:	00003295 	.word	0x00003295
    38dc:	0000327f 	.word	0x0000327f

000038e0 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
    38e0:	b580      	push	{r7, lr}
    38e2:	af00      	add	r7, sp, #0
	tc_pwm_interrupt_handler(_tc0_dev);
    38e4:	4b03      	ldr	r3, [pc, #12]	; (38f4 <TC0_Handler+0x14>)
    38e6:	681b      	ldr	r3, [r3, #0]
    38e8:	0018      	movs	r0, r3
    38ea:	4b03      	ldr	r3, [pc, #12]	; (38f8 <TC0_Handler+0x18>)
    38ec:	4798      	blx	r3
}
    38ee:	46c0      	nop			; (mov r8, r8)
    38f0:	46bd      	mov	sp, r7
    38f2:	bd80      	pop	{r7, pc}
    38f4:	2000004c 	.word	0x2000004c
    38f8:	0000386d 	.word	0x0000386d

000038fc <get_tc_index>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The index of TC configuration
 */
static int8_t get_tc_index(const void *const hw)
{
    38fc:	b590      	push	{r4, r7, lr}
    38fe:	b085      	sub	sp, #20
    3900:	af00      	add	r7, sp, #0
    3902:	6078      	str	r0, [r7, #4]
	uint8_t index = _get_hardware_offset(hw);
    3904:	230e      	movs	r3, #14
    3906:	18fc      	adds	r4, r7, r3
    3908:	687b      	ldr	r3, [r7, #4]
    390a:	0018      	movs	r0, r3
    390c:	4b1a      	ldr	r3, [pc, #104]	; (3978 <get_tc_index+0x7c>)
    390e:	4798      	blx	r3
    3910:	0003      	movs	r3, r0
    3912:	7023      	strb	r3, [r4, #0]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3914:	230f      	movs	r3, #15
    3916:	18fb      	adds	r3, r7, r3
    3918:	2200      	movs	r2, #0
    391a:	701a      	strb	r2, [r3, #0]
    391c:	e019      	b.n	3952 <get_tc_index+0x56>
		if (_tcs[i].number == index) {
    391e:	230f      	movs	r3, #15
    3920:	18fb      	adds	r3, r7, r3
    3922:	781a      	ldrb	r2, [r3, #0]
    3924:	4915      	ldr	r1, [pc, #84]	; (397c <get_tc_index+0x80>)
    3926:	0013      	movs	r3, r2
    3928:	009b      	lsls	r3, r3, #2
    392a:	189b      	adds	r3, r3, r2
    392c:	009b      	lsls	r3, r3, #2
    392e:	5c5b      	ldrb	r3, [r3, r1]
    3930:	220e      	movs	r2, #14
    3932:	18ba      	adds	r2, r7, r2
    3934:	7812      	ldrb	r2, [r2, #0]
    3936:	429a      	cmp	r2, r3
    3938:	d104      	bne.n	3944 <get_tc_index+0x48>
			return i;
    393a:	230f      	movs	r3, #15
    393c:	18fb      	adds	r3, r7, r3
    393e:	781b      	ldrb	r3, [r3, #0]
    3940:	b25b      	sxtb	r3, r3
    3942:	e014      	b.n	396e <get_tc_index+0x72>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3944:	230f      	movs	r3, #15
    3946:	18fb      	adds	r3, r7, r3
    3948:	781a      	ldrb	r2, [r3, #0]
    394a:	230f      	movs	r3, #15
    394c:	18fb      	adds	r3, r7, r3
    394e:	3201      	adds	r2, #1
    3950:	701a      	strb	r2, [r3, #0]
    3952:	230f      	movs	r3, #15
    3954:	18fb      	adds	r3, r7, r3
    3956:	781b      	ldrb	r3, [r3, #0]
    3958:	2b00      	cmp	r3, #0
    395a:	d0e0      	beq.n	391e <get_tc_index+0x22>
		}
	}

	ASSERT(false);
    395c:	23a9      	movs	r3, #169	; 0xa9
    395e:	005a      	lsls	r2, r3, #1
    3960:	4b07      	ldr	r3, [pc, #28]	; (3980 <get_tc_index+0x84>)
    3962:	0019      	movs	r1, r3
    3964:	2000      	movs	r0, #0
    3966:	4b07      	ldr	r3, [pc, #28]	; (3984 <get_tc_index+0x88>)
    3968:	4798      	blx	r3
	return -1;
    396a:	2301      	movs	r3, #1
    396c:	425b      	negs	r3, r3
}
    396e:	0018      	movs	r0, r3
    3970:	46bd      	mov	sp, r7
    3972:	b005      	add	sp, #20
    3974:	bd90      	pop	{r4, r7, pc}
    3976:	46c0      	nop			; (mov r8, r8)
    3978:	000039b1 	.word	0x000039b1
    397c:	20000014 	.word	0x20000014
    3980:	000085f0 	.word	0x000085f0
    3984:	00001b19 	.word	0x00001b19

00003988 <_tc_init_irq_param>:

/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
    3988:	b580      	push	{r7, lr}
    398a:	b082      	sub	sp, #8
    398c:	af00      	add	r7, sp, #0
    398e:	6078      	str	r0, [r7, #4]
    3990:	6039      	str	r1, [r7, #0]
	if (hw == TC0) {
    3992:	687b      	ldr	r3, [r7, #4]
    3994:	4a04      	ldr	r2, [pc, #16]	; (39a8 <_tc_init_irq_param+0x20>)
    3996:	4293      	cmp	r3, r2
    3998:	d102      	bne.n	39a0 <_tc_init_irq_param+0x18>
		_tc0_dev = (struct _pwm_device *)dev;
    399a:	4b04      	ldr	r3, [pc, #16]	; (39ac <_tc_init_irq_param+0x24>)
    399c:	683a      	ldr	r2, [r7, #0]
    399e:	601a      	str	r2, [r3, #0]
	}
}
    39a0:	46c0      	nop			; (mov r8, r8)
    39a2:	46bd      	mov	sp, r7
    39a4:	b002      	add	sp, #8
    39a6:	bd80      	pop	{r7, pc}
    39a8:	42003000 	.word	0x42003000
    39ac:	2000004c 	.word	0x2000004c

000039b0 <_get_hardware_offset>:
 * \internal Retrieve TC hardware index
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
    39b0:	b580      	push	{r7, lr}
    39b2:	b082      	sub	sp, #8
    39b4:	af00      	add	r7, sp, #0
    39b6:	6078      	str	r0, [r7, #4]
	if ((uint32_t)TC4 == (uint32_t)hw) {
    39b8:	687b      	ldr	r3, [r7, #4]
    39ba:	4a07      	ldr	r2, [pc, #28]	; (39d8 <_get_hardware_offset+0x28>)
    39bc:	4293      	cmp	r3, r2
    39be:	d101      	bne.n	39c4 <_get_hardware_offset+0x14>
		return 4;
    39c0:	2304      	movs	r3, #4
    39c2:	e005      	b.n	39d0 <_get_hardware_offset+0x20>
	}
	return (((uint32_t)hw - (uint32_t)TC0) >> 10);
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	4a05      	ldr	r2, [pc, #20]	; (39dc <_get_hardware_offset+0x2c>)
    39c8:	4694      	mov	ip, r2
    39ca:	4463      	add	r3, ip
    39cc:	0a9b      	lsrs	r3, r3, #10
    39ce:	b2db      	uxtb	r3, r3
}
    39d0:	0018      	movs	r0, r3
    39d2:	46bd      	mov	sp, r7
    39d4:	b002      	add	sp, #8
    39d6:	bd80      	pop	{r7, pc}
    39d8:	42004000 	.word	0x42004000
    39dc:	bdffd000 	.word	0xbdffd000

000039e0 <main>:
#include <atmel_start.h>
#include "mytasks.h"
int main(void)
{
    39e0:	b580      	push	{r7, lr}
    39e2:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    39e4:	4b02      	ldr	r3, [pc, #8]	; (39f0 <main+0x10>)
    39e6:	4798      	blx	r3
	Create_all_tasks();
    39e8:	4b02      	ldr	r3, [pc, #8]	; (39f4 <main+0x14>)
    39ea:	4798      	blx	r3
	/* Replace with your application code */
	while (1) {
    39ec:	e7fe      	b.n	39ec <main+0xc>
    39ee:	46c0      	nop			; (mov r8, r8)
    39f0:	0000011d 	.word	0x0000011d
    39f4:	00003d9d 	.word	0x00003d9d

000039f8 <hri_port_read_DIR_reg>:
{
    39f8:	b580      	push	{r7, lr}
    39fa:	b082      	sub	sp, #8
    39fc:	af00      	add	r7, sp, #0
    39fe:	6078      	str	r0, [r7, #4]
    3a00:	000a      	movs	r2, r1
    3a02:	1cfb      	adds	r3, r7, #3
    3a04:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3a06:	1cfb      	adds	r3, r7, #3
    3a08:	781a      	ldrb	r2, [r3, #0]
    3a0a:	687b      	ldr	r3, [r7, #4]
    3a0c:	01d2      	lsls	r2, r2, #7
    3a0e:	58d3      	ldr	r3, [r2, r3]
}
    3a10:	0018      	movs	r0, r3
    3a12:	46bd      	mov	sp, r7
    3a14:	b002      	add	sp, #8
    3a16:	bd80      	pop	{r7, pc}

00003a18 <hri_port_set_OUT_reg>:
{
    3a18:	b580      	push	{r7, lr}
    3a1a:	b084      	sub	sp, #16
    3a1c:	af00      	add	r7, sp, #0
    3a1e:	60f8      	str	r0, [r7, #12]
    3a20:	607a      	str	r2, [r7, #4]
    3a22:	230b      	movs	r3, #11
    3a24:	18fb      	adds	r3, r7, r3
    3a26:	1c0a      	adds	r2, r1, #0
    3a28:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3a2a:	230b      	movs	r3, #11
    3a2c:	18fb      	adds	r3, r7, r3
    3a2e:	781b      	ldrb	r3, [r3, #0]
    3a30:	68fa      	ldr	r2, [r7, #12]
    3a32:	01db      	lsls	r3, r3, #7
    3a34:	18d3      	adds	r3, r2, r3
    3a36:	3318      	adds	r3, #24
    3a38:	687a      	ldr	r2, [r7, #4]
    3a3a:	601a      	str	r2, [r3, #0]
}
    3a3c:	46c0      	nop			; (mov r8, r8)
    3a3e:	46bd      	mov	sp, r7
    3a40:	b004      	add	sp, #16
    3a42:	bd80      	pop	{r7, pc}

00003a44 <hri_port_read_OUT_reg>:
{
    3a44:	b580      	push	{r7, lr}
    3a46:	b082      	sub	sp, #8
    3a48:	af00      	add	r7, sp, #0
    3a4a:	6078      	str	r0, [r7, #4]
    3a4c:	000a      	movs	r2, r1
    3a4e:	1cfb      	adds	r3, r7, #3
    3a50:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3a52:	1cfb      	adds	r3, r7, #3
    3a54:	781b      	ldrb	r3, [r3, #0]
    3a56:	687a      	ldr	r2, [r7, #4]
    3a58:	01db      	lsls	r3, r3, #7
    3a5a:	18d3      	adds	r3, r2, r3
    3a5c:	3310      	adds	r3, #16
    3a5e:	681b      	ldr	r3, [r3, #0]
}
    3a60:	0018      	movs	r0, r3
    3a62:	46bd      	mov	sp, r7
    3a64:	b002      	add	sp, #8
    3a66:	bd80      	pop	{r7, pc}

00003a68 <hri_port_clear_OUT_reg>:
{
    3a68:	b580      	push	{r7, lr}
    3a6a:	b084      	sub	sp, #16
    3a6c:	af00      	add	r7, sp, #0
    3a6e:	60f8      	str	r0, [r7, #12]
    3a70:	607a      	str	r2, [r7, #4]
    3a72:	230b      	movs	r3, #11
    3a74:	18fb      	adds	r3, r7, r3
    3a76:	1c0a      	adds	r2, r1, #0
    3a78:	701a      	strb	r2, [r3, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3a7a:	230b      	movs	r3, #11
    3a7c:	18fb      	adds	r3, r7, r3
    3a7e:	781b      	ldrb	r3, [r3, #0]
    3a80:	68fa      	ldr	r2, [r7, #12]
    3a82:	01db      	lsls	r3, r3, #7
    3a84:	18d3      	adds	r3, r2, r3
    3a86:	3314      	adds	r3, #20
    3a88:	687a      	ldr	r2, [r7, #4]
    3a8a:	601a      	str	r2, [r3, #0]
}
    3a8c:	46c0      	nop			; (mov r8, r8)
    3a8e:	46bd      	mov	sp, r7
    3a90:	b004      	add	sp, #16
    3a92:	bd80      	pop	{r7, pc}

00003a94 <hri_port_read_IN_reg>:
{
    3a94:	b580      	push	{r7, lr}
    3a96:	b082      	sub	sp, #8
    3a98:	af00      	add	r7, sp, #0
    3a9a:	6078      	str	r0, [r7, #4]
    3a9c:	000a      	movs	r2, r1
    3a9e:	1cfb      	adds	r3, r7, #3
    3aa0:	701a      	strb	r2, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3aa2:	1cfb      	adds	r3, r7, #3
    3aa4:	781b      	ldrb	r3, [r3, #0]
    3aa6:	687a      	ldr	r2, [r7, #4]
    3aa8:	01db      	lsls	r3, r3, #7
    3aaa:	18d3      	adds	r3, r2, r3
    3aac:	3320      	adds	r3, #32
    3aae:	681b      	ldr	r3, [r3, #0]
}
    3ab0:	0018      	movs	r0, r3
    3ab2:	46bd      	mov	sp, r7
    3ab4:	b002      	add	sp, #8
    3ab6:	bd80      	pop	{r7, pc}

00003ab8 <_gpio_set_level>:
{
    3ab8:	b580      	push	{r7, lr}
    3aba:	b082      	sub	sp, #8
    3abc:	af00      	add	r7, sp, #0
    3abe:	6039      	str	r1, [r7, #0]
    3ac0:	0011      	movs	r1, r2
    3ac2:	1dfb      	adds	r3, r7, #7
    3ac4:	1c02      	adds	r2, r0, #0
    3ac6:	701a      	strb	r2, [r3, #0]
    3ac8:	1dbb      	adds	r3, r7, #6
    3aca:	1c0a      	adds	r2, r1, #0
    3acc:	701a      	strb	r2, [r3, #0]
	if (level) {
    3ace:	1dbb      	adds	r3, r7, #6
    3ad0:	781b      	ldrb	r3, [r3, #0]
    3ad2:	2b00      	cmp	r3, #0
    3ad4:	d008      	beq.n	3ae8 <_gpio_set_level+0x30>
		hri_port_set_OUT_reg(PORT_IOBUS, port, mask);
    3ad6:	683a      	ldr	r2, [r7, #0]
    3ad8:	1dfb      	adds	r3, r7, #7
    3ada:	7819      	ldrb	r1, [r3, #0]
    3adc:	23c0      	movs	r3, #192	; 0xc0
    3ade:	05db      	lsls	r3, r3, #23
    3ae0:	0018      	movs	r0, r3
    3ae2:	4b07      	ldr	r3, [pc, #28]	; (3b00 <_gpio_set_level+0x48>)
    3ae4:	4798      	blx	r3
}
    3ae6:	e007      	b.n	3af8 <_gpio_set_level+0x40>
		hri_port_clear_OUT_reg(PORT_IOBUS, port, mask);
    3ae8:	683a      	ldr	r2, [r7, #0]
    3aea:	1dfb      	adds	r3, r7, #7
    3aec:	7819      	ldrb	r1, [r3, #0]
    3aee:	23c0      	movs	r3, #192	; 0xc0
    3af0:	05db      	lsls	r3, r3, #23
    3af2:	0018      	movs	r0, r3
    3af4:	4b03      	ldr	r3, [pc, #12]	; (3b04 <_gpio_set_level+0x4c>)
    3af6:	4798      	blx	r3
}
    3af8:	46c0      	nop			; (mov r8, r8)
    3afa:	46bd      	mov	sp, r7
    3afc:	b002      	add	sp, #8
    3afe:	bd80      	pop	{r7, pc}
    3b00:	00003a19 	.word	0x00003a19
    3b04:	00003a69 	.word	0x00003a69

00003b08 <_gpio_get_level>:
{
    3b08:	b580      	push	{r7, lr}
    3b0a:	b086      	sub	sp, #24
    3b0c:	af00      	add	r7, sp, #0
    3b0e:	0002      	movs	r2, r0
    3b10:	1dfb      	adds	r3, r7, #7
    3b12:	701a      	strb	r2, [r3, #0]
	CRITICAL_SECTION_ENTER();
    3b14:	230c      	movs	r3, #12
    3b16:	18fb      	adds	r3, r7, r3
    3b18:	0018      	movs	r0, r3
    3b1a:	4b18      	ldr	r3, [pc, #96]	; (3b7c <_gpio_get_level+0x74>)
    3b1c:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);
    3b1e:	1dfb      	adds	r3, r7, #7
    3b20:	781a      	ldrb	r2, [r3, #0]
    3b22:	23c0      	movs	r3, #192	; 0xc0
    3b24:	05db      	lsls	r3, r3, #23
    3b26:	0011      	movs	r1, r2
    3b28:	0018      	movs	r0, r3
    3b2a:	4b15      	ldr	r3, [pc, #84]	; (3b80 <_gpio_get_level+0x78>)
    3b2c:	4798      	blx	r3
    3b2e:	0003      	movs	r3, r0
    3b30:	617b      	str	r3, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    3b32:	1dfb      	adds	r3, r7, #7
    3b34:	781a      	ldrb	r2, [r3, #0]
    3b36:	2382      	movs	r3, #130	; 0x82
    3b38:	05db      	lsls	r3, r3, #23
    3b3a:	0011      	movs	r1, r2
    3b3c:	0018      	movs	r0, r3
    3b3e:	4b11      	ldr	r3, [pc, #68]	; (3b84 <_gpio_get_level+0x7c>)
    3b40:	4798      	blx	r3
    3b42:	0002      	movs	r2, r0
    3b44:	697b      	ldr	r3, [r7, #20]
    3b46:	43db      	mvns	r3, r3
    3b48:	4013      	ands	r3, r2
    3b4a:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3b4c:	1dfb      	adds	r3, r7, #7
    3b4e:	781a      	ldrb	r2, [r3, #0]
    3b50:	23c0      	movs	r3, #192	; 0xc0
    3b52:	05db      	lsls	r3, r3, #23
    3b54:	0011      	movs	r1, r2
    3b56:	0018      	movs	r0, r3
    3b58:	4b0b      	ldr	r3, [pc, #44]	; (3b88 <_gpio_get_level+0x80>)
    3b5a:	4798      	blx	r3
    3b5c:	0002      	movs	r2, r0
    3b5e:	697b      	ldr	r3, [r7, #20]
    3b60:	4013      	ands	r3, r2
    3b62:	693a      	ldr	r2, [r7, #16]
    3b64:	4313      	orrs	r3, r2
    3b66:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
    3b68:	230c      	movs	r3, #12
    3b6a:	18fb      	adds	r3, r7, r3
    3b6c:	0018      	movs	r0, r3
    3b6e:	4b07      	ldr	r3, [pc, #28]	; (3b8c <_gpio_get_level+0x84>)
    3b70:	4798      	blx	r3
	return tmp;
    3b72:	693b      	ldr	r3, [r7, #16]
}
    3b74:	0018      	movs	r0, r3
    3b76:	46bd      	mov	sp, r7
    3b78:	b006      	add	sp, #24
    3b7a:	bd80      	pop	{r7, pc}
    3b7c:	00001009 	.word	0x00001009
    3b80:	000039f9 	.word	0x000039f9
    3b84:	00003a95 	.word	0x00003a95
    3b88:	00003a45 	.word	0x00003a45
    3b8c:	0000102b 	.word	0x0000102b

00003b90 <gpio_set_pin_level>:
{
    3b90:	b580      	push	{r7, lr}
    3b92:	b082      	sub	sp, #8
    3b94:	af00      	add	r7, sp, #0
    3b96:	0002      	movs	r2, r0
    3b98:	1dfb      	adds	r3, r7, #7
    3b9a:	701a      	strb	r2, [r3, #0]
    3b9c:	1dbb      	adds	r3, r7, #6
    3b9e:	1c0a      	adds	r2, r1, #0
    3ba0:	701a      	strb	r2, [r3, #0]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    3ba2:	1dfb      	adds	r3, r7, #7
    3ba4:	781b      	ldrb	r3, [r3, #0]
    3ba6:	095b      	lsrs	r3, r3, #5
    3ba8:	b2d8      	uxtb	r0, r3
    3baa:	1dfb      	adds	r3, r7, #7
    3bac:	781b      	ldrb	r3, [r3, #0]
    3bae:	221f      	movs	r2, #31
    3bb0:	4013      	ands	r3, r2
    3bb2:	2201      	movs	r2, #1
    3bb4:	409a      	lsls	r2, r3
    3bb6:	0011      	movs	r1, r2
    3bb8:	1dbb      	adds	r3, r7, #6
    3bba:	781b      	ldrb	r3, [r3, #0]
    3bbc:	001a      	movs	r2, r3
    3bbe:	4b03      	ldr	r3, [pc, #12]	; (3bcc <gpio_set_pin_level+0x3c>)
    3bc0:	4798      	blx	r3
}
    3bc2:	46c0      	nop			; (mov r8, r8)
    3bc4:	46bd      	mov	sp, r7
    3bc6:	b002      	add	sp, #8
    3bc8:	bd80      	pop	{r7, pc}
    3bca:	46c0      	nop			; (mov r8, r8)
    3bcc:	00003ab9 	.word	0x00003ab9

00003bd0 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    3bd0:	b580      	push	{r7, lr}
    3bd2:	b082      	sub	sp, #8
    3bd4:	af00      	add	r7, sp, #0
    3bd6:	0002      	movs	r2, r0
    3bd8:	1dfb      	adds	r3, r7, #7
    3bda:	701a      	strb	r2, [r3, #0]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    3bdc:	1dfb      	adds	r3, r7, #7
    3bde:	781b      	ldrb	r3, [r3, #0]
    3be0:	095b      	lsrs	r3, r3, #5
    3be2:	b2db      	uxtb	r3, r3
    3be4:	0018      	movs	r0, r3
    3be6:	4b09      	ldr	r3, [pc, #36]	; (3c0c <gpio_get_pin_level+0x3c>)
    3be8:	4798      	blx	r3
    3bea:	0001      	movs	r1, r0
    3bec:	1dfb      	adds	r3, r7, #7
    3bee:	781b      	ldrb	r3, [r3, #0]
    3bf0:	221f      	movs	r2, #31
    3bf2:	4013      	ands	r3, r2
    3bf4:	2201      	movs	r2, #1
    3bf6:	409a      	lsls	r2, r3
    3bf8:	0013      	movs	r3, r2
    3bfa:	400b      	ands	r3, r1
    3bfc:	1e5a      	subs	r2, r3, #1
    3bfe:	4193      	sbcs	r3, r2
    3c00:	b2db      	uxtb	r3, r3
}
    3c02:	0018      	movs	r0, r3
    3c04:	46bd      	mov	sp, r7
    3c06:	b002      	add	sp, #8
    3c08:	bd80      	pop	{r7, pc}
    3c0a:	46c0      	nop			; (mov r8, r8)
    3c0c:	00003b09 	.word	0x00003b09

00003c10 <STATE_task>:
uint8_t UART_Buffer[100];
uint8_t UART_Send_Buffer[100];
int UART_Length = 0;
*/
void STATE_task(void *p)
{
    3c10:	b580      	push	{r7, lr}
    3c12:	b08a      	sub	sp, #40	; 0x28
    3c14:	af00      	add	r7, sp, #0
    3c16:	6078      	str	r0, [r7, #4]
	int responce = 0;
    3c18:	2300      	movs	r3, #0
    3c1a:	617b      	str	r3, [r7, #20]
	int sensor_failure = 0;
    3c1c:	2300      	movs	r3, #0
    3c1e:	613b      	str	r3, [r7, #16]
	int low_bat = 0;
    3c20:	2300      	movs	r3, #0
    3c22:	627b      	str	r3, [r7, #36]	; 0x24
	int continuing = 0;
    3c24:	2300      	movs	r3, #0
    3c26:	623b      	str	r3, [r7, #32]
	int done = 0;
    3c28:	2300      	movs	r3, #0
    3c2a:	61fb      	str	r3, [r7, #28]
	int dir = RIGHT;
    3c2c:	2301      	movs	r3, #1
    3c2e:	61bb      	str	r3, [r7, #24]
	//setup
	usart_sync_get_io_descriptor(&UART, &io);
    3c30:	4a4c      	ldr	r2, [pc, #304]	; (3d64 <STATE_task+0x154>)
    3c32:	4b4d      	ldr	r3, [pc, #308]	; (3d68 <STATE_task+0x158>)
    3c34:	0011      	movs	r1, r2
    3c36:	0018      	movs	r0, r3
    3c38:	4b4c      	ldr	r3, [pc, #304]	; (3d6c <STATE_task+0x15c>)
    3c3a:	4798      	blx	r3
	usart_sync_enable(&UART);
    3c3c:	4b4a      	ldr	r3, [pc, #296]	; (3d68 <STATE_task+0x158>)
    3c3e:	0018      	movs	r0, r3
    3c40:	4b4b      	ldr	r3, [pc, #300]	; (3d70 <STATE_task+0x160>)
    3c42:	4798      	blx	r3
	
	UART_Send_Buffer[0] = 's';
    3c44:	4b4b      	ldr	r3, [pc, #300]	; (3d74 <STATE_task+0x164>)
    3c46:	2273      	movs	r2, #115	; 0x73
    3c48:	701a      	strb	r2, [r3, #0]
	UART_Send_Buffer[1] = '0';
    3c4a:	4b4a      	ldr	r3, [pc, #296]	; (3d74 <STATE_task+0x164>)
    3c4c:	2230      	movs	r2, #48	; 0x30
    3c4e:	705a      	strb	r2, [r3, #1]
	UART_Send_Buffer[2] = '\0';
    3c50:	4b48      	ldr	r3, [pc, #288]	; (3d74 <STATE_task+0x164>)
    3c52:	2200      	movs	r2, #0
    3c54:	709a      	strb	r2, [r3, #2]
	send_message(3);
    3c56:	2003      	movs	r0, #3
    3c58:	4b47      	ldr	r3, [pc, #284]	; (3d78 <STATE_task+0x168>)
    3c5a:	4798      	blx	r3
	
	while(1)
	{
		////////
		idle(sensor_failure, low_bat);
    3c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3c5e:	693b      	ldr	r3, [r7, #16]
    3c60:	0011      	movs	r1, r2
    3c62:	0018      	movs	r0, r3
    3c64:	4b45      	ldr	r3, [pc, #276]	; (3d7c <STATE_task+0x16c>)
    3c66:	4798      	blx	r3
		int sensor_failure = check_sensors();
    3c68:	4b45      	ldr	r3, [pc, #276]	; (3d80 <STATE_task+0x170>)
    3c6a:	4798      	blx	r3
    3c6c:	0003      	movs	r3, r0
    3c6e:	60fb      	str	r3, [r7, #12]
		if(sensor_failure == 0)
    3c70:	68fb      	ldr	r3, [r7, #12]
    3c72:	2b00      	cmp	r3, #0
    3c74:	d1f2      	bne.n	3c5c <STATE_task+0x4c>
		{
			UART_Send_Buffer[0] = 's';
    3c76:	4b3f      	ldr	r3, [pc, #252]	; (3d74 <STATE_task+0x164>)
    3c78:	2273      	movs	r2, #115	; 0x73
    3c7a:	701a      	strb	r2, [r3, #0]
			UART_Send_Buffer[1] = '1';
    3c7c:	4b3d      	ldr	r3, [pc, #244]	; (3d74 <STATE_task+0x164>)
    3c7e:	2231      	movs	r2, #49	; 0x31
    3c80:	705a      	strb	r2, [r3, #1]
			UART_Send_Buffer[2] = '\0';
    3c82:	4b3c      	ldr	r3, [pc, #240]	; (3d74 <STATE_task+0x164>)
    3c84:	2200      	movs	r2, #0
    3c86:	709a      	strb	r2, [r3, #2]
			send_message(3); //************************************************************************************* UNDOCK
    3c88:	2003      	movs	r0, #3
    3c8a:	4b3b      	ldr	r3, [pc, #236]	; (3d78 <STATE_task+0x168>)
    3c8c:	4798      	blx	r3
			//send message to RCU move down(92308 steps) 1khz out on pwm for os_sleep(9230)       *************************************************************************************************
			// 6154 steps/inch
			wait_for_responce();
    3c8e:	4b3d      	ldr	r3, [pc, #244]	; (3d84 <STATE_task+0x174>)
    3c90:	4798      	blx	r3

			if(continuing)
    3c92:	6a3b      	ldr	r3, [r7, #32]
    3c94:	2b00      	cmp	r3, #0
    3c96:	d060      	beq.n	3d5a <STATE_task+0x14a>
			{
				UART_Send_Buffer[0] = 's';
    3c98:	4b36      	ldr	r3, [pc, #216]	; (3d74 <STATE_task+0x164>)
    3c9a:	2273      	movs	r2, #115	; 0x73
    3c9c:	701a      	strb	r2, [r3, #0]
				UART_Send_Buffer[1] = '3';
    3c9e:	4b35      	ldr	r3, [pc, #212]	; (3d74 <STATE_task+0x164>)
    3ca0:	2233      	movs	r2, #51	; 0x33
    3ca2:	705a      	strb	r2, [r3, #1]
				UART_Send_Buffer[2] = '\0';
    3ca4:	4b33      	ldr	r3, [pc, #204]	; (3d74 <STATE_task+0x164>)
    3ca6:	2200      	movs	r2, #0
    3ca8:	709a      	strb	r2, [r3, #2]
				send_message(3);//************************************************************************ CONTINUE
    3caa:	2003      	movs	r0, #3
    3cac:	4b32      	ldr	r3, [pc, #200]	; (3d78 <STATE_task+0x168>)
    3cae:	4798      	blx	r3
				wait_for_responce();
    3cb0:	4b34      	ldr	r3, [pc, #208]	; (3d84 <STATE_task+0x174>)
    3cb2:	4798      	blx	r3
			}
			while(done == 0)
    3cb4:	e051      	b.n	3d5a <STATE_task+0x14a>
			{
				pwm(dir);
    3cb6:	69bb      	ldr	r3, [r7, #24]
    3cb8:	0018      	movs	r0, r3
    3cba:	4b33      	ldr	r3, [pc, #204]	; (3d88 <STATE_task+0x178>)
    3cbc:	4798      	blx	r3
				if(dir == RIGHT)
    3cbe:	69bb      	ldr	r3, [r7, #24]
    3cc0:	2b01      	cmp	r3, #1
    3cc2:	d10a      	bne.n	3cda <STATE_task+0xca>
				{
					while(readbtn(Right) == 1 )
    3cc4:	e002      	b.n	3ccc <STATE_task+0xbc>
					{
						os_sleep(100);
    3cc6:	2064      	movs	r0, #100	; 0x64
    3cc8:	4b30      	ldr	r3, [pc, #192]	; (3d8c <STATE_task+0x17c>)
    3cca:	4798      	blx	r3
					while(readbtn(Right) == 1 )
    3ccc:	2014      	movs	r0, #20
    3cce:	4b30      	ldr	r3, [pc, #192]	; (3d90 <STATE_task+0x180>)
    3cd0:	4798      	blx	r3
    3cd2:	0003      	movs	r3, r0
    3cd4:	2b01      	cmp	r3, #1
    3cd6:	d0f6      	beq.n	3cc6 <STATE_task+0xb6>
    3cd8:	e00c      	b.n	3cf4 <STATE_task+0xe4>
					}
				}
				else if(dir == LEFT)
    3cda:	69bb      	ldr	r3, [r7, #24]
    3cdc:	2b00      	cmp	r3, #0
    3cde:	d109      	bne.n	3cf4 <STATE_task+0xe4>
				{
					while(readbtn(Left) == 1 )
    3ce0:	e002      	b.n	3ce8 <STATE_task+0xd8>
					{
						os_sleep(100);
    3ce2:	2064      	movs	r0, #100	; 0x64
    3ce4:	4b29      	ldr	r3, [pc, #164]	; (3d8c <STATE_task+0x17c>)
    3ce6:	4798      	blx	r3
					while(readbtn(Left) == 1 )
    3ce8:	2015      	movs	r0, #21
    3cea:	4b29      	ldr	r3, [pc, #164]	; (3d90 <STATE_task+0x180>)
    3cec:	4798      	blx	r3
    3cee:	0003      	movs	r3, r0
    3cf0:	2b01      	cmp	r3, #1
    3cf2:	d0f6      	beq.n	3ce2 <STATE_task+0xd2>
					}
				}
				pwm(OFF);
    3cf4:	2002      	movs	r0, #2
    3cf6:	4b24      	ldr	r3, [pc, #144]	; (3d88 <STATE_task+0x178>)
    3cf8:	4798      	blx	r3
				UART_Send_Buffer[0] = 's';
    3cfa:	4b1e      	ldr	r3, [pc, #120]	; (3d74 <STATE_task+0x164>)
    3cfc:	2273      	movs	r2, #115	; 0x73
    3cfe:	701a      	strb	r2, [r3, #0]
				UART_Send_Buffer[1] = '4';
    3d00:	4b1c      	ldr	r3, [pc, #112]	; (3d74 <STATE_task+0x164>)
    3d02:	2234      	movs	r2, #52	; 0x34
    3d04:	705a      	strb	r2, [r3, #1]
				UART_Send_Buffer[2] = '\0';
    3d06:	4b1b      	ldr	r3, [pc, #108]	; (3d74 <STATE_task+0x164>)
    3d08:	2200      	movs	r2, #0
    3d0a:	709a      	strb	r2, [r3, #2]
				send_message(3);//************************************************************************ MOVEDOWN
    3d0c:	2003      	movs	r0, #3
    3d0e:	4b1a      	ldr	r3, [pc, #104]	; (3d78 <STATE_task+0x168>)
    3d10:	4798      	blx	r3
				wait_for_responce();
    3d12:	4b1c      	ldr	r3, [pc, #112]	; (3d84 <STATE_task+0x174>)
    3d14:	4798      	blx	r3
				if(UART_Buffer[0] == '1')
    3d16:	4b1f      	ldr	r3, [pc, #124]	; (3d94 <STATE_task+0x184>)
    3d18:	781b      	ldrb	r3, [r3, #0]
    3d1a:	2b31      	cmp	r3, #49	; 0x31
    3d1c:	d108      	bne.n	3d30 <STATE_task+0x120>
				{
					if(dir == LEFT) dir = RIGHT;
    3d1e:	69bb      	ldr	r3, [r7, #24]
    3d20:	2b00      	cmp	r3, #0
    3d22:	d102      	bne.n	3d2a <STATE_task+0x11a>
    3d24:	2301      	movs	r3, #1
    3d26:	61bb      	str	r3, [r7, #24]
    3d28:	e017      	b.n	3d5a <STATE_task+0x14a>
					else dir = LEFT;
    3d2a:	2300      	movs	r3, #0
    3d2c:	61bb      	str	r3, [r7, #24]
    3d2e:	e014      	b.n	3d5a <STATE_task+0x14a>
				}
				else if(UART_Buffer[0] == '2')
    3d30:	4b18      	ldr	r3, [pc, #96]	; (3d94 <STATE_task+0x184>)
    3d32:	781b      	ldrb	r3, [r3, #0]
    3d34:	2b32      	cmp	r3, #50	; 0x32
    3d36:	d104      	bne.n	3d42 <STATE_task+0x132>
				{
					done = 1;
    3d38:	2301      	movs	r3, #1
    3d3a:	61fb      	str	r3, [r7, #28]
					dock();
    3d3c:	4b16      	ldr	r3, [pc, #88]	; (3d98 <STATE_task+0x188>)
    3d3e:	4798      	blx	r3
    3d40:	e00b      	b.n	3d5a <STATE_task+0x14a>
					
				}
				else if(UART_Buffer[0] == '3')
    3d42:	4b14      	ldr	r3, [pc, #80]	; (3d94 <STATE_task+0x184>)
    3d44:	781b      	ldrb	r3, [r3, #0]
    3d46:	2b33      	cmp	r3, #51	; 0x33
    3d48:	d107      	bne.n	3d5a <STATE_task+0x14a>
				{
					continuing = 1;
    3d4a:	2301      	movs	r3, #1
    3d4c:	623b      	str	r3, [r7, #32]
					low_bat = 1;
    3d4e:	2301      	movs	r3, #1
    3d50:	627b      	str	r3, [r7, #36]	; 0x24
					dir = RIGHT;
    3d52:	2301      	movs	r3, #1
    3d54:	61bb      	str	r3, [r7, #24]
					dock();
    3d56:	4b10      	ldr	r3, [pc, #64]	; (3d98 <STATE_task+0x188>)
    3d58:	4798      	blx	r3
			while(done == 0)
    3d5a:	69fb      	ldr	r3, [r7, #28]
    3d5c:	2b00      	cmp	r3, #0
    3d5e:	d0aa      	beq.n	3cb6 <STATE_task+0xa6>
	{
    3d60:	e77c      	b.n	3c5c <STATE_task+0x4c>
    3d62:	46c0      	nop			; (mov r8, r8)
    3d64:	200027f0 	.word	0x200027f0
    3d68:	200027a8 	.word	0x200027a8
    3d6c:	00001925 	.word	0x00001925
    3d70:	000018e9 	.word	0x000018e9
    3d74:	20002858 	.word	0x20002858
    3d78:	000040a9 	.word	0x000040a9
    3d7c:	00003de5 	.word	0x00003de5
    3d80:	00003e91 	.word	0x00003e91
    3d84:	00004139 	.word	0x00004139
    3d88:	00004215 	.word	0x00004215
    3d8c:	00005765 	.word	0x00005765
    3d90:	00004269 	.word	0x00004269
    3d94:	200027f4 	.word	0x200027f4
    3d98:	0000405d 	.word	0x0000405d

00003d9c <Create_all_tasks>:
	
	
}

void Create_all_tasks()
{
    3d9c:	b590      	push	{r4, r7, lr}
    3d9e:	b083      	sub	sp, #12
    3da0:	af02      	add	r7, sp, #8
		//Basestation
		if (xTaskCreate(
		STATE_task, "STATE", TASK_STACK_SIZE*20, NULL, TASK_STACK_PRIORITY, xCreatedTask[3])
    3da2:	4b0b      	ldr	r3, [pc, #44]	; (3dd0 <Create_all_tasks+0x34>)
    3da4:	68db      	ldr	r3, [r3, #12]
		if (xTaskCreate(
    3da6:	22a0      	movs	r2, #160	; 0xa0
    3da8:	0092      	lsls	r2, r2, #2
    3daa:	490a      	ldr	r1, [pc, #40]	; (3dd4 <Create_all_tasks+0x38>)
    3dac:	480a      	ldr	r0, [pc, #40]	; (3dd8 <Create_all_tasks+0x3c>)
    3dae:	9301      	str	r3, [sp, #4]
    3db0:	2301      	movs	r3, #1
    3db2:	9300      	str	r3, [sp, #0]
    3db4:	2300      	movs	r3, #0
    3db6:	4c09      	ldr	r4, [pc, #36]	; (3ddc <Create_all_tasks+0x40>)
    3db8:	47a0      	blx	r4
    3dba:	0003      	movs	r3, r0
    3dbc:	2b01      	cmp	r3, #1
    3dbe:	d000      	beq.n	3dc2 <Create_all_tasks+0x26>
		!= pdPASS) {
			while (1) {
    3dc0:	e7fe      	b.n	3dc0 <Create_all_tasks+0x24>
		}
		
		
		*/

		vTaskStartScheduler();
    3dc2:	4b07      	ldr	r3, [pc, #28]	; (3de0 <Create_all_tasks+0x44>)
    3dc4:	4798      	blx	r3

		return;
    3dc6:	46c0      	nop			; (mov r8, r8)
}
    3dc8:	46bd      	mov	sp, r7
    3dca:	b001      	add	sp, #4
    3dcc:	bd90      	pop	{r4, r7, pc}
    3dce:	46c0      	nop			; (mov r8, r8)
    3dd0:	20000050 	.word	0x20000050
    3dd4:	00008604 	.word	0x00008604
    3dd8:	00003c11 	.word	0x00003c11
    3ddc:	000054dd 	.word	0x000054dd
    3de0:	000057c1 	.word	0x000057c1

00003de4 <idle>:
void idle(int sf, int lb)//sf= sensor failure, lb = low battery
{
    3de4:	b580      	push	{r7, lr}
    3de6:	b084      	sub	sp, #16
    3de8:	af00      	add	r7, sp, #0
    3dea:	6078      	str	r0, [r7, #4]
    3dec:	6039      	str	r1, [r7, #0]
	if(lb)
    3dee:	683b      	ldr	r3, [r7, #0]
    3df0:	2b00      	cmp	r3, #0
    3df2:	d00f      	beq.n	3e14 <idle+0x30>
	{
		//low battery sleep 1 hour
		for(int i = 0; i < 3600; i ++)
    3df4:	2300      	movs	r3, #0
    3df6:	60fb      	str	r3, [r7, #12]
    3df8:	e007      	b.n	3e0a <idle+0x26>
		{
			os_sleep(2000);
    3dfa:	23fa      	movs	r3, #250	; 0xfa
    3dfc:	00db      	lsls	r3, r3, #3
    3dfe:	0018      	movs	r0, r3
    3e00:	4b1c      	ldr	r3, [pc, #112]	; (3e74 <idle+0x90>)
    3e02:	4798      	blx	r3
		for(int i = 0; i < 3600; i ++)
    3e04:	68fb      	ldr	r3, [r7, #12]
    3e06:	3301      	adds	r3, #1
    3e08:	60fb      	str	r3, [r7, #12]
    3e0a:	68fb      	ldr	r3, [r7, #12]
    3e0c:	4a1a      	ldr	r2, [pc, #104]	; (3e78 <idle+0x94>)
    3e0e:	4293      	cmp	r3, r2
    3e10:	ddf3      	ble.n	3dfa <idle+0x16>
		}
		return;	
    3e12:	e02b      	b.n	3e6c <idle+0x88>
	}
	if(sf)
    3e14:	687b      	ldr	r3, [r7, #4]
    3e16:	2b00      	cmp	r3, #0
    3e18:	d00a      	beq.n	3e30 <idle+0x4c>
	{
		while(check_sensors() == 1);
    3e1a:	46c0      	nop			; (mov r8, r8)
    3e1c:	4b17      	ldr	r3, [pc, #92]	; (3e7c <idle+0x98>)
    3e1e:	4798      	blx	r3
    3e20:	0003      	movs	r3, r0
    3e22:	2b01      	cmp	r3, #1
    3e24:	d0fa      	beq.n	3e1c <idle+0x38>
		os_sleep(5000);
    3e26:	4b16      	ldr	r3, [pc, #88]	; (3e80 <idle+0x9c>)
    3e28:	0018      	movs	r0, r3
    3e2a:	4b12      	ldr	r3, [pc, #72]	; (3e74 <idle+0x90>)
    3e2c:	4798      	blx	r3
		return;
    3e2e:	e01d      	b.n	3e6c <idle+0x88>
	}
	while(1)
	{ 
		if(readbtn(Manual_7) == 0)
    3e30:	2030      	movs	r0, #48	; 0x30
    3e32:	4b14      	ldr	r3, [pc, #80]	; (3e84 <idle+0xa0>)
    3e34:	4798      	blx	r3
    3e36:	1e03      	subs	r3, r0, #0
    3e38:	d107      	bne.n	3e4a <idle+0x66>
		{
			while(readbtn(Manual_7) == 0);
    3e3a:	46c0      	nop			; (mov r8, r8)
    3e3c:	2030      	movs	r0, #48	; 0x30
    3e3e:	4b11      	ldr	r3, [pc, #68]	; (3e84 <idle+0xa0>)
    3e40:	4798      	blx	r3
    3e42:	1e03      	subs	r3, r0, #0
    3e44:	d0fa      	beq.n	3e3c <idle+0x58>
			manual_mode();
    3e46:	4b10      	ldr	r3, [pc, #64]	; (3e88 <idle+0xa4>)
    3e48:	4798      	blx	r3
		}
		if(check_schedule() == 1)
    3e4a:	4b10      	ldr	r3, [pc, #64]	; (3e8c <idle+0xa8>)
    3e4c:	4798      	blx	r3
    3e4e:	0003      	movs	r3, r0
    3e50:	2b01      	cmp	r3, #1
    3e52:	d008      	beq.n	3e66 <idle+0x82>
		{
			return;
		}
		if(readbtn(Start_Cleaning) == 0)
    3e54:	2028      	movs	r0, #40	; 0x28
    3e56:	4b0b      	ldr	r3, [pc, #44]	; (3e84 <idle+0xa0>)
    3e58:	4798      	blx	r3
    3e5a:	1e03      	subs	r3, r0, #0
    3e5c:	d005      	beq.n	3e6a <idle+0x86>
		{
			return;
		}
		os_sleep(10);
    3e5e:	200a      	movs	r0, #10
    3e60:	4b04      	ldr	r3, [pc, #16]	; (3e74 <idle+0x90>)
    3e62:	4798      	blx	r3
		if(readbtn(Manual_7) == 0)
    3e64:	e7e4      	b.n	3e30 <idle+0x4c>
			return;
    3e66:	46c0      	nop			; (mov r8, r8)
    3e68:	e000      	b.n	3e6c <idle+0x88>
			return;
    3e6a:	46c0      	nop			; (mov r8, r8)
	}
}
    3e6c:	46bd      	mov	sp, r7
    3e6e:	b004      	add	sp, #16
    3e70:	bd80      	pop	{r7, pc}
    3e72:	46c0      	nop			; (mov r8, r8)
    3e74:	00005765 	.word	0x00005765
    3e78:	00000e0f 	.word	0x00000e0f
    3e7c:	00003e91 	.word	0x00003e91
    3e80:	00001388 	.word	0x00001388
    3e84:	00004269 	.word	0x00004269
    3e88:	00004371 	.word	0x00004371
    3e8c:	000045ed 	.word	0x000045ed

00003e90 <check_sensors>:
int check_sensors() //DONE
{
    3e90:	b590      	push	{r4, r7, lr}
    3e92:	b089      	sub	sp, #36	; 0x24
    3e94:	af00      	add	r7, sp, #0
		uint8_t temp[2];
		uint8_t wind[2];
		
		adc_sync_enable_channel(&WindSensor, 0);
    3e96:	4b58      	ldr	r3, [pc, #352]	; (3ff8 <check_sensors+0x168>)
    3e98:	2100      	movs	r1, #0
    3e9a:	0018      	movs	r0, r3
    3e9c:	4b57      	ldr	r3, [pc, #348]	; (3ffc <check_sensors+0x16c>)
    3e9e:	4798      	blx	r3
		adc_sync_read_channel(&WindSensor, 0, wind, 2);
    3ea0:	003a      	movs	r2, r7
    3ea2:	4855      	ldr	r0, [pc, #340]	; (3ff8 <check_sensors+0x168>)
    3ea4:	2302      	movs	r3, #2
    3ea6:	2100      	movs	r1, #0
    3ea8:	4c55      	ldr	r4, [pc, #340]	; (4000 <check_sensors+0x170>)
    3eaa:	47a0      	blx	r4
		double w = ((uint16_t)wind[1] << 8) | wind[0];
    3eac:	003b      	movs	r3, r7
    3eae:	785b      	ldrb	r3, [r3, #1]
    3eb0:	021b      	lsls	r3, r3, #8
    3eb2:	003a      	movs	r2, r7
    3eb4:	7812      	ldrb	r2, [r2, #0]
    3eb6:	431a      	orrs	r2, r3
    3eb8:	4b52      	ldr	r3, [pc, #328]	; (4004 <check_sensors+0x174>)
    3eba:	0010      	movs	r0, r2
    3ebc:	4798      	blx	r3
    3ebe:	0003      	movs	r3, r0
    3ec0:	000c      	movs	r4, r1
    3ec2:	61bb      	str	r3, [r7, #24]
    3ec4:	61fc      	str	r4, [r7, #28]
		w = (((w * 3300.0 / 4095.0) - 400) / 1600) * 50;
    3ec6:	4c50      	ldr	r4, [pc, #320]	; (4008 <check_sensors+0x178>)
    3ec8:	2200      	movs	r2, #0
    3eca:	4b50      	ldr	r3, [pc, #320]	; (400c <check_sensors+0x17c>)
    3ecc:	69b8      	ldr	r0, [r7, #24]
    3ece:	69f9      	ldr	r1, [r7, #28]
    3ed0:	47a0      	blx	r4
    3ed2:	0003      	movs	r3, r0
    3ed4:	000c      	movs	r4, r1
    3ed6:	0018      	movs	r0, r3
    3ed8:	0021      	movs	r1, r4
    3eda:	4c4d      	ldr	r4, [pc, #308]	; (4010 <check_sensors+0x180>)
    3edc:	2200      	movs	r2, #0
    3ede:	4b4d      	ldr	r3, [pc, #308]	; (4014 <check_sensors+0x184>)
    3ee0:	47a0      	blx	r4
    3ee2:	0003      	movs	r3, r0
    3ee4:	000c      	movs	r4, r1
    3ee6:	0018      	movs	r0, r3
    3ee8:	0021      	movs	r1, r4
    3eea:	4c4b      	ldr	r4, [pc, #300]	; (4018 <check_sensors+0x188>)
    3eec:	2200      	movs	r2, #0
    3eee:	4b4b      	ldr	r3, [pc, #300]	; (401c <check_sensors+0x18c>)
    3ef0:	47a0      	blx	r4
    3ef2:	0003      	movs	r3, r0
    3ef4:	000c      	movs	r4, r1
    3ef6:	0018      	movs	r0, r3
    3ef8:	0021      	movs	r1, r4
    3efa:	4c45      	ldr	r4, [pc, #276]	; (4010 <check_sensors+0x180>)
    3efc:	2200      	movs	r2, #0
    3efe:	4b48      	ldr	r3, [pc, #288]	; (4020 <check_sensors+0x190>)
    3f00:	47a0      	blx	r4
    3f02:	0003      	movs	r3, r0
    3f04:	000c      	movs	r4, r1
    3f06:	0018      	movs	r0, r3
    3f08:	0021      	movs	r1, r4
    3f0a:	4c3f      	ldr	r4, [pc, #252]	; (4008 <check_sensors+0x178>)
    3f0c:	2200      	movs	r2, #0
    3f0e:	4b45      	ldr	r3, [pc, #276]	; (4024 <check_sensors+0x194>)
    3f10:	47a0      	blx	r4
    3f12:	0003      	movs	r3, r0
    3f14:	000c      	movs	r4, r1
    3f16:	61bb      	str	r3, [r7, #24]
    3f18:	61fc      	str	r4, [r7, #28]
		adc_sync_disable_channel(&WindSensor, 0);
    3f1a:	4b37      	ldr	r3, [pc, #220]	; (3ff8 <check_sensors+0x168>)
    3f1c:	2100      	movs	r1, #0
    3f1e:	0018      	movs	r0, r3
    3f20:	4b41      	ldr	r3, [pc, #260]	; (4028 <check_sensors+0x198>)
    3f22:	4798      	blx	r3
		
		adc_sync_enable_channel(&TempSensor, 0);
    3f24:	4b41      	ldr	r3, [pc, #260]	; (402c <check_sensors+0x19c>)
    3f26:	2100      	movs	r1, #0
    3f28:	0018      	movs	r0, r3
    3f2a:	4b34      	ldr	r3, [pc, #208]	; (3ffc <check_sensors+0x16c>)
    3f2c:	4798      	blx	r3
		adc_sync_read_channel(&TempSensor, 0, temp, 2);
    3f2e:	1d3a      	adds	r2, r7, #4
    3f30:	483e      	ldr	r0, [pc, #248]	; (402c <check_sensors+0x19c>)
    3f32:	2302      	movs	r3, #2
    3f34:	2100      	movs	r1, #0
    3f36:	4c32      	ldr	r4, [pc, #200]	; (4000 <check_sensors+0x170>)
    3f38:	47a0      	blx	r4
		double c = ((uint16_t)temp[1] << 8) | temp[0];
    3f3a:	1d3b      	adds	r3, r7, #4
    3f3c:	785b      	ldrb	r3, [r3, #1]
    3f3e:	021b      	lsls	r3, r3, #8
    3f40:	1d3a      	adds	r2, r7, #4
    3f42:	7812      	ldrb	r2, [r2, #0]
    3f44:	431a      	orrs	r2, r3
    3f46:	4b2f      	ldr	r3, [pc, #188]	; (4004 <check_sensors+0x174>)
    3f48:	0010      	movs	r0, r2
    3f4a:	4798      	blx	r3
    3f4c:	0003      	movs	r3, r0
    3f4e:	000c      	movs	r4, r1
    3f50:	613b      	str	r3, [r7, #16]
    3f52:	617c      	str	r4, [r7, #20]
		c  = c  * (3300/4095.0);
    3f54:	4c2c      	ldr	r4, [pc, #176]	; (4008 <check_sensors+0x178>)
    3f56:	4a36      	ldr	r2, [pc, #216]	; (4030 <check_sensors+0x1a0>)
    3f58:	4b36      	ldr	r3, [pc, #216]	; (4034 <check_sensors+0x1a4>)
    3f5a:	6938      	ldr	r0, [r7, #16]
    3f5c:	6979      	ldr	r1, [r7, #20]
    3f5e:	47a0      	blx	r4
    3f60:	0003      	movs	r3, r0
    3f62:	000c      	movs	r4, r1
    3f64:	613b      	str	r3, [r7, #16]
    3f66:	617c      	str	r4, [r7, #20]
		c  = ( c  - 500) / 10;
    3f68:	4c2b      	ldr	r4, [pc, #172]	; (4018 <check_sensors+0x188>)
    3f6a:	2200      	movs	r2, #0
    3f6c:	4b32      	ldr	r3, [pc, #200]	; (4038 <check_sensors+0x1a8>)
    3f6e:	6938      	ldr	r0, [r7, #16]
    3f70:	6979      	ldr	r1, [r7, #20]
    3f72:	47a0      	blx	r4
    3f74:	0003      	movs	r3, r0
    3f76:	000c      	movs	r4, r1
    3f78:	0018      	movs	r0, r3
    3f7a:	0021      	movs	r1, r4
    3f7c:	4c24      	ldr	r4, [pc, #144]	; (4010 <check_sensors+0x180>)
    3f7e:	2200      	movs	r2, #0
    3f80:	4b2e      	ldr	r3, [pc, #184]	; (403c <check_sensors+0x1ac>)
    3f82:	47a0      	blx	r4
    3f84:	0003      	movs	r3, r0
    3f86:	000c      	movs	r4, r1
    3f88:	613b      	str	r3, [r7, #16]
    3f8a:	617c      	str	r4, [r7, #20]
		double f = (c *9 / 5)+32;
    3f8c:	4c1e      	ldr	r4, [pc, #120]	; (4008 <check_sensors+0x178>)
    3f8e:	2200      	movs	r2, #0
    3f90:	4b2b      	ldr	r3, [pc, #172]	; (4040 <check_sensors+0x1b0>)
    3f92:	6938      	ldr	r0, [r7, #16]
    3f94:	6979      	ldr	r1, [r7, #20]
    3f96:	47a0      	blx	r4
    3f98:	0003      	movs	r3, r0
    3f9a:	000c      	movs	r4, r1
    3f9c:	0018      	movs	r0, r3
    3f9e:	0021      	movs	r1, r4
    3fa0:	4c1b      	ldr	r4, [pc, #108]	; (4010 <check_sensors+0x180>)
    3fa2:	2200      	movs	r2, #0
    3fa4:	4b27      	ldr	r3, [pc, #156]	; (4044 <check_sensors+0x1b4>)
    3fa6:	47a0      	blx	r4
    3fa8:	0003      	movs	r3, r0
    3faa:	000c      	movs	r4, r1
    3fac:	0018      	movs	r0, r3
    3fae:	0021      	movs	r1, r4
    3fb0:	4c25      	ldr	r4, [pc, #148]	; (4048 <check_sensors+0x1b8>)
    3fb2:	2200      	movs	r2, #0
    3fb4:	4b25      	ldr	r3, [pc, #148]	; (404c <check_sensors+0x1bc>)
    3fb6:	47a0      	blx	r4
    3fb8:	0003      	movs	r3, r0
    3fba:	000c      	movs	r4, r1
    3fbc:	60bb      	str	r3, [r7, #8]
    3fbe:	60fc      	str	r4, [r7, #12]
		adc_sync_disable_channel(&TempSensor, 0);
    3fc0:	4b1a      	ldr	r3, [pc, #104]	; (402c <check_sensors+0x19c>)
    3fc2:	2100      	movs	r1, #0
    3fc4:	0018      	movs	r0, r3
    3fc6:	4b18      	ldr	r3, [pc, #96]	; (4028 <check_sensors+0x198>)
    3fc8:	4798      	blx	r3
		if(f < 80 && w < 8)
    3fca:	4c21      	ldr	r4, [pc, #132]	; (4050 <check_sensors+0x1c0>)
    3fcc:	2200      	movs	r2, #0
    3fce:	4b21      	ldr	r3, [pc, #132]	; (4054 <check_sensors+0x1c4>)
    3fd0:	68b8      	ldr	r0, [r7, #8]
    3fd2:	68f9      	ldr	r1, [r7, #12]
    3fd4:	47a0      	blx	r4
    3fd6:	1e03      	subs	r3, r0, #0
    3fd8:	d009      	beq.n	3fee <check_sensors+0x15e>
    3fda:	4c1d      	ldr	r4, [pc, #116]	; (4050 <check_sensors+0x1c0>)
    3fdc:	2200      	movs	r2, #0
    3fde:	4b1e      	ldr	r3, [pc, #120]	; (4058 <check_sensors+0x1c8>)
    3fe0:	69b8      	ldr	r0, [r7, #24]
    3fe2:	69f9      	ldr	r1, [r7, #28]
    3fe4:	47a0      	blx	r4
    3fe6:	1e03      	subs	r3, r0, #0
    3fe8:	d001      	beq.n	3fee <check_sensors+0x15e>
			return 0;
    3fea:	2300      	movs	r3, #0
    3fec:	e000      	b.n	3ff0 <check_sensors+0x160>
		else
			return 1;
    3fee:	2301      	movs	r3, #1
}
    3ff0:	0018      	movs	r0, r3
    3ff2:	46bd      	mov	sp, r7
    3ff4:	b009      	add	sp, #36	; 0x24
    3ff6:	bd90      	pop	{r4, r7, pc}
    3ff8:	200027b4 	.word	0x200027b4
    3ffc:	00000e31 	.word	0x00000e31
    4000:	00000eb9 	.word	0x00000eb9
    4004:	000082f1 	.word	0x000082f1
    4008:	000077c5 	.word	0x000077c5
    400c:	40a9c800 	.word	0x40a9c800
    4010:	00006f5d 	.word	0x00006f5d
    4014:	40affe00 	.word	0x40affe00
    4018:	00007cc5 	.word	0x00007cc5
    401c:	40790000 	.word	0x40790000
    4020:	40990000 	.word	0x40990000
    4024:	40490000 	.word	0x40490000
    4028:	00000e75 	.word	0x00000e75
    402c:	200027b8 	.word	0x200027b8
    4030:	99c99c9a 	.word	0x99c99c9a
    4034:	3fe9c99c 	.word	0x3fe9c99c
    4038:	407f4000 	.word	0x407f4000
    403c:	40240000 	.word	0x40240000
    4040:	40220000 	.word	0x40220000
    4044:	40140000 	.word	0x40140000
    4048:	0000693d 	.word	0x0000693d
    404c:	40400000 	.word	0x40400000
    4050:	000068ed 	.word	0x000068ed
    4054:	40540000 	.word	0x40540000
    4058:	40200000 	.word	0x40200000

0000405c <dock>:
void dock()
{
    405c:	b580      	push	{r7, lr}
    405e:	af00      	add	r7, sp, #0
	pwm(LEFT);
    4060:	2000      	movs	r0, #0
    4062:	4b0d      	ldr	r3, [pc, #52]	; (4098 <dock+0x3c>)
    4064:	4798      	blx	r3
	while(readbtn(Left) == 1);
    4066:	46c0      	nop			; (mov r8, r8)
    4068:	2015      	movs	r0, #21
    406a:	4b0c      	ldr	r3, [pc, #48]	; (409c <dock+0x40>)
    406c:	4798      	blx	r3
    406e:	0003      	movs	r3, r0
    4070:	2b01      	cmp	r3, #1
    4072:	d0f9      	beq.n	4068 <dock+0xc>
	pwm(OFF);
    4074:	2002      	movs	r0, #2
    4076:	4b08      	ldr	r3, [pc, #32]	; (4098 <dock+0x3c>)
    4078:	4798      	blx	r3
	UART_Send_Buffer[0] = 's';
    407a:	4b09      	ldr	r3, [pc, #36]	; (40a0 <dock+0x44>)
    407c:	2273      	movs	r2, #115	; 0x73
    407e:	701a      	strb	r2, [r3, #0]
	UART_Send_Buffer[1] = '5';
    4080:	4b07      	ldr	r3, [pc, #28]	; (40a0 <dock+0x44>)
    4082:	2235      	movs	r2, #53	; 0x35
    4084:	705a      	strb	r2, [r3, #1]
	UART_Send_Buffer[2] = '\0';
    4086:	4b06      	ldr	r3, [pc, #24]	; (40a0 <dock+0x44>)
    4088:	2200      	movs	r2, #0
    408a:	709a      	strb	r2, [r3, #2]
	send_message(3);//************************************************************************ DOCK
    408c:	2003      	movs	r0, #3
    408e:	4b05      	ldr	r3, [pc, #20]	; (40a4 <dock+0x48>)
    4090:	4798      	blx	r3
	
}
    4092:	46c0      	nop			; (mov r8, r8)
    4094:	46bd      	mov	sp, r7
    4096:	bd80      	pop	{r7, pc}
    4098:	00004215 	.word	0x00004215
    409c:	00004269 	.word	0x00004269
    40a0:	20002858 	.word	0x20002858
    40a4:	000040a9 	.word	0x000040a9

000040a8 <send_message>:
void send_message(int length)
{
    40a8:	b580      	push	{r7, lr}
    40aa:	b082      	sub	sp, #8
    40ac:	af00      	add	r7, sp, #0
    40ae:	6078      	str	r0, [r7, #4]
	io_write(io, (uint8_t *)&UART_Send_Buffer, length);
    40b0:	4b17      	ldr	r3, [pc, #92]	; (4110 <send_message+0x68>)
    40b2:	681b      	ldr	r3, [r3, #0]
    40b4:	687a      	ldr	r2, [r7, #4]
    40b6:	b292      	uxth	r2, r2
    40b8:	4916      	ldr	r1, [pc, #88]	; (4114 <send_message+0x6c>)
    40ba:	0018      	movs	r0, r3
    40bc:	4b16      	ldr	r3, [pc, #88]	; (4118 <send_message+0x70>)
    40be:	4798      	blx	r3
	os_sleep(100);
    40c0:	2064      	movs	r0, #100	; 0x64
    40c2:	4b16      	ldr	r3, [pc, #88]	; (411c <send_message+0x74>)
    40c4:	4798      	blx	r3
	
	do 
	{
		if(usart_sync_is_rx_not_empty(&UART) !=0)
    40c6:	4b16      	ldr	r3, [pc, #88]	; (4120 <send_message+0x78>)
    40c8:	0018      	movs	r0, r3
    40ca:	4b16      	ldr	r3, [pc, #88]	; (4124 <send_message+0x7c>)
    40cc:	4798      	blx	r3
    40ce:	1e03      	subs	r3, r0, #0
    40d0:	d009      	beq.n	40e6 <send_message+0x3e>
		{
			UART_Length = io_read(io, (uint8_t *)&UART_Buffer, 1);
    40d2:	4b0f      	ldr	r3, [pc, #60]	; (4110 <send_message+0x68>)
    40d4:	681b      	ldr	r3, [r3, #0]
    40d6:	4914      	ldr	r1, [pc, #80]	; (4128 <send_message+0x80>)
    40d8:	2201      	movs	r2, #1
    40da:	0018      	movs	r0, r3
    40dc:	4b13      	ldr	r3, [pc, #76]	; (412c <send_message+0x84>)
    40de:	4798      	blx	r3
    40e0:	0002      	movs	r2, r0
    40e2:	4b13      	ldr	r3, [pc, #76]	; (4130 <send_message+0x88>)
    40e4:	601a      	str	r2, [r3, #0]
		}
		os_sleep(500);
    40e6:	23fa      	movs	r3, #250	; 0xfa
    40e8:	005b      	lsls	r3, r3, #1
    40ea:	0018      	movs	r0, r3
    40ec:	4b0b      	ldr	r3, [pc, #44]	; (411c <send_message+0x74>)
    40ee:	4798      	blx	r3
	} while (UART_Buffer[0] != 's');
    40f0:	4b0d      	ldr	r3, [pc, #52]	; (4128 <send_message+0x80>)
    40f2:	781b      	ldrb	r3, [r3, #0]
    40f4:	2b73      	cmp	r3, #115	; 0x73
    40f6:	d1e6      	bne.n	40c6 <send_message+0x1e>
	reset_buffer(UART_Buffer, UART_Length);
    40f8:	4b0d      	ldr	r3, [pc, #52]	; (4130 <send_message+0x88>)
    40fa:	681a      	ldr	r2, [r3, #0]
    40fc:	4b0a      	ldr	r3, [pc, #40]	; (4128 <send_message+0x80>)
    40fe:	0011      	movs	r1, r2
    4100:	0018      	movs	r0, r3
    4102:	4b0c      	ldr	r3, [pc, #48]	; (4134 <send_message+0x8c>)
    4104:	4798      	blx	r3
}
    4106:	46c0      	nop			; (mov r8, r8)
    4108:	46bd      	mov	sp, r7
    410a:	b002      	add	sp, #8
    410c:	bd80      	pop	{r7, pc}
    410e:	46c0      	nop			; (mov r8, r8)
    4110:	200027f0 	.word	0x200027f0
    4114:	20002858 	.word	0x20002858
    4118:	0000162d 	.word	0x0000162d
    411c:	00005765 	.word	0x00005765
    4120:	200027a8 	.word	0x200027a8
    4124:	0000196d 	.word	0x0000196d
    4128:	200027f4 	.word	0x200027f4
    412c:	00001681 	.word	0x00001681
    4130:	200000dc 	.word	0x200000dc
    4134:	000045f9 	.word	0x000045f9

00004138 <wait_for_responce>:
void wait_for_responce()
{
    4138:	b580      	push	{r7, lr}
    413a:	b084      	sub	sp, #16
    413c:	af00      	add	r7, sp, #0
	UART_Length = 0;
    413e:	4b2b      	ldr	r3, [pc, #172]	; (41ec <wait_for_responce+0xb4>)
    4140:	2200      	movs	r2, #0
    4142:	601a      	str	r2, [r3, #0]
	int offset = 0;
    4144:	2300      	movs	r3, #0
    4146:	60fb      	str	r3, [r7, #12]
	UART_Buffer[0] = '0';
    4148:	4b29      	ldr	r3, [pc, #164]	; (41f0 <wait_for_responce+0xb8>)
    414a:	2230      	movs	r2, #48	; 0x30
    414c:	701a      	strb	r2, [r3, #0]
	while(UART_Buffer[0] == '0' || UART_Buffer[0] == '\0')
    414e:	e041      	b.n	41d4 <wait_for_responce+0x9c>
	{
		uint8_t temp[1] = {0};
    4150:	1d3b      	adds	r3, r7, #4
    4152:	2200      	movs	r2, #0
    4154:	701a      	strb	r2, [r3, #0]
		temp[0] = 'r';
    4156:	1d3b      	adds	r3, r7, #4
    4158:	2272      	movs	r2, #114	; 0x72
    415a:	701a      	strb	r2, [r3, #0]
		io_write(io, (uint8_t *)&temp, 1);
    415c:	4b25      	ldr	r3, [pc, #148]	; (41f4 <wait_for_responce+0xbc>)
    415e:	681b      	ldr	r3, [r3, #0]
    4160:	1d39      	adds	r1, r7, #4
    4162:	2201      	movs	r2, #1
    4164:	0018      	movs	r0, r3
    4166:	4b24      	ldr	r3, [pc, #144]	; (41f8 <wait_for_responce+0xc0>)
    4168:	4798      	blx	r3
		for(int i = 0; i < 1000; i++)
    416a:	2300      	movs	r3, #0
    416c:	60bb      	str	r3, [r7, #8]
    416e:	e01c      	b.n	41aa <wait_for_responce+0x72>
		{
			if(usart_sync_is_rx_not_empty(&UART) !=0)
    4170:	4b22      	ldr	r3, [pc, #136]	; (41fc <wait_for_responce+0xc4>)
    4172:	0018      	movs	r0, r3
    4174:	4b22      	ldr	r3, [pc, #136]	; (4200 <wait_for_responce+0xc8>)
    4176:	4798      	blx	r3
    4178:	1e03      	subs	r3, r0, #0
    417a:	d010      	beq.n	419e <wait_for_responce+0x66>
			{
				UART_Length = io_read(io, (uint8_t *)&UART_Buffer + offset, 1);
    417c:	4b1d      	ldr	r3, [pc, #116]	; (41f4 <wait_for_responce+0xbc>)
    417e:	6818      	ldr	r0, [r3, #0]
    4180:	68fa      	ldr	r2, [r7, #12]
    4182:	4b1b      	ldr	r3, [pc, #108]	; (41f0 <wait_for_responce+0xb8>)
    4184:	18d3      	adds	r3, r2, r3
    4186:	2201      	movs	r2, #1
    4188:	0019      	movs	r1, r3
    418a:	4b1e      	ldr	r3, [pc, #120]	; (4204 <wait_for_responce+0xcc>)
    418c:	4798      	blx	r3
    418e:	0002      	movs	r2, r0
    4190:	4b16      	ldr	r3, [pc, #88]	; (41ec <wait_for_responce+0xb4>)
    4192:	601a      	str	r2, [r3, #0]
				offset++;
    4194:	68fb      	ldr	r3, [r7, #12]
    4196:	3301      	adds	r3, #1
    4198:	60fb      	str	r3, [r7, #12]
				i = 0;
    419a:	2300      	movs	r3, #0
    419c:	60bb      	str	r3, [r7, #8]
			}
			os_sleep(1);			
    419e:	2001      	movs	r0, #1
    41a0:	4b19      	ldr	r3, [pc, #100]	; (4208 <wait_for_responce+0xd0>)
    41a2:	4798      	blx	r3
		for(int i = 0; i < 1000; i++)
    41a4:	68bb      	ldr	r3, [r7, #8]
    41a6:	3301      	adds	r3, #1
    41a8:	60bb      	str	r3, [r7, #8]
    41aa:	68bb      	ldr	r3, [r7, #8]
    41ac:	4a17      	ldr	r2, [pc, #92]	; (420c <wait_for_responce+0xd4>)
    41ae:	4293      	cmp	r3, r2
    41b0:	ddde      	ble.n	4170 <wait_for_responce+0x38>
		}
		offset = 0;
    41b2:	2300      	movs	r3, #0
    41b4:	60fb      	str	r3, [r7, #12]
		if(UART_Buffer[0] == '0' || UART_Buffer[0] == 'E')
    41b6:	4b0e      	ldr	r3, [pc, #56]	; (41f0 <wait_for_responce+0xb8>)
    41b8:	781b      	ldrb	r3, [r3, #0]
    41ba:	2b30      	cmp	r3, #48	; 0x30
    41bc:	d003      	beq.n	41c6 <wait_for_responce+0x8e>
    41be:	4b0c      	ldr	r3, [pc, #48]	; (41f0 <wait_for_responce+0xb8>)
    41c0:	781b      	ldrb	r3, [r3, #0]
    41c2:	2b45      	cmp	r3, #69	; 0x45
    41c4:	d106      	bne.n	41d4 <wait_for_responce+0x9c>
			reset_buffer(&UART_Buffer, UART_Length);
    41c6:	4b09      	ldr	r3, [pc, #36]	; (41ec <wait_for_responce+0xb4>)
    41c8:	681a      	ldr	r2, [r3, #0]
    41ca:	4b09      	ldr	r3, [pc, #36]	; (41f0 <wait_for_responce+0xb8>)
    41cc:	0011      	movs	r1, r2
    41ce:	0018      	movs	r0, r3
    41d0:	4b0f      	ldr	r3, [pc, #60]	; (4210 <wait_for_responce+0xd8>)
    41d2:	4798      	blx	r3
	while(UART_Buffer[0] == '0' || UART_Buffer[0] == '\0')
    41d4:	4b06      	ldr	r3, [pc, #24]	; (41f0 <wait_for_responce+0xb8>)
    41d6:	781b      	ldrb	r3, [r3, #0]
    41d8:	2b30      	cmp	r3, #48	; 0x30
    41da:	d0b9      	beq.n	4150 <wait_for_responce+0x18>
    41dc:	4b04      	ldr	r3, [pc, #16]	; (41f0 <wait_for_responce+0xb8>)
    41de:	781b      	ldrb	r3, [r3, #0]
    41e0:	2b00      	cmp	r3, #0
    41e2:	d0b5      	beq.n	4150 <wait_for_responce+0x18>
	}
}
    41e4:	46c0      	nop			; (mov r8, r8)
    41e6:	46bd      	mov	sp, r7
    41e8:	b004      	add	sp, #16
    41ea:	bd80      	pop	{r7, pc}
    41ec:	200000dc 	.word	0x200000dc
    41f0:	200027f4 	.word	0x200027f4
    41f4:	200027f0 	.word	0x200027f0
    41f8:	0000162d 	.word	0x0000162d
    41fc:	200027a8 	.word	0x200027a8
    4200:	0000196d 	.word	0x0000196d
    4204:	00001681 	.word	0x00001681
    4208:	00005765 	.word	0x00005765
    420c:	000003e7 	.word	0x000003e7
    4210:	000045f9 	.word	0x000045f9

00004214 <pwm>:
void pwm(int dir)
{
    4214:	b580      	push	{r7, lr}
    4216:	b082      	sub	sp, #8
    4218:	af00      	add	r7, sp, #0
    421a:	6078      	str	r0, [r7, #4]
	if(dir == 2)
    421c:	687b      	ldr	r3, [r7, #4]
    421e:	2b02      	cmp	r3, #2
    4220:	d104      	bne.n	422c <pwm+0x18>
	{
		pwm_disable(&StepperDriver);
    4222:	4b0c      	ldr	r3, [pc, #48]	; (4254 <pwm+0x40>)
    4224:	0018      	movs	r0, r3
    4226:	4b0c      	ldr	r3, [pc, #48]	; (4258 <pwm+0x44>)
    4228:	4798      	blx	r3
		return;
    422a:	e010      	b.n	424e <pwm+0x3a>
	}
		pwm_disable(&StepperDriver);
    422c:	4b09      	ldr	r3, [pc, #36]	; (4254 <pwm+0x40>)
    422e:	0018      	movs	r0, r3
    4230:	4b09      	ldr	r3, [pc, #36]	; (4258 <pwm+0x44>)
    4232:	4798      	blx	r3
		os_sleep(100);
    4234:	2064      	movs	r0, #100	; 0x64
    4236:	4b09      	ldr	r3, [pc, #36]	; (425c <pwm+0x48>)
    4238:	4798      	blx	r3
		gpio_set_pin_level(Direction, dir);
    423a:	687b      	ldr	r3, [r7, #4]
    423c:	1e5a      	subs	r2, r3, #1
    423e:	4193      	sbcs	r3, r2
    4240:	b2db      	uxtb	r3, r3
    4242:	0019      	movs	r1, r3
    4244:	2031      	movs	r0, #49	; 0x31
    4246:	4b06      	ldr	r3, [pc, #24]	; (4260 <pwm+0x4c>)
    4248:	4798      	blx	r3
		pwm_ramp();
    424a:	4b06      	ldr	r3, [pc, #24]	; (4264 <pwm+0x50>)
    424c:	4798      	blx	r3
}
    424e:	46bd      	mov	sp, r7
    4250:	b002      	add	sp, #8
    4252:	bd80      	pop	{r7, pc}
    4254:	200027d4 	.word	0x200027d4
    4258:	0000178d 	.word	0x0000178d
    425c:	00005765 	.word	0x00005765
    4260:	00003b91 	.word	0x00003b91
    4264:	00004289 	.word	0x00004289

00004268 <readbtn>:
int readbtn(int btn)
{
    4268:	b580      	push	{r7, lr}
    426a:	b082      	sub	sp, #8
    426c:	af00      	add	r7, sp, #0
    426e:	6078      	str	r0, [r7, #4]
	return gpio_get_pin_level(btn);
    4270:	687b      	ldr	r3, [r7, #4]
    4272:	b2db      	uxtb	r3, r3
    4274:	0018      	movs	r0, r3
    4276:	4b03      	ldr	r3, [pc, #12]	; (4284 <readbtn+0x1c>)
    4278:	4798      	blx	r3
    427a:	0003      	movs	r3, r0
	
}
    427c:	0018      	movs	r0, r3
    427e:	46bd      	mov	sp, r7
    4280:	b002      	add	sp, #8
    4282:	bd80      	pop	{r7, pc}
    4284:	00003bd1 	.word	0x00003bd1

00004288 <pwm_ramp>:
void pwm_ramp()
{
    4288:	b580      	push	{r7, lr}
    428a:	b090      	sub	sp, #64	; 0x40
    428c:	af00      	add	r7, sp, #0
	int pwm_params[16] = {2000, 1333, 1000, 800, 667, 571, 500, 444, 400, 364, 333, 308, 286, 267, 250, 235};
    428e:	003a      	movs	r2, r7
    4290:	4b31      	ldr	r3, [pc, #196]	; (4358 <pwm_ramp+0xd0>)
    4292:	0010      	movs	r0, r2
    4294:	0019      	movs	r1, r3
    4296:	2340      	movs	r3, #64	; 0x40
    4298:	001a      	movs	r2, r3
    429a:	4b30      	ldr	r3, [pc, #192]	; (435c <pwm_ramp+0xd4>)
    429c:	4798      	blx	r3
		pwm_set_parameters(&StepperDriver, pwm_params[3], pwm_params[3]/2);
    429e:	003b      	movs	r3, r7
    42a0:	68db      	ldr	r3, [r3, #12]
    42a2:	0019      	movs	r1, r3
    42a4:	003b      	movs	r3, r7
    42a6:	68db      	ldr	r3, [r3, #12]
    42a8:	2b00      	cmp	r3, #0
    42aa:	da00      	bge.n	42ae <pwm_ramp+0x26>
    42ac:	3301      	adds	r3, #1
    42ae:	105b      	asrs	r3, r3, #1
    42b0:	001a      	movs	r2, r3
    42b2:	4b2b      	ldr	r3, [pc, #172]	; (4360 <pwm_ramp+0xd8>)
    42b4:	0018      	movs	r0, r3
    42b6:	4b2b      	ldr	r3, [pc, #172]	; (4364 <pwm_ramp+0xdc>)
    42b8:	4798      	blx	r3
		pwm_enable(&StepperDriver);
    42ba:	4b29      	ldr	r3, [pc, #164]	; (4360 <pwm_ramp+0xd8>)
    42bc:	0018      	movs	r0, r3
    42be:	4b2a      	ldr	r3, [pc, #168]	; (4368 <pwm_ramp+0xe0>)
    42c0:	4798      	blx	r3
		os_sleep(10);
    42c2:	200a      	movs	r0, #10
    42c4:	4b29      	ldr	r3, [pc, #164]	; (436c <pwm_ramp+0xe4>)
    42c6:	4798      	blx	r3
		pwm_set_parameters(&StepperDriver, pwm_params[4], pwm_params[4]/2);		
    42c8:	003b      	movs	r3, r7
    42ca:	691b      	ldr	r3, [r3, #16]
    42cc:	0019      	movs	r1, r3
    42ce:	003b      	movs	r3, r7
    42d0:	691b      	ldr	r3, [r3, #16]
    42d2:	2b00      	cmp	r3, #0
    42d4:	da00      	bge.n	42d8 <pwm_ramp+0x50>
    42d6:	3301      	adds	r3, #1
    42d8:	105b      	asrs	r3, r3, #1
    42da:	001a      	movs	r2, r3
    42dc:	4b20      	ldr	r3, [pc, #128]	; (4360 <pwm_ramp+0xd8>)
    42de:	0018      	movs	r0, r3
    42e0:	4b20      	ldr	r3, [pc, #128]	; (4364 <pwm_ramp+0xdc>)
    42e2:	4798      	blx	r3
		os_sleep(10);
    42e4:	200a      	movs	r0, #10
    42e6:	4b21      	ldr	r3, [pc, #132]	; (436c <pwm_ramp+0xe4>)
    42e8:	4798      	blx	r3
		pwm_set_parameters(&StepperDriver, pwm_params[5], pwm_params[5]/2);
    42ea:	003b      	movs	r3, r7
    42ec:	695b      	ldr	r3, [r3, #20]
    42ee:	0019      	movs	r1, r3
    42f0:	003b      	movs	r3, r7
    42f2:	695b      	ldr	r3, [r3, #20]
    42f4:	2b00      	cmp	r3, #0
    42f6:	da00      	bge.n	42fa <pwm_ramp+0x72>
    42f8:	3301      	adds	r3, #1
    42fa:	105b      	asrs	r3, r3, #1
    42fc:	001a      	movs	r2, r3
    42fe:	4b18      	ldr	r3, [pc, #96]	; (4360 <pwm_ramp+0xd8>)
    4300:	0018      	movs	r0, r3
    4302:	4b18      	ldr	r3, [pc, #96]	; (4364 <pwm_ramp+0xdc>)
    4304:	4798      	blx	r3
		os_sleep(10);
    4306:	200a      	movs	r0, #10
    4308:	4b18      	ldr	r3, [pc, #96]	; (436c <pwm_ramp+0xe4>)
    430a:	4798      	blx	r3
		pwm_set_parameters(&StepperDriver, pwm_params[6], pwm_params[6]/2);
    430c:	003b      	movs	r3, r7
    430e:	699b      	ldr	r3, [r3, #24]
    4310:	0019      	movs	r1, r3
    4312:	003b      	movs	r3, r7
    4314:	699b      	ldr	r3, [r3, #24]
    4316:	2b00      	cmp	r3, #0
    4318:	da00      	bge.n	431c <pwm_ramp+0x94>
    431a:	3301      	adds	r3, #1
    431c:	105b      	asrs	r3, r3, #1
    431e:	001a      	movs	r2, r3
    4320:	4b0f      	ldr	r3, [pc, #60]	; (4360 <pwm_ramp+0xd8>)
    4322:	0018      	movs	r0, r3
    4324:	4b0f      	ldr	r3, [pc, #60]	; (4364 <pwm_ramp+0xdc>)
    4326:	4798      	blx	r3
		os_sleep(10);
    4328:	200a      	movs	r0, #10
    432a:	4b10      	ldr	r3, [pc, #64]	; (436c <pwm_ramp+0xe4>)
    432c:	4798      	blx	r3
		pwm_set_parameters(&StepperDriver, pwm_params[7], pwm_params[7]/2);
    432e:	003b      	movs	r3, r7
    4330:	69db      	ldr	r3, [r3, #28]
    4332:	0019      	movs	r1, r3
    4334:	003b      	movs	r3, r7
    4336:	69db      	ldr	r3, [r3, #28]
    4338:	2b00      	cmp	r3, #0
    433a:	da00      	bge.n	433e <pwm_ramp+0xb6>
    433c:	3301      	adds	r3, #1
    433e:	105b      	asrs	r3, r3, #1
    4340:	001a      	movs	r2, r3
    4342:	4b07      	ldr	r3, [pc, #28]	; (4360 <pwm_ramp+0xd8>)
    4344:	0018      	movs	r0, r3
    4346:	4b07      	ldr	r3, [pc, #28]	; (4364 <pwm_ramp+0xdc>)
    4348:	4798      	blx	r3
		os_sleep(10);//*/
    434a:	200a      	movs	r0, #10
    434c:	4b07      	ldr	r3, [pc, #28]	; (436c <pwm_ramp+0xe4>)
    434e:	4798      	blx	r3
		//pwm_set_parameters(&StepperDriver, pwm_params[8], pwm_params[8]/2);
		//os_sleep(10);//*/
		//pwm_set_parameters(&StepperDriver, pwm_params[9], pwm_params[9]/2);
		//os_sleep(10);
}
    4350:	46c0      	nop			; (mov r8, r8)
    4352:	46bd      	mov	sp, r7
    4354:	b010      	add	sp, #64	; 0x40
    4356:	bd80      	pop	{r7, pc}
    4358:	0000860c 	.word	0x0000860c
    435c:	000083f9 	.word	0x000083f9
    4360:	200027d4 	.word	0x200027d4
    4364:	000017e5 	.word	0x000017e5
    4368:	0000173d 	.word	0x0000173d
    436c:	00005765 	.word	0x00005765

00004370 <manual_mode>:
void manual_mode()
{
    4370:	b580      	push	{r7, lr}
    4372:	b082      	sub	sp, #8
    4374:	af00      	add	r7, sp, #0
		Manual_5	Brush on/off
		Manual_6	Dock
		Manual_7	Manual on
	
	*/
	int dir = RIGHT;
    4376:	2301      	movs	r3, #1
    4378:	607b      	str	r3, [r7, #4]
	while(gpio_get_pin_level(Manual_6) != 0)
    437a:	e112      	b.n	45a2 <manual_mode+0x232>
	{
		

		if(dir == RIGHT)
    437c:	687b      	ldr	r3, [r7, #4]
    437e:	2b01      	cmp	r3, #1
    4380:	d10c      	bne.n	439c <manual_mode+0x2c>
		{
			if (gpio_get_pin_level(Right) == 0 )
    4382:	2014      	movs	r0, #20
    4384:	4b94      	ldr	r3, [pc, #592]	; (45d8 <manual_mode+0x268>)
    4386:	4798      	blx	r3
    4388:	0003      	movs	r3, r0
    438a:	001a      	movs	r2, r3
    438c:	2301      	movs	r3, #1
    438e:	4053      	eors	r3, r2
    4390:	b2db      	uxtb	r3, r3
    4392:	2b00      	cmp	r3, #0
    4394:	d002      	beq.n	439c <manual_mode+0x2c>
			{
				pwm(OFF);
    4396:	2002      	movs	r0, #2
    4398:	4b90      	ldr	r3, [pc, #576]	; (45dc <manual_mode+0x26c>)
    439a:	4798      	blx	r3
			}
		} 
		if(dir == LEFT)
    439c:	687b      	ldr	r3, [r7, #4]
    439e:	2b00      	cmp	r3, #0
    43a0:	d10c      	bne.n	43bc <manual_mode+0x4c>
		{
			if(gpio_get_pin_level(Left)== 0)
    43a2:	2015      	movs	r0, #21
    43a4:	4b8c      	ldr	r3, [pc, #560]	; (45d8 <manual_mode+0x268>)
    43a6:	4798      	blx	r3
    43a8:	0003      	movs	r3, r0
    43aa:	001a      	movs	r2, r3
    43ac:	2301      	movs	r3, #1
    43ae:	4053      	eors	r3, r2
    43b0:	b2db      	uxtb	r3, r3
    43b2:	2b00      	cmp	r3, #0
    43b4:	d002      	beq.n	43bc <manual_mode+0x4c>
			{
				pwm(OFF);
    43b6:	2002      	movs	r0, #2
    43b8:	4b88      	ldr	r3, [pc, #544]	; (45dc <manual_mode+0x26c>)
    43ba:	4798      	blx	r3
			}
		}
		if(gpio_get_pin_level(Manual_1) == 0 && gpio_get_pin_level(Left)== 1)
    43bc:	2009      	movs	r0, #9
    43be:	4b86      	ldr	r3, [pc, #536]	; (45d8 <manual_mode+0x268>)
    43c0:	4798      	blx	r3
    43c2:	0003      	movs	r3, r0
    43c4:	001a      	movs	r2, r3
    43c6:	2301      	movs	r3, #1
    43c8:	4053      	eors	r3, r2
    43ca:	b2db      	uxtb	r3, r3
    43cc:	2b00      	cmp	r3, #0
    43ce:	d025      	beq.n	441c <manual_mode+0xac>
    43d0:	2015      	movs	r0, #21
    43d2:	4b81      	ldr	r3, [pc, #516]	; (45d8 <manual_mode+0x268>)
    43d4:	4798      	blx	r3
    43d6:	1e03      	subs	r3, r0, #0
    43d8:	d020      	beq.n	441c <manual_mode+0xac>
		{
			dir = LEFT;
    43da:	2300      	movs	r3, #0
    43dc:	607b      	str	r3, [r7, #4]
			pwm(OFF);
    43de:	2002      	movs	r0, #2
    43e0:	4b7e      	ldr	r3, [pc, #504]	; (45dc <manual_mode+0x26c>)
    43e2:	4798      	blx	r3
			pwm(LEFT);
    43e4:	2000      	movs	r0, #0
    43e6:	4b7d      	ldr	r3, [pc, #500]	; (45dc <manual_mode+0x26c>)
    43e8:	4798      	blx	r3
			while(gpio_get_pin_level(Manual_1) == 0)
    43ea:	e00c      	b.n	4406 <manual_mode+0x96>
			{
				if(gpio_get_pin_level(Left)== 0)
    43ec:	2015      	movs	r0, #21
    43ee:	4b7a      	ldr	r3, [pc, #488]	; (45d8 <manual_mode+0x268>)
    43f0:	4798      	blx	r3
    43f2:	0003      	movs	r3, r0
    43f4:	001a      	movs	r2, r3
    43f6:	2301      	movs	r3, #1
    43f8:	4053      	eors	r3, r2
    43fa:	b2db      	uxtb	r3, r3
    43fc:	2b00      	cmp	r3, #0
    43fe:	d002      	beq.n	4406 <manual_mode+0x96>
				{
					pwm(OFF);
    4400:	2002      	movs	r0, #2
    4402:	4b76      	ldr	r3, [pc, #472]	; (45dc <manual_mode+0x26c>)
    4404:	4798      	blx	r3
			while(gpio_get_pin_level(Manual_1) == 0)
    4406:	2009      	movs	r0, #9
    4408:	4b73      	ldr	r3, [pc, #460]	; (45d8 <manual_mode+0x268>)
    440a:	4798      	blx	r3
    440c:	0003      	movs	r3, r0
    440e:	001a      	movs	r2, r3
    4410:	2301      	movs	r3, #1
    4412:	4053      	eors	r3, r2
    4414:	b2db      	uxtb	r3, r3
    4416:	2b00      	cmp	r3, #0
    4418:	d1e8      	bne.n	43ec <manual_mode+0x7c>
		if(gpio_get_pin_level(Manual_1) == 0 && gpio_get_pin_level(Left)== 1)
    441a:	e0c2      	b.n	45a2 <manual_mode+0x232>
				}
			}
		}
		else if(gpio_get_pin_level(Manual_2) == 0 && gpio_get_pin_level(Right) == 1)
    441c:	200a      	movs	r0, #10
    441e:	4b6e      	ldr	r3, [pc, #440]	; (45d8 <manual_mode+0x268>)
    4420:	4798      	blx	r3
    4422:	0003      	movs	r3, r0
    4424:	001a      	movs	r2, r3
    4426:	2301      	movs	r3, #1
    4428:	4053      	eors	r3, r2
    442a:	b2db      	uxtb	r3, r3
    442c:	2b00      	cmp	r3, #0
    442e:	d025      	beq.n	447c <manual_mode+0x10c>
    4430:	2014      	movs	r0, #20
    4432:	4b69      	ldr	r3, [pc, #420]	; (45d8 <manual_mode+0x268>)
    4434:	4798      	blx	r3
    4436:	1e03      	subs	r3, r0, #0
    4438:	d020      	beq.n	447c <manual_mode+0x10c>
		{
			dir = RIGHT;
    443a:	2301      	movs	r3, #1
    443c:	607b      	str	r3, [r7, #4]
			pwm(OFF);
    443e:	2002      	movs	r0, #2
    4440:	4b66      	ldr	r3, [pc, #408]	; (45dc <manual_mode+0x26c>)
    4442:	4798      	blx	r3
			pwm(RIGHT);
    4444:	2001      	movs	r0, #1
    4446:	4b65      	ldr	r3, [pc, #404]	; (45dc <manual_mode+0x26c>)
    4448:	4798      	blx	r3
			while(gpio_get_pin_level(Manual_2) == 0)
    444a:	e00c      	b.n	4466 <manual_mode+0xf6>
			{
				if (gpio_get_pin_level(Right) == 0 )
    444c:	2014      	movs	r0, #20
    444e:	4b62      	ldr	r3, [pc, #392]	; (45d8 <manual_mode+0x268>)
    4450:	4798      	blx	r3
    4452:	0003      	movs	r3, r0
    4454:	001a      	movs	r2, r3
    4456:	2301      	movs	r3, #1
    4458:	4053      	eors	r3, r2
    445a:	b2db      	uxtb	r3, r3
    445c:	2b00      	cmp	r3, #0
    445e:	d002      	beq.n	4466 <manual_mode+0xf6>
				{
					pwm(OFF);
    4460:	2002      	movs	r0, #2
    4462:	4b5e      	ldr	r3, [pc, #376]	; (45dc <manual_mode+0x26c>)
    4464:	4798      	blx	r3
			while(gpio_get_pin_level(Manual_2) == 0)
    4466:	200a      	movs	r0, #10
    4468:	4b5b      	ldr	r3, [pc, #364]	; (45d8 <manual_mode+0x268>)
    446a:	4798      	blx	r3
    446c:	0003      	movs	r3, r0
    446e:	001a      	movs	r2, r3
    4470:	2301      	movs	r3, #1
    4472:	4053      	eors	r3, r2
    4474:	b2db      	uxtb	r3, r3
    4476:	2b00      	cmp	r3, #0
    4478:	d1e8      	bne.n	444c <manual_mode+0xdc>
		else if(gpio_get_pin_level(Manual_2) == 0 && gpio_get_pin_level(Right) == 1)
    447a:	e092      	b.n	45a2 <manual_mode+0x232>
				}
			}
		}
		else if(gpio_get_pin_level(Manual_3) == 0)
    447c:	202e      	movs	r0, #46	; 0x2e
    447e:	4b56      	ldr	r3, [pc, #344]	; (45d8 <manual_mode+0x268>)
    4480:	4798      	blx	r3
    4482:	0003      	movs	r3, r0
    4484:	001a      	movs	r2, r3
    4486:	2301      	movs	r3, #1
    4488:	4053      	eors	r3, r2
    448a:	b2db      	uxtb	r3, r3
    448c:	2b00      	cmp	r3, #0
    448e:	d01a      	beq.n	44c6 <manual_mode+0x156>
		{
			pwm(OFF);
    4490:	2002      	movs	r0, #2
    4492:	4b52      	ldr	r3, [pc, #328]	; (45dc <manual_mode+0x26c>)
    4494:	4798      	blx	r3
			UART_Send_Buffer[0] = 's';
    4496:	4b52      	ldr	r3, [pc, #328]	; (45e0 <manual_mode+0x270>)
    4498:	2273      	movs	r2, #115	; 0x73
    449a:	701a      	strb	r2, [r3, #0]
			UART_Send_Buffer[1] = '6';
    449c:	4b50      	ldr	r3, [pc, #320]	; (45e0 <manual_mode+0x270>)
    449e:	2236      	movs	r2, #54	; 0x36
    44a0:	705a      	strb	r2, [r3, #1]
			UART_Send_Buffer[2] = '\0';
    44a2:	4b4f      	ldr	r3, [pc, #316]	; (45e0 <manual_mode+0x270>)
    44a4:	2200      	movs	r2, #0
    44a6:	709a      	strb	r2, [r3, #2]
			send_message(3);//************************************************************************ MOVEUP_INFINITE	
    44a8:	2003      	movs	r0, #3
    44aa:	4b4e      	ldr	r3, [pc, #312]	; (45e4 <manual_mode+0x274>)
    44ac:	4798      	blx	r3
			while(gpio_get_pin_level(Manual_3) == 0);
    44ae:	46c0      	nop			; (mov r8, r8)
    44b0:	202e      	movs	r0, #46	; 0x2e
    44b2:	4b49      	ldr	r3, [pc, #292]	; (45d8 <manual_mode+0x268>)
    44b4:	4798      	blx	r3
    44b6:	0003      	movs	r3, r0
    44b8:	001a      	movs	r2, r3
    44ba:	2301      	movs	r3, #1
    44bc:	4053      	eors	r3, r2
    44be:	b2db      	uxtb	r3, r3
    44c0:	2b00      	cmp	r3, #0
    44c2:	d1f5      	bne.n	44b0 <manual_mode+0x140>
    44c4:	e06d      	b.n	45a2 <manual_mode+0x232>
		}
		else if(gpio_get_pin_level(Manual_4) == 0)
    44c6:	203e      	movs	r0, #62	; 0x3e
    44c8:	4b43      	ldr	r3, [pc, #268]	; (45d8 <manual_mode+0x268>)
    44ca:	4798      	blx	r3
    44cc:	0003      	movs	r3, r0
    44ce:	001a      	movs	r2, r3
    44d0:	2301      	movs	r3, #1
    44d2:	4053      	eors	r3, r2
    44d4:	b2db      	uxtb	r3, r3
    44d6:	2b00      	cmp	r3, #0
    44d8:	d01a      	beq.n	4510 <manual_mode+0x1a0>
		{
			pwm(OFF);
    44da:	2002      	movs	r0, #2
    44dc:	4b3f      	ldr	r3, [pc, #252]	; (45dc <manual_mode+0x26c>)
    44de:	4798      	blx	r3
			UART_Send_Buffer[0] = 's';
    44e0:	4b3f      	ldr	r3, [pc, #252]	; (45e0 <manual_mode+0x270>)
    44e2:	2273      	movs	r2, #115	; 0x73
    44e4:	701a      	strb	r2, [r3, #0]
			UART_Send_Buffer[1] = '7';
    44e6:	4b3e      	ldr	r3, [pc, #248]	; (45e0 <manual_mode+0x270>)
    44e8:	2237      	movs	r2, #55	; 0x37
    44ea:	705a      	strb	r2, [r3, #1]
			UART_Send_Buffer[2] = '\0';
    44ec:	4b3c      	ldr	r3, [pc, #240]	; (45e0 <manual_mode+0x270>)
    44ee:	2200      	movs	r2, #0
    44f0:	709a      	strb	r2, [r3, #2]
			send_message(3);//************************************************************************ MOVEDOWN_INFINITE
    44f2:	2003      	movs	r0, #3
    44f4:	4b3b      	ldr	r3, [pc, #236]	; (45e4 <manual_mode+0x274>)
    44f6:	4798      	blx	r3
			while(gpio_get_pin_level(Manual_4) == 0);
    44f8:	46c0      	nop			; (mov r8, r8)
    44fa:	203e      	movs	r0, #62	; 0x3e
    44fc:	4b36      	ldr	r3, [pc, #216]	; (45d8 <manual_mode+0x268>)
    44fe:	4798      	blx	r3
    4500:	0003      	movs	r3, r0
    4502:	001a      	movs	r2, r3
    4504:	2301      	movs	r3, #1
    4506:	4053      	eors	r3, r2
    4508:	b2db      	uxtb	r3, r3
    450a:	2b00      	cmp	r3, #0
    450c:	d1f5      	bne.n	44fa <manual_mode+0x18a>
    450e:	e048      	b.n	45a2 <manual_mode+0x232>
		}
		else if(gpio_get_pin_level(Manual_5) == 0)
    4510:	203f      	movs	r0, #63	; 0x3f
    4512:	4b31      	ldr	r3, [pc, #196]	; (45d8 <manual_mode+0x268>)
    4514:	4798      	blx	r3
    4516:	0003      	movs	r3, r0
    4518:	001a      	movs	r2, r3
    451a:	2301      	movs	r3, #1
    451c:	4053      	eors	r3, r2
    451e:	b2db      	uxtb	r3, r3
    4520:	2b00      	cmp	r3, #0
    4522:	d01a      	beq.n	455a <manual_mode+0x1ea>
		{
			pwm(OFF);
    4524:	2002      	movs	r0, #2
    4526:	4b2d      	ldr	r3, [pc, #180]	; (45dc <manual_mode+0x26c>)
    4528:	4798      	blx	r3
			UART_Send_Buffer[0] = 's';
    452a:	4b2d      	ldr	r3, [pc, #180]	; (45e0 <manual_mode+0x270>)
    452c:	2273      	movs	r2, #115	; 0x73
    452e:	701a      	strb	r2, [r3, #0]
			UART_Send_Buffer[1] = '2';
    4530:	4b2b      	ldr	r3, [pc, #172]	; (45e0 <manual_mode+0x270>)
    4532:	2232      	movs	r2, #50	; 0x32
    4534:	705a      	strb	r2, [r3, #1]
			UART_Send_Buffer[2] = '\0';
    4536:	4b2a      	ldr	r3, [pc, #168]	; (45e0 <manual_mode+0x270>)
    4538:	2200      	movs	r2, #0
    453a:	709a      	strb	r2, [r3, #2]
			send_message(3);//************************************************************************ ToggleBrush
    453c:	2003      	movs	r0, #3
    453e:	4b29      	ldr	r3, [pc, #164]	; (45e4 <manual_mode+0x274>)
    4540:	4798      	blx	r3
			while(gpio_get_pin_level(Manual_5) == 0);
    4542:	46c0      	nop			; (mov r8, r8)
    4544:	203f      	movs	r0, #63	; 0x3f
    4546:	4b24      	ldr	r3, [pc, #144]	; (45d8 <manual_mode+0x268>)
    4548:	4798      	blx	r3
    454a:	0003      	movs	r3, r0
    454c:	001a      	movs	r2, r3
    454e:	2301      	movs	r3, #1
    4550:	4053      	eors	r3, r2
    4552:	b2db      	uxtb	r3, r3
    4554:	2b00      	cmp	r3, #0
    4556:	d1f5      	bne.n	4544 <manual_mode+0x1d4>
    4558:	e023      	b.n	45a2 <manual_mode+0x232>
		}
		else if(gpio_get_pin_level(Manual_7) == 0)
    455a:	2030      	movs	r0, #48	; 0x30
    455c:	4b1e      	ldr	r3, [pc, #120]	; (45d8 <manual_mode+0x268>)
    455e:	4798      	blx	r3
    4560:	0003      	movs	r3, r0
    4562:	001a      	movs	r2, r3
    4564:	2301      	movs	r3, #1
    4566:	4053      	eors	r3, r2
    4568:	b2db      	uxtb	r3, r3
    456a:	2b00      	cmp	r3, #0
    456c:	d019      	beq.n	45a2 <manual_mode+0x232>
		{
			pwm(OFF);
    456e:	2002      	movs	r0, #2
    4570:	4b1a      	ldr	r3, [pc, #104]	; (45dc <manual_mode+0x26c>)
    4572:	4798      	blx	r3
			UART_Send_Buffer[0] = 's';
    4574:	4b1a      	ldr	r3, [pc, #104]	; (45e0 <manual_mode+0x270>)
    4576:	2273      	movs	r2, #115	; 0x73
    4578:	701a      	strb	r2, [r3, #0]
			UART_Send_Buffer[1] = '8';
    457a:	4b19      	ldr	r3, [pc, #100]	; (45e0 <manual_mode+0x270>)
    457c:	2238      	movs	r2, #56	; 0x38
    457e:	705a      	strb	r2, [r3, #1]
			UART_Send_Buffer[2] = '\0';
    4580:	4b17      	ldr	r3, [pc, #92]	; (45e0 <manual_mode+0x270>)
    4582:	2200      	movs	r2, #0
    4584:	709a      	strb	r2, [r3, #2]
			send_message(3);//************************************************************************ FULL_STOP
    4586:	2003      	movs	r0, #3
    4588:	4b16      	ldr	r3, [pc, #88]	; (45e4 <manual_mode+0x274>)
    458a:	4798      	blx	r3
			while(gpio_get_pin_level(Manual_7) == 0);
    458c:	46c0      	nop			; (mov r8, r8)
    458e:	2030      	movs	r0, #48	; 0x30
    4590:	4b11      	ldr	r3, [pc, #68]	; (45d8 <manual_mode+0x268>)
    4592:	4798      	blx	r3
    4594:	0003      	movs	r3, r0
    4596:	001a      	movs	r2, r3
    4598:	2301      	movs	r3, #1
    459a:	4053      	eors	r3, r2
    459c:	b2db      	uxtb	r3, r3
    459e:	2b00      	cmp	r3, #0
    45a0:	d1f5      	bne.n	458e <manual_mode+0x21e>
	while(gpio_get_pin_level(Manual_6) != 0)
    45a2:	2023      	movs	r0, #35	; 0x23
    45a4:	4b0c      	ldr	r3, [pc, #48]	; (45d8 <manual_mode+0x268>)
    45a6:	4798      	blx	r3
    45a8:	1e03      	subs	r3, r0, #0
    45aa:	d000      	beq.n	45ae <manual_mode+0x23e>
    45ac:	e6e6      	b.n	437c <manual_mode+0xc>
		}
	}
	pwm(OFF);
    45ae:	2002      	movs	r0, #2
    45b0:	4b0a      	ldr	r3, [pc, #40]	; (45dc <manual_mode+0x26c>)
    45b2:	4798      	blx	r3
	UART_Send_Buffer[0] = 's';
    45b4:	4b0a      	ldr	r3, [pc, #40]	; (45e0 <manual_mode+0x270>)
    45b6:	2273      	movs	r2, #115	; 0x73
    45b8:	701a      	strb	r2, [r3, #0]
	UART_Send_Buffer[1] = '8';
    45ba:	4b09      	ldr	r3, [pc, #36]	; (45e0 <manual_mode+0x270>)
    45bc:	2238      	movs	r2, #56	; 0x38
    45be:	705a      	strb	r2, [r3, #1]
	UART_Send_Buffer[2] = '\0';
    45c0:	4b07      	ldr	r3, [pc, #28]	; (45e0 <manual_mode+0x270>)
    45c2:	2200      	movs	r2, #0
    45c4:	709a      	strb	r2, [r3, #2]
	send_message(3);//************************************************************************ FULL_STOP
    45c6:	2003      	movs	r0, #3
    45c8:	4b06      	ldr	r3, [pc, #24]	; (45e4 <manual_mode+0x274>)
    45ca:	4798      	blx	r3
	dock();
    45cc:	4b06      	ldr	r3, [pc, #24]	; (45e8 <manual_mode+0x278>)
    45ce:	4798      	blx	r3
}
    45d0:	46c0      	nop			; (mov r8, r8)
    45d2:	46bd      	mov	sp, r7
    45d4:	b002      	add	sp, #8
    45d6:	bd80      	pop	{r7, pc}
    45d8:	00003bd1 	.word	0x00003bd1
    45dc:	00004215 	.word	0x00004215
    45e0:	20002858 	.word	0x20002858
    45e4:	000040a9 	.word	0x000040a9
    45e8:	0000405d 	.word	0x0000405d

000045ec <check_schedule>:
int check_schedule()
{
    45ec:	b580      	push	{r7, lr}
    45ee:	af00      	add	r7, sp, #0
	
	return 0;
    45f0:	2300      	movs	r3, #0
}
    45f2:	0018      	movs	r0, r3
    45f4:	46bd      	mov	sp, r7
    45f6:	bd80      	pop	{r7, pc}

000045f8 <reset_buffer>:
void reset_buffer(uint8_t *buffer, int length)
{
    45f8:	b580      	push	{r7, lr}
    45fa:	b084      	sub	sp, #16
    45fc:	af00      	add	r7, sp, #0
    45fe:	6078      	str	r0, [r7, #4]
    4600:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < length; i++)
    4602:	2300      	movs	r3, #0
    4604:	60fb      	str	r3, [r7, #12]
    4606:	e007      	b.n	4618 <reset_buffer+0x20>
	{
		buffer[i] = '\0';
    4608:	68fb      	ldr	r3, [r7, #12]
    460a:	687a      	ldr	r2, [r7, #4]
    460c:	18d3      	adds	r3, r2, r3
    460e:	2200      	movs	r2, #0
    4610:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < length; i++)
    4612:	68fb      	ldr	r3, [r7, #12]
    4614:	3301      	adds	r3, #1
    4616:	60fb      	str	r3, [r7, #12]
    4618:	68fa      	ldr	r2, [r7, #12]
    461a:	683b      	ldr	r3, [r7, #0]
    461c:	429a      	cmp	r2, r3
    461e:	dbf3      	blt.n	4608 <reset_buffer+0x10>
	}
}
    4620:	46c0      	nop			; (mov r8, r8)
    4622:	46bd      	mov	sp, r7
    4624:	b004      	add	sp, #16
    4626:	bd80      	pop	{r7, pc}

00004628 <sem_init>:

/**
 * \brief Semaphore initialization
 */
int32_t sem_init(sem_t *sem, uint32_t count)
{
    4628:	b580      	push	{r7, lr}
    462a:	b082      	sub	sp, #8
    462c:	af00      	add	r7, sp, #0
    462e:	6078      	str	r0, [r7, #4]
    4630:	6039      	str	r1, [r7, #0]
	ASSERT(count <= SEMAPHORE_MAX_COUNT);
    4632:	683a      	ldr	r2, [r7, #0]
    4634:	2101      	movs	r1, #1
    4636:	2300      	movs	r3, #0
    4638:	4291      	cmp	r1, r2
    463a:	415b      	adcs	r3, r3
    463c:	b2db      	uxtb	r3, r3
    463e:	490c      	ldr	r1, [pc, #48]	; (4670 <sem_init+0x48>)
    4640:	222b      	movs	r2, #43	; 0x2b
    4642:	0018      	movs	r0, r3
    4644:	4b0b      	ldr	r3, [pc, #44]	; (4674 <sem_init+0x4c>)
    4646:	4798      	blx	r3

	*sem = xSemaphoreCreateCounting((uint32_t)SEMAPHORE_MAX_COUNT, count);
    4648:	683b      	ldr	r3, [r7, #0]
    464a:	0019      	movs	r1, r3
    464c:	2001      	movs	r0, #1
    464e:	4b0a      	ldr	r3, [pc, #40]	; (4678 <sem_init+0x50>)
    4650:	4798      	blx	r3
    4652:	0002      	movs	r2, r0
    4654:	687b      	ldr	r3, [r7, #4]
    4656:	601a      	str	r2, [r3, #0]

	return *sem ? ERR_NONE : ERR_NOT_INITIALIZED;
    4658:	687b      	ldr	r3, [r7, #4]
    465a:	681b      	ldr	r3, [r3, #0]
    465c:	2b00      	cmp	r3, #0
    465e:	d001      	beq.n	4664 <sem_init+0x3c>
    4660:	2300      	movs	r3, #0
    4662:	e001      	b.n	4668 <sem_init+0x40>
    4664:	2314      	movs	r3, #20
    4666:	425b      	negs	r3, r3
}
    4668:	0018      	movs	r0, r3
    466a:	46bd      	mov	sp, r7
    466c:	b002      	add	sp, #8
    466e:	bd80      	pop	{r7, pc}
    4670:	0000864c 	.word	0x0000864c
    4674:	00001b19 	.word	0x00001b19
    4678:	00004c6d 	.word	0x00004c6d

0000467c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise(List_t *const pxList)
{
    467c:	b580      	push	{r7, lr}
    467e:	b082      	sub	sp, #8
    4680:	af00      	add	r7, sp, #0
    4682:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    4684:	687b      	ldr	r3, [r7, #4]
    4686:	3308      	adds	r3, #8
    4688:	001a      	movs	r2, r3
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	605a      	str	r2, [r3, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    468e:	687b      	ldr	r3, [r7, #4]
    4690:	2201      	movs	r2, #1
    4692:	4252      	negs	r2, r2
    4694:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    4696:	687b      	ldr	r3, [r7, #4]
    4698:	3308      	adds	r3, #8
    469a:	001a      	movs	r2, r3
    469c:	687b      	ldr	r3, [r7, #4]
    469e:	60da      	str	r2, [r3, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    46a0:	687b      	ldr	r3, [r7, #4]
    46a2:	3308      	adds	r3, #8
    46a4:	001a      	movs	r2, r3
    46a6:	687b      	ldr	r3, [r7, #4]
    46a8:	611a      	str	r2, [r3, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    46aa:	687b      	ldr	r3, [r7, #4]
    46ac:	2200      	movs	r2, #0
    46ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE(pxList);
	listSET_LIST_INTEGRITY_CHECK_2_VALUE(pxList);
}
    46b0:	46c0      	nop			; (mov r8, r8)
    46b2:	46bd      	mov	sp, r7
    46b4:	b002      	add	sp, #8
    46b6:	bd80      	pop	{r7, pc}

000046b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
    46b8:	b580      	push	{r7, lr}
    46ba:	b082      	sub	sp, #8
    46bc:	af00      	add	r7, sp, #0
    46be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    46c0:	687b      	ldr	r3, [r7, #4]
    46c2:	2200      	movs	r2, #0
    46c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem);
}
    46c6:	46c0      	nop			; (mov r8, r8)
    46c8:	46bd      	mov	sp, r7
    46ca:	b002      	add	sp, #8
    46cc:	bd80      	pop	{r7, pc}

000046ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    46ce:	b580      	push	{r7, lr}
    46d0:	b084      	sub	sp, #16
    46d2:	af00      	add	r7, sp, #0
    46d4:	6078      	str	r0, [r7, #4]
    46d6:	6039      	str	r1, [r7, #0]
	ListItem_t *const pxIndex = pxList->pxIndex;
    46d8:	687b      	ldr	r3, [r7, #4]
    46da:	685b      	ldr	r3, [r3, #4]
    46dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    46de:	683b      	ldr	r3, [r7, #0]
    46e0:	68fa      	ldr	r2, [r7, #12]
    46e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    46e4:	68fb      	ldr	r3, [r7, #12]
    46e6:	689a      	ldr	r2, [r3, #8]
    46e8:	683b      	ldr	r3, [r7, #0]
    46ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    46ec:	68fb      	ldr	r3, [r7, #12]
    46ee:	689b      	ldr	r3, [r3, #8]
    46f0:	683a      	ldr	r2, [r7, #0]
    46f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    46f4:	68fb      	ldr	r3, [r7, #12]
    46f6:	683a      	ldr	r2, [r7, #0]
    46f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    46fa:	683b      	ldr	r3, [r7, #0]
    46fc:	687a      	ldr	r2, [r7, #4]
    46fe:	611a      	str	r2, [r3, #16]

	(pxList->uxNumberOfItems)++;
    4700:	687b      	ldr	r3, [r7, #4]
    4702:	681b      	ldr	r3, [r3, #0]
    4704:	1c5a      	adds	r2, r3, #1
    4706:	687b      	ldr	r3, [r7, #4]
    4708:	601a      	str	r2, [r3, #0]
}
    470a:	46c0      	nop			; (mov r8, r8)
    470c:	46bd      	mov	sp, r7
    470e:	b004      	add	sp, #16
    4710:	bd80      	pop	{r7, pc}

00004712 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    4712:	b580      	push	{r7, lr}
    4714:	b084      	sub	sp, #16
    4716:	af00      	add	r7, sp, #0
    4718:	6078      	str	r0, [r7, #4]
    471a:	6039      	str	r1, [r7, #0]
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    471c:	683b      	ldr	r3, [r7, #0]
    471e:	681b      	ldr	r3, [r3, #0]
    4720:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    4722:	68bb      	ldr	r3, [r7, #8]
    4724:	3301      	adds	r3, #1
    4726:	d103      	bne.n	4730 <vListInsert+0x1e>
		pxIterator = pxList->xListEnd.pxPrevious;
    4728:	687b      	ldr	r3, [r7, #4]
    472a:	691b      	ldr	r3, [r3, #16]
    472c:	60fb      	str	r3, [r7, #12]
    472e:	e00c      	b.n	474a <vListInsert+0x38>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    4730:	687b      	ldr	r3, [r7, #4]
    4732:	3308      	adds	r3, #8
    4734:	60fb      	str	r3, [r7, #12]
    4736:	e002      	b.n	473e <vListInsert+0x2c>
		     pxIterator
		     = pxIterator
    4738:	68fb      	ldr	r3, [r7, #12]
    473a:	685b      	ldr	r3, [r3, #4]
    473c:	60fb      	str	r3, [r7, #12]
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    473e:	68fb      	ldr	r3, [r7, #12]
    4740:	685b      	ldr	r3, [r3, #4]
    4742:	681a      	ldr	r2, [r3, #0]
    4744:	68bb      	ldr	r3, [r7, #8]
    4746:	429a      	cmp	r2, r3
    4748:	d9f6      	bls.n	4738 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    474a:	68fb      	ldr	r3, [r7, #12]
    474c:	685a      	ldr	r2, [r3, #4]
    474e:	683b      	ldr	r3, [r7, #0]
    4750:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    4752:	683b      	ldr	r3, [r7, #0]
    4754:	685b      	ldr	r3, [r3, #4]
    4756:	683a      	ldr	r2, [r7, #0]
    4758:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    475a:	683b      	ldr	r3, [r7, #0]
    475c:	68fa      	ldr	r2, [r7, #12]
    475e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext                = pxNewListItem;
    4760:	68fb      	ldr	r3, [r7, #12]
    4762:	683a      	ldr	r2, [r7, #0]
    4764:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    4766:	683b      	ldr	r3, [r7, #0]
    4768:	687a      	ldr	r2, [r7, #4]
    476a:	611a      	str	r2, [r3, #16]

	(pxList->uxNumberOfItems)++;
    476c:	687b      	ldr	r3, [r7, #4]
    476e:	681b      	ldr	r3, [r3, #0]
    4770:	1c5a      	adds	r2, r3, #1
    4772:	687b      	ldr	r3, [r7, #4]
    4774:	601a      	str	r2, [r3, #0]
}
    4776:	46c0      	nop			; (mov r8, r8)
    4778:	46bd      	mov	sp, r7
    477a:	b004      	add	sp, #16
    477c:	bd80      	pop	{r7, pc}

0000477e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
    477e:	b580      	push	{r7, lr}
    4780:	b084      	sub	sp, #16
    4782:	af00      	add	r7, sp, #0
    4784:	6078      	str	r0, [r7, #4]
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    4786:	687b      	ldr	r3, [r7, #4]
    4788:	691b      	ldr	r3, [r3, #16]
    478a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    478c:	687b      	ldr	r3, [r7, #4]
    478e:	685b      	ldr	r3, [r3, #4]
    4790:	687a      	ldr	r2, [r7, #4]
    4792:	6892      	ldr	r2, [r2, #8]
    4794:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    4796:	687b      	ldr	r3, [r7, #4]
    4798:	689b      	ldr	r3, [r3, #8]
    479a:	687a      	ldr	r2, [r7, #4]
    479c:	6852      	ldr	r2, [r2, #4]
    479e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    47a0:	68fb      	ldr	r3, [r7, #12]
    47a2:	685a      	ldr	r2, [r3, #4]
    47a4:	687b      	ldr	r3, [r7, #4]
    47a6:	429a      	cmp	r2, r3
    47a8:	d103      	bne.n	47b2 <uxListRemove+0x34>
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    47aa:	687b      	ldr	r3, [r7, #4]
    47ac:	689a      	ldr	r2, [r3, #8]
    47ae:	68fb      	ldr	r3, [r7, #12]
    47b0:	605a      	str	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    47b2:	687b      	ldr	r3, [r7, #4]
    47b4:	2200      	movs	r2, #0
    47b6:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
    47b8:	68fb      	ldr	r3, [r7, #12]
    47ba:	681b      	ldr	r3, [r3, #0]
    47bc:	1e5a      	subs	r2, r3, #1
    47be:	68fb      	ldr	r3, [r7, #12]
    47c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    47c2:	68fb      	ldr	r3, [r7, #12]
    47c4:	681b      	ldr	r3, [r3, #0]
}
    47c6:	0018      	movs	r0, r3
    47c8:	46bd      	mov	sp, r7
    47ca:	b004      	add	sp, #16
    47cc:	bd80      	pop	{r7, pc}
	...

000047d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack(StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters)
{
    47d0:	b580      	push	{r7, lr}
    47d2:	b084      	sub	sp, #16
    47d4:	af00      	add	r7, sp, #0
    47d6:	60f8      	str	r0, [r7, #12]
    47d8:	60b9      	str	r1, [r7, #8]
    47da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    47dc:	68fb      	ldr	r3, [r7, #12]
    47de:	3b04      	subs	r3, #4
    47e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    47e2:	68fb      	ldr	r3, [r7, #12]
    47e4:	2280      	movs	r2, #128	; 0x80
    47e6:	0452      	lsls	r2, r2, #17
    47e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    47ea:	68fb      	ldr	r3, [r7, #12]
    47ec:	3b04      	subs	r3, #4
    47ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t)pxCode; /* PC */
    47f0:	68ba      	ldr	r2, [r7, #8]
    47f2:	68fb      	ldr	r3, [r7, #12]
    47f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    47f6:	68fb      	ldr	r3, [r7, #12]
    47f8:	3b04      	subs	r3, #4
    47fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    47fc:	4a08      	ldr	r2, [pc, #32]	; (4820 <pxPortInitialiseStack+0x50>)
    47fe:	68fb      	ldr	r3, [r7, #12]
    4800:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;                                    /* R12, R3, R2 and R1. */
    4802:	68fb      	ldr	r3, [r7, #12]
    4804:	3b14      	subs	r3, #20
    4806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t)pvParameters;            /* R0 */
    4808:	687a      	ldr	r2, [r7, #4]
    480a:	68fb      	ldr	r3, [r7, #12]
    480c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;                                    /* R11..R4. */
    480e:	68fb      	ldr	r3, [r7, #12]
    4810:	3b20      	subs	r3, #32
    4812:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    4814:	68fb      	ldr	r3, [r7, #12]
}
    4816:	0018      	movs	r0, r3
    4818:	46bd      	mov	sp, r7
    481a:	b004      	add	sp, #16
    481c:	bd80      	pop	{r7, pc}
    481e:	46c0      	nop			; (mov r8, r8)
    4820:	00004825 	.word	0x00004825

00004824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    4824:	b580      	push	{r7, lr}
    4826:	b082      	sub	sp, #8
    4828:	af00      	add	r7, sp, #0
	volatile uint32_t ulDummy = 0UL;
    482a:	2300      	movs	r3, #0
    482c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    482e:	4b07      	ldr	r3, [pc, #28]	; (484c <prvTaskExitError+0x28>)
    4830:	681b      	ldr	r3, [r3, #0]
    4832:	3301      	adds	r3, #1
    4834:	d001      	beq.n	483a <prvTaskExitError+0x16>
    4836:	b672      	cpsid	i
    4838:	e7fe      	b.n	4838 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
    483a:	b672      	cpsid	i
	while (ulDummy == 0) {
    483c:	46c0      	nop			; (mov r8, r8)
    483e:	687b      	ldr	r3, [r7, #4]
    4840:	2b00      	cmp	r3, #0
    4842:	d0fc      	beq.n	483e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    4844:	46c0      	nop			; (mov r8, r8)
    4846:	46bd      	mov	sp, r7
    4848:	b002      	add	sp, #8
    484a:	bd80      	pop	{r7, pc}
    484c:	20000028 	.word	0x20000028

00004850 <SVCall_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void)
{
    4850:	b580      	push	{r7, lr}
    4852:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    4854:	46c0      	nop			; (mov r8, r8)
    4856:	46bd      	mov	sp, r7
    4858:	bd80      	pop	{r7, pc}
    485a:	0000      	movs	r0, r0
    485c:	0000      	movs	r0, r0
	...

00004860 <vPortStartFirstTask>:
void vPortStartFirstTask(void)
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    4860:	4a0b      	ldr	r2, [pc, #44]	; (4890 <pxCurrentTCBConst2>)
    4862:	6813      	ldr	r3, [r2, #0]
    4864:	6818      	ldr	r0, [r3, #0]
    4866:	3020      	adds	r0, #32
    4868:	f380 8809 	msr	PSP, r0
    486c:	2002      	movs	r0, #2
    486e:	f380 8814 	msr	CONTROL, r0
    4872:	f3bf 8f6f 	isb	sy
    4876:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    4878:	46ae      	mov	lr, r5
    487a:	bc08      	pop	{r3}
    487c:	bc04      	pop	{r2}
    487e:	b662      	cpsie	i
    4880:	4718      	bx	r3
    4882:	46c0      	nop			; (mov r8, r8)
    4884:	46c0      	nop			; (mov r8, r8)
    4886:	46c0      	nop			; (mov r8, r8)
    4888:	46c0      	nop			; (mov r8, r8)
    488a:	46c0      	nop			; (mov r8, r8)
    488c:	46c0      	nop			; (mov r8, r8)
    488e:	46c0      	nop			; (mov r8, r8)

00004890 <pxCurrentTCBConst2>:
    4890:	20002668 	.word	0x20002668
	    "	cpsie i						\n"     /* The first task has its context and interrupts can be enabled. */
	    "	bx   r3						\n"     /* Finally, jump to the user defined task code. */
	    "								\n"
	    "	.align 4					\n"
	    "pxCurrentTCBConst2: .word pxCurrentTCB	  ");
}
    4894:	46c0      	nop			; (mov r8, r8)
    4896:	46c0      	nop			; (mov r8, r8)

00004898 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void)
{
    4898:	b580      	push	{r7, lr}
    489a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    489c:	4b0e      	ldr	r3, [pc, #56]	; (48d8 <xPortStartScheduler+0x40>)
    489e:	4a0e      	ldr	r2, [pc, #56]	; (48d8 <xPortStartScheduler+0x40>)
    48a0:	6812      	ldr	r2, [r2, #0]
    48a2:	21ff      	movs	r1, #255	; 0xff
    48a4:	0409      	lsls	r1, r1, #16
    48a6:	430a      	orrs	r2, r1
    48a8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    48aa:	4b0b      	ldr	r3, [pc, #44]	; (48d8 <xPortStartScheduler+0x40>)
    48ac:	4a0a      	ldr	r2, [pc, #40]	; (48d8 <xPortStartScheduler+0x40>)
    48ae:	6812      	ldr	r2, [r2, #0]
    48b0:	21ff      	movs	r1, #255	; 0xff
    48b2:	0609      	lsls	r1, r1, #24
    48b4:	430a      	orrs	r2, r1
    48b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    48b8:	4b08      	ldr	r3, [pc, #32]	; (48dc <xPortStartScheduler+0x44>)
    48ba:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    48bc:	4b08      	ldr	r3, [pc, #32]	; (48e0 <xPortStartScheduler+0x48>)
    48be:	2200      	movs	r2, #0
    48c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    48c2:	4b08      	ldr	r3, [pc, #32]	; (48e4 <xPortStartScheduler+0x4c>)
    48c4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
    48c6:	4b08      	ldr	r3, [pc, #32]	; (48e8 <xPortStartScheduler+0x50>)
    48c8:	4798      	blx	r3
	prvTaskExitError();
    48ca:	4b08      	ldr	r3, [pc, #32]	; (48ec <xPortStartScheduler+0x54>)
    48cc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    48ce:	2300      	movs	r3, #0
}
    48d0:	0018      	movs	r0, r3
    48d2:	46bd      	mov	sp, r7
    48d4:	bd80      	pop	{r7, pc}
    48d6:	46c0      	nop			; (mov r8, r8)
    48d8:	e000ed20 	.word	0xe000ed20
    48dc:	00004a09 	.word	0x00004a09
    48e0:	20000028 	.word	0x20000028
    48e4:	00004861 	.word	0x00004861
    48e8:	00005b25 	.word	0x00005b25
    48ec:	00004825 	.word	0x00004825

000048f0 <vPortYield>:
	configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortYield(void)
{
    48f0:	b580      	push	{r7, lr}
    48f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    48f4:	4b05      	ldr	r3, [pc, #20]	; (490c <vPortYield+0x1c>)
    48f6:	2280      	movs	r2, #128	; 0x80
    48f8:	0552      	lsls	r2, r2, #21
    48fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile("dsb" ::: "memory");
    48fc:	f3bf 8f4f 	dsb	sy
	__asm volatile("isb");
    4900:	f3bf 8f6f 	isb	sy
}
    4904:	46c0      	nop			; (mov r8, r8)
    4906:	46bd      	mov	sp, r7
    4908:	bd80      	pop	{r7, pc}
    490a:	46c0      	nop			; (mov r8, r8)
    490c:	e000ed04 	.word	0xe000ed04

00004910 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical(void)
{
    4910:	b580      	push	{r7, lr}
    4912:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    4914:	b672      	cpsid	i
	uxCriticalNesting++;
    4916:	4b06      	ldr	r3, [pc, #24]	; (4930 <vPortEnterCritical+0x20>)
    4918:	681b      	ldr	r3, [r3, #0]
    491a:	1c5a      	adds	r2, r3, #1
    491c:	4b04      	ldr	r3, [pc, #16]	; (4930 <vPortEnterCritical+0x20>)
    491e:	601a      	str	r2, [r3, #0]
	__asm volatile("dsb" ::: "memory");
    4920:	f3bf 8f4f 	dsb	sy
	__asm volatile("isb");
    4924:	f3bf 8f6f 	isb	sy
}
    4928:	46c0      	nop			; (mov r8, r8)
    492a:	46bd      	mov	sp, r7
    492c:	bd80      	pop	{r7, pc}
    492e:	46c0      	nop			; (mov r8, r8)
    4930:	20000028 	.word	0x20000028

00004934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void)
{
    4934:	b580      	push	{r7, lr}
    4936:	af00      	add	r7, sp, #0
	configASSERT(uxCriticalNesting);
    4938:	4b09      	ldr	r3, [pc, #36]	; (4960 <vPortExitCritical+0x2c>)
    493a:	681b      	ldr	r3, [r3, #0]
    493c:	2b00      	cmp	r3, #0
    493e:	d101      	bne.n	4944 <vPortExitCritical+0x10>
    4940:	b672      	cpsid	i
    4942:	e7fe      	b.n	4942 <vPortExitCritical+0xe>
	uxCriticalNesting--;
    4944:	4b06      	ldr	r3, [pc, #24]	; (4960 <vPortExitCritical+0x2c>)
    4946:	681b      	ldr	r3, [r3, #0]
    4948:	1e5a      	subs	r2, r3, #1
    494a:	4b05      	ldr	r3, [pc, #20]	; (4960 <vPortExitCritical+0x2c>)
    494c:	601a      	str	r2, [r3, #0]
	if (uxCriticalNesting == 0) {
    494e:	4b04      	ldr	r3, [pc, #16]	; (4960 <vPortExitCritical+0x2c>)
    4950:	681b      	ldr	r3, [r3, #0]
    4952:	2b00      	cmp	r3, #0
    4954:	d100      	bne.n	4958 <vPortExitCritical+0x24>
		portENABLE_INTERRUPTS();
    4956:	b662      	cpsie	i
	}
}
    4958:	46c0      	nop			; (mov r8, r8)
    495a:	46bd      	mov	sp, r7
    495c:	bd80      	pop	{r7, pc}
    495e:	46c0      	nop			; (mov r8, r8)
    4960:	20000028 	.word	0x20000028

00004964 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR(void)
{
	__asm volatile(" mrs r0, PRIMASK	\n"
    4964:	f3ef 8010 	mrs	r0, PRIMASK
    4968:	b672      	cpsid	i
    496a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
    496c:	46c0      	nop			; (mov r8, r8)
    496e:	0018      	movs	r0, r3

00004970 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR(__attribute__((unused)) uint32_t ulMask)
{
	__asm volatile(" msr PRIMASK, r0	\n"
    4970:	f380 8810 	msr	PRIMASK, r0
    4974:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	(void)ulMask;
#endif
}
    4976:	46c0      	nop			; (mov r8, r8)
	...

00004980 <PendSV_Handler>:

void xPortPendSVHandler(void)
{
	/* This is a naked function. */

	__asm volatile(
    4980:	f3ef 8009 	mrs	r0, PSP
    4984:	4b0e      	ldr	r3, [pc, #56]	; (49c0 <pxCurrentTCBConst>)
    4986:	681a      	ldr	r2, [r3, #0]
    4988:	3820      	subs	r0, #32
    498a:	6010      	str	r0, [r2, #0]
    498c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    498e:	4644      	mov	r4, r8
    4990:	464d      	mov	r5, r9
    4992:	4656      	mov	r6, sl
    4994:	465f      	mov	r7, fp
    4996:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    4998:	b508      	push	{r3, lr}
    499a:	b672      	cpsid	i
    499c:	f001 f8c2 	bl	5b24 <vTaskSwitchContext>
    49a0:	b662      	cpsie	i
    49a2:	bc0c      	pop	{r2, r3}
    49a4:	6811      	ldr	r1, [r2, #0]
    49a6:	6808      	ldr	r0, [r1, #0]
    49a8:	3010      	adds	r0, #16
    49aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    49ac:	46a0      	mov	r8, r4
    49ae:	46a9      	mov	r9, r5
    49b0:	46b2      	mov	sl, r6
    49b2:	46bb      	mov	fp, r7
    49b4:	f380 8809 	msr	PSP, r0
    49b8:	3820      	subs	r0, #32
    49ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    49bc:	4718      	bx	r3
    49be:	46c0      	nop			; (mov r8, r8)

000049c0 <pxCurrentTCBConst>:
    49c0:	20002668 	.word	0x20002668
	    "										\n"
	    "	bx r3								\n"
	    "										\n"
	    "	.align 4							\n"
	    "pxCurrentTCBConst: .word pxCurrentTCB	  ");
}
    49c4:	46c0      	nop			; (mov r8, r8)
    49c6:	46c0      	nop			; (mov r8, r8)

000049c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void)
{
    49c8:	b580      	push	{r7, lr}
    49ca:	b082      	sub	sp, #8
    49cc:	af00      	add	r7, sp, #0
	uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    49ce:	4b0a      	ldr	r3, [pc, #40]	; (49f8 <SysTick_Handler+0x30>)
    49d0:	4798      	blx	r3
    49d2:	0003      	movs	r3, r0
    49d4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
    49d6:	4b09      	ldr	r3, [pc, #36]	; (49fc <SysTick_Handler+0x34>)
    49d8:	4798      	blx	r3
    49da:	1e03      	subs	r3, r0, #0
    49dc:	d003      	beq.n	49e6 <SysTick_Handler+0x1e>
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    49de:	4b08      	ldr	r3, [pc, #32]	; (4a00 <SysTick_Handler+0x38>)
    49e0:	2280      	movs	r2, #128	; 0x80
    49e2:	0552      	lsls	r2, r2, #21
    49e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(ulPreviousMask);
    49e6:	687b      	ldr	r3, [r7, #4]
    49e8:	0018      	movs	r0, r3
    49ea:	4b06      	ldr	r3, [pc, #24]	; (4a04 <SysTick_Handler+0x3c>)
    49ec:	4798      	blx	r3
}
    49ee:	46c0      	nop			; (mov r8, r8)
    49f0:	46bd      	mov	sp, r7
    49f2:	b002      	add	sp, #8
    49f4:	bd80      	pop	{r7, pc}
    49f6:	46c0      	nop			; (mov r8, r8)
    49f8:	00004965 	.word	0x00004965
    49fc:	000059b1 	.word	0x000059b1
    4a00:	e000ed04 	.word	0xe000ed04
    4a04:	00004971 	.word	0x00004971

00004a08 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt(void)
{
    4a08:	b580      	push	{r7, lr}
    4a0a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL)          = 0UL;
    4a0c:	4b07      	ldr	r3, [pc, #28]	; (4a2c <prvSetupTimerInterrupt+0x24>)
    4a0e:	2200      	movs	r2, #0
    4a10:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    4a12:	4b07      	ldr	r3, [pc, #28]	; (4a30 <prvSetupTimerInterrupt+0x28>)
    4a14:	2200      	movs	r2, #0
    4a16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = (configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    4a18:	4b06      	ldr	r3, [pc, #24]	; (4a34 <prvSetupTimerInterrupt+0x2c>)
    4a1a:	4a07      	ldr	r2, [pc, #28]	; (4a38 <prvSetupTimerInterrupt+0x30>)
    4a1c:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    4a1e:	4b03      	ldr	r3, [pc, #12]	; (4a2c <prvSetupTimerInterrupt+0x24>)
    4a20:	2207      	movs	r2, #7
    4a22:	601a      	str	r2, [r3, #0]
}
    4a24:	46c0      	nop			; (mov r8, r8)
    4a26:	46bd      	mov	sp, r7
    4a28:	bd80      	pop	{r7, pc}
    4a2a:	46c0      	nop			; (mov r8, r8)
    4a2c:	e000e010 	.word	0xe000e010
    4a30:	e000e018 	.word	0xe000e018
    4a34:	e000e014 	.word	0xe000e014
    4a38:	00000f9f 	.word	0x00000f9f

00004a3c <pvPortMalloc>:
static size_t xNextFreeByte = (size_t)0;

/*-----------------------------------------------------------*/

void *pvPortMalloc(size_t xWantedSize)
{
    4a3c:	b580      	push	{r7, lr}
    4a3e:	b084      	sub	sp, #16
    4a40:	af00      	add	r7, sp, #0
    4a42:	6078      	str	r0, [r7, #4]
	void *          pvReturn       = NULL;
    4a44:	2300      	movs	r3, #0
    4a46:	60fb      	str	r3, [r7, #12]
	static uint8_t *pucAlignedHeap = NULL;

/* Ensure that blocks are always aligned to the required number of bytes. */
#if (portBYTE_ALIGNMENT != 1)
	{
		if (xWantedSize & portBYTE_ALIGNMENT_MASK) {
    4a48:	687b      	ldr	r3, [r7, #4]
    4a4a:	2207      	movs	r2, #7
    4a4c:	4013      	ands	r3, r2
    4a4e:	d004      	beq.n	4a5a <pvPortMalloc+0x1e>
			/* Byte alignment required. */
			xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
    4a50:	687b      	ldr	r3, [r7, #4]
    4a52:	2207      	movs	r2, #7
    4a54:	4393      	bics	r3, r2
    4a56:	3308      	adds	r3, #8
    4a58:	607b      	str	r3, [r7, #4]
		}
	}
#endif

	vTaskSuspendAll();
    4a5a:	4b17      	ldr	r3, [pc, #92]	; (4ab8 <pvPortMalloc+0x7c>)
    4a5c:	4798      	blx	r3
	{
		if (pucAlignedHeap == NULL) {
    4a5e:	4b17      	ldr	r3, [pc, #92]	; (4abc <pvPortMalloc+0x80>)
    4a60:	681b      	ldr	r3, [r3, #0]
    4a62:	2b00      	cmp	r3, #0
    4a64:	d105      	bne.n	4a72 <pvPortMalloc+0x36>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    4a66:	4b16      	ldr	r3, [pc, #88]	; (4ac0 <pvPortMalloc+0x84>)
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
    4a68:	2207      	movs	r2, #7
    4a6a:	4393      	bics	r3, r2
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    4a6c:	001a      	movs	r2, r3
    4a6e:	4b13      	ldr	r3, [pc, #76]	; (4abc <pvPortMalloc+0x80>)
    4a70:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if (((xNextFreeByte + xWantedSize) < configADJUSTED_HEAP_SIZE)
    4a72:	4b14      	ldr	r3, [pc, #80]	; (4ac4 <pvPortMalloc+0x88>)
    4a74:	681a      	ldr	r2, [r3, #0]
    4a76:	687b      	ldr	r3, [r7, #4]
    4a78:	18d3      	adds	r3, r2, r3
    4a7a:	4a13      	ldr	r2, [pc, #76]	; (4ac8 <pvPortMalloc+0x8c>)
    4a7c:	4293      	cmp	r3, r2
    4a7e:	d813      	bhi.n	4aa8 <pvPortMalloc+0x6c>
		    && ((xNextFreeByte + xWantedSize) > xNextFreeByte)) /* Check for overflow. */
    4a80:	4b10      	ldr	r3, [pc, #64]	; (4ac4 <pvPortMalloc+0x88>)
    4a82:	681a      	ldr	r2, [r3, #0]
    4a84:	687b      	ldr	r3, [r7, #4]
    4a86:	18d2      	adds	r2, r2, r3
    4a88:	4b0e      	ldr	r3, [pc, #56]	; (4ac4 <pvPortMalloc+0x88>)
    4a8a:	681b      	ldr	r3, [r3, #0]
    4a8c:	429a      	cmp	r2, r3
    4a8e:	d90b      	bls.n	4aa8 <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    4a90:	4b0a      	ldr	r3, [pc, #40]	; (4abc <pvPortMalloc+0x80>)
    4a92:	681a      	ldr	r2, [r3, #0]
    4a94:	4b0b      	ldr	r3, [pc, #44]	; (4ac4 <pvPortMalloc+0x88>)
    4a96:	681b      	ldr	r3, [r3, #0]
    4a98:	18d3      	adds	r3, r2, r3
    4a9a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    4a9c:	4b09      	ldr	r3, [pc, #36]	; (4ac4 <pvPortMalloc+0x88>)
    4a9e:	681a      	ldr	r2, [r3, #0]
    4aa0:	687b      	ldr	r3, [r7, #4]
    4aa2:	18d2      	adds	r2, r2, r3
    4aa4:	4b07      	ldr	r3, [pc, #28]	; (4ac4 <pvPortMalloc+0x88>)
    4aa6:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC(pvReturn, xWantedSize);
	}
	(void)xTaskResumeAll();
    4aa8:	4b08      	ldr	r3, [pc, #32]	; (4acc <pvPortMalloc+0x90>)
    4aaa:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
#endif

	return pvReturn;
    4aac:	68fb      	ldr	r3, [r7, #12]
}
    4aae:	0018      	movs	r0, r3
    4ab0:	46bd      	mov	sp, r7
    4ab2:	b004      	add	sp, #16
    4ab4:	bd80      	pop	{r7, pc}
    4ab6:	46c0      	nop			; (mov r8, r8)
    4ab8:	00005849 	.word	0x00005849
    4abc:	20002664 	.word	0x20002664
    4ac0:	200000e8 	.word	0x200000e8
    4ac4:	20002660 	.word	0x20002660
    4ac8:	00002577 	.word	0x00002577
    4acc:	00005861 	.word	0x00005861

00004ad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree(void *pv)
{
    4ad0:	b580      	push	{r7, lr}
    4ad2:	b082      	sub	sp, #8
    4ad4:	af00      	add	r7, sp, #0
    4ad6:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	(void)pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT(pv == NULL);
    4ad8:	687b      	ldr	r3, [r7, #4]
    4ada:	2b00      	cmp	r3, #0
    4adc:	d001      	beq.n	4ae2 <vPortFree+0x12>
    4ade:	b672      	cpsid	i
    4ae0:	e7fe      	b.n	4ae0 <vPortFree+0x10>
}
    4ae2:	46c0      	nop			; (mov r8, r8)
    4ae4:	46bd      	mov	sp, r7
    4ae6:	b002      	add	sp, #8
    4ae8:	bd80      	pop	{r7, pc}
	...

00004aec <xQueueGenericReset>:
	}                                                                                                                  \
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset(QueueHandle_t xQueue, BaseType_t xNewQueue)
{
    4aec:	b580      	push	{r7, lr}
    4aee:	b084      	sub	sp, #16
    4af0:	af00      	add	r7, sp, #0
    4af2:	6078      	str	r0, [r7, #4]
    4af4:	6039      	str	r1, [r7, #0]
	Queue_t *const pxQueue = (Queue_t *)xQueue;
    4af6:	687b      	ldr	r3, [r7, #4]
    4af8:	60fb      	str	r3, [r7, #12]

	configASSERT(pxQueue);
    4afa:	68fb      	ldr	r3, [r7, #12]
    4afc:	2b00      	cmp	r3, #0
    4afe:	d101      	bne.n	4b04 <xQueueGenericReset+0x18>
    4b00:	b672      	cpsid	i
    4b02:	e7fe      	b.n	4b02 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    4b04:	4b23      	ldr	r3, [pc, #140]	; (4b94 <xQueueGenericReset+0xa8>)
    4b06:	4798      	blx	r3
	{
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    4b08:	68fb      	ldr	r3, [r7, #12]
    4b0a:	681a      	ldr	r2, [r3, #0]
    4b0c:	68fb      	ldr	r3, [r7, #12]
    4b0e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    4b10:	68fb      	ldr	r3, [r7, #12]
    4b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4b14:	434b      	muls	r3, r1
    4b16:	18d2      	adds	r2, r2, r3
    4b18:	68fb      	ldr	r3, [r7, #12]
    4b1a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    4b1c:	68fb      	ldr	r3, [r7, #12]
    4b1e:	2200      	movs	r2, #0
    4b20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    4b22:	68fb      	ldr	r3, [r7, #12]
    4b24:	681a      	ldr	r2, [r3, #0]
    4b26:	68fb      	ldr	r3, [r7, #12]
    4b28:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    4b2a:	68fb      	ldr	r3, [r7, #12]
    4b2c:	681a      	ldr	r2, [r3, #0]
    4b2e:	68fb      	ldr	r3, [r7, #12]
    4b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4b32:	1e59      	subs	r1, r3, #1
    4b34:	68fb      	ldr	r3, [r7, #12]
    4b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4b38:	434b      	muls	r3, r1
    4b3a:	18d2      	adds	r2, r2, r3
    4b3c:	68fb      	ldr	r3, [r7, #12]
    4b3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    4b40:	68fb      	ldr	r3, [r7, #12]
    4b42:	2244      	movs	r2, #68	; 0x44
    4b44:	21ff      	movs	r1, #255	; 0xff
    4b46:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock           = queueUNLOCKED;
    4b48:	68fb      	ldr	r3, [r7, #12]
    4b4a:	2245      	movs	r2, #69	; 0x45
    4b4c:	21ff      	movs	r1, #255	; 0xff
    4b4e:	5499      	strb	r1, [r3, r2]

		if (xNewQueue == pdFALSE) {
    4b50:	683b      	ldr	r3, [r7, #0]
    4b52:	2b00      	cmp	r3, #0
    4b54:	d10d      	bne.n	4b72 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4b56:	68fb      	ldr	r3, [r7, #12]
    4b58:	691b      	ldr	r3, [r3, #16]
    4b5a:	2b00      	cmp	r3, #0
    4b5c:	d013      	beq.n	4b86 <xQueueGenericReset+0x9a>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4b5e:	68fb      	ldr	r3, [r7, #12]
    4b60:	3310      	adds	r3, #16
    4b62:	0018      	movs	r0, r3
    4b64:	4b0c      	ldr	r3, [pc, #48]	; (4b98 <xQueueGenericReset+0xac>)
    4b66:	4798      	blx	r3
    4b68:	1e03      	subs	r3, r0, #0
    4b6a:	d00c      	beq.n	4b86 <xQueueGenericReset+0x9a>
					queueYIELD_IF_USING_PREEMPTION();
    4b6c:	4b0b      	ldr	r3, [pc, #44]	; (4b9c <xQueueGenericReset+0xb0>)
    4b6e:	4798      	blx	r3
    4b70:	e009      	b.n	4b86 <xQueueGenericReset+0x9a>
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		} else {
			/* Ensure the event queues start in the correct state. */
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    4b72:	68fb      	ldr	r3, [r7, #12]
    4b74:	3310      	adds	r3, #16
    4b76:	0018      	movs	r0, r3
    4b78:	4b09      	ldr	r3, [pc, #36]	; (4ba0 <xQueueGenericReset+0xb4>)
    4b7a:	4798      	blx	r3
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    4b7c:	68fb      	ldr	r3, [r7, #12]
    4b7e:	3324      	adds	r3, #36	; 0x24
    4b80:	0018      	movs	r0, r3
    4b82:	4b07      	ldr	r3, [pc, #28]	; (4ba0 <xQueueGenericReset+0xb4>)
    4b84:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    4b86:	4b07      	ldr	r3, [pc, #28]	; (4ba4 <xQueueGenericReset+0xb8>)
    4b88:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    4b8a:	2301      	movs	r3, #1
}
    4b8c:	0018      	movs	r0, r3
    4b8e:	46bd      	mov	sp, r7
    4b90:	b004      	add	sp, #16
    4b92:	bd80      	pop	{r7, pc}
    4b94:	00004911 	.word	0x00004911
    4b98:	00005c61 	.word	0x00005c61
    4b9c:	000048f1 	.word	0x000048f1
    4ba0:	0000467d 	.word	0x0000467d
    4ba4:	00004935 	.word	0x00004935

00004ba8 <xQueueGenericCreate>:

#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)

QueueHandle_t xQueueGenericCreate(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize,
                                  const uint8_t ucQueueType)
{
    4ba8:	b590      	push	{r4, r7, lr}
    4baa:	b08b      	sub	sp, #44	; 0x2c
    4bac:	af02      	add	r7, sp, #8
    4bae:	60f8      	str	r0, [r7, #12]
    4bb0:	60b9      	str	r1, [r7, #8]
    4bb2:	1dfb      	adds	r3, r7, #7
    4bb4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t   xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

	configASSERT(uxQueueLength > (UBaseType_t)0);
    4bb6:	68fb      	ldr	r3, [r7, #12]
    4bb8:	2b00      	cmp	r3, #0
    4bba:	d101      	bne.n	4bc0 <xQueueGenericCreate+0x18>
    4bbc:	b672      	cpsid	i
    4bbe:	e7fe      	b.n	4bbe <xQueueGenericCreate+0x16>

	if (uxItemSize == (UBaseType_t)0) {
    4bc0:	68bb      	ldr	r3, [r7, #8]
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	d102      	bne.n	4bcc <xQueueGenericCreate+0x24>
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = (size_t)0;
    4bc6:	2300      	movs	r3, #0
    4bc8:	61fb      	str	r3, [r7, #28]
    4bca:	e003      	b.n	4bd4 <xQueueGenericCreate+0x2c>
	} else {
		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time. */
		xQueueSizeInBytes = (size_t)(
    4bcc:	68fb      	ldr	r3, [r7, #12]
    4bce:	68ba      	ldr	r2, [r7, #8]
    4bd0:	4353      	muls	r3, r2
    4bd2:	61fb      	str	r3, [r7, #28]
		    uxQueueLength * uxItemSize); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    4bd4:	69fb      	ldr	r3, [r7, #28]
    4bd6:	3354      	adds	r3, #84	; 0x54
    4bd8:	0018      	movs	r0, r3
    4bda:	4b0c      	ldr	r3, [pc, #48]	; (4c0c <xQueueGenericCreate+0x64>)
    4bdc:	4798      	blx	r3
    4bde:	0003      	movs	r3, r0
    4be0:	61bb      	str	r3, [r7, #24]

	if (pxNewQueue != NULL) {
    4be2:	69bb      	ldr	r3, [r7, #24]
    4be4:	2b00      	cmp	r3, #0
    4be6:	d00c      	beq.n	4c02 <xQueueGenericCreate+0x5a>
		/* Jump past the queue structure to find the location of the queue
		storage area. */
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    4be8:	69bb      	ldr	r3, [r7, #24]
    4bea:	3354      	adds	r3, #84	; 0x54
    4bec:	617b      	str	r3, [r7, #20]
			deleted. */
			pxNewQueue->ucStaticallyAllocated = pdFALSE;
		}
#endif /* configSUPPORT_STATIC_ALLOCATION */

		prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue);
    4bee:	1dfb      	adds	r3, r7, #7
    4bf0:	781c      	ldrb	r4, [r3, #0]
    4bf2:	697a      	ldr	r2, [r7, #20]
    4bf4:	68b9      	ldr	r1, [r7, #8]
    4bf6:	68f8      	ldr	r0, [r7, #12]
    4bf8:	69bb      	ldr	r3, [r7, #24]
    4bfa:	9300      	str	r3, [sp, #0]
    4bfc:	0023      	movs	r3, r4
    4bfe:	4c04      	ldr	r4, [pc, #16]	; (4c10 <xQueueGenericCreate+0x68>)
    4c00:	47a0      	blx	r4
	} else {
		traceQUEUE_CREATE_FAILED(ucQueueType);
	}

	return pxNewQueue;
    4c02:	69bb      	ldr	r3, [r7, #24]
}
    4c04:	0018      	movs	r0, r3
    4c06:	46bd      	mov	sp, r7
    4c08:	b009      	add	sp, #36	; 0x24
    4c0a:	bd90      	pop	{r4, r7, pc}
    4c0c:	00004a3d 	.word	0x00004a3d
    4c10:	00004c15 	.word	0x00004c15

00004c14 <prvInitialiseNewQueue>:
#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize,
                                  uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue)
{
    4c14:	b580      	push	{r7, lr}
    4c16:	b084      	sub	sp, #16
    4c18:	af00      	add	r7, sp, #0
    4c1a:	60f8      	str	r0, [r7, #12]
    4c1c:	60b9      	str	r1, [r7, #8]
    4c1e:	607a      	str	r2, [r7, #4]
    4c20:	001a      	movs	r2, r3
    4c22:	1cfb      	adds	r3, r7, #3
    4c24:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	(void)ucQueueType;

	if (uxItemSize == (UBaseType_t)0) {
    4c26:	68bb      	ldr	r3, [r7, #8]
    4c28:	2b00      	cmp	r3, #0
    4c2a:	d103      	bne.n	4c34 <prvInitialiseNewQueue+0x20>
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    4c2c:	69bb      	ldr	r3, [r7, #24]
    4c2e:	69ba      	ldr	r2, [r7, #24]
    4c30:	601a      	str	r2, [r3, #0]
    4c32:	e002      	b.n	4c3a <prvInitialiseNewQueue+0x26>
	} else {
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    4c34:	69bb      	ldr	r3, [r7, #24]
    4c36:	687a      	ldr	r2, [r7, #4]
    4c38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength   = uxQueueLength;
    4c3a:	69bb      	ldr	r3, [r7, #24]
    4c3c:	68fa      	ldr	r2, [r7, #12]
    4c3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    4c40:	69bb      	ldr	r3, [r7, #24]
    4c42:	68ba      	ldr	r2, [r7, #8]
    4c44:	641a      	str	r2, [r3, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    4c46:	69bb      	ldr	r3, [r7, #24]
    4c48:	2101      	movs	r1, #1
    4c4a:	0018      	movs	r0, r3
    4c4c:	4b06      	ldr	r3, [pc, #24]	; (4c68 <prvInitialiseNewQueue+0x54>)
    4c4e:	4798      	blx	r3

#if (configUSE_TRACE_FACILITY == 1)
	{
		pxNewQueue->ucQueueType = ucQueueType;
    4c50:	69bb      	ldr	r3, [r7, #24]
    4c52:	1cfa      	adds	r2, r7, #3
    4c54:	2150      	movs	r1, #80	; 0x50
    4c56:	7812      	ldrb	r2, [r2, #0]
    4c58:	545a      	strb	r2, [r3, r1]
	}
#endif /* configUSE_TRACE_FACILITY */

#if (configUSE_QUEUE_SETS == 1)
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    4c5a:	69bb      	ldr	r3, [r7, #24]
    4c5c:	2200      	movs	r2, #0
    4c5e:	649a      	str	r2, [r3, #72]	; 0x48
	}
#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE(pxNewQueue);
}
    4c60:	46c0      	nop			; (mov r8, r8)
    4c62:	46bd      	mov	sp, r7
    4c64:	b004      	add	sp, #16
    4c66:	bd80      	pop	{r7, pc}
    4c68:	00004aed 	.word	0x00004aed

00004c6c <xQueueCreateCountingSemaphore>:
	/*-----------------------------------------------------------*/

#if ((configUSE_COUNTING_SEMAPHORES == 1) && (configSUPPORT_DYNAMIC_ALLOCATION == 1))

QueueHandle_t xQueueCreateCountingSemaphore(const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount)
{
    4c6c:	b580      	push	{r7, lr}
    4c6e:	b084      	sub	sp, #16
    4c70:	af00      	add	r7, sp, #0
    4c72:	6078      	str	r0, [r7, #4]
    4c74:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

	configASSERT(uxMaxCount != 0);
    4c76:	687b      	ldr	r3, [r7, #4]
    4c78:	2b00      	cmp	r3, #0
    4c7a:	d101      	bne.n	4c80 <xQueueCreateCountingSemaphore+0x14>
    4c7c:	b672      	cpsid	i
    4c7e:	e7fe      	b.n	4c7e <xQueueCreateCountingSemaphore+0x12>
	configASSERT(uxInitialCount <= uxMaxCount);
    4c80:	683a      	ldr	r2, [r7, #0]
    4c82:	687b      	ldr	r3, [r7, #4]
    4c84:	429a      	cmp	r2, r3
    4c86:	d901      	bls.n	4c8c <xQueueCreateCountingSemaphore+0x20>
    4c88:	b672      	cpsid	i
    4c8a:	e7fe      	b.n	4c8a <xQueueCreateCountingSemaphore+0x1e>

	xHandle = xQueueGenericCreate(uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE);
    4c8c:	687b      	ldr	r3, [r7, #4]
    4c8e:	2202      	movs	r2, #2
    4c90:	2100      	movs	r1, #0
    4c92:	0018      	movs	r0, r3
    4c94:	4b07      	ldr	r3, [pc, #28]	; (4cb4 <xQueueCreateCountingSemaphore+0x48>)
    4c96:	4798      	blx	r3
    4c98:	0003      	movs	r3, r0
    4c9a:	60fb      	str	r3, [r7, #12]

	if (xHandle != NULL) {
    4c9c:	68fb      	ldr	r3, [r7, #12]
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	d002      	beq.n	4ca8 <xQueueCreateCountingSemaphore+0x3c>
		((Queue_t *)xHandle)->uxMessagesWaiting = uxInitialCount;
    4ca2:	68fb      	ldr	r3, [r7, #12]
    4ca4:	683a      	ldr	r2, [r7, #0]
    4ca6:	639a      	str	r2, [r3, #56]	; 0x38
		traceCREATE_COUNTING_SEMAPHORE();
	} else {
		traceCREATE_COUNTING_SEMAPHORE_FAILED();
	}

	return xHandle;
    4ca8:	68fb      	ldr	r3, [r7, #12]
}
    4caa:	0018      	movs	r0, r3
    4cac:	46bd      	mov	sp, r7
    4cae:	b004      	add	sp, #16
    4cb0:	bd80      	pop	{r7, pc}
    4cb2:	46c0      	nop			; (mov r8, r8)
    4cb4:	00004ba9 	.word	0x00004ba9

00004cb8 <xQueueGenericSend>:
#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend(QueueHandle_t xQueue, const void *const pvItemToQueue, TickType_t xTicksToWait,
                             const BaseType_t xCopyPosition)
{
    4cb8:	b580      	push	{r7, lr}
    4cba:	b08a      	sub	sp, #40	; 0x28
    4cbc:	af00      	add	r7, sp, #0
    4cbe:	60f8      	str	r0, [r7, #12]
    4cc0:	60b9      	str	r1, [r7, #8]
    4cc2:	607a      	str	r2, [r7, #4]
    4cc4:	603b      	str	r3, [r7, #0]
	BaseType_t     xEntryTimeSet = pdFALSE, xYieldRequired;
    4cc6:	2300      	movs	r3, #0
    4cc8:	627b      	str	r3, [r7, #36]	; 0x24
	TimeOut_t      xTimeOut;
	Queue_t *const pxQueue = (Queue_t *)xQueue;
    4cca:	68fb      	ldr	r3, [r7, #12]
    4ccc:	623b      	str	r3, [r7, #32]

	configASSERT(pxQueue);
    4cce:	6a3b      	ldr	r3, [r7, #32]
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	d101      	bne.n	4cd8 <xQueueGenericSend+0x20>
    4cd4:	b672      	cpsid	i
    4cd6:	e7fe      	b.n	4cd6 <xQueueGenericSend+0x1e>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4cd8:	68bb      	ldr	r3, [r7, #8]
    4cda:	2b00      	cmp	r3, #0
    4cdc:	d103      	bne.n	4ce6 <xQueueGenericSend+0x2e>
    4cde:	6a3b      	ldr	r3, [r7, #32]
    4ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4ce2:	2b00      	cmp	r3, #0
    4ce4:	d101      	bne.n	4cea <xQueueGenericSend+0x32>
    4ce6:	2301      	movs	r3, #1
    4ce8:	e000      	b.n	4cec <xQueueGenericSend+0x34>
    4cea:	2300      	movs	r3, #0
    4cec:	2b00      	cmp	r3, #0
    4cee:	d101      	bne.n	4cf4 <xQueueGenericSend+0x3c>
    4cf0:	b672      	cpsid	i
    4cf2:	e7fe      	b.n	4cf2 <xQueueGenericSend+0x3a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4cf4:	683b      	ldr	r3, [r7, #0]
    4cf6:	2b02      	cmp	r3, #2
    4cf8:	d103      	bne.n	4d02 <xQueueGenericSend+0x4a>
    4cfa:	6a3b      	ldr	r3, [r7, #32]
    4cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4cfe:	2b01      	cmp	r3, #1
    4d00:	d101      	bne.n	4d06 <xQueueGenericSend+0x4e>
    4d02:	2301      	movs	r3, #1
    4d04:	e000      	b.n	4d08 <xQueueGenericSend+0x50>
    4d06:	2300      	movs	r3, #0
    4d08:	2b00      	cmp	r3, #0
    4d0a:	d101      	bne.n	4d10 <xQueueGenericSend+0x58>
    4d0c:	b672      	cpsid	i
    4d0e:	e7fe      	b.n	4d0e <xQueueGenericSend+0x56>
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
	{
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4d10:	4b53      	ldr	r3, [pc, #332]	; (4e60 <xQueueGenericSend+0x1a8>)
    4d12:	4798      	blx	r3
    4d14:	1e03      	subs	r3, r0, #0
    4d16:	d102      	bne.n	4d1e <xQueueGenericSend+0x66>
    4d18:	687b      	ldr	r3, [r7, #4]
    4d1a:	2b00      	cmp	r3, #0
    4d1c:	d101      	bne.n	4d22 <xQueueGenericSend+0x6a>
    4d1e:	2301      	movs	r3, #1
    4d20:	e000      	b.n	4d24 <xQueueGenericSend+0x6c>
    4d22:	2300      	movs	r3, #0
    4d24:	2b00      	cmp	r3, #0
    4d26:	d101      	bne.n	4d2c <xQueueGenericSend+0x74>
    4d28:	b672      	cpsid	i
    4d2a:	e7fe      	b.n	4d2a <xQueueGenericSend+0x72>

	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for (;;) {
		taskENTER_CRITICAL();
    4d2c:	4b4d      	ldr	r3, [pc, #308]	; (4e64 <xQueueGenericSend+0x1ac>)
    4d2e:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    4d30:	6a3b      	ldr	r3, [r7, #32]
    4d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4d34:	6a3b      	ldr	r3, [r7, #32]
    4d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4d38:	429a      	cmp	r2, r3
    4d3a:	d302      	bcc.n	4d42 <xQueueGenericSend+0x8a>
    4d3c:	683b      	ldr	r3, [r7, #0]
    4d3e:	2b02      	cmp	r3, #2
    4d40:	d12d      	bne.n	4d9e <xQueueGenericSend+0xe6>
				traceQUEUE_SEND(pxQueue);
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    4d42:	683a      	ldr	r2, [r7, #0]
    4d44:	68b9      	ldr	r1, [r7, #8]
    4d46:	6a3b      	ldr	r3, [r7, #32]
    4d48:	0018      	movs	r0, r3
    4d4a:	4b47      	ldr	r3, [pc, #284]	; (4e68 <xQueueGenericSend+0x1b0>)
    4d4c:	4798      	blx	r3
    4d4e:	0003      	movs	r3, r0
    4d50:	61fb      	str	r3, [r7, #28]

#if (configUSE_QUEUE_SETS == 1)
				{
					if (pxQueue->pxQueueSetContainer != NULL) {
    4d52:	6a3b      	ldr	r3, [r7, #32]
    4d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4d56:	2b00      	cmp	r3, #0
    4d58:	d00a      	beq.n	4d70 <xQueueGenericSend+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    4d5a:	683a      	ldr	r2, [r7, #0]
    4d5c:	6a3b      	ldr	r3, [r7, #32]
    4d5e:	0011      	movs	r1, r2
    4d60:	0018      	movs	r0, r3
    4d62:	4b42      	ldr	r3, [pc, #264]	; (4e6c <xQueueGenericSend+0x1b4>)
    4d64:	4798      	blx	r3
    4d66:	1e03      	subs	r3, r0, #0
    4d68:	d015      	beq.n	4d96 <xQueueGenericSend+0xde>
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    4d6a:	4b41      	ldr	r3, [pc, #260]	; (4e70 <xQueueGenericSend+0x1b8>)
    4d6c:	4798      	blx	r3
    4d6e:	e012      	b.n	4d96 <xQueueGenericSend+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					} else {
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    4d70:	6a3b      	ldr	r3, [r7, #32]
    4d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4d74:	2b00      	cmp	r3, #0
    4d76:	d009      	beq.n	4d8c <xQueueGenericSend+0xd4>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4d78:	6a3b      	ldr	r3, [r7, #32]
    4d7a:	3324      	adds	r3, #36	; 0x24
    4d7c:	0018      	movs	r0, r3
    4d7e:	4b3d      	ldr	r3, [pc, #244]	; (4e74 <xQueueGenericSend+0x1bc>)
    4d80:	4798      	blx	r3
    4d82:	1e03      	subs	r3, r0, #0
    4d84:	d007      	beq.n	4d96 <xQueueGenericSend+0xde>
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    4d86:	4b3a      	ldr	r3, [pc, #232]	; (4e70 <xQueueGenericSend+0x1b8>)
    4d88:	4798      	blx	r3
    4d8a:	e004      	b.n	4d96 <xQueueGenericSend+0xde>
							} else {
								mtCOVERAGE_TEST_MARKER();
							}
						} else if (xYieldRequired != pdFALSE) {
    4d8c:	69fb      	ldr	r3, [r7, #28]
    4d8e:	2b00      	cmp	r3, #0
    4d90:	d001      	beq.n	4d96 <xQueueGenericSend+0xde>
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    4d92:	4b37      	ldr	r3, [pc, #220]	; (4e70 <xQueueGenericSend+0x1b8>)
    4d94:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    4d96:	4b38      	ldr	r3, [pc, #224]	; (4e78 <xQueueGenericSend+0x1c0>)
    4d98:	4798      	blx	r3
				return pdPASS;
    4d9a:	2301      	movs	r3, #1
    4d9c:	e05c      	b.n	4e58 <xQueueGenericSend+0x1a0>
			} else {
				if (xTicksToWait == (TickType_t)0) {
    4d9e:	687b      	ldr	r3, [r7, #4]
    4da0:	2b00      	cmp	r3, #0
    4da2:	d103      	bne.n	4dac <xQueueGenericSend+0xf4>
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    4da4:	4b34      	ldr	r3, [pc, #208]	; (4e78 <xQueueGenericSend+0x1c0>)
    4da6:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED(pxQueue);
					return errQUEUE_FULL;
    4da8:	2300      	movs	r3, #0
    4daa:	e055      	b.n	4e58 <xQueueGenericSend+0x1a0>
				} else if (xEntryTimeSet == pdFALSE) {
    4dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4dae:	2b00      	cmp	r3, #0
    4db0:	d106      	bne.n	4dc0 <xQueueGenericSend+0x108>
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState(&xTimeOut);
    4db2:	2314      	movs	r3, #20
    4db4:	18fb      	adds	r3, r7, r3
    4db6:	0018      	movs	r0, r3
    4db8:	4b30      	ldr	r3, [pc, #192]	; (4e7c <xQueueGenericSend+0x1c4>)
    4dba:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    4dbc:	2301      	movs	r3, #1
    4dbe:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    4dc0:	4b2d      	ldr	r3, [pc, #180]	; (4e78 <xQueueGenericSend+0x1c0>)
    4dc2:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    4dc4:	4b2e      	ldr	r3, [pc, #184]	; (4e80 <xQueueGenericSend+0x1c8>)
    4dc6:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4dc8:	4b26      	ldr	r3, [pc, #152]	; (4e64 <xQueueGenericSend+0x1ac>)
    4dca:	4798      	blx	r3
    4dcc:	6a3b      	ldr	r3, [r7, #32]
    4dce:	2244      	movs	r2, #68	; 0x44
    4dd0:	5c9b      	ldrb	r3, [r3, r2]
    4dd2:	b25b      	sxtb	r3, r3
    4dd4:	3301      	adds	r3, #1
    4dd6:	d103      	bne.n	4de0 <xQueueGenericSend+0x128>
    4dd8:	6a3b      	ldr	r3, [r7, #32]
    4dda:	2244      	movs	r2, #68	; 0x44
    4ddc:	2100      	movs	r1, #0
    4dde:	5499      	strb	r1, [r3, r2]
    4de0:	6a3b      	ldr	r3, [r7, #32]
    4de2:	2245      	movs	r2, #69	; 0x45
    4de4:	5c9b      	ldrb	r3, [r3, r2]
    4de6:	b25b      	sxtb	r3, r3
    4de8:	3301      	adds	r3, #1
    4dea:	d103      	bne.n	4df4 <xQueueGenericSend+0x13c>
    4dec:	6a3b      	ldr	r3, [r7, #32]
    4dee:	2245      	movs	r2, #69	; 0x45
    4df0:	2100      	movs	r1, #0
    4df2:	5499      	strb	r1, [r3, r2]
    4df4:	4b20      	ldr	r3, [pc, #128]	; (4e78 <xQueueGenericSend+0x1c0>)
    4df6:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    4df8:	1d3a      	adds	r2, r7, #4
    4dfa:	2314      	movs	r3, #20
    4dfc:	18fb      	adds	r3, r7, r3
    4dfe:	0011      	movs	r1, r2
    4e00:	0018      	movs	r0, r3
    4e02:	4b20      	ldr	r3, [pc, #128]	; (4e84 <xQueueGenericSend+0x1cc>)
    4e04:	4798      	blx	r3
    4e06:	1e03      	subs	r3, r0, #0
    4e08:	d11f      	bne.n	4e4a <xQueueGenericSend+0x192>
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    4e0a:	6a3b      	ldr	r3, [r7, #32]
    4e0c:	0018      	movs	r0, r3
    4e0e:	4b1e      	ldr	r3, [pc, #120]	; (4e88 <xQueueGenericSend+0x1d0>)
    4e10:	4798      	blx	r3
    4e12:	1e03      	subs	r3, r0, #0
    4e14:	d012      	beq.n	4e3c <xQueueGenericSend+0x184>
				traceBLOCKING_ON_QUEUE_SEND(pxQueue);
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    4e16:	6a3b      	ldr	r3, [r7, #32]
    4e18:	3310      	adds	r3, #16
    4e1a:	687a      	ldr	r2, [r7, #4]
    4e1c:	0011      	movs	r1, r2
    4e1e:	0018      	movs	r0, r3
    4e20:	4b1a      	ldr	r3, [pc, #104]	; (4e8c <xQueueGenericSend+0x1d4>)
    4e22:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue(pxQueue);
    4e24:	6a3b      	ldr	r3, [r7, #32]
    4e26:	0018      	movs	r0, r3
    4e28:	4b19      	ldr	r3, [pc, #100]	; (4e90 <xQueueGenericSend+0x1d8>)
    4e2a:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if (xTaskResumeAll() == pdFALSE) {
    4e2c:	4b19      	ldr	r3, [pc, #100]	; (4e94 <xQueueGenericSend+0x1dc>)
    4e2e:	4798      	blx	r3
    4e30:	1e03      	subs	r3, r0, #0
    4e32:	d000      	beq.n	4e36 <xQueueGenericSend+0x17e>
    4e34:	e77a      	b.n	4d2c <xQueueGenericSend+0x74>
					portYIELD_WITHIN_API();
    4e36:	4b0e      	ldr	r3, [pc, #56]	; (4e70 <xQueueGenericSend+0x1b8>)
    4e38:	4798      	blx	r3
    4e3a:	e777      	b.n	4d2c <xQueueGenericSend+0x74>
				}
			} else {
				/* Try again. */
				prvUnlockQueue(pxQueue);
    4e3c:	6a3b      	ldr	r3, [r7, #32]
    4e3e:	0018      	movs	r0, r3
    4e40:	4b13      	ldr	r3, [pc, #76]	; (4e90 <xQueueGenericSend+0x1d8>)
    4e42:	4798      	blx	r3
				(void)xTaskResumeAll();
    4e44:	4b13      	ldr	r3, [pc, #76]	; (4e94 <xQueueGenericSend+0x1dc>)
    4e46:	4798      	blx	r3
    4e48:	e770      	b.n	4d2c <xQueueGenericSend+0x74>
			}
		} else {
			/* The timeout has expired. */
			prvUnlockQueue(pxQueue);
    4e4a:	6a3b      	ldr	r3, [r7, #32]
    4e4c:	0018      	movs	r0, r3
    4e4e:	4b10      	ldr	r3, [pc, #64]	; (4e90 <xQueueGenericSend+0x1d8>)
    4e50:	4798      	blx	r3
			(void)xTaskResumeAll();
    4e52:	4b10      	ldr	r3, [pc, #64]	; (4e94 <xQueueGenericSend+0x1dc>)
    4e54:	4798      	blx	r3

			traceQUEUE_SEND_FAILED(pxQueue);
			return errQUEUE_FULL;
    4e56:	2300      	movs	r3, #0
		}
	}
}
    4e58:	0018      	movs	r0, r3
    4e5a:	46bd      	mov	sp, r7
    4e5c:	b00a      	add	sp, #40	; 0x28
    4e5e:	bd80      	pop	{r7, pc}
    4e60:	00005f99 	.word	0x00005f99
    4e64:	00004911 	.word	0x00004911
    4e68:	00005159 	.word	0x00005159
    4e6c:	00005439 	.word	0x00005439
    4e70:	000048f1 	.word	0x000048f1
    4e74:	00005c61 	.word	0x00005c61
    4e78:	00004935 	.word	0x00004935
    4e7c:	00005d21 	.word	0x00005d21
    4e80:	00005849 	.word	0x00005849
    4e84:	00005d49 	.word	0x00005d49
    4e88:	00005389 	.word	0x00005389
    4e8c:	00005bc9 	.word	0x00005bc9
    4e90:	00005265 	.word	0x00005265
    4e94:	00005861 	.word	0x00005861

00004e98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR(QueueHandle_t xQueue, const void *const pvItemToQueue,
                                    BaseType_t *const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition)
{
    4e98:	b580      	push	{r7, lr}
    4e9a:	b088      	sub	sp, #32
    4e9c:	af00      	add	r7, sp, #0
    4e9e:	60f8      	str	r0, [r7, #12]
    4ea0:	60b9      	str	r1, [r7, #8]
    4ea2:	607a      	str	r2, [r7, #4]
    4ea4:	603b      	str	r3, [r7, #0]
	BaseType_t     xReturn;
	UBaseType_t    uxSavedInterruptStatus;
	Queue_t *const pxQueue = (Queue_t *)xQueue;
    4ea6:	68fb      	ldr	r3, [r7, #12]
    4ea8:	61bb      	str	r3, [r7, #24]

	configASSERT(pxQueue);
    4eaa:	69bb      	ldr	r3, [r7, #24]
    4eac:	2b00      	cmp	r3, #0
    4eae:	d101      	bne.n	4eb4 <xQueueGenericSendFromISR+0x1c>
    4eb0:	b672      	cpsid	i
    4eb2:	e7fe      	b.n	4eb2 <xQueueGenericSendFromISR+0x1a>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4eb4:	68bb      	ldr	r3, [r7, #8]
    4eb6:	2b00      	cmp	r3, #0
    4eb8:	d103      	bne.n	4ec2 <xQueueGenericSendFromISR+0x2a>
    4eba:	69bb      	ldr	r3, [r7, #24]
    4ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4ebe:	2b00      	cmp	r3, #0
    4ec0:	d101      	bne.n	4ec6 <xQueueGenericSendFromISR+0x2e>
    4ec2:	2301      	movs	r3, #1
    4ec4:	e000      	b.n	4ec8 <xQueueGenericSendFromISR+0x30>
    4ec6:	2300      	movs	r3, #0
    4ec8:	2b00      	cmp	r3, #0
    4eca:	d101      	bne.n	4ed0 <xQueueGenericSendFromISR+0x38>
    4ecc:	b672      	cpsid	i
    4ece:	e7fe      	b.n	4ece <xQueueGenericSendFromISR+0x36>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4ed0:	683b      	ldr	r3, [r7, #0]
    4ed2:	2b02      	cmp	r3, #2
    4ed4:	d103      	bne.n	4ede <xQueueGenericSendFromISR+0x46>
    4ed6:	69bb      	ldr	r3, [r7, #24]
    4ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4eda:	2b01      	cmp	r3, #1
    4edc:	d101      	bne.n	4ee2 <xQueueGenericSendFromISR+0x4a>
    4ede:	2301      	movs	r3, #1
    4ee0:	e000      	b.n	4ee4 <xQueueGenericSendFromISR+0x4c>
    4ee2:	2300      	movs	r3, #0
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d101      	bne.n	4eec <xQueueGenericSendFromISR+0x54>
    4ee8:	b672      	cpsid	i
    4eea:	e7fe      	b.n	4eea <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    4eec:	4b2d      	ldr	r3, [pc, #180]	; (4fa4 <xQueueGenericSendFromISR+0x10c>)
    4eee:	4798      	blx	r3
    4ef0:	0003      	movs	r3, r0
    4ef2:	617b      	str	r3, [r7, #20]
	{
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    4ef4:	69bb      	ldr	r3, [r7, #24]
    4ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    4ef8:	69bb      	ldr	r3, [r7, #24]
    4efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    4efc:	429a      	cmp	r2, r3
    4efe:	d302      	bcc.n	4f06 <xQueueGenericSendFromISR+0x6e>
    4f00:	683b      	ldr	r3, [r7, #0]
    4f02:	2b02      	cmp	r3, #2
    4f04:	d142      	bne.n	4f8c <xQueueGenericSendFromISR+0xf4>
			const int8_t cTxLock = pxQueue->cTxLock;
    4f06:	2313      	movs	r3, #19
    4f08:	18fb      	adds	r3, r7, r3
    4f0a:	69ba      	ldr	r2, [r7, #24]
    4f0c:	2145      	movs	r1, #69	; 0x45
    4f0e:	5c52      	ldrb	r2, [r2, r1]
    4f10:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    4f12:	683a      	ldr	r2, [r7, #0]
    4f14:	68b9      	ldr	r1, [r7, #8]
    4f16:	69bb      	ldr	r3, [r7, #24]
    4f18:	0018      	movs	r0, r3
    4f1a:	4b23      	ldr	r3, [pc, #140]	; (4fa8 <xQueueGenericSendFromISR+0x110>)
    4f1c:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if (cTxLock == queueUNLOCKED) {
    4f1e:	2313      	movs	r3, #19
    4f20:	18fb      	adds	r3, r7, r3
    4f22:	781b      	ldrb	r3, [r3, #0]
    4f24:	b25b      	sxtb	r3, r3
    4f26:	3301      	adds	r3, #1
    4f28:	d124      	bne.n	4f74 <xQueueGenericSendFromISR+0xdc>
#if (configUSE_QUEUE_SETS == 1)
				{
					if (pxQueue->pxQueueSetContainer != NULL) {
    4f2a:	69bb      	ldr	r3, [r7, #24]
    4f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    4f2e:	2b00      	cmp	r3, #0
    4f30:	d00e      	beq.n	4f50 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    4f32:	683a      	ldr	r2, [r7, #0]
    4f34:	69bb      	ldr	r3, [r7, #24]
    4f36:	0011      	movs	r1, r2
    4f38:	0018      	movs	r0, r3
    4f3a:	4b1c      	ldr	r3, [pc, #112]	; (4fac <xQueueGenericSendFromISR+0x114>)
    4f3c:	4798      	blx	r3
    4f3e:	1e03      	subs	r3, r0, #0
    4f40:	d021      	beq.n	4f86 <xQueueGenericSendFromISR+0xee>
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if (pxHigherPriorityTaskWoken != NULL) {
    4f42:	687b      	ldr	r3, [r7, #4]
    4f44:	2b00      	cmp	r3, #0
    4f46:	d01e      	beq.n	4f86 <xQueueGenericSendFromISR+0xee>
								*pxHigherPriorityTaskWoken = pdTRUE;
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	2201      	movs	r2, #1
    4f4c:	601a      	str	r2, [r3, #0]
    4f4e:	e01a      	b.n	4f86 <xQueueGenericSendFromISR+0xee>
							}
						} else {
							mtCOVERAGE_TEST_MARKER();
						}
					} else {
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    4f50:	69bb      	ldr	r3, [r7, #24]
    4f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4f54:	2b00      	cmp	r3, #0
    4f56:	d016      	beq.n	4f86 <xQueueGenericSendFromISR+0xee>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4f58:	69bb      	ldr	r3, [r7, #24]
    4f5a:	3324      	adds	r3, #36	; 0x24
    4f5c:	0018      	movs	r0, r3
    4f5e:	4b14      	ldr	r3, [pc, #80]	; (4fb0 <xQueueGenericSendFromISR+0x118>)
    4f60:	4798      	blx	r3
    4f62:	1e03      	subs	r3, r0, #0
    4f64:	d00f      	beq.n	4f86 <xQueueGenericSendFromISR+0xee>
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if (pxHigherPriorityTaskWoken != NULL) {
    4f66:	687b      	ldr	r3, [r7, #4]
    4f68:	2b00      	cmp	r3, #0
    4f6a:	d00c      	beq.n	4f86 <xQueueGenericSendFromISR+0xee>
									*pxHigherPriorityTaskWoken = pdTRUE;
    4f6c:	687b      	ldr	r3, [r7, #4]
    4f6e:	2201      	movs	r2, #1
    4f70:	601a      	str	r2, [r3, #0]
    4f72:	e008      	b.n	4f86 <xQueueGenericSendFromISR+0xee>
				}
#endif /* configUSE_QUEUE_SETS */
			} else {
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    4f74:	2313      	movs	r3, #19
    4f76:	18fb      	adds	r3, r7, r3
    4f78:	781b      	ldrb	r3, [r3, #0]
    4f7a:	3301      	adds	r3, #1
    4f7c:	b2db      	uxtb	r3, r3
    4f7e:	b259      	sxtb	r1, r3
    4f80:	69bb      	ldr	r3, [r7, #24]
    4f82:	2245      	movs	r2, #69	; 0x45
    4f84:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    4f86:	2301      	movs	r3, #1
    4f88:	61fb      	str	r3, [r7, #28]
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    4f8a:	e001      	b.n	4f90 <xQueueGenericSendFromISR+0xf8>
		} else {
			traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue);
			xReturn = errQUEUE_FULL;
    4f8c:	2300      	movs	r3, #0
    4f8e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
    4f90:	697b      	ldr	r3, [r7, #20]
    4f92:	0018      	movs	r0, r3
    4f94:	4b07      	ldr	r3, [pc, #28]	; (4fb4 <xQueueGenericSendFromISR+0x11c>)
    4f96:	4798      	blx	r3

	return xReturn;
    4f98:	69fb      	ldr	r3, [r7, #28]
}
    4f9a:	0018      	movs	r0, r3
    4f9c:	46bd      	mov	sp, r7
    4f9e:	b008      	add	sp, #32
    4fa0:	bd80      	pop	{r7, pc}
    4fa2:	46c0      	nop			; (mov r8, r8)
    4fa4:	00004965 	.word	0x00004965
    4fa8:	00005159 	.word	0x00005159
    4fac:	00005439 	.word	0x00005439
    4fb0:	00005c61 	.word	0x00005c61
    4fb4:	00004971 	.word	0x00004971

00004fb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive(QueueHandle_t xQueue, void *const pvBuffer, TickType_t xTicksToWait)
{
    4fb8:	b580      	push	{r7, lr}
    4fba:	b08a      	sub	sp, #40	; 0x28
    4fbc:	af00      	add	r7, sp, #0
    4fbe:	60f8      	str	r0, [r7, #12]
    4fc0:	60b9      	str	r1, [r7, #8]
    4fc2:	607a      	str	r2, [r7, #4]
	BaseType_t     xEntryTimeSet = pdFALSE;
    4fc4:	2300      	movs	r3, #0
    4fc6:	627b      	str	r3, [r7, #36]	; 0x24
	TimeOut_t      xTimeOut;
	Queue_t *const pxQueue = (Queue_t *)xQueue;
    4fc8:	68fb      	ldr	r3, [r7, #12]
    4fca:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT((pxQueue));
    4fcc:	6a3b      	ldr	r3, [r7, #32]
    4fce:	2b00      	cmp	r3, #0
    4fd0:	d101      	bne.n	4fd6 <xQueueReceive+0x1e>
    4fd2:	b672      	cpsid	i
    4fd4:	e7fe      	b.n	4fd4 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    4fd6:	68bb      	ldr	r3, [r7, #8]
    4fd8:	2b00      	cmp	r3, #0
    4fda:	d103      	bne.n	4fe4 <xQueueReceive+0x2c>
    4fdc:	6a3b      	ldr	r3, [r7, #32]
    4fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4fe0:	2b00      	cmp	r3, #0
    4fe2:	d101      	bne.n	4fe8 <xQueueReceive+0x30>
    4fe4:	2301      	movs	r3, #1
    4fe6:	e000      	b.n	4fea <xQueueReceive+0x32>
    4fe8:	2300      	movs	r3, #0
    4fea:	2b00      	cmp	r3, #0
    4fec:	d101      	bne.n	4ff2 <xQueueReceive+0x3a>
    4fee:	b672      	cpsid	i
    4ff0:	e7fe      	b.n	4ff0 <xQueueReceive+0x38>

/* Cannot block if the scheduler is suspended. */
#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))
	{
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4ff2:	4b4c      	ldr	r3, [pc, #304]	; (5124 <xQueueReceive+0x16c>)
    4ff4:	4798      	blx	r3
    4ff6:	1e03      	subs	r3, r0, #0
    4ff8:	d102      	bne.n	5000 <xQueueReceive+0x48>
    4ffa:	687b      	ldr	r3, [r7, #4]
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	d101      	bne.n	5004 <xQueueReceive+0x4c>
    5000:	2301      	movs	r3, #1
    5002:	e000      	b.n	5006 <xQueueReceive+0x4e>
    5004:	2300      	movs	r3, #0
    5006:	2b00      	cmp	r3, #0
    5008:	d101      	bne.n	500e <xQueueReceive+0x56>
    500a:	b672      	cpsid	i
    500c:	e7fe      	b.n	500c <xQueueReceive+0x54>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for (;;) {
		taskENTER_CRITICAL();
    500e:	4b46      	ldr	r3, [pc, #280]	; (5128 <xQueueReceive+0x170>)
    5010:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    5012:	6a3b      	ldr	r3, [r7, #32]
    5014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5016:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if (uxMessagesWaiting > (UBaseType_t)0) {
    5018:	69fb      	ldr	r3, [r7, #28]
    501a:	2b00      	cmp	r3, #0
    501c:	d01a      	beq.n	5054 <xQueueReceive+0x9c>
				/* Data available, remove one item. */
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    501e:	68ba      	ldr	r2, [r7, #8]
    5020:	6a3b      	ldr	r3, [r7, #32]
    5022:	0011      	movs	r1, r2
    5024:	0018      	movs	r0, r3
    5026:	4b41      	ldr	r3, [pc, #260]	; (512c <xQueueReceive+0x174>)
    5028:	4798      	blx	r3
				traceQUEUE_RECEIVE(pxQueue);
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    502a:	69fb      	ldr	r3, [r7, #28]
    502c:	1e5a      	subs	r2, r3, #1
    502e:	6a3b      	ldr	r3, [r7, #32]
    5030:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5032:	6a3b      	ldr	r3, [r7, #32]
    5034:	691b      	ldr	r3, [r3, #16]
    5036:	2b00      	cmp	r3, #0
    5038:	d008      	beq.n	504c <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    503a:	6a3b      	ldr	r3, [r7, #32]
    503c:	3310      	adds	r3, #16
    503e:	0018      	movs	r0, r3
    5040:	4b3b      	ldr	r3, [pc, #236]	; (5130 <xQueueReceive+0x178>)
    5042:	4798      	blx	r3
    5044:	1e03      	subs	r3, r0, #0
    5046:	d001      	beq.n	504c <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    5048:	4b3a      	ldr	r3, [pc, #232]	; (5134 <xQueueReceive+0x17c>)
    504a:	4798      	blx	r3
					}
				} else {
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
    504c:	4b3a      	ldr	r3, [pc, #232]	; (5138 <xQueueReceive+0x180>)
    504e:	4798      	blx	r3
				return pdPASS;
    5050:	2301      	movs	r3, #1
    5052:	e062      	b.n	511a <xQueueReceive+0x162>
			} else {
				if (xTicksToWait == (TickType_t)0) {
    5054:	687b      	ldr	r3, [r7, #4]
    5056:	2b00      	cmp	r3, #0
    5058:	d103      	bne.n	5062 <xQueueReceive+0xaa>
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    505a:	4b37      	ldr	r3, [pc, #220]	; (5138 <xQueueReceive+0x180>)
    505c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED(pxQueue);
					return errQUEUE_EMPTY;
    505e:	2300      	movs	r3, #0
    5060:	e05b      	b.n	511a <xQueueReceive+0x162>
				} else if (xEntryTimeSet == pdFALSE) {
    5062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5064:	2b00      	cmp	r3, #0
    5066:	d106      	bne.n	5076 <xQueueReceive+0xbe>
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState(&xTimeOut);
    5068:	2314      	movs	r3, #20
    506a:	18fb      	adds	r3, r7, r3
    506c:	0018      	movs	r0, r3
    506e:	4b33      	ldr	r3, [pc, #204]	; (513c <xQueueReceive+0x184>)
    5070:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    5072:	2301      	movs	r3, #1
    5074:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    5076:	4b30      	ldr	r3, [pc, #192]	; (5138 <xQueueReceive+0x180>)
    5078:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    507a:	4b31      	ldr	r3, [pc, #196]	; (5140 <xQueueReceive+0x188>)
    507c:	4798      	blx	r3
		prvLockQueue(pxQueue);
    507e:	4b2a      	ldr	r3, [pc, #168]	; (5128 <xQueueReceive+0x170>)
    5080:	4798      	blx	r3
    5082:	6a3b      	ldr	r3, [r7, #32]
    5084:	2244      	movs	r2, #68	; 0x44
    5086:	5c9b      	ldrb	r3, [r3, r2]
    5088:	b25b      	sxtb	r3, r3
    508a:	3301      	adds	r3, #1
    508c:	d103      	bne.n	5096 <xQueueReceive+0xde>
    508e:	6a3b      	ldr	r3, [r7, #32]
    5090:	2244      	movs	r2, #68	; 0x44
    5092:	2100      	movs	r1, #0
    5094:	5499      	strb	r1, [r3, r2]
    5096:	6a3b      	ldr	r3, [r7, #32]
    5098:	2245      	movs	r2, #69	; 0x45
    509a:	5c9b      	ldrb	r3, [r3, r2]
    509c:	b25b      	sxtb	r3, r3
    509e:	3301      	adds	r3, #1
    50a0:	d103      	bne.n	50aa <xQueueReceive+0xf2>
    50a2:	6a3b      	ldr	r3, [r7, #32]
    50a4:	2245      	movs	r2, #69	; 0x45
    50a6:	2100      	movs	r1, #0
    50a8:	5499      	strb	r1, [r3, r2]
    50aa:	4b23      	ldr	r3, [pc, #140]	; (5138 <xQueueReceive+0x180>)
    50ac:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    50ae:	1d3a      	adds	r2, r7, #4
    50b0:	2314      	movs	r3, #20
    50b2:	18fb      	adds	r3, r7, r3
    50b4:	0011      	movs	r1, r2
    50b6:	0018      	movs	r0, r3
    50b8:	4b22      	ldr	r3, [pc, #136]	; (5144 <xQueueReceive+0x18c>)
    50ba:	4798      	blx	r3
    50bc:	1e03      	subs	r3, r0, #0
    50be:	d11e      	bne.n	50fe <xQueueReceive+0x146>
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    50c0:	6a3b      	ldr	r3, [r7, #32]
    50c2:	0018      	movs	r0, r3
    50c4:	4b20      	ldr	r3, [pc, #128]	; (5148 <xQueueReceive+0x190>)
    50c6:	4798      	blx	r3
    50c8:	1e03      	subs	r3, r0, #0
    50ca:	d011      	beq.n	50f0 <xQueueReceive+0x138>
				traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue);
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    50cc:	6a3b      	ldr	r3, [r7, #32]
    50ce:	3324      	adds	r3, #36	; 0x24
    50d0:	687a      	ldr	r2, [r7, #4]
    50d2:	0011      	movs	r1, r2
    50d4:	0018      	movs	r0, r3
    50d6:	4b1d      	ldr	r3, [pc, #116]	; (514c <xQueueReceive+0x194>)
    50d8:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    50da:	6a3b      	ldr	r3, [r7, #32]
    50dc:	0018      	movs	r0, r3
    50de:	4b1c      	ldr	r3, [pc, #112]	; (5150 <xQueueReceive+0x198>)
    50e0:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    50e2:	4b1c      	ldr	r3, [pc, #112]	; (5154 <xQueueReceive+0x19c>)
    50e4:	4798      	blx	r3
    50e6:	1e03      	subs	r3, r0, #0
    50e8:	d191      	bne.n	500e <xQueueReceive+0x56>
					portYIELD_WITHIN_API();
    50ea:	4b12      	ldr	r3, [pc, #72]	; (5134 <xQueueReceive+0x17c>)
    50ec:	4798      	blx	r3
    50ee:	e78e      	b.n	500e <xQueueReceive+0x56>
					mtCOVERAGE_TEST_MARKER();
				}
			} else {
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue(pxQueue);
    50f0:	6a3b      	ldr	r3, [r7, #32]
    50f2:	0018      	movs	r0, r3
    50f4:	4b16      	ldr	r3, [pc, #88]	; (5150 <xQueueReceive+0x198>)
    50f6:	4798      	blx	r3
				(void)xTaskResumeAll();
    50f8:	4b16      	ldr	r3, [pc, #88]	; (5154 <xQueueReceive+0x19c>)
    50fa:	4798      	blx	r3
    50fc:	e787      	b.n	500e <xQueueReceive+0x56>
			}
		} else {
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue(pxQueue);
    50fe:	6a3b      	ldr	r3, [r7, #32]
    5100:	0018      	movs	r0, r3
    5102:	4b13      	ldr	r3, [pc, #76]	; (5150 <xQueueReceive+0x198>)
    5104:	4798      	blx	r3
			(void)xTaskResumeAll();
    5106:	4b13      	ldr	r3, [pc, #76]	; (5154 <xQueueReceive+0x19c>)
    5108:	4798      	blx	r3

			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    510a:	6a3b      	ldr	r3, [r7, #32]
    510c:	0018      	movs	r0, r3
    510e:	4b0e      	ldr	r3, [pc, #56]	; (5148 <xQueueReceive+0x190>)
    5110:	4798      	blx	r3
    5112:	1e03      	subs	r3, r0, #0
    5114:	d100      	bne.n	5118 <xQueueReceive+0x160>
    5116:	e77a      	b.n	500e <xQueueReceive+0x56>
				traceQUEUE_RECEIVE_FAILED(pxQueue);
				return errQUEUE_EMPTY;
    5118:	2300      	movs	r3, #0
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    511a:	0018      	movs	r0, r3
    511c:	46bd      	mov	sp, r7
    511e:	b00a      	add	sp, #40	; 0x28
    5120:	bd80      	pop	{r7, pc}
    5122:	46c0      	nop			; (mov r8, r8)
    5124:	00005f99 	.word	0x00005f99
    5128:	00004911 	.word	0x00004911
    512c:	00005215 	.word	0x00005215
    5130:	00005c61 	.word	0x00005c61
    5134:	000048f1 	.word	0x000048f1
    5138:	00004935 	.word	0x00004935
    513c:	00005d21 	.word	0x00005d21
    5140:	00005849 	.word	0x00005849
    5144:	00005d49 	.word	0x00005d49
    5148:	00005355 	.word	0x00005355
    514c:	00005bc9 	.word	0x00005bc9
    5150:	00005265 	.word	0x00005265
    5154:	00005861 	.word	0x00005861

00005158 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue(Queue_t *const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition)
{
    5158:	b580      	push	{r7, lr}
    515a:	b086      	sub	sp, #24
    515c:	af00      	add	r7, sp, #0
    515e:	60f8      	str	r0, [r7, #12]
    5160:	60b9      	str	r1, [r7, #8]
    5162:	607a      	str	r2, [r7, #4]
	BaseType_t  xReturn = pdFALSE;
    5164:	2300      	movs	r3, #0
    5166:	613b      	str	r3, [r7, #16]
	UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    5168:	68fb      	ldr	r3, [r7, #12]
    516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    516c:	617b      	str	r3, [r7, #20]

	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    516e:	68fb      	ldr	r3, [r7, #12]
    5170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5172:	2b00      	cmp	r3, #0
    5174:	d043      	beq.n	51fe <prvCopyDataToQueue+0xa6>
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}
#endif /* configUSE_MUTEXES */
	} else if (xPosition == queueSEND_TO_BACK) {
    5176:	687b      	ldr	r3, [r7, #4]
    5178:	2b00      	cmp	r3, #0
    517a:	d119      	bne.n	51b0 <prvCopyDataToQueue+0x58>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    517c:	68fb      	ldr	r3, [r7, #12]
    517e:	6898      	ldr	r0, [r3, #8]
		             pvItemToQueue,
		             (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 MISRA exception as the casts are only redundant
    5180:	68fb      	ldr	r3, [r7, #12]
    5182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		(void)memcpy((void *)pxQueue->pcWriteTo,
    5184:	68bb      	ldr	r3, [r7, #8]
    5186:	0019      	movs	r1, r3
    5188:	4b21      	ldr	r3, [pc, #132]	; (5210 <prvCopyDataToQueue+0xb8>)
    518a:	4798      	blx	r3
		                                              for some ports, plus previous logic ensures a null pointer can
		                                              only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    518c:	68fb      	ldr	r3, [r7, #12]
    518e:	689a      	ldr	r2, [r3, #8]
    5190:	68fb      	ldr	r3, [r7, #12]
    5192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5194:	18d2      	adds	r2, r2, r3
    5196:	68fb      	ldr	r3, [r7, #12]
    5198:	609a      	str	r2, [r3, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    519a:	68fb      	ldr	r3, [r7, #12]
    519c:	689a      	ldr	r2, [r3, #8]
    519e:	68fb      	ldr	r3, [r7, #12]
    51a0:	685b      	ldr	r3, [r3, #4]
    51a2:	429a      	cmp	r2, r3
    51a4:	d32b      	bcc.n	51fe <prvCopyDataToQueue+0xa6>
		                                              the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    51a6:	68fb      	ldr	r3, [r7, #12]
    51a8:	681a      	ldr	r2, [r3, #0]
    51aa:	68fb      	ldr	r3, [r7, #12]
    51ac:	609a      	str	r2, [r3, #8]
    51ae:	e026      	b.n	51fe <prvCopyDataToQueue+0xa6>
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	} else {
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    51b0:	68fb      	ldr	r3, [r7, #12]
    51b2:	68d8      	ldr	r0, [r3, #12]
		             pvItemToQueue,
		             (size_t)pxQueue
		                 ->uxItemSize); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    51b4:	68fb      	ldr	r3, [r7, #12]
    51b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    51b8:	68bb      	ldr	r3, [r7, #8]
    51ba:	0019      	movs	r1, r3
    51bc:	4b14      	ldr	r3, [pc, #80]	; (5210 <prvCopyDataToQueue+0xb8>)
    51be:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    51c0:	68fb      	ldr	r3, [r7, #12]
    51c2:	68da      	ldr	r2, [r3, #12]
    51c4:	68fb      	ldr	r3, [r7, #12]
    51c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    51c8:	425b      	negs	r3, r3
    51ca:	18d2      	adds	r2, r2, r3
    51cc:	68fb      	ldr	r3, [r7, #12]
    51ce:	60da      	str	r2, [r3, #12]
		if (pxQueue->u.pcReadFrom
    51d0:	68fb      	ldr	r3, [r7, #12]
    51d2:	68da      	ldr	r2, [r3, #12]
		    < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest
    51d4:	68fb      	ldr	r3, [r7, #12]
    51d6:	681b      	ldr	r3, [r3, #0]
		if (pxQueue->u.pcReadFrom
    51d8:	429a      	cmp	r2, r3
    51da:	d207      	bcs.n	51ec <prvCopyDataToQueue+0x94>
		                          solution. */
		{
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    51dc:	68fb      	ldr	r3, [r7, #12]
    51de:	685a      	ldr	r2, [r3, #4]
    51e0:	68fb      	ldr	r3, [r7, #12]
    51e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    51e4:	425b      	negs	r3, r3
    51e6:	18d2      	adds	r2, r2, r3
    51e8:	68fb      	ldr	r3, [r7, #12]
    51ea:	60da      	str	r2, [r3, #12]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}

		if (xPosition == queueOVERWRITE) {
    51ec:	687b      	ldr	r3, [r7, #4]
    51ee:	2b02      	cmp	r3, #2
    51f0:	d105      	bne.n	51fe <prvCopyDataToQueue+0xa6>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    51f2:	697b      	ldr	r3, [r7, #20]
    51f4:	2b00      	cmp	r3, #0
    51f6:	d002      	beq.n	51fe <prvCopyDataToQueue+0xa6>
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    51f8:	697b      	ldr	r3, [r7, #20]
    51fa:	3b01      	subs	r3, #1
    51fc:	617b      	str	r3, [r7, #20]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    51fe:	697b      	ldr	r3, [r7, #20]
    5200:	1c5a      	adds	r2, r3, #1
    5202:	68fb      	ldr	r3, [r7, #12]
    5204:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    5206:	693b      	ldr	r3, [r7, #16]
}
    5208:	0018      	movs	r0, r3
    520a:	46bd      	mov	sp, r7
    520c:	b006      	add	sp, #24
    520e:	bd80      	pop	{r7, pc}
    5210:	000083f9 	.word	0x000083f9

00005214 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue(Queue_t *const pxQueue, void *const pvBuffer)
{
    5214:	b580      	push	{r7, lr}
    5216:	b082      	sub	sp, #8
    5218:	af00      	add	r7, sp, #0
    521a:	6078      	str	r0, [r7, #4]
    521c:	6039      	str	r1, [r7, #0]
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    521e:	687b      	ldr	r3, [r7, #4]
    5220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5222:	2b00      	cmp	r3, #0
    5224:	d018      	beq.n	5258 <prvCopyDataFromQueue+0x44>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    5226:	687b      	ldr	r3, [r7, #4]
    5228:	68da      	ldr	r2, [r3, #12]
    522a:	687b      	ldr	r3, [r7, #4]
    522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    522e:	18d2      	adds	r2, r2, r3
    5230:	687b      	ldr	r3, [r7, #4]
    5232:	60da      	str	r2, [r3, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    5234:	687b      	ldr	r3, [r7, #4]
    5236:	68da      	ldr	r2, [r3, #12]
    5238:	687b      	ldr	r3, [r7, #4]
    523a:	685b      	ldr	r3, [r3, #4]
    523c:	429a      	cmp	r2, r3
    523e:	d303      	bcc.n	5248 <prvCopyDataFromQueue+0x34>
		                                                 operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    5240:	687b      	ldr	r3, [r7, #4]
    5242:	681a      	ldr	r2, [r3, #0]
    5244:	687b      	ldr	r3, [r7, #4]
    5246:	60da      	str	r2, [r3, #12]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
		(void)memcpy((void *)pvBuffer,
		             (void *)pxQueue->u.pcReadFrom,
    5248:	687b      	ldr	r3, [r7, #4]
    524a:	68d9      	ldr	r1, [r3, #12]
		             (size_t)pxQueue->uxItemSize); /*lint !e961 !e418 MISRA exception as the casts are only redundant
    524c:	687b      	ldr	r3, [r7, #4]
    524e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		(void)memcpy((void *)pvBuffer,
    5250:	683b      	ldr	r3, [r7, #0]
    5252:	0018      	movs	r0, r3
    5254:	4b02      	ldr	r3, [pc, #8]	; (5260 <prvCopyDataFromQueue+0x4c>)
    5256:	4798      	blx	r3
		                                              for some ports.  Also previous logic ensures a null pointer can
		                                              only be passed to memcpy() when the count is 0. */
	}
}
    5258:	46c0      	nop			; (mov r8, r8)
    525a:	46bd      	mov	sp, r7
    525c:	b002      	add	sp, #8
    525e:	bd80      	pop	{r7, pc}
    5260:	000083f9 	.word	0x000083f9

00005264 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue(Queue_t *const pxQueue)
{
    5264:	b580      	push	{r7, lr}
    5266:	b084      	sub	sp, #16
    5268:	af00      	add	r7, sp, #0
    526a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    526c:	4b34      	ldr	r3, [pc, #208]	; (5340 <prvUnlockQueue+0xdc>)
    526e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    5270:	230f      	movs	r3, #15
    5272:	18fb      	adds	r3, r7, r3
    5274:	687a      	ldr	r2, [r7, #4]
    5276:	2145      	movs	r1, #69	; 0x45
    5278:	5c52      	ldrb	r2, [r2, r1]
    527a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    527c:	e022      	b.n	52c4 <prvUnlockQueue+0x60>
/* Data was posted while the queue was locked.  Are any tasks
blocked waiting for data to become available? */
#if (configUSE_QUEUE_SETS == 1)
			{
				if (pxQueue->pxQueueSetContainer != NULL) {
    527e:	687b      	ldr	r3, [r7, #4]
    5280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5282:	2b00      	cmp	r3, #0
    5284:	d009      	beq.n	529a <prvUnlockQueue+0x36>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    5286:	687b      	ldr	r3, [r7, #4]
    5288:	2100      	movs	r1, #0
    528a:	0018      	movs	r0, r3
    528c:	4b2d      	ldr	r3, [pc, #180]	; (5344 <prvUnlockQueue+0xe0>)
    528e:	4798      	blx	r3
    5290:	1e03      	subs	r3, r0, #0
    5292:	d00f      	beq.n	52b4 <prvUnlockQueue+0x50>
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    5294:	4b2c      	ldr	r3, [pc, #176]	; (5348 <prvUnlockQueue+0xe4>)
    5296:	4798      	blx	r3
    5298:	e00c      	b.n	52b4 <prvUnlockQueue+0x50>
					}
				} else {
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    529a:	687b      	ldr	r3, [r7, #4]
    529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    529e:	2b00      	cmp	r3, #0
    52a0:	d017      	beq.n	52d2 <prvUnlockQueue+0x6e>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    52a2:	687b      	ldr	r3, [r7, #4]
    52a4:	3324      	adds	r3, #36	; 0x24
    52a6:	0018      	movs	r0, r3
    52a8:	4b28      	ldr	r3, [pc, #160]	; (534c <prvUnlockQueue+0xe8>)
    52aa:	4798      	blx	r3
    52ac:	1e03      	subs	r3, r0, #0
    52ae:	d001      	beq.n	52b4 <prvUnlockQueue+0x50>
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    52b0:	4b25      	ldr	r3, [pc, #148]	; (5348 <prvUnlockQueue+0xe4>)
    52b2:	4798      	blx	r3
					break;
				}
			}
#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    52b4:	230f      	movs	r3, #15
    52b6:	18fb      	adds	r3, r7, r3
    52b8:	781b      	ldrb	r3, [r3, #0]
    52ba:	3b01      	subs	r3, #1
    52bc:	b2da      	uxtb	r2, r3
    52be:	230f      	movs	r3, #15
    52c0:	18fb      	adds	r3, r7, r3
    52c2:	701a      	strb	r2, [r3, #0]
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    52c4:	230f      	movs	r3, #15
    52c6:	18fb      	adds	r3, r7, r3
    52c8:	781b      	ldrb	r3, [r3, #0]
    52ca:	b25b      	sxtb	r3, r3
    52cc:	2b00      	cmp	r3, #0
    52ce:	dcd6      	bgt.n	527e <prvUnlockQueue+0x1a>
    52d0:	e000      	b.n	52d4 <prvUnlockQueue+0x70>
						break;
    52d2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
    52d4:	687b      	ldr	r3, [r7, #4]
    52d6:	2245      	movs	r2, #69	; 0x45
    52d8:	21ff      	movs	r1, #255	; 0xff
    52da:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    52dc:	4b1c      	ldr	r3, [pc, #112]	; (5350 <prvUnlockQueue+0xec>)
    52de:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    52e0:	4b17      	ldr	r3, [pc, #92]	; (5340 <prvUnlockQueue+0xdc>)
    52e2:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    52e4:	230e      	movs	r3, #14
    52e6:	18fb      	adds	r3, r7, r3
    52e8:	687a      	ldr	r2, [r7, #4]
    52ea:	2144      	movs	r1, #68	; 0x44
    52ec:	5c52      	ldrb	r2, [r2, r1]
    52ee:	701a      	strb	r2, [r3, #0]

		while (cRxLock > queueLOCKED_UNMODIFIED) {
    52f0:	e014      	b.n	531c <prvUnlockQueue+0xb8>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    52f2:	687b      	ldr	r3, [r7, #4]
    52f4:	691b      	ldr	r3, [r3, #16]
    52f6:	2b00      	cmp	r3, #0
    52f8:	d017      	beq.n	532a <prvUnlockQueue+0xc6>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    52fa:	687b      	ldr	r3, [r7, #4]
    52fc:	3310      	adds	r3, #16
    52fe:	0018      	movs	r0, r3
    5300:	4b12      	ldr	r3, [pc, #72]	; (534c <prvUnlockQueue+0xe8>)
    5302:	4798      	blx	r3
    5304:	1e03      	subs	r3, r0, #0
    5306:	d001      	beq.n	530c <prvUnlockQueue+0xa8>
					vTaskMissedYield();
    5308:	4b0f      	ldr	r3, [pc, #60]	; (5348 <prvUnlockQueue+0xe4>)
    530a:	4798      	blx	r3
				} else {
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    530c:	230e      	movs	r3, #14
    530e:	18fb      	adds	r3, r7, r3
    5310:	781b      	ldrb	r3, [r3, #0]
    5312:	3b01      	subs	r3, #1
    5314:	b2da      	uxtb	r2, r3
    5316:	230e      	movs	r3, #14
    5318:	18fb      	adds	r3, r7, r3
    531a:	701a      	strb	r2, [r3, #0]
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    531c:	230e      	movs	r3, #14
    531e:	18fb      	adds	r3, r7, r3
    5320:	781b      	ldrb	r3, [r3, #0]
    5322:	b25b      	sxtb	r3, r3
    5324:	2b00      	cmp	r3, #0
    5326:	dce4      	bgt.n	52f2 <prvUnlockQueue+0x8e>
    5328:	e000      	b.n	532c <prvUnlockQueue+0xc8>
			} else {
				break;
    532a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    532c:	687b      	ldr	r3, [r7, #4]
    532e:	2244      	movs	r2, #68	; 0x44
    5330:	21ff      	movs	r1, #255	; 0xff
    5332:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    5334:	4b06      	ldr	r3, [pc, #24]	; (5350 <prvUnlockQueue+0xec>)
    5336:	4798      	blx	r3
}
    5338:	46c0      	nop			; (mov r8, r8)
    533a:	46bd      	mov	sp, r7
    533c:	b004      	add	sp, #16
    533e:	bd80      	pop	{r7, pc}
    5340:	00004911 	.word	0x00004911
    5344:	00005439 	.word	0x00005439
    5348:	00005df5 	.word	0x00005df5
    534c:	00005c61 	.word	0x00005c61
    5350:	00004935 	.word	0x00004935

00005354 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    5354:	b580      	push	{r7, lr}
    5356:	b084      	sub	sp, #16
    5358:	af00      	add	r7, sp, #0
    535a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    535c:	4b08      	ldr	r3, [pc, #32]	; (5380 <prvIsQueueEmpty+0x2c>)
    535e:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    5360:	687b      	ldr	r3, [r7, #4]
    5362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5364:	2b00      	cmp	r3, #0
    5366:	d102      	bne.n	536e <prvIsQueueEmpty+0x1a>
			xReturn = pdTRUE;
    5368:	2301      	movs	r3, #1
    536a:	60fb      	str	r3, [r7, #12]
    536c:	e001      	b.n	5372 <prvIsQueueEmpty+0x1e>
		} else {
			xReturn = pdFALSE;
    536e:	2300      	movs	r3, #0
    5370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    5372:	4b04      	ldr	r3, [pc, #16]	; (5384 <prvIsQueueEmpty+0x30>)
    5374:	4798      	blx	r3

	return xReturn;
    5376:	68fb      	ldr	r3, [r7, #12]
}
    5378:	0018      	movs	r0, r3
    537a:	46bd      	mov	sp, r7
    537c:	b004      	add	sp, #16
    537e:	bd80      	pop	{r7, pc}
    5380:	00004911 	.word	0x00004911
    5384:	00004935 	.word	0x00004935

00005388 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t *pxQueue)
{
    5388:	b580      	push	{r7, lr}
    538a:	b084      	sub	sp, #16
    538c:	af00      	add	r7, sp, #0
    538e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    5390:	4b09      	ldr	r3, [pc, #36]	; (53b8 <prvIsQueueFull+0x30>)
    5392:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    5394:	687b      	ldr	r3, [r7, #4]
    5396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5398:	687b      	ldr	r3, [r7, #4]
    539a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    539c:	429a      	cmp	r2, r3
    539e:	d102      	bne.n	53a6 <prvIsQueueFull+0x1e>
			xReturn = pdTRUE;
    53a0:	2301      	movs	r3, #1
    53a2:	60fb      	str	r3, [r7, #12]
    53a4:	e001      	b.n	53aa <prvIsQueueFull+0x22>
		} else {
			xReturn = pdFALSE;
    53a6:	2300      	movs	r3, #0
    53a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    53aa:	4b04      	ldr	r3, [pc, #16]	; (53bc <prvIsQueueFull+0x34>)
    53ac:	4798      	blx	r3

	return xReturn;
    53ae:	68fb      	ldr	r3, [r7, #12]
}
    53b0:	0018      	movs	r0, r3
    53b2:	46bd      	mov	sp, r7
    53b4:	b004      	add	sp, #16
    53b6:	bd80      	pop	{r7, pc}
    53b8:	00004911 	.word	0x00004911
    53bc:	00004935 	.word	0x00004935

000053c0 <vQueueWaitForMessageRestricted>:
	/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vQueueWaitForMessageRestricted(QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely)
{
    53c0:	b580      	push	{r7, lr}
    53c2:	b086      	sub	sp, #24
    53c4:	af00      	add	r7, sp, #0
    53c6:	60f8      	str	r0, [r7, #12]
    53c8:	60b9      	str	r1, [r7, #8]
    53ca:	607a      	str	r2, [r7, #4]
	Queue_t *const pxQueue = (Queue_t *)xQueue;
    53cc:	68fb      	ldr	r3, [r7, #12]
    53ce:	617b      	str	r3, [r7, #20]
	will not actually cause the task to block, just place it on a blocked
	list.  It will not block until the scheduler is unlocked - at which
	time a yield will be performed.  If an item is added to the queue while
	the queue is locked, and the calling task blocks on the queue, then the
	calling task will be immediately unblocked when the queue is unlocked. */
	prvLockQueue(pxQueue);
    53d0:	4b15      	ldr	r3, [pc, #84]	; (5428 <vQueueWaitForMessageRestricted+0x68>)
    53d2:	4798      	blx	r3
    53d4:	697b      	ldr	r3, [r7, #20]
    53d6:	2244      	movs	r2, #68	; 0x44
    53d8:	5c9b      	ldrb	r3, [r3, r2]
    53da:	b25b      	sxtb	r3, r3
    53dc:	3301      	adds	r3, #1
    53de:	d103      	bne.n	53e8 <vQueueWaitForMessageRestricted+0x28>
    53e0:	697b      	ldr	r3, [r7, #20]
    53e2:	2244      	movs	r2, #68	; 0x44
    53e4:	2100      	movs	r1, #0
    53e6:	5499      	strb	r1, [r3, r2]
    53e8:	697b      	ldr	r3, [r7, #20]
    53ea:	2245      	movs	r2, #69	; 0x45
    53ec:	5c9b      	ldrb	r3, [r3, r2]
    53ee:	b25b      	sxtb	r3, r3
    53f0:	3301      	adds	r3, #1
    53f2:	d103      	bne.n	53fc <vQueueWaitForMessageRestricted+0x3c>
    53f4:	697b      	ldr	r3, [r7, #20]
    53f6:	2245      	movs	r2, #69	; 0x45
    53f8:	2100      	movs	r1, #0
    53fa:	5499      	strb	r1, [r3, r2]
    53fc:	4b0b      	ldr	r3, [pc, #44]	; (542c <vQueueWaitForMessageRestricted+0x6c>)
    53fe:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    5400:	697b      	ldr	r3, [r7, #20]
    5402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5404:	2b00      	cmp	r3, #0
    5406:	d106      	bne.n	5416 <vQueueWaitForMessageRestricted+0x56>
		/* There is nothing in the queue, block for the specified period. */
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    5408:	697b      	ldr	r3, [r7, #20]
    540a:	3324      	adds	r3, #36	; 0x24
    540c:	687a      	ldr	r2, [r7, #4]
    540e:	68b9      	ldr	r1, [r7, #8]
    5410:	0018      	movs	r0, r3
    5412:	4b07      	ldr	r3, [pc, #28]	; (5430 <vQueueWaitForMessageRestricted+0x70>)
    5414:	4798      	blx	r3
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
	prvUnlockQueue(pxQueue);
    5416:	697b      	ldr	r3, [r7, #20]
    5418:	0018      	movs	r0, r3
    541a:	4b06      	ldr	r3, [pc, #24]	; (5434 <vQueueWaitForMessageRestricted+0x74>)
    541c:	4798      	blx	r3
}
    541e:	46c0      	nop			; (mov r8, r8)
    5420:	46bd      	mov	sp, r7
    5422:	b006      	add	sp, #24
    5424:	bd80      	pop	{r7, pc}
    5426:	46c0      	nop			; (mov r8, r8)
    5428:	00004911 	.word	0x00004911
    542c:	00004935 	.word	0x00004935
    5430:	00005c0d 	.word	0x00005c0d
    5434:	00005265 	.word	0x00005265

00005438 <prvNotifyQueueSetContainer>:
	/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    5438:	b580      	push	{r7, lr}
    543a:	b086      	sub	sp, #24
    543c:	af00      	add	r7, sp, #0
    543e:	6078      	str	r0, [r7, #4]
    5440:	6039      	str	r1, [r7, #0]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    5442:	687b      	ldr	r3, [r7, #4]
    5444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    5446:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn             = pdFALSE;
    5448:	2300      	movs	r3, #0
    544a:	617b      	str	r3, [r7, #20]

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    544c:	693b      	ldr	r3, [r7, #16]
    544e:	2b00      	cmp	r3, #0
    5450:	d101      	bne.n	5456 <prvNotifyQueueSetContainer+0x1e>
    5452:	b672      	cpsid	i
    5454:	e7fe      	b.n	5454 <prvNotifyQueueSetContainer+0x1c>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    5456:	693b      	ldr	r3, [r7, #16]
    5458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    545a:	693b      	ldr	r3, [r7, #16]
    545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    545e:	429a      	cmp	r2, r3
    5460:	d301      	bcc.n	5466 <prvNotifyQueueSetContainer+0x2e>
    5462:	b672      	cpsid	i
    5464:	e7fe      	b.n	5464 <prvNotifyQueueSetContainer+0x2c>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    5466:	693b      	ldr	r3, [r7, #16]
    5468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    546a:	693b      	ldr	r3, [r7, #16]
    546c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    546e:	429a      	cmp	r2, r3
    5470:	d22a      	bcs.n	54c8 <prvNotifyQueueSetContainer+0x90>
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    5472:	230f      	movs	r3, #15
    5474:	18fb      	adds	r3, r7, r3
    5476:	693a      	ldr	r2, [r7, #16]
    5478:	2145      	movs	r1, #69	; 0x45
    547a:	5c52      	ldrb	r2, [r2, r1]
    547c:	701a      	strb	r2, [r3, #0]

		traceQUEUE_SEND(pxQueueSetContainer);

		/* The data copied is the handle of the queue that contains data. */
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    547e:	683a      	ldr	r2, [r7, #0]
    5480:	1d39      	adds	r1, r7, #4
    5482:	693b      	ldr	r3, [r7, #16]
    5484:	0018      	movs	r0, r3
    5486:	4b13      	ldr	r3, [pc, #76]	; (54d4 <prvNotifyQueueSetContainer+0x9c>)
    5488:	4798      	blx	r3
    548a:	0003      	movs	r3, r0
    548c:	617b      	str	r3, [r7, #20]

		if (cTxLock == queueUNLOCKED) {
    548e:	230f      	movs	r3, #15
    5490:	18fb      	adds	r3, r7, r3
    5492:	781b      	ldrb	r3, [r3, #0]
    5494:	b25b      	sxtb	r3, r3
    5496:	3301      	adds	r3, #1
    5498:	d10d      	bne.n	54b6 <prvNotifyQueueSetContainer+0x7e>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    549a:	693b      	ldr	r3, [r7, #16]
    549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    549e:	2b00      	cmp	r3, #0
    54a0:	d012      	beq.n	54c8 <prvNotifyQueueSetContainer+0x90>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    54a2:	693b      	ldr	r3, [r7, #16]
    54a4:	3324      	adds	r3, #36	; 0x24
    54a6:	0018      	movs	r0, r3
    54a8:	4b0b      	ldr	r3, [pc, #44]	; (54d8 <prvNotifyQueueSetContainer+0xa0>)
    54aa:	4798      	blx	r3
    54ac:	1e03      	subs	r3, r0, #0
    54ae:	d00b      	beq.n	54c8 <prvNotifyQueueSetContainer+0x90>
					/* The task waiting has a higher priority. */
					xReturn = pdTRUE;
    54b0:	2301      	movs	r3, #1
    54b2:	617b      	str	r3, [r7, #20]
    54b4:	e008      	b.n	54c8 <prvNotifyQueueSetContainer+0x90>
				}
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		} else {
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    54b6:	230f      	movs	r3, #15
    54b8:	18fb      	adds	r3, r7, r3
    54ba:	781b      	ldrb	r3, [r3, #0]
    54bc:	3301      	adds	r3, #1
    54be:	b2db      	uxtb	r3, r3
    54c0:	b259      	sxtb	r1, r3
    54c2:	693b      	ldr	r3, [r7, #16]
    54c4:	2245      	movs	r2, #69	; 0x45
    54c6:	5499      	strb	r1, [r3, r2]
		}
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    54c8:	697b      	ldr	r3, [r7, #20]
}
    54ca:	0018      	movs	r0, r3
    54cc:	46bd      	mov	sp, r7
    54ce:	b006      	add	sp, #24
    54d0:	bd80      	pop	{r7, pc}
    54d2:	46c0      	nop			; (mov r8, r8)
    54d4:	00005159 	.word	0x00005159
    54d8:	00005c61 	.word	0x00005c61

000054dc <xTaskCreate>:
BaseType_t xTaskCreate(
    TaskFunction_t    pxTaskCode,
    const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    const configSTACK_DEPTH_TYPE usStackDepth, void *const pvParameters, UBaseType_t uxPriority,
    TaskHandle_t *const pxCreatedTask)
{
    54dc:	b590      	push	{r4, r7, lr}
    54de:	b08d      	sub	sp, #52	; 0x34
    54e0:	af04      	add	r7, sp, #16
    54e2:	60f8      	str	r0, [r7, #12]
    54e4:	60b9      	str	r1, [r7, #8]
    54e6:	603b      	str	r3, [r7, #0]
    54e8:	1dbb      	adds	r3, r7, #6
    54ea:	801a      	strh	r2, [r3, #0]
	{
		StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = (StackType_t *)pvPortMalloc(
		    (((size_t)usStackDepth)
    54ec:	1dbb      	adds	r3, r7, #6
    54ee:	881b      	ldrh	r3, [r3, #0]
		pxStack = (StackType_t *)pvPortMalloc(
    54f0:	009b      	lsls	r3, r3, #2
    54f2:	0018      	movs	r0, r3
    54f4:	4b1d      	ldr	r3, [pc, #116]	; (556c <xTaskCreate+0x90>)
    54f6:	4798      	blx	r3
    54f8:	0003      	movs	r3, r0
    54fa:	617b      	str	r3, [r7, #20]
		     * sizeof(StackType_t))); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

		if (pxStack != NULL) {
    54fc:	697b      	ldr	r3, [r7, #20]
    54fe:	2b00      	cmp	r3, #0
    5500:	d010      	beq.n	5524 <xTaskCreate+0x48>
			/* Allocate space for the TCB. */
			pxNewTCB = (TCB_t *)pvPortMalloc(
    5502:	204c      	movs	r0, #76	; 0x4c
    5504:	4b19      	ldr	r3, [pc, #100]	; (556c <xTaskCreate+0x90>)
    5506:	4798      	blx	r3
    5508:	0003      	movs	r3, r0
    550a:	61fb      	str	r3, [r7, #28]
			    sizeof(TCB_t)); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */

			if (pxNewTCB != NULL) {
    550c:	69fb      	ldr	r3, [r7, #28]
    550e:	2b00      	cmp	r3, #0
    5510:	d003      	beq.n	551a <xTaskCreate+0x3e>
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
    5512:	69fb      	ldr	r3, [r7, #28]
    5514:	697a      	ldr	r2, [r7, #20]
    5516:	631a      	str	r2, [r3, #48]	; 0x30
    5518:	e006      	b.n	5528 <xTaskCreate+0x4c>
			} else {
				/* The stack cannot be used as the TCB was not created.  Free
				it again. */
				vPortFree(pxStack);
    551a:	697b      	ldr	r3, [r7, #20]
    551c:	0018      	movs	r0, r3
    551e:	4b14      	ldr	r3, [pc, #80]	; (5570 <xTaskCreate+0x94>)
    5520:	4798      	blx	r3
    5522:	e001      	b.n	5528 <xTaskCreate+0x4c>
			}
		} else {
			pxNewTCB = NULL;
    5524:	2300      	movs	r3, #0
    5526:	61fb      	str	r3, [r7, #28]
		}
	}
#endif /* portSTACK_GROWTH */

	if (pxNewTCB != NULL) {
    5528:	69fb      	ldr	r3, [r7, #28]
    552a:	2b00      	cmp	r3, #0
    552c:	d016      	beq.n	555c <xTaskCreate+0x80>
			task was created dynamically in case it is later deleted. */
			pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
		}
#endif /* configSUPPORT_STATIC_ALLOCATION */

		prvInitialiseNewTask(
    552e:	1dbb      	adds	r3, r7, #6
    5530:	881a      	ldrh	r2, [r3, #0]
    5532:	683c      	ldr	r4, [r7, #0]
    5534:	68b9      	ldr	r1, [r7, #8]
    5536:	68f8      	ldr	r0, [r7, #12]
    5538:	2300      	movs	r3, #0
    553a:	9303      	str	r3, [sp, #12]
    553c:	69fb      	ldr	r3, [r7, #28]
    553e:	9302      	str	r3, [sp, #8]
    5540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5542:	9301      	str	r3, [sp, #4]
    5544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5546:	9300      	str	r3, [sp, #0]
    5548:	0023      	movs	r3, r4
    554a:	4c0a      	ldr	r4, [pc, #40]	; (5574 <xTaskCreate+0x98>)
    554c:	47a0      	blx	r4
		    pxTaskCode, pcName, (uint32_t)usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
		prvAddNewTaskToReadyList(pxNewTCB);
    554e:	69fb      	ldr	r3, [r7, #28]
    5550:	0018      	movs	r0, r3
    5552:	4b09      	ldr	r3, [pc, #36]	; (5578 <xTaskCreate+0x9c>)
    5554:	4798      	blx	r3
		xReturn = pdPASS;
    5556:	2301      	movs	r3, #1
    5558:	61bb      	str	r3, [r7, #24]
    555a:	e002      	b.n	5562 <xTaskCreate+0x86>
	} else {
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    555c:	2301      	movs	r3, #1
    555e:	425b      	negs	r3, r3
    5560:	61bb      	str	r3, [r7, #24]
	}

	return xReturn;
    5562:	69bb      	ldr	r3, [r7, #24]
}
    5564:	0018      	movs	r0, r3
    5566:	46bd      	mov	sp, r7
    5568:	b009      	add	sp, #36	; 0x24
    556a:	bd90      	pop	{r4, r7, pc}
    556c:	00004a3d 	.word	0x00004a3d
    5570:	00004ad1 	.word	0x00004ad1
    5574:	0000557d 	.word	0x0000557d
    5578:	00005681 	.word	0x00005681

0000557c <prvInitialiseNewTask>:
static void prvInitialiseNewTask(
    TaskFunction_t    pxTaskCode,
    const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    const uint32_t ulStackDepth, void *const pvParameters, UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask,
    TCB_t *pxNewTCB, const MemoryRegion_t *const xRegions)
{
    557c:	b580      	push	{r7, lr}
    557e:	b086      	sub	sp, #24
    5580:	af00      	add	r7, sp, #0
    5582:	60f8      	str	r0, [r7, #12]
    5584:	60b9      	str	r1, [r7, #8]
    5586:	607a      	str	r2, [r7, #4]
    5588:	603b      	str	r3, [r7, #0]

/* Avoid dependency on memset() if it is not required. */
#if (tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1)
	{
		/* Fill the stack with a known value to assist debugging. */
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    558c:	6b18      	ldr	r0, [r3, #48]	; 0x30
    558e:	687b      	ldr	r3, [r7, #4]
    5590:	009b      	lsls	r3, r3, #2
    5592:	001a      	movs	r2, r3
    5594:	21a5      	movs	r1, #165	; 0xa5
    5596:	4b36      	ldr	r3, [pc, #216]	; (5670 <prvInitialiseNewTask+0xf4>)
    5598:	4798      	blx	r3
grows from high memory to low (as per the 80x86) or vice versa.
portSTACK_GROWTH is used to make the result positive or negative as required
by the port. */
#if (portSTACK_GROWTH < 0)
	{
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    559c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    559e:	687b      	ldr	r3, [r7, #4]
    55a0:	4934      	ldr	r1, [pc, #208]	; (5674 <prvInitialiseNewTask+0xf8>)
    55a2:	468c      	mov	ip, r1
    55a4:	4463      	add	r3, ip
    55a6:	009b      	lsls	r3, r3, #2
    55a8:	18d3      	adds	r3, r2, r3
    55aa:	613b      	str	r3, [r7, #16]
		pxTopOfStack
		    = (StackType_t *)(((portPOINTER_SIZE_TYPE)pxTopOfStack)
    55ac:	693b      	ldr	r3, [r7, #16]
		                      & (~(
    55ae:	2207      	movs	r2, #7
    55b0:	4393      	bics	r3, r2
		    = (StackType_t *)(((portPOINTER_SIZE_TYPE)pxTopOfStack)
    55b2:	613b      	str	r3, [r7, #16]
		                                                                                  practical.  Size differences
		                                                                                  accounted for using
		                                                                                  portPOINTER_SIZE_TYPE type. */

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT((((portPOINTER_SIZE_TYPE)pxTopOfStack & (portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK) == 0UL));
    55b4:	693b      	ldr	r3, [r7, #16]
    55b6:	2207      	movs	r2, #7
    55b8:	4013      	ands	r3, r2
    55ba:	d001      	beq.n	55c0 <prvInitialiseNewTask+0x44>
    55bc:	b672      	cpsid	i
    55be:	e7fe      	b.n	55be <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
	}
#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    55c0:	2300      	movs	r3, #0
    55c2:	617b      	str	r3, [r7, #20]
    55c4:	e013      	b.n	55ee <prvInitialiseNewTask+0x72>
		pxNewTCB->pcTaskName[x] = pcName[x];
    55c6:	68ba      	ldr	r2, [r7, #8]
    55c8:	697b      	ldr	r3, [r7, #20]
    55ca:	18d3      	adds	r3, r2, r3
    55cc:	7818      	ldrb	r0, [r3, #0]
    55ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
    55d0:	2134      	movs	r1, #52	; 0x34
    55d2:	697b      	ldr	r3, [r7, #20]
    55d4:	18d3      	adds	r3, r2, r3
    55d6:	185b      	adds	r3, r3, r1
    55d8:	1c02      	adds	r2, r0, #0
    55da:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if (pcName[x] == 0x00) {
    55dc:	68ba      	ldr	r2, [r7, #8]
    55de:	697b      	ldr	r3, [r7, #20]
    55e0:	18d3      	adds	r3, r2, r3
    55e2:	781b      	ldrb	r3, [r3, #0]
    55e4:	2b00      	cmp	r3, #0
    55e6:	d006      	beq.n	55f6 <prvInitialiseNewTask+0x7a>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    55e8:	697b      	ldr	r3, [r7, #20]
    55ea:	3301      	adds	r3, #1
    55ec:	617b      	str	r3, [r7, #20]
    55ee:	697b      	ldr	r3, [r7, #20]
    55f0:	2b07      	cmp	r3, #7
    55f2:	d9e8      	bls.n	55c6 <prvInitialiseNewTask+0x4a>
    55f4:	e000      	b.n	55f8 <prvInitialiseNewTask+0x7c>
			break;
    55f6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    55f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    55fa:	223b      	movs	r2, #59	; 0x3b
    55fc:	2100      	movs	r1, #0
    55fe:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES) {
    5600:	6a3b      	ldr	r3, [r7, #32]
    5602:	2b04      	cmp	r3, #4
    5604:	d901      	bls.n	560a <prvInitialiseNewTask+0x8e>
		uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
    5606:	2304      	movs	r3, #4
    5608:	623b      	str	r3, [r7, #32]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    560c:	6a3a      	ldr	r2, [r7, #32]
    560e:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld  = 0;
	}
#endif /* configUSE_MUTEXES */

	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    5610:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5612:	3304      	adds	r3, #4
    5614:	0018      	movs	r0, r3
    5616:	4b18      	ldr	r3, [pc, #96]	; (5678 <prvInitialiseNewTask+0xfc>)
    5618:	4798      	blx	r3
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    561c:	3318      	adds	r3, #24
    561e:	0018      	movs	r0, r3
    5620:	4b15      	ldr	r3, [pc, #84]	; (5678 <prvInitialiseNewTask+0xfc>)
    5622:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    5624:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5626:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5628:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE(
    562a:	6a3b      	ldr	r3, [r7, #32]
    562c:	2205      	movs	r2, #5
    562e:	1ad2      	subs	r2, r2, r3
    5630:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5632:	619a      	str	r2, [r3, #24]
	    &(pxNewTCB->xEventListItem),
	    (TickType_t)configMAX_PRIORITIES
	        - (TickType_t)uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    5634:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5636:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5638:	625a      	str	r2, [r3, #36]	; 0x24
	}
#endif

#if (configUSE_TASK_NOTIFICATIONS == 1)
	{
		pxNewTCB->ulNotifiedValue = 0;
    563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    563c:	2200      	movs	r2, #0
    563e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    5640:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5642:	2248      	movs	r2, #72	; 0x48
    5644:	2100      	movs	r1, #0
    5646:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged);
	}
#else  /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    5648:	683a      	ldr	r2, [r7, #0]
    564a:	68f9      	ldr	r1, [r7, #12]
    564c:	693b      	ldr	r3, [r7, #16]
    564e:	0018      	movs	r0, r3
    5650:	4b0a      	ldr	r3, [pc, #40]	; (567c <prvInitialiseNewTask+0x100>)
    5652:	4798      	blx	r3
    5654:	0002      	movs	r2, r0
    5656:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5658:	601a      	str	r2, [r3, #0]
	}
#endif /* portUSING_MPU_WRAPPERS */

	if ((void *)pxCreatedTask != NULL) {
    565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    565c:	2b00      	cmp	r3, #0
    565e:	d002      	beq.n	5666 <prvInitialiseNewTask+0xea>
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    5660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5662:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5664:	601a      	str	r2, [r3, #0]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
    5666:	46c0      	nop			; (mov r8, r8)
    5668:	46bd      	mov	sp, r7
    566a:	b006      	add	sp, #24
    566c:	bd80      	pop	{r7, pc}
    566e:	46c0      	nop			; (mov r8, r8)
    5670:	0000840b 	.word	0x0000840b
    5674:	3fffffff 	.word	0x3fffffff
    5678:	000046b9 	.word	0x000046b9
    567c:	000047d1 	.word	0x000047d1

00005680 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList(TCB_t *pxNewTCB)
{
    5680:	b580      	push	{r7, lr}
    5682:	b082      	sub	sp, #8
    5684:	af00      	add	r7, sp, #0
    5686:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    5688:	4b2b      	ldr	r3, [pc, #172]	; (5738 <prvAddNewTaskToReadyList+0xb8>)
    568a:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    568c:	4b2b      	ldr	r3, [pc, #172]	; (573c <prvAddNewTaskToReadyList+0xbc>)
    568e:	681b      	ldr	r3, [r3, #0]
    5690:	1c5a      	adds	r2, r3, #1
    5692:	4b2a      	ldr	r3, [pc, #168]	; (573c <prvAddNewTaskToReadyList+0xbc>)
    5694:	601a      	str	r2, [r3, #0]
		if (pxCurrentTCB == NULL) {
    5696:	4b2a      	ldr	r3, [pc, #168]	; (5740 <prvAddNewTaskToReadyList+0xc0>)
    5698:	681b      	ldr	r3, [r3, #0]
    569a:	2b00      	cmp	r3, #0
    569c:	d109      	bne.n	56b2 <prvAddNewTaskToReadyList+0x32>
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    569e:	4b28      	ldr	r3, [pc, #160]	; (5740 <prvAddNewTaskToReadyList+0xc0>)
    56a0:	687a      	ldr	r2, [r7, #4]
    56a2:	601a      	str	r2, [r3, #0]

			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    56a4:	4b25      	ldr	r3, [pc, #148]	; (573c <prvAddNewTaskToReadyList+0xbc>)
    56a6:	681b      	ldr	r3, [r3, #0]
    56a8:	2b01      	cmp	r3, #1
    56aa:	d110      	bne.n	56ce <prvAddNewTaskToReadyList+0x4e>
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    56ac:	4b25      	ldr	r3, [pc, #148]	; (5744 <prvAddNewTaskToReadyList+0xc4>)
    56ae:	4798      	blx	r3
    56b0:	e00d      	b.n	56ce <prvAddNewTaskToReadyList+0x4e>
			}
		} else {
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if (xSchedulerRunning == pdFALSE) {
    56b2:	4b25      	ldr	r3, [pc, #148]	; (5748 <prvAddNewTaskToReadyList+0xc8>)
    56b4:	681b      	ldr	r3, [r3, #0]
    56b6:	2b00      	cmp	r3, #0
    56b8:	d109      	bne.n	56ce <prvAddNewTaskToReadyList+0x4e>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    56ba:	4b21      	ldr	r3, [pc, #132]	; (5740 <prvAddNewTaskToReadyList+0xc0>)
    56bc:	681b      	ldr	r3, [r3, #0]
    56be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56c0:	687b      	ldr	r3, [r7, #4]
    56c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    56c4:	429a      	cmp	r2, r3
    56c6:	d802      	bhi.n	56ce <prvAddNewTaskToReadyList+0x4e>
					pxCurrentTCB = pxNewTCB;
    56c8:	4b1d      	ldr	r3, [pc, #116]	; (5740 <prvAddNewTaskToReadyList+0xc0>)
    56ca:	687a      	ldr	r2, [r7, #4]
    56cc:	601a      	str	r2, [r3, #0]
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    56ce:	4b1f      	ldr	r3, [pc, #124]	; (574c <prvAddNewTaskToReadyList+0xcc>)
    56d0:	681b      	ldr	r3, [r3, #0]
    56d2:	1c5a      	adds	r2, r3, #1
    56d4:	4b1d      	ldr	r3, [pc, #116]	; (574c <prvAddNewTaskToReadyList+0xcc>)
    56d6:	601a      	str	r2, [r3, #0]

#if (configUSE_TRACE_FACILITY == 1)
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    56d8:	4b1c      	ldr	r3, [pc, #112]	; (574c <prvAddNewTaskToReadyList+0xcc>)
    56da:	681a      	ldr	r2, [r3, #0]
    56dc:	687b      	ldr	r3, [r7, #4]
    56de:	63da      	str	r2, [r3, #60]	; 0x3c
		}
#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE(pxNewTCB);

		prvAddTaskToReadyList(pxNewTCB);
    56e0:	687b      	ldr	r3, [r7, #4]
    56e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56e4:	4b1a      	ldr	r3, [pc, #104]	; (5750 <prvAddNewTaskToReadyList+0xd0>)
    56e6:	681b      	ldr	r3, [r3, #0]
    56e8:	429a      	cmp	r2, r3
    56ea:	d903      	bls.n	56f4 <prvAddNewTaskToReadyList+0x74>
    56ec:	687b      	ldr	r3, [r7, #4]
    56ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56f0:	4b17      	ldr	r3, [pc, #92]	; (5750 <prvAddNewTaskToReadyList+0xd0>)
    56f2:	601a      	str	r2, [r3, #0]
    56f4:	687b      	ldr	r3, [r7, #4]
    56f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    56f8:	0013      	movs	r3, r2
    56fa:	009b      	lsls	r3, r3, #2
    56fc:	189b      	adds	r3, r3, r2
    56fe:	009b      	lsls	r3, r3, #2
    5700:	4a14      	ldr	r2, [pc, #80]	; (5754 <prvAddNewTaskToReadyList+0xd4>)
    5702:	189a      	adds	r2, r3, r2
    5704:	687b      	ldr	r3, [r7, #4]
    5706:	3304      	adds	r3, #4
    5708:	0019      	movs	r1, r3
    570a:	0010      	movs	r0, r2
    570c:	4b12      	ldr	r3, [pc, #72]	; (5758 <prvAddNewTaskToReadyList+0xd8>)
    570e:	4798      	blx	r3

		portSETUP_TCB(pxNewTCB);
	}
	taskEXIT_CRITICAL();
    5710:	4b12      	ldr	r3, [pc, #72]	; (575c <prvAddNewTaskToReadyList+0xdc>)
    5712:	4798      	blx	r3

	if (xSchedulerRunning != pdFALSE) {
    5714:	4b0c      	ldr	r3, [pc, #48]	; (5748 <prvAddNewTaskToReadyList+0xc8>)
    5716:	681b      	ldr	r3, [r3, #0]
    5718:	2b00      	cmp	r3, #0
    571a:	d008      	beq.n	572e <prvAddNewTaskToReadyList+0xae>
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    571c:	4b08      	ldr	r3, [pc, #32]	; (5740 <prvAddNewTaskToReadyList+0xc0>)
    571e:	681b      	ldr	r3, [r3, #0]
    5720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5722:	687b      	ldr	r3, [r7, #4]
    5724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5726:	429a      	cmp	r2, r3
    5728:	d201      	bcs.n	572e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
    572a:	4b0d      	ldr	r3, [pc, #52]	; (5760 <prvAddNewTaskToReadyList+0xe0>)
    572c:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
    572e:	46c0      	nop			; (mov r8, r8)
    5730:	46bd      	mov	sp, r7
    5732:	b002      	add	sp, #8
    5734:	bd80      	pop	{r7, pc}
    5736:	46c0      	nop			; (mov r8, r8)
    5738:	00004911 	.word	0x00004911
    573c:	20002740 	.word	0x20002740
    5740:	20002668 	.word	0x20002668
    5744:	00005e31 	.word	0x00005e31
    5748:	2000274c 	.word	0x2000274c
    574c:	2000275c 	.word	0x2000275c
    5750:	20002748 	.word	0x20002748
    5754:	2000266c 	.word	0x2000266c
    5758:	000046cf 	.word	0x000046cf
    575c:	00004935 	.word	0x00004935
    5760:	000048f1 	.word	0x000048f1

00005764 <vTaskDelay>:
	/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelay == 1)

void vTaskDelay(const TickType_t xTicksToDelay)
{
    5764:	b580      	push	{r7, lr}
    5766:	b084      	sub	sp, #16
    5768:	af00      	add	r7, sp, #0
    576a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    576c:	2300      	movs	r3, #0
    576e:	60fb      	str	r3, [r7, #12]

	/* A delay time of zero just forces a reschedule. */
	if (xTicksToDelay > (TickType_t)0U) {
    5770:	687b      	ldr	r3, [r7, #4]
    5772:	2b00      	cmp	r3, #0
    5774:	d010      	beq.n	5798 <vTaskDelay+0x34>
		configASSERT(uxSchedulerSuspended == 0);
    5776:	4b0d      	ldr	r3, [pc, #52]	; (57ac <vTaskDelay+0x48>)
    5778:	681b      	ldr	r3, [r3, #0]
    577a:	2b00      	cmp	r3, #0
    577c:	d001      	beq.n	5782 <vTaskDelay+0x1e>
    577e:	b672      	cpsid	i
    5780:	e7fe      	b.n	5780 <vTaskDelay+0x1c>
		vTaskSuspendAll();
    5782:	4b0b      	ldr	r3, [pc, #44]	; (57b0 <vTaskDelay+0x4c>)
    5784:	4798      	blx	r3
			list or removed from the blocked list until the scheduler
			is resumed.

			This task cannot be in an event list as it is the currently
			executing task. */
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    5786:	687b      	ldr	r3, [r7, #4]
    5788:	2100      	movs	r1, #0
    578a:	0018      	movs	r0, r3
    578c:	4b09      	ldr	r3, [pc, #36]	; (57b4 <vTaskDelay+0x50>)
    578e:	4798      	blx	r3
		}
		xAlreadyYielded = xTaskResumeAll();
    5790:	4b09      	ldr	r3, [pc, #36]	; (57b8 <vTaskDelay+0x54>)
    5792:	4798      	blx	r3
    5794:	0003      	movs	r3, r0
    5796:	60fb      	str	r3, [r7, #12]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Force a reschedule if xTaskResumeAll has not already done so, we may
	have put ourselves to sleep. */
	if (xAlreadyYielded == pdFALSE) {
    5798:	68fb      	ldr	r3, [r7, #12]
    579a:	2b00      	cmp	r3, #0
    579c:	d101      	bne.n	57a2 <vTaskDelay+0x3e>
		portYIELD_WITHIN_API();
    579e:	4b07      	ldr	r3, [pc, #28]	; (57bc <vTaskDelay+0x58>)
    57a0:	4798      	blx	r3
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
    57a2:	46c0      	nop			; (mov r8, r8)
    57a4:	46bd      	mov	sp, r7
    57a6:	b004      	add	sp, #16
    57a8:	bd80      	pop	{r7, pc}
    57aa:	46c0      	nop			; (mov r8, r8)
    57ac:	20002768 	.word	0x20002768
    57b0:	00005849 	.word	0x00005849
    57b4:	00006261 	.word	0x00006261
    57b8:	00005861 	.word	0x00005861
    57bc:	000048f1 	.word	0x000048f1

000057c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler(void)
{
    57c0:	b590      	push	{r4, r7, lr}
    57c2:	b085      	sub	sp, #20
    57c4:	af02      	add	r7, sp, #8
		}
	}
#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(prvIdleTask,
    57c6:	2380      	movs	r3, #128	; 0x80
    57c8:	009a      	lsls	r2, r3, #2
    57ca:	4916      	ldr	r1, [pc, #88]	; (5824 <vTaskStartScheduler+0x64>)
    57cc:	4816      	ldr	r0, [pc, #88]	; (5828 <vTaskStartScheduler+0x68>)
    57ce:	4b17      	ldr	r3, [pc, #92]	; (582c <vTaskStartScheduler+0x6c>)
    57d0:	9301      	str	r3, [sp, #4]
    57d2:	2300      	movs	r3, #0
    57d4:	9300      	str	r3, [sp, #0]
    57d6:	2300      	movs	r3, #0
    57d8:	4c15      	ldr	r4, [pc, #84]	; (5830 <vTaskStartScheduler+0x70>)
    57da:	47a0      	blx	r4
    57dc:	0003      	movs	r3, r0
    57de:	607b      	str	r3, [r7, #4]
	}
#endif /* configSUPPORT_STATIC_ALLOCATION */

#if (configUSE_TIMERS == 1)
	{
		if (xReturn == pdPASS) {
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	2b01      	cmp	r3, #1
    57e4:	d103      	bne.n	57ee <vTaskStartScheduler+0x2e>
			xReturn = xTimerCreateTimerTask();
    57e6:	4b13      	ldr	r3, [pc, #76]	; (5834 <vTaskStartScheduler+0x74>)
    57e8:	4798      	blx	r3
    57ea:	0003      	movs	r3, r0
    57ec:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
#endif /* configUSE_TIMERS */

	if (xReturn == pdPASS) {
    57ee:	687b      	ldr	r3, [r7, #4]
    57f0:	2b01      	cmp	r3, #1
    57f2:	d10d      	bne.n	5810 <vTaskStartScheduler+0x50>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    57f4:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &(pxCurrentTCB->xNewLib_reent);
		}
#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    57f6:	4b10      	ldr	r3, [pc, #64]	; (5838 <vTaskStartScheduler+0x78>)
    57f8:	2201      	movs	r2, #1
    57fa:	4252      	negs	r2, r2
    57fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning    = pdTRUE;
    57fe:	4b0f      	ldr	r3, [pc, #60]	; (583c <vTaskStartScheduler+0x7c>)
    5800:	2201      	movs	r2, #1
    5802:	601a      	str	r2, [r3, #0]
		xTickCount           = (TickType_t)0U;
    5804:	4b0e      	ldr	r3, [pc, #56]	; (5840 <vTaskStartScheduler+0x80>)
    5806:	2200      	movs	r2, #0
    5808:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if (xPortStartScheduler() != pdFALSE) {
    580a:	4b0e      	ldr	r3, [pc, #56]	; (5844 <vTaskStartScheduler+0x84>)
    580c:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	(void)xIdleTaskHandle;
}
    580e:	e004      	b.n	581a <vTaskStartScheduler+0x5a>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    5810:	687b      	ldr	r3, [r7, #4]
    5812:	3301      	adds	r3, #1
    5814:	d101      	bne.n	581a <vTaskStartScheduler+0x5a>
    5816:	b672      	cpsid	i
    5818:	e7fe      	b.n	5818 <vTaskStartScheduler+0x58>
}
    581a:	46c0      	nop			; (mov r8, r8)
    581c:	46bd      	mov	sp, r7
    581e:	b003      	add	sp, #12
    5820:	bd90      	pop	{r4, r7, pc}
    5822:	46c0      	nop			; (mov r8, r8)
    5824:	00008684 	.word	0x00008684
    5828:	00005e09 	.word	0x00005e09
    582c:	20002764 	.word	0x20002764
    5830:	000054dd 	.word	0x000054dd
    5834:	00006315 	.word	0x00006315
    5838:	20002760 	.word	0x20002760
    583c:	2000274c 	.word	0x2000274c
    5840:	20002744 	.word	0x20002744
    5844:	00004899 	.word	0x00004899

00005848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll(void)
{
    5848:	b580      	push	{r7, lr}
    584a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    584c:	4b03      	ldr	r3, [pc, #12]	; (585c <vTaskSuspendAll+0x14>)
    584e:	681b      	ldr	r3, [r3, #0]
    5850:	1c5a      	adds	r2, r3, #1
    5852:	4b02      	ldr	r3, [pc, #8]	; (585c <vTaskSuspendAll+0x14>)
    5854:	601a      	str	r2, [r3, #0]
}
    5856:	46c0      	nop			; (mov r8, r8)
    5858:	46bd      	mov	sp, r7
    585a:	bd80      	pop	{r7, pc}
    585c:	20002768 	.word	0x20002768

00005860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll(void)
{
    5860:	b580      	push	{r7, lr}
    5862:	b084      	sub	sp, #16
    5864:	af00      	add	r7, sp, #0
	TCB_t *    pxTCB           = NULL;
    5866:	2300      	movs	r3, #0
    5868:	60fb      	str	r3, [r7, #12]
	BaseType_t xAlreadyYielded = pdFALSE;
    586a:	2300      	movs	r3, #0
    586c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT(uxSchedulerSuspended);
    586e:	4b3a      	ldr	r3, [pc, #232]	; (5958 <xTaskResumeAll+0xf8>)
    5870:	681b      	ldr	r3, [r3, #0]
    5872:	2b00      	cmp	r3, #0
    5874:	d101      	bne.n	587a <xTaskResumeAll+0x1a>
    5876:	b672      	cpsid	i
    5878:	e7fe      	b.n	5878 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    587a:	4b38      	ldr	r3, [pc, #224]	; (595c <xTaskResumeAll+0xfc>)
    587c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    587e:	4b36      	ldr	r3, [pc, #216]	; (5958 <xTaskResumeAll+0xf8>)
    5880:	681b      	ldr	r3, [r3, #0]
    5882:	1e5a      	subs	r2, r3, #1
    5884:	4b34      	ldr	r3, [pc, #208]	; (5958 <xTaskResumeAll+0xf8>)
    5886:	601a      	str	r2, [r3, #0]

		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5888:	4b33      	ldr	r3, [pc, #204]	; (5958 <xTaskResumeAll+0xf8>)
    588a:	681b      	ldr	r3, [r3, #0]
    588c:	2b00      	cmp	r3, #0
    588e:	d15b      	bne.n	5948 <xTaskResumeAll+0xe8>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    5890:	4b33      	ldr	r3, [pc, #204]	; (5960 <xTaskResumeAll+0x100>)
    5892:	681b      	ldr	r3, [r3, #0]
    5894:	2b00      	cmp	r3, #0
    5896:	d057      	beq.n	5948 <xTaskResumeAll+0xe8>
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    5898:	e02f      	b.n	58fa <xTaskResumeAll+0x9a>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    589a:	4b32      	ldr	r3, [pc, #200]	; (5964 <xTaskResumeAll+0x104>)
    589c:	68db      	ldr	r3, [r3, #12]
    589e:	68db      	ldr	r3, [r3, #12]
    58a0:	60fb      	str	r3, [r7, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    58a2:	68fb      	ldr	r3, [r7, #12]
    58a4:	3318      	adds	r3, #24
    58a6:	0018      	movs	r0, r3
    58a8:	4b2f      	ldr	r3, [pc, #188]	; (5968 <xTaskResumeAll+0x108>)
    58aa:	4798      	blx	r3
					(void)uxListRemove(&(pxTCB->xStateListItem));
    58ac:	68fb      	ldr	r3, [r7, #12]
    58ae:	3304      	adds	r3, #4
    58b0:	0018      	movs	r0, r3
    58b2:	4b2d      	ldr	r3, [pc, #180]	; (5968 <xTaskResumeAll+0x108>)
    58b4:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    58b6:	68fb      	ldr	r3, [r7, #12]
    58b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58ba:	4b2c      	ldr	r3, [pc, #176]	; (596c <xTaskResumeAll+0x10c>)
    58bc:	681b      	ldr	r3, [r3, #0]
    58be:	429a      	cmp	r2, r3
    58c0:	d903      	bls.n	58ca <xTaskResumeAll+0x6a>
    58c2:	68fb      	ldr	r3, [r7, #12]
    58c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58c6:	4b29      	ldr	r3, [pc, #164]	; (596c <xTaskResumeAll+0x10c>)
    58c8:	601a      	str	r2, [r3, #0]
    58ca:	68fb      	ldr	r3, [r7, #12]
    58cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58ce:	0013      	movs	r3, r2
    58d0:	009b      	lsls	r3, r3, #2
    58d2:	189b      	adds	r3, r3, r2
    58d4:	009b      	lsls	r3, r3, #2
    58d6:	4a26      	ldr	r2, [pc, #152]	; (5970 <xTaskResumeAll+0x110>)
    58d8:	189a      	adds	r2, r3, r2
    58da:	68fb      	ldr	r3, [r7, #12]
    58dc:	3304      	adds	r3, #4
    58de:	0019      	movs	r1, r3
    58e0:	0010      	movs	r0, r2
    58e2:	4b24      	ldr	r3, [pc, #144]	; (5974 <xTaskResumeAll+0x114>)
    58e4:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    58e6:	68fb      	ldr	r3, [r7, #12]
    58e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    58ea:	4b23      	ldr	r3, [pc, #140]	; (5978 <xTaskResumeAll+0x118>)
    58ec:	681b      	ldr	r3, [r3, #0]
    58ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    58f0:	429a      	cmp	r2, r3
    58f2:	d302      	bcc.n	58fa <xTaskResumeAll+0x9a>
						xYieldPending = pdTRUE;
    58f4:	4b21      	ldr	r3, [pc, #132]	; (597c <xTaskResumeAll+0x11c>)
    58f6:	2201      	movs	r2, #1
    58f8:	601a      	str	r2, [r3, #0]
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    58fa:	4b1a      	ldr	r3, [pc, #104]	; (5964 <xTaskResumeAll+0x104>)
    58fc:	681b      	ldr	r3, [r3, #0]
    58fe:	2b00      	cmp	r3, #0
    5900:	d1cb      	bne.n	589a <xTaskResumeAll+0x3a>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if (pxTCB != NULL) {
    5902:	68fb      	ldr	r3, [r7, #12]
    5904:	2b00      	cmp	r3, #0
    5906:	d001      	beq.n	590c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    5908:	4b1d      	ldr	r3, [pc, #116]	; (5980 <xTaskResumeAll+0x120>)
    590a:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    590c:	4b1d      	ldr	r3, [pc, #116]	; (5984 <xTaskResumeAll+0x124>)
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	607b      	str	r3, [r7, #4]

					if (uxPendedCounts > (UBaseType_t)0U) {
    5912:	687b      	ldr	r3, [r7, #4]
    5914:	2b00      	cmp	r3, #0
    5916:	d00f      	beq.n	5938 <xTaskResumeAll+0xd8>
						do {
							if (xTaskIncrementTick() != pdFALSE) {
    5918:	4b1b      	ldr	r3, [pc, #108]	; (5988 <xTaskResumeAll+0x128>)
    591a:	4798      	blx	r3
    591c:	1e03      	subs	r3, r0, #0
    591e:	d002      	beq.n	5926 <xTaskResumeAll+0xc6>
								xYieldPending = pdTRUE;
    5920:	4b16      	ldr	r3, [pc, #88]	; (597c <xTaskResumeAll+0x11c>)
    5922:	2201      	movs	r2, #1
    5924:	601a      	str	r2, [r3, #0]
							} else {
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    5926:	687b      	ldr	r3, [r7, #4]
    5928:	3b01      	subs	r3, #1
    592a:	607b      	str	r3, [r7, #4]
						} while (uxPendedCounts > (UBaseType_t)0U);
    592c:	687b      	ldr	r3, [r7, #4]
    592e:	2b00      	cmp	r3, #0
    5930:	d1f2      	bne.n	5918 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    5932:	4b14      	ldr	r3, [pc, #80]	; (5984 <xTaskResumeAll+0x124>)
    5934:	2200      	movs	r2, #0
    5936:	601a      	str	r2, [r3, #0]
					} else {
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if (xYieldPending != pdFALSE) {
    5938:	4b10      	ldr	r3, [pc, #64]	; (597c <xTaskResumeAll+0x11c>)
    593a:	681b      	ldr	r3, [r3, #0]
    593c:	2b00      	cmp	r3, #0
    593e:	d003      	beq.n	5948 <xTaskResumeAll+0xe8>
#if (configUSE_PREEMPTION != 0)
					{
						xAlreadyYielded = pdTRUE;
    5940:	2301      	movs	r3, #1
    5942:	60bb      	str	r3, [r7, #8]
					}
#endif
					taskYIELD_IF_USING_PREEMPTION();
    5944:	4b11      	ldr	r3, [pc, #68]	; (598c <xTaskResumeAll+0x12c>)
    5946:	4798      	blx	r3
			}
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    5948:	4b11      	ldr	r3, [pc, #68]	; (5990 <xTaskResumeAll+0x130>)
    594a:	4798      	blx	r3

	return xAlreadyYielded;
    594c:	68bb      	ldr	r3, [r7, #8]
}
    594e:	0018      	movs	r0, r3
    5950:	46bd      	mov	sp, r7
    5952:	b004      	add	sp, #16
    5954:	bd80      	pop	{r7, pc}
    5956:	46c0      	nop			; (mov r8, r8)
    5958:	20002768 	.word	0x20002768
    595c:	00004911 	.word	0x00004911
    5960:	20002740 	.word	0x20002740
    5964:	20002700 	.word	0x20002700
    5968:	0000477f 	.word	0x0000477f
    596c:	20002748 	.word	0x20002748
    5970:	2000266c 	.word	0x2000266c
    5974:	000046cf 	.word	0x000046cf
    5978:	20002668 	.word	0x20002668
    597c:	20002754 	.word	0x20002754
    5980:	00005f51 	.word	0x00005f51
    5984:	20002750 	.word	0x20002750
    5988:	000059b1 	.word	0x000059b1
    598c:	000048f1 	.word	0x000048f1
    5990:	00004935 	.word	0x00004935

00005994 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount(void)
{
    5994:	b580      	push	{r7, lr}
    5996:	b082      	sub	sp, #8
    5998:	af00      	add	r7, sp, #0
	TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    599a:	4b04      	ldr	r3, [pc, #16]	; (59ac <xTaskGetTickCount+0x18>)
    599c:	681b      	ldr	r3, [r3, #0]
    599e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    59a0:	687b      	ldr	r3, [r7, #4]
}
    59a2:	0018      	movs	r0, r3
    59a4:	46bd      	mov	sp, r7
    59a6:	b002      	add	sp, #8
    59a8:	bd80      	pop	{r7, pc}
    59aa:	46c0      	nop			; (mov r8, r8)
    59ac:	20002744 	.word	0x20002744

000059b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick(void)
{
    59b0:	b580      	push	{r7, lr}
    59b2:	b086      	sub	sp, #24
    59b4:	af00      	add	r7, sp, #0
	TCB_t *    pxTCB;
	TickType_t xItemValue;
	BaseType_t xSwitchRequired = pdFALSE;
    59b6:	2300      	movs	r3, #0
    59b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK(xTickCount);
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    59ba:	4b4c      	ldr	r3, [pc, #304]	; (5aec <xTaskIncrementTick+0x13c>)
    59bc:	681b      	ldr	r3, [r3, #0]
    59be:	2b00      	cmp	r3, #0
    59c0:	d000      	beq.n	59c4 <xTaskIncrementTick+0x14>
    59c2:	e083      	b.n	5acc <xTaskIncrementTick+0x11c>
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    59c4:	4b4a      	ldr	r3, [pc, #296]	; (5af0 <xTaskIncrementTick+0x140>)
    59c6:	681b      	ldr	r3, [r3, #0]
    59c8:	3301      	adds	r3, #1
    59ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    59cc:	4b48      	ldr	r3, [pc, #288]	; (5af0 <xTaskIncrementTick+0x140>)
    59ce:	693a      	ldr	r2, [r7, #16]
    59d0:	601a      	str	r2, [r3, #0]

		if (xConstTickCount
    59d2:	693b      	ldr	r3, [r7, #16]
    59d4:	2b00      	cmp	r3, #0
    59d6:	d117      	bne.n	5a08 <xTaskIncrementTick+0x58>
		    == (TickType_t)0U) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
		{
			taskSWITCH_DELAYED_LISTS();
    59d8:	4b46      	ldr	r3, [pc, #280]	; (5af4 <xTaskIncrementTick+0x144>)
    59da:	681b      	ldr	r3, [r3, #0]
    59dc:	681b      	ldr	r3, [r3, #0]
    59de:	2b00      	cmp	r3, #0
    59e0:	d001      	beq.n	59e6 <xTaskIncrementTick+0x36>
    59e2:	b672      	cpsid	i
    59e4:	e7fe      	b.n	59e4 <xTaskIncrementTick+0x34>
    59e6:	4b43      	ldr	r3, [pc, #268]	; (5af4 <xTaskIncrementTick+0x144>)
    59e8:	681b      	ldr	r3, [r3, #0]
    59ea:	60fb      	str	r3, [r7, #12]
    59ec:	4b42      	ldr	r3, [pc, #264]	; (5af8 <xTaskIncrementTick+0x148>)
    59ee:	681a      	ldr	r2, [r3, #0]
    59f0:	4b40      	ldr	r3, [pc, #256]	; (5af4 <xTaskIncrementTick+0x144>)
    59f2:	601a      	str	r2, [r3, #0]
    59f4:	4b40      	ldr	r3, [pc, #256]	; (5af8 <xTaskIncrementTick+0x148>)
    59f6:	68fa      	ldr	r2, [r7, #12]
    59f8:	601a      	str	r2, [r3, #0]
    59fa:	4b40      	ldr	r3, [pc, #256]	; (5afc <xTaskIncrementTick+0x14c>)
    59fc:	681b      	ldr	r3, [r3, #0]
    59fe:	1c5a      	adds	r2, r3, #1
    5a00:	4b3e      	ldr	r3, [pc, #248]	; (5afc <xTaskIncrementTick+0x14c>)
    5a02:	601a      	str	r2, [r3, #0]
    5a04:	4b3e      	ldr	r3, [pc, #248]	; (5b00 <xTaskIncrementTick+0x150>)
    5a06:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if (xConstTickCount >= xNextTaskUnblockTime) {
    5a08:	4b3e      	ldr	r3, [pc, #248]	; (5b04 <xTaskIncrementTick+0x154>)
    5a0a:	681b      	ldr	r3, [r3, #0]
    5a0c:	693a      	ldr	r2, [r7, #16]
    5a0e:	429a      	cmp	r2, r3
    5a10:	d34e      	bcc.n	5ab0 <xTaskIncrementTick+0x100>
			for (;;) {
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5a12:	4b38      	ldr	r3, [pc, #224]	; (5af4 <xTaskIncrementTick+0x144>)
    5a14:	681b      	ldr	r3, [r3, #0]
    5a16:	681b      	ldr	r3, [r3, #0]
    5a18:	2b00      	cmp	r3, #0
    5a1a:	d101      	bne.n	5a20 <xTaskIncrementTick+0x70>
    5a1c:	2301      	movs	r3, #1
    5a1e:	e000      	b.n	5a22 <xTaskIncrementTick+0x72>
    5a20:	2300      	movs	r3, #0
    5a22:	2b00      	cmp	r3, #0
    5a24:	d004      	beq.n	5a30 <xTaskIncrementTick+0x80>
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5a26:	4b37      	ldr	r3, [pc, #220]	; (5b04 <xTaskIncrementTick+0x154>)
    5a28:	2201      	movs	r2, #1
    5a2a:	4252      	negs	r2, r2
    5a2c:	601a      	str	r2, [r3, #0]
					break;
    5a2e:	e03f      	b.n	5ab0 <xTaskIncrementTick+0x100>
				} else {
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    5a30:	4b30      	ldr	r3, [pc, #192]	; (5af4 <xTaskIncrementTick+0x144>)
    5a32:	681b      	ldr	r3, [r3, #0]
    5a34:	68db      	ldr	r3, [r3, #12]
    5a36:	68db      	ldr	r3, [r3, #12]
    5a38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    5a3a:	68bb      	ldr	r3, [r7, #8]
    5a3c:	685b      	ldr	r3, [r3, #4]
    5a3e:	607b      	str	r3, [r7, #4]

					if (xConstTickCount < xItemValue) {
    5a40:	693a      	ldr	r2, [r7, #16]
    5a42:	687b      	ldr	r3, [r7, #4]
    5a44:	429a      	cmp	r2, r3
    5a46:	d203      	bcs.n	5a50 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    5a48:	4b2e      	ldr	r3, [pc, #184]	; (5b04 <xTaskIncrementTick+0x154>)
    5a4a:	687a      	ldr	r2, [r7, #4]
    5a4c:	601a      	str	r2, [r3, #0]
						break;
    5a4e:	e02f      	b.n	5ab0 <xTaskIncrementTick+0x100>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5a50:	68bb      	ldr	r3, [r7, #8]
    5a52:	3304      	adds	r3, #4
    5a54:	0018      	movs	r0, r3
    5a56:	4b2c      	ldr	r3, [pc, #176]	; (5b08 <xTaskIncrementTick+0x158>)
    5a58:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    5a5a:	68bb      	ldr	r3, [r7, #8]
    5a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5a5e:	2b00      	cmp	r3, #0
    5a60:	d004      	beq.n	5a6c <xTaskIncrementTick+0xbc>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    5a62:	68bb      	ldr	r3, [r7, #8]
    5a64:	3318      	adds	r3, #24
    5a66:	0018      	movs	r0, r3
    5a68:	4b27      	ldr	r3, [pc, #156]	; (5b08 <xTaskIncrementTick+0x158>)
    5a6a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList(pxTCB);
    5a6c:	68bb      	ldr	r3, [r7, #8]
    5a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a70:	4b26      	ldr	r3, [pc, #152]	; (5b0c <xTaskIncrementTick+0x15c>)
    5a72:	681b      	ldr	r3, [r3, #0]
    5a74:	429a      	cmp	r2, r3
    5a76:	d903      	bls.n	5a80 <xTaskIncrementTick+0xd0>
    5a78:	68bb      	ldr	r3, [r7, #8]
    5a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a7c:	4b23      	ldr	r3, [pc, #140]	; (5b0c <xTaskIncrementTick+0x15c>)
    5a7e:	601a      	str	r2, [r3, #0]
    5a80:	68bb      	ldr	r3, [r7, #8]
    5a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a84:	0013      	movs	r3, r2
    5a86:	009b      	lsls	r3, r3, #2
    5a88:	189b      	adds	r3, r3, r2
    5a8a:	009b      	lsls	r3, r3, #2
    5a8c:	4a20      	ldr	r2, [pc, #128]	; (5b10 <xTaskIncrementTick+0x160>)
    5a8e:	189a      	adds	r2, r3, r2
    5a90:	68bb      	ldr	r3, [r7, #8]
    5a92:	3304      	adds	r3, #4
    5a94:	0019      	movs	r1, r3
    5a96:	0010      	movs	r0, r2
    5a98:	4b1e      	ldr	r3, [pc, #120]	; (5b14 <xTaskIncrementTick+0x164>)
    5a9a:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    5a9c:	68bb      	ldr	r3, [r7, #8]
    5a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5aa0:	4b1d      	ldr	r3, [pc, #116]	; (5b18 <xTaskIncrementTick+0x168>)
    5aa2:	681b      	ldr	r3, [r3, #0]
    5aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5aa6:	429a      	cmp	r2, r3
    5aa8:	d3b3      	bcc.n	5a12 <xTaskIncrementTick+0x62>
							xSwitchRequired = pdTRUE;
    5aaa:	2301      	movs	r3, #1
    5aac:	617b      	str	r3, [r7, #20]
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5aae:	e7b0      	b.n	5a12 <xTaskIncrementTick+0x62>
/* Tasks of equal priority to the currently running task will share
processing time (time slice) if preemption is on, and the application
writer has not explicitly turned time slicing off. */
#if ((configUSE_PREEMPTION == 1) && (configUSE_TIME_SLICING == 1))
		{
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    5ab0:	4b19      	ldr	r3, [pc, #100]	; (5b18 <xTaskIncrementTick+0x168>)
    5ab2:	681b      	ldr	r3, [r3, #0]
    5ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ab6:	4916      	ldr	r1, [pc, #88]	; (5b10 <xTaskIncrementTick+0x160>)
    5ab8:	0013      	movs	r3, r2
    5aba:	009b      	lsls	r3, r3, #2
    5abc:	189b      	adds	r3, r3, r2
    5abe:	009b      	lsls	r3, r3, #2
    5ac0:	585b      	ldr	r3, [r3, r1]
    5ac2:	2b01      	cmp	r3, #1
    5ac4:	d907      	bls.n	5ad6 <xTaskIncrementTick+0x126>
				xSwitchRequired = pdTRUE;
    5ac6:	2301      	movs	r3, #1
    5ac8:	617b      	str	r3, [r7, #20]
    5aca:	e004      	b.n	5ad6 <xTaskIncrementTick+0x126>
				mtCOVERAGE_TEST_MARKER();
			}
		}
#endif /* configUSE_TICK_HOOK */
	} else {
		++uxPendedTicks;
    5acc:	4b13      	ldr	r3, [pc, #76]	; (5b1c <xTaskIncrementTick+0x16c>)
    5ace:	681b      	ldr	r3, [r3, #0]
    5ad0:	1c5a      	adds	r2, r3, #1
    5ad2:	4b12      	ldr	r3, [pc, #72]	; (5b1c <xTaskIncrementTick+0x16c>)
    5ad4:	601a      	str	r2, [r3, #0]
#endif
	}

#if (configUSE_PREEMPTION == 1)
	{
		if (xYieldPending != pdFALSE) {
    5ad6:	4b12      	ldr	r3, [pc, #72]	; (5b20 <xTaskIncrementTick+0x170>)
    5ad8:	681b      	ldr	r3, [r3, #0]
    5ada:	2b00      	cmp	r3, #0
    5adc:	d001      	beq.n	5ae2 <xTaskIncrementTick+0x132>
			xSwitchRequired = pdTRUE;
    5ade:	2301      	movs	r3, #1
    5ae0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    5ae2:	697b      	ldr	r3, [r7, #20]
}
    5ae4:	0018      	movs	r0, r3
    5ae6:	46bd      	mov	sp, r7
    5ae8:	b006      	add	sp, #24
    5aea:	bd80      	pop	{r7, pc}
    5aec:	20002768 	.word	0x20002768
    5af0:	20002744 	.word	0x20002744
    5af4:	200026f8 	.word	0x200026f8
    5af8:	200026fc 	.word	0x200026fc
    5afc:	20002758 	.word	0x20002758
    5b00:	00005f51 	.word	0x00005f51
    5b04:	20002760 	.word	0x20002760
    5b08:	0000477f 	.word	0x0000477f
    5b0c:	20002748 	.word	0x20002748
    5b10:	2000266c 	.word	0x2000266c
    5b14:	000046cf 	.word	0x000046cf
    5b18:	20002668 	.word	0x20002668
    5b1c:	20002750 	.word	0x20002750
    5b20:	20002754 	.word	0x20002754

00005b24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext(void)
{
    5b24:	b580      	push	{r7, lr}
    5b26:	b082      	sub	sp, #8
    5b28:	af00      	add	r7, sp, #0
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    5b2a:	4b22      	ldr	r3, [pc, #136]	; (5bb4 <vTaskSwitchContext+0x90>)
    5b2c:	681b      	ldr	r3, [r3, #0]
    5b2e:	2b00      	cmp	r3, #0
    5b30:	d003      	beq.n	5b3a <vTaskSwitchContext+0x16>
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    5b32:	4b21      	ldr	r3, [pc, #132]	; (5bb8 <vTaskSwitchContext+0x94>)
    5b34:	2201      	movs	r2, #1
    5b36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &(pxCurrentTCB->xNewLib_reent);
		}
#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    5b38:	e037      	b.n	5baa <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
    5b3a:	4b1f      	ldr	r3, [pc, #124]	; (5bb8 <vTaskSwitchContext+0x94>)
    5b3c:	2200      	movs	r2, #0
    5b3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5b40:	4b1e      	ldr	r3, [pc, #120]	; (5bbc <vTaskSwitchContext+0x98>)
    5b42:	681b      	ldr	r3, [r3, #0]
    5b44:	607b      	str	r3, [r7, #4]
    5b46:	e007      	b.n	5b58 <vTaskSwitchContext+0x34>
    5b48:	687b      	ldr	r3, [r7, #4]
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	d101      	bne.n	5b52 <vTaskSwitchContext+0x2e>
    5b4e:	b672      	cpsid	i
    5b50:	e7fe      	b.n	5b50 <vTaskSwitchContext+0x2c>
    5b52:	687b      	ldr	r3, [r7, #4]
    5b54:	3b01      	subs	r3, #1
    5b56:	607b      	str	r3, [r7, #4]
    5b58:	4919      	ldr	r1, [pc, #100]	; (5bc0 <vTaskSwitchContext+0x9c>)
    5b5a:	687a      	ldr	r2, [r7, #4]
    5b5c:	0013      	movs	r3, r2
    5b5e:	009b      	lsls	r3, r3, #2
    5b60:	189b      	adds	r3, r3, r2
    5b62:	009b      	lsls	r3, r3, #2
    5b64:	585b      	ldr	r3, [r3, r1]
    5b66:	2b00      	cmp	r3, #0
    5b68:	d0ee      	beq.n	5b48 <vTaskSwitchContext+0x24>
    5b6a:	687a      	ldr	r2, [r7, #4]
    5b6c:	0013      	movs	r3, r2
    5b6e:	009b      	lsls	r3, r3, #2
    5b70:	189b      	adds	r3, r3, r2
    5b72:	009b      	lsls	r3, r3, #2
    5b74:	4a12      	ldr	r2, [pc, #72]	; (5bc0 <vTaskSwitchContext+0x9c>)
    5b76:	189b      	adds	r3, r3, r2
    5b78:	603b      	str	r3, [r7, #0]
    5b7a:	683b      	ldr	r3, [r7, #0]
    5b7c:	685b      	ldr	r3, [r3, #4]
    5b7e:	685a      	ldr	r2, [r3, #4]
    5b80:	683b      	ldr	r3, [r7, #0]
    5b82:	605a      	str	r2, [r3, #4]
    5b84:	683b      	ldr	r3, [r7, #0]
    5b86:	685a      	ldr	r2, [r3, #4]
    5b88:	683b      	ldr	r3, [r7, #0]
    5b8a:	3308      	adds	r3, #8
    5b8c:	429a      	cmp	r2, r3
    5b8e:	d104      	bne.n	5b9a <vTaskSwitchContext+0x76>
    5b90:	683b      	ldr	r3, [r7, #0]
    5b92:	685b      	ldr	r3, [r3, #4]
    5b94:	685a      	ldr	r2, [r3, #4]
    5b96:	683b      	ldr	r3, [r7, #0]
    5b98:	605a      	str	r2, [r3, #4]
    5b9a:	683b      	ldr	r3, [r7, #0]
    5b9c:	685b      	ldr	r3, [r3, #4]
    5b9e:	68da      	ldr	r2, [r3, #12]
    5ba0:	4b08      	ldr	r3, [pc, #32]	; (5bc4 <vTaskSwitchContext+0xa0>)
    5ba2:	601a      	str	r2, [r3, #0]
    5ba4:	4b05      	ldr	r3, [pc, #20]	; (5bbc <vTaskSwitchContext+0x98>)
    5ba6:	687a      	ldr	r2, [r7, #4]
    5ba8:	601a      	str	r2, [r3, #0]
}
    5baa:	46c0      	nop			; (mov r8, r8)
    5bac:	46bd      	mov	sp, r7
    5bae:	b002      	add	sp, #8
    5bb0:	bd80      	pop	{r7, pc}
    5bb2:	46c0      	nop			; (mov r8, r8)
    5bb4:	20002768 	.word	0x20002768
    5bb8:	20002754 	.word	0x20002754
    5bbc:	20002748 	.word	0x20002748
    5bc0:	2000266c 	.word	0x2000266c
    5bc4:	20002668 	.word	0x20002668

00005bc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList(List_t *const pxEventList, const TickType_t xTicksToWait)
{
    5bc8:	b580      	push	{r7, lr}
    5bca:	b082      	sub	sp, #8
    5bcc:	af00      	add	r7, sp, #0
    5bce:	6078      	str	r0, [r7, #4]
    5bd0:	6039      	str	r1, [r7, #0]
	configASSERT(pxEventList);
    5bd2:	687b      	ldr	r3, [r7, #4]
    5bd4:	2b00      	cmp	r3, #0
    5bd6:	d101      	bne.n	5bdc <vTaskPlaceOnEventList+0x14>
    5bd8:	b672      	cpsid	i
    5bda:	e7fe      	b.n	5bda <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    5bdc:	4b08      	ldr	r3, [pc, #32]	; (5c00 <vTaskPlaceOnEventList+0x38>)
    5bde:	681b      	ldr	r3, [r3, #0]
    5be0:	3318      	adds	r3, #24
    5be2:	001a      	movs	r2, r3
    5be4:	687b      	ldr	r3, [r7, #4]
    5be6:	0011      	movs	r1, r2
    5be8:	0018      	movs	r0, r3
    5bea:	4b06      	ldr	r3, [pc, #24]	; (5c04 <vTaskPlaceOnEventList+0x3c>)
    5bec:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    5bee:	683b      	ldr	r3, [r7, #0]
    5bf0:	2101      	movs	r1, #1
    5bf2:	0018      	movs	r0, r3
    5bf4:	4b04      	ldr	r3, [pc, #16]	; (5c08 <vTaskPlaceOnEventList+0x40>)
    5bf6:	4798      	blx	r3
}
    5bf8:	46c0      	nop			; (mov r8, r8)
    5bfa:	46bd      	mov	sp, r7
    5bfc:	b002      	add	sp, #8
    5bfe:	bd80      	pop	{r7, pc}
    5c00:	20002668 	.word	0x20002668
    5c04:	00004713 	.word	0x00004713
    5c08:	00006261 	.word	0x00006261

00005c0c <vTaskPlaceOnEventListRestricted>:

#if (configUSE_TIMERS == 1)

void vTaskPlaceOnEventListRestricted(List_t *const pxEventList, TickType_t xTicksToWait,
                                     const BaseType_t xWaitIndefinitely)
{
    5c0c:	b580      	push	{r7, lr}
    5c0e:	b084      	sub	sp, #16
    5c10:	af00      	add	r7, sp, #0
    5c12:	60f8      	str	r0, [r7, #12]
    5c14:	60b9      	str	r1, [r7, #8]
    5c16:	607a      	str	r2, [r7, #4]
	configASSERT(pxEventList);
    5c18:	68fb      	ldr	r3, [r7, #12]
    5c1a:	2b00      	cmp	r3, #0
    5c1c:	d101      	bne.n	5c22 <vTaskPlaceOnEventListRestricted+0x16>
    5c1e:	b672      	cpsid	i
    5c20:	e7fe      	b.n	5c20 <vTaskPlaceOnEventListRestricted+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	In this case it is assume that this is the only task that is going to
	be waiting on this event list, so the faster vListInsertEnd() function
	can be used in place of vListInsert. */
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    5c22:	4b0c      	ldr	r3, [pc, #48]	; (5c54 <vTaskPlaceOnEventListRestricted+0x48>)
    5c24:	681b      	ldr	r3, [r3, #0]
    5c26:	3318      	adds	r3, #24
    5c28:	001a      	movs	r2, r3
    5c2a:	68fb      	ldr	r3, [r7, #12]
    5c2c:	0011      	movs	r1, r2
    5c2e:	0018      	movs	r0, r3
    5c30:	4b09      	ldr	r3, [pc, #36]	; (5c58 <vTaskPlaceOnEventListRestricted+0x4c>)
    5c32:	4798      	blx	r3

	/* If the task should block indefinitely then set the block time to a
	value that will be recognised as an indefinite delay inside the
	prvAddCurrentTaskToDelayedList() function. */
	if (xWaitIndefinitely != pdFALSE) {
    5c34:	687b      	ldr	r3, [r7, #4]
    5c36:	2b00      	cmp	r3, #0
    5c38:	d002      	beq.n	5c40 <vTaskPlaceOnEventListRestricted+0x34>
		xTicksToWait = portMAX_DELAY;
    5c3a:	2301      	movs	r3, #1
    5c3c:	425b      	negs	r3, r3
    5c3e:	60bb      	str	r3, [r7, #8]
	}

	traceTASK_DELAY_UNTIL((xTickCount + xTicksToWait));
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    5c40:	687a      	ldr	r2, [r7, #4]
    5c42:	68bb      	ldr	r3, [r7, #8]
    5c44:	0011      	movs	r1, r2
    5c46:	0018      	movs	r0, r3
    5c48:	4b04      	ldr	r3, [pc, #16]	; (5c5c <vTaskPlaceOnEventListRestricted+0x50>)
    5c4a:	4798      	blx	r3
}
    5c4c:	46c0      	nop			; (mov r8, r8)
    5c4e:	46bd      	mov	sp, r7
    5c50:	b004      	add	sp, #16
    5c52:	bd80      	pop	{r7, pc}
    5c54:	20002668 	.word	0x20002668
    5c58:	000046cf 	.word	0x000046cf
    5c5c:	00006261 	.word	0x00006261

00005c60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList(const List_t *const pxEventList)
{
    5c60:	b580      	push	{r7, lr}
    5c62:	b084      	sub	sp, #16
    5c64:	af00      	add	r7, sp, #0
    5c66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    5c68:	687b      	ldr	r3, [r7, #4]
    5c6a:	68db      	ldr	r3, [r3, #12]
    5c6c:	68db      	ldr	r3, [r3, #12]
    5c6e:	60bb      	str	r3, [r7, #8]
	configASSERT(pxUnblockedTCB);
    5c70:	68bb      	ldr	r3, [r7, #8]
    5c72:	2b00      	cmp	r3, #0
    5c74:	d101      	bne.n	5c7a <xTaskRemoveFromEventList+0x1a>
    5c76:	b672      	cpsid	i
    5c78:	e7fe      	b.n	5c78 <xTaskRemoveFromEventList+0x18>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    5c7a:	68bb      	ldr	r3, [r7, #8]
    5c7c:	3318      	adds	r3, #24
    5c7e:	0018      	movs	r0, r3
    5c80:	4b1f      	ldr	r3, [pc, #124]	; (5d00 <xTaskRemoveFromEventList+0xa0>)
    5c82:	4798      	blx	r3

	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5c84:	4b1f      	ldr	r3, [pc, #124]	; (5d04 <xTaskRemoveFromEventList+0xa4>)
    5c86:	681b      	ldr	r3, [r3, #0]
    5c88:	2b00      	cmp	r3, #0
    5c8a:	d11d      	bne.n	5cc8 <xTaskRemoveFromEventList+0x68>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    5c8c:	68bb      	ldr	r3, [r7, #8]
    5c8e:	3304      	adds	r3, #4
    5c90:	0018      	movs	r0, r3
    5c92:	4b1b      	ldr	r3, [pc, #108]	; (5d00 <xTaskRemoveFromEventList+0xa0>)
    5c94:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    5c96:	68bb      	ldr	r3, [r7, #8]
    5c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c9a:	4b1b      	ldr	r3, [pc, #108]	; (5d08 <xTaskRemoveFromEventList+0xa8>)
    5c9c:	681b      	ldr	r3, [r3, #0]
    5c9e:	429a      	cmp	r2, r3
    5ca0:	d903      	bls.n	5caa <xTaskRemoveFromEventList+0x4a>
    5ca2:	68bb      	ldr	r3, [r7, #8]
    5ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5ca6:	4b18      	ldr	r3, [pc, #96]	; (5d08 <xTaskRemoveFromEventList+0xa8>)
    5ca8:	601a      	str	r2, [r3, #0]
    5caa:	68bb      	ldr	r3, [r7, #8]
    5cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5cae:	0013      	movs	r3, r2
    5cb0:	009b      	lsls	r3, r3, #2
    5cb2:	189b      	adds	r3, r3, r2
    5cb4:	009b      	lsls	r3, r3, #2
    5cb6:	4a15      	ldr	r2, [pc, #84]	; (5d0c <xTaskRemoveFromEventList+0xac>)
    5cb8:	189a      	adds	r2, r3, r2
    5cba:	68bb      	ldr	r3, [r7, #8]
    5cbc:	3304      	adds	r3, #4
    5cbe:	0019      	movs	r1, r3
    5cc0:	0010      	movs	r0, r2
    5cc2:	4b13      	ldr	r3, [pc, #76]	; (5d10 <xTaskRemoveFromEventList+0xb0>)
    5cc4:	4798      	blx	r3
    5cc6:	e007      	b.n	5cd8 <xTaskRemoveFromEventList+0x78>
	} else {
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    5cc8:	68bb      	ldr	r3, [r7, #8]
    5cca:	3318      	adds	r3, #24
    5ccc:	001a      	movs	r2, r3
    5cce:	4b11      	ldr	r3, [pc, #68]	; (5d14 <xTaskRemoveFromEventList+0xb4>)
    5cd0:	0011      	movs	r1, r2
    5cd2:	0018      	movs	r0, r3
    5cd4:	4b0e      	ldr	r3, [pc, #56]	; (5d10 <xTaskRemoveFromEventList+0xb0>)
    5cd6:	4798      	blx	r3
	}

	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    5cd8:	68bb      	ldr	r3, [r7, #8]
    5cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5cdc:	4b0e      	ldr	r3, [pc, #56]	; (5d18 <xTaskRemoveFromEventList+0xb8>)
    5cde:	681b      	ldr	r3, [r3, #0]
    5ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5ce2:	429a      	cmp	r2, r3
    5ce4:	d905      	bls.n	5cf2 <xTaskRemoveFromEventList+0x92>
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    5ce6:	2301      	movs	r3, #1
    5ce8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    5cea:	4b0c      	ldr	r3, [pc, #48]	; (5d1c <xTaskRemoveFromEventList+0xbc>)
    5cec:	2201      	movs	r2, #1
    5cee:	601a      	str	r2, [r3, #0]
    5cf0:	e001      	b.n	5cf6 <xTaskRemoveFromEventList+0x96>
	} else {
		xReturn = pdFALSE;
    5cf2:	2300      	movs	r3, #0
    5cf4:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
#endif

	return xReturn;
    5cf6:	68fb      	ldr	r3, [r7, #12]
}
    5cf8:	0018      	movs	r0, r3
    5cfa:	46bd      	mov	sp, r7
    5cfc:	b004      	add	sp, #16
    5cfe:	bd80      	pop	{r7, pc}
    5d00:	0000477f 	.word	0x0000477f
    5d04:	20002768 	.word	0x20002768
    5d08:	20002748 	.word	0x20002748
    5d0c:	2000266c 	.word	0x2000266c
    5d10:	000046cf 	.word	0x000046cf
    5d14:	20002700 	.word	0x20002700
    5d18:	20002668 	.word	0x20002668
    5d1c:	20002754 	.word	0x20002754

00005d20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState(TimeOut_t *const pxTimeOut)
{
    5d20:	b580      	push	{r7, lr}
    5d22:	b082      	sub	sp, #8
    5d24:	af00      	add	r7, sp, #0
    5d26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    5d28:	4b05      	ldr	r3, [pc, #20]	; (5d40 <vTaskInternalSetTimeOutState+0x20>)
    5d2a:	681a      	ldr	r2, [r3, #0]
    5d2c:	687b      	ldr	r3, [r7, #4]
    5d2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5d30:	4b04      	ldr	r3, [pc, #16]	; (5d44 <vTaskInternalSetTimeOutState+0x24>)
    5d32:	681a      	ldr	r2, [r3, #0]
    5d34:	687b      	ldr	r3, [r7, #4]
    5d36:	605a      	str	r2, [r3, #4]
}
    5d38:	46c0      	nop			; (mov r8, r8)
    5d3a:	46bd      	mov	sp, r7
    5d3c:	b002      	add	sp, #8
    5d3e:	bd80      	pop	{r7, pc}
    5d40:	20002758 	.word	0x20002758
    5d44:	20002744 	.word	0x20002744

00005d48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut(TimeOut_t *const pxTimeOut, TickType_t *const pxTicksToWait)
{
    5d48:	b580      	push	{r7, lr}
    5d4a:	b086      	sub	sp, #24
    5d4c:	af00      	add	r7, sp, #0
    5d4e:	6078      	str	r0, [r7, #4]
    5d50:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

	configASSERT(pxTimeOut);
    5d52:	687b      	ldr	r3, [r7, #4]
    5d54:	2b00      	cmp	r3, #0
    5d56:	d101      	bne.n	5d5c <xTaskCheckForTimeOut+0x14>
    5d58:	b672      	cpsid	i
    5d5a:	e7fe      	b.n	5d5a <xTaskCheckForTimeOut+0x12>
	configASSERT(pxTicksToWait);
    5d5c:	683b      	ldr	r3, [r7, #0]
    5d5e:	2b00      	cmp	r3, #0
    5d60:	d101      	bne.n	5d66 <xTaskCheckForTimeOut+0x1e>
    5d62:	b672      	cpsid	i
    5d64:	e7fe      	b.n	5d64 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    5d66:	4b1e      	ldr	r3, [pc, #120]	; (5de0 <xTaskCheckForTimeOut+0x98>)
    5d68:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    5d6a:	4b1e      	ldr	r3, [pc, #120]	; (5de4 <xTaskCheckForTimeOut+0x9c>)
    5d6c:	681b      	ldr	r3, [r3, #0]
    5d6e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5d70:	687b      	ldr	r3, [r7, #4]
    5d72:	685b      	ldr	r3, [r3, #4]
    5d74:	693a      	ldr	r2, [r7, #16]
    5d76:	1ad3      	subs	r3, r2, r3
    5d78:	60fb      	str	r3, [r7, #12]
			xReturn                      = pdTRUE;
		} else
#endif

#if (INCLUDE_vTaskSuspend == 1)
		    if (*pxTicksToWait == portMAX_DELAY) {
    5d7a:	683b      	ldr	r3, [r7, #0]
    5d7c:	681b      	ldr	r3, [r3, #0]
    5d7e:	3301      	adds	r3, #1
    5d80:	d102      	bne.n	5d88 <xTaskCheckForTimeOut+0x40>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time
			specified is the maximum block time then the task should block
			indefinitely, and therefore never time out. */
			xReturn = pdFALSE;
    5d82:	2300      	movs	r3, #0
    5d84:	617b      	str	r3, [r7, #20]
    5d86:	e024      	b.n	5dd2 <xTaskCheckForTimeOut+0x8a>
		} else
#endif

		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    5d88:	687b      	ldr	r3, [r7, #4]
    5d8a:	681a      	ldr	r2, [r3, #0]
    5d8c:	4b16      	ldr	r3, [pc, #88]	; (5de8 <xTaskCheckForTimeOut+0xa0>)
    5d8e:	681b      	ldr	r3, [r3, #0]
    5d90:	429a      	cmp	r2, r3
    5d92:	d007      	beq.n	5da4 <xTaskCheckForTimeOut+0x5c>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    5d94:	687b      	ldr	r3, [r7, #4]
    5d96:	685a      	ldr	r2, [r3, #4]
    5d98:	693b      	ldr	r3, [r7, #16]
    5d9a:	429a      	cmp	r2, r3
    5d9c:	d802      	bhi.n	5da4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    5d9e:	2301      	movs	r3, #1
    5da0:	617b      	str	r3, [r7, #20]
    5da2:	e016      	b.n	5dd2 <xTaskCheckForTimeOut+0x8a>
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    5da4:	683b      	ldr	r3, [r7, #0]
    5da6:	681a      	ldr	r2, [r3, #0]
    5da8:	68fb      	ldr	r3, [r7, #12]
    5daa:	429a      	cmp	r2, r3
    5dac:	d90c      	bls.n	5dc8 <xTaskCheckForTimeOut+0x80>
		                                             whereas others require it to prevent integer conversion errors. */
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
    5dae:	683b      	ldr	r3, [r7, #0]
    5db0:	681a      	ldr	r2, [r3, #0]
    5db2:	68fb      	ldr	r3, [r7, #12]
    5db4:	1ad2      	subs	r2, r2, r3
    5db6:	683b      	ldr	r3, [r7, #0]
    5db8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    5dba:	687b      	ldr	r3, [r7, #4]
    5dbc:	0018      	movs	r0, r3
    5dbe:	4b0b      	ldr	r3, [pc, #44]	; (5dec <xTaskCheckForTimeOut+0xa4>)
    5dc0:	4798      	blx	r3
			xReturn = pdFALSE;
    5dc2:	2300      	movs	r3, #0
    5dc4:	617b      	str	r3, [r7, #20]
    5dc6:	e004      	b.n	5dd2 <xTaskCheckForTimeOut+0x8a>
		} else {
			*pxTicksToWait = 0;
    5dc8:	683b      	ldr	r3, [r7, #0]
    5dca:	2200      	movs	r2, #0
    5dcc:	601a      	str	r2, [r3, #0]
			xReturn        = pdTRUE;
    5dce:	2301      	movs	r3, #1
    5dd0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
    5dd2:	4b07      	ldr	r3, [pc, #28]	; (5df0 <xTaskCheckForTimeOut+0xa8>)
    5dd4:	4798      	blx	r3

	return xReturn;
    5dd6:	697b      	ldr	r3, [r7, #20]
}
    5dd8:	0018      	movs	r0, r3
    5dda:	46bd      	mov	sp, r7
    5ddc:	b006      	add	sp, #24
    5dde:	bd80      	pop	{r7, pc}
    5de0:	00004911 	.word	0x00004911
    5de4:	20002744 	.word	0x20002744
    5de8:	20002758 	.word	0x20002758
    5dec:	00005d21 	.word	0x00005d21
    5df0:	00004935 	.word	0x00004935

00005df4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield(void)
{
    5df4:	b580      	push	{r7, lr}
    5df6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    5df8:	4b02      	ldr	r3, [pc, #8]	; (5e04 <vTaskMissedYield+0x10>)
    5dfa:	2201      	movs	r2, #1
    5dfc:	601a      	str	r2, [r3, #0]
}
    5dfe:	46c0      	nop			; (mov r8, r8)
    5e00:	46bd      	mov	sp, r7
    5e02:	bd80      	pop	{r7, pc}
    5e04:	20002754 	.word	0x20002754

00005e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION(prvIdleTask, pvParameters)
{
    5e08:	b580      	push	{r7, lr}
    5e0a:	b082      	sub	sp, #8
    5e0c:	af00      	add	r7, sp, #0
    5e0e:	6078      	str	r0, [r7, #4]
	portTASK_CALLS_SECURE_FUNCTIONS();

	for (;;) {
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    5e10:	4b04      	ldr	r3, [pc, #16]	; (5e24 <prvIdleTask+0x1c>)
    5e12:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    5e14:	4b04      	ldr	r3, [pc, #16]	; (5e28 <prvIdleTask+0x20>)
    5e16:	681b      	ldr	r3, [r3, #0]
    5e18:	2b01      	cmp	r3, #1
    5e1a:	d9f9      	bls.n	5e10 <prvIdleTask+0x8>
				taskYIELD();
    5e1c:	4b03      	ldr	r3, [pc, #12]	; (5e2c <prvIdleTask+0x24>)
    5e1e:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
    5e20:	e7f6      	b.n	5e10 <prvIdleTask+0x8>
    5e22:	46c0      	nop			; (mov r8, r8)
    5e24:	00005ebd 	.word	0x00005ebd
    5e28:	2000266c 	.word	0x2000266c
    5e2c:	000048f1 	.word	0x000048f1

00005e30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists(void)
{
    5e30:	b580      	push	{r7, lr}
    5e32:	b082      	sub	sp, #8
    5e34:	af00      	add	r7, sp, #0
	UBaseType_t uxPriority;

	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    5e36:	2300      	movs	r3, #0
    5e38:	607b      	str	r3, [r7, #4]
    5e3a:	e00c      	b.n	5e56 <prvInitialiseTaskLists+0x26>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    5e3c:	687a      	ldr	r2, [r7, #4]
    5e3e:	0013      	movs	r3, r2
    5e40:	009b      	lsls	r3, r3, #2
    5e42:	189b      	adds	r3, r3, r2
    5e44:	009b      	lsls	r3, r3, #2
    5e46:	4a14      	ldr	r2, [pc, #80]	; (5e98 <prvInitialiseTaskLists+0x68>)
    5e48:	189b      	adds	r3, r3, r2
    5e4a:	0018      	movs	r0, r3
    5e4c:	4b13      	ldr	r3, [pc, #76]	; (5e9c <prvInitialiseTaskLists+0x6c>)
    5e4e:	4798      	blx	r3
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++) {
    5e50:	687b      	ldr	r3, [r7, #4]
    5e52:	3301      	adds	r3, #1
    5e54:	607b      	str	r3, [r7, #4]
    5e56:	687b      	ldr	r3, [r7, #4]
    5e58:	2b04      	cmp	r3, #4
    5e5a:	d9ef      	bls.n	5e3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise(&xDelayedTaskList1);
    5e5c:	4b10      	ldr	r3, [pc, #64]	; (5ea0 <prvInitialiseTaskLists+0x70>)
    5e5e:	0018      	movs	r0, r3
    5e60:	4b0e      	ldr	r3, [pc, #56]	; (5e9c <prvInitialiseTaskLists+0x6c>)
    5e62:	4798      	blx	r3
	vListInitialise(&xDelayedTaskList2);
    5e64:	4b0f      	ldr	r3, [pc, #60]	; (5ea4 <prvInitialiseTaskLists+0x74>)
    5e66:	0018      	movs	r0, r3
    5e68:	4b0c      	ldr	r3, [pc, #48]	; (5e9c <prvInitialiseTaskLists+0x6c>)
    5e6a:	4798      	blx	r3
	vListInitialise(&xPendingReadyList);
    5e6c:	4b0e      	ldr	r3, [pc, #56]	; (5ea8 <prvInitialiseTaskLists+0x78>)
    5e6e:	0018      	movs	r0, r3
    5e70:	4b0a      	ldr	r3, [pc, #40]	; (5e9c <prvInitialiseTaskLists+0x6c>)
    5e72:	4798      	blx	r3

#if (INCLUDE_vTaskDelete == 1)
	{
		vListInitialise(&xTasksWaitingTermination);
    5e74:	4b0d      	ldr	r3, [pc, #52]	; (5eac <prvInitialiseTaskLists+0x7c>)
    5e76:	0018      	movs	r0, r3
    5e78:	4b08      	ldr	r3, [pc, #32]	; (5e9c <prvInitialiseTaskLists+0x6c>)
    5e7a:	4798      	blx	r3
	}
#endif /* INCLUDE_vTaskDelete */

#if (INCLUDE_vTaskSuspend == 1)
	{
		vListInitialise(&xSuspendedTaskList);
    5e7c:	4b0c      	ldr	r3, [pc, #48]	; (5eb0 <prvInitialiseTaskLists+0x80>)
    5e7e:	0018      	movs	r0, r3
    5e80:	4b06      	ldr	r3, [pc, #24]	; (5e9c <prvInitialiseTaskLists+0x6c>)
    5e82:	4798      	blx	r3
	}
#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList         = &xDelayedTaskList1;
    5e84:	4b0b      	ldr	r3, [pc, #44]	; (5eb4 <prvInitialiseTaskLists+0x84>)
    5e86:	4a06      	ldr	r2, [pc, #24]	; (5ea0 <prvInitialiseTaskLists+0x70>)
    5e88:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5e8a:	4b0b      	ldr	r3, [pc, #44]	; (5eb8 <prvInitialiseTaskLists+0x88>)
    5e8c:	4a05      	ldr	r2, [pc, #20]	; (5ea4 <prvInitialiseTaskLists+0x74>)
    5e8e:	601a      	str	r2, [r3, #0]
}
    5e90:	46c0      	nop			; (mov r8, r8)
    5e92:	46bd      	mov	sp, r7
    5e94:	b002      	add	sp, #8
    5e96:	bd80      	pop	{r7, pc}
    5e98:	2000266c 	.word	0x2000266c
    5e9c:	0000467d 	.word	0x0000467d
    5ea0:	200026d0 	.word	0x200026d0
    5ea4:	200026e4 	.word	0x200026e4
    5ea8:	20002700 	.word	0x20002700
    5eac:	20002714 	.word	0x20002714
    5eb0:	2000272c 	.word	0x2000272c
    5eb4:	200026f8 	.word	0x200026f8
    5eb8:	200026fc 	.word	0x200026fc

00005ebc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination(void)
{
    5ebc:	b580      	push	{r7, lr}
    5ebe:	b082      	sub	sp, #8
    5ec0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
    5ec2:	e01a      	b.n	5efa <prvCheckTasksWaitingTermination+0x3e>
			taskENTER_CRITICAL();
    5ec4:	4b11      	ldr	r3, [pc, #68]	; (5f0c <prvCheckTasksWaitingTermination+0x50>)
    5ec6:	4798      	blx	r3
			{
				pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xTasksWaitingTermination));
    5ec8:	4b11      	ldr	r3, [pc, #68]	; (5f10 <prvCheckTasksWaitingTermination+0x54>)
    5eca:	68db      	ldr	r3, [r3, #12]
    5ecc:	68db      	ldr	r3, [r3, #12]
    5ece:	607b      	str	r3, [r7, #4]
				(void)uxListRemove(&(pxTCB->xStateListItem));
    5ed0:	687b      	ldr	r3, [r7, #4]
    5ed2:	3304      	adds	r3, #4
    5ed4:	0018      	movs	r0, r3
    5ed6:	4b0f      	ldr	r3, [pc, #60]	; (5f14 <prvCheckTasksWaitingTermination+0x58>)
    5ed8:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    5eda:	4b0f      	ldr	r3, [pc, #60]	; (5f18 <prvCheckTasksWaitingTermination+0x5c>)
    5edc:	681b      	ldr	r3, [r3, #0]
    5ede:	1e5a      	subs	r2, r3, #1
    5ee0:	4b0d      	ldr	r3, [pc, #52]	; (5f18 <prvCheckTasksWaitingTermination+0x5c>)
    5ee2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
    5ee4:	4b0d      	ldr	r3, [pc, #52]	; (5f1c <prvCheckTasksWaitingTermination+0x60>)
    5ee6:	681b      	ldr	r3, [r3, #0]
    5ee8:	1e5a      	subs	r2, r3, #1
    5eea:	4b0c      	ldr	r3, [pc, #48]	; (5f1c <prvCheckTasksWaitingTermination+0x60>)
    5eec:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
    5eee:	4b0c      	ldr	r3, [pc, #48]	; (5f20 <prvCheckTasksWaitingTermination+0x64>)
    5ef0:	4798      	blx	r3

			prvDeleteTCB(pxTCB);
    5ef2:	687b      	ldr	r3, [r7, #4]
    5ef4:	0018      	movs	r0, r3
    5ef6:	4b0b      	ldr	r3, [pc, #44]	; (5f24 <prvCheckTasksWaitingTermination+0x68>)
    5ef8:	4798      	blx	r3
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U) {
    5efa:	4b08      	ldr	r3, [pc, #32]	; (5f1c <prvCheckTasksWaitingTermination+0x60>)
    5efc:	681b      	ldr	r3, [r3, #0]
    5efe:	2b00      	cmp	r3, #0
    5f00:	d1e0      	bne.n	5ec4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
#endif /* INCLUDE_vTaskDelete */
}
    5f02:	46c0      	nop			; (mov r8, r8)
    5f04:	46bd      	mov	sp, r7
    5f06:	b002      	add	sp, #8
    5f08:	bd80      	pop	{r7, pc}
    5f0a:	46c0      	nop			; (mov r8, r8)
    5f0c:	00004911 	.word	0x00004911
    5f10:	20002714 	.word	0x20002714
    5f14:	0000477f 	.word	0x0000477f
    5f18:	20002740 	.word	0x20002740
    5f1c:	20002728 	.word	0x20002728
    5f20:	00004935 	.word	0x00004935
    5f24:	00005f29 	.word	0x00005f29

00005f28 <prvDeleteTCB>:
	/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

static void prvDeleteTCB(TCB_t *pxTCB)
{
    5f28:	b580      	push	{r7, lr}
    5f2a:	b082      	sub	sp, #8
    5f2c:	af00      	add	r7, sp, #0
    5f2e:	6078      	str	r0, [r7, #4]

#if ((configSUPPORT_DYNAMIC_ALLOCATION == 1) && (configSUPPORT_STATIC_ALLOCATION == 0) && (portUSING_MPU_WRAPPERS == 0))
	{
		/* The task can only have been allocated dynamically - free both
		the stack and TCB. */
		vPortFree(pxTCB->pxStack);
    5f30:	687b      	ldr	r3, [r7, #4]
    5f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5f34:	0018      	movs	r0, r3
    5f36:	4b05      	ldr	r3, [pc, #20]	; (5f4c <prvDeleteTCB+0x24>)
    5f38:	4798      	blx	r3
		vPortFree(pxTCB);
    5f3a:	687b      	ldr	r3, [r7, #4]
    5f3c:	0018      	movs	r0, r3
    5f3e:	4b03      	ldr	r3, [pc, #12]	; (5f4c <prvDeleteTCB+0x24>)
    5f40:	4798      	blx	r3
			configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
			mtCOVERAGE_TEST_MARKER();
		}
	}
#endif       /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    5f42:	46c0      	nop			; (mov r8, r8)
    5f44:	46bd      	mov	sp, r7
    5f46:	b002      	add	sp, #8
    5f48:	bd80      	pop	{r7, pc}
    5f4a:	46c0      	nop			; (mov r8, r8)
    5f4c:	00004ad1 	.word	0x00004ad1

00005f50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime(void)
{
    5f50:	b580      	push	{r7, lr}
    5f52:	b082      	sub	sp, #8
    5f54:	af00      	add	r7, sp, #0
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5f56:	4b0e      	ldr	r3, [pc, #56]	; (5f90 <prvResetNextTaskUnblockTime+0x40>)
    5f58:	681b      	ldr	r3, [r3, #0]
    5f5a:	681b      	ldr	r3, [r3, #0]
    5f5c:	2b00      	cmp	r3, #0
    5f5e:	d101      	bne.n	5f64 <prvResetNextTaskUnblockTime+0x14>
    5f60:	2301      	movs	r3, #1
    5f62:	e000      	b.n	5f66 <prvResetNextTaskUnblockTime+0x16>
    5f64:	2300      	movs	r3, #0
    5f66:	2b00      	cmp	r3, #0
    5f68:	d004      	beq.n	5f74 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    5f6a:	4b0a      	ldr	r3, [pc, #40]	; (5f94 <prvResetNextTaskUnblockTime+0x44>)
    5f6c:	2201      	movs	r2, #1
    5f6e:	4252      	negs	r2, r2
    5f70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
	}
}
    5f72:	e008      	b.n	5f86 <prvResetNextTaskUnblockTime+0x36>
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    5f74:	4b06      	ldr	r3, [pc, #24]	; (5f90 <prvResetNextTaskUnblockTime+0x40>)
    5f76:	681b      	ldr	r3, [r3, #0]
    5f78:	68db      	ldr	r3, [r3, #12]
    5f7a:	68db      	ldr	r3, [r3, #12]
    5f7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    5f7e:	687b      	ldr	r3, [r7, #4]
    5f80:	685a      	ldr	r2, [r3, #4]
    5f82:	4b04      	ldr	r3, [pc, #16]	; (5f94 <prvResetNextTaskUnblockTime+0x44>)
    5f84:	601a      	str	r2, [r3, #0]
}
    5f86:	46c0      	nop			; (mov r8, r8)
    5f88:	46bd      	mov	sp, r7
    5f8a:	b002      	add	sp, #8
    5f8c:	bd80      	pop	{r7, pc}
    5f8e:	46c0      	nop			; (mov r8, r8)
    5f90:	200026f8 	.word	0x200026f8
    5f94:	20002760 	.word	0x20002760

00005f98 <xTaskGetSchedulerState>:
	/*-----------------------------------------------------------*/

#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))

BaseType_t xTaskGetSchedulerState(void)
{
    5f98:	b580      	push	{r7, lr}
    5f9a:	b082      	sub	sp, #8
    5f9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

	if (xSchedulerRunning == pdFALSE) {
    5f9e:	4b0a      	ldr	r3, [pc, #40]	; (5fc8 <xTaskGetSchedulerState+0x30>)
    5fa0:	681b      	ldr	r3, [r3, #0]
    5fa2:	2b00      	cmp	r3, #0
    5fa4:	d102      	bne.n	5fac <xTaskGetSchedulerState+0x14>
		xReturn = taskSCHEDULER_NOT_STARTED;
    5fa6:	2301      	movs	r3, #1
    5fa8:	607b      	str	r3, [r7, #4]
    5faa:	e008      	b.n	5fbe <xTaskGetSchedulerState+0x26>
	} else {
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5fac:	4b07      	ldr	r3, [pc, #28]	; (5fcc <xTaskGetSchedulerState+0x34>)
    5fae:	681b      	ldr	r3, [r3, #0]
    5fb0:	2b00      	cmp	r3, #0
    5fb2:	d102      	bne.n	5fba <xTaskGetSchedulerState+0x22>
			xReturn = taskSCHEDULER_RUNNING;
    5fb4:	2302      	movs	r3, #2
    5fb6:	607b      	str	r3, [r7, #4]
    5fb8:	e001      	b.n	5fbe <xTaskGetSchedulerState+0x26>
		} else {
			xReturn = taskSCHEDULER_SUSPENDED;
    5fba:	2300      	movs	r3, #0
    5fbc:	607b      	str	r3, [r7, #4]
		}
	}

	return xReturn;
    5fbe:	687b      	ldr	r3, [r7, #4]
}
    5fc0:	0018      	movs	r0, r3
    5fc2:	46bd      	mov	sp, r7
    5fc4:	b002      	add	sp, #8
    5fc6:	bd80      	pop	{r7, pc}
    5fc8:	2000274c 	.word	0x2000274c
    5fcc:	20002768 	.word	0x20002768

00005fd0 <xTaskGenericNotify>:

#if (configUSE_TASK_NOTIFICATIONS == 1)

BaseType_t xTaskGenericNotify(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction,
                              uint32_t *pulPreviousNotificationValue)
{
    5fd0:	b580      	push	{r7, lr}
    5fd2:	b088      	sub	sp, #32
    5fd4:	af00      	add	r7, sp, #0
    5fd6:	60f8      	str	r0, [r7, #12]
    5fd8:	60b9      	str	r1, [r7, #8]
    5fda:	603b      	str	r3, [r7, #0]
    5fdc:	1dfb      	adds	r3, r7, #7
    5fde:	701a      	strb	r2, [r3, #0]
	TCB_t *    pxTCB;
	BaseType_t xReturn = pdPASS;
    5fe0:	2301      	movs	r3, #1
    5fe2:	61fb      	str	r3, [r7, #28]
	uint8_t    ucOriginalNotifyState;

	configASSERT(xTaskToNotify);
    5fe4:	68fb      	ldr	r3, [r7, #12]
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	d101      	bne.n	5fee <xTaskGenericNotify+0x1e>
    5fea:	b672      	cpsid	i
    5fec:	e7fe      	b.n	5fec <xTaskGenericNotify+0x1c>
	pxTCB = (TCB_t *)xTaskToNotify;
    5fee:	68fb      	ldr	r3, [r7, #12]
    5ff0:	61bb      	str	r3, [r7, #24]

	taskENTER_CRITICAL();
    5ff2:	4b39      	ldr	r3, [pc, #228]	; (60d8 <xTaskGenericNotify+0x108>)
    5ff4:	4798      	blx	r3
	{
		if (pulPreviousNotificationValue != NULL) {
    5ff6:	683b      	ldr	r3, [r7, #0]
    5ff8:	2b00      	cmp	r3, #0
    5ffa:	d003      	beq.n	6004 <xTaskGenericNotify+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    5ffc:	69bb      	ldr	r3, [r7, #24]
    5ffe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    6000:	683b      	ldr	r3, [r7, #0]
    6002:	601a      	str	r2, [r3, #0]
		}

		ucOriginalNotifyState = pxTCB->ucNotifyState;
    6004:	2317      	movs	r3, #23
    6006:	18fb      	adds	r3, r7, r3
    6008:	69ba      	ldr	r2, [r7, #24]
    600a:	2148      	movs	r1, #72	; 0x48
    600c:	5c52      	ldrb	r2, [r2, r1]
    600e:	701a      	strb	r2, [r3, #0]

		pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    6010:	69bb      	ldr	r3, [r7, #24]
    6012:	2248      	movs	r2, #72	; 0x48
    6014:	2102      	movs	r1, #2
    6016:	5499      	strb	r1, [r3, r2]

		switch (eAction) {
    6018:	1dfb      	adds	r3, r7, #7
    601a:	781b      	ldrb	r3, [r3, #0]
    601c:	2b04      	cmp	r3, #4
    601e:	d822      	bhi.n	6066 <xTaskGenericNotify+0x96>
    6020:	009a      	lsls	r2, r3, #2
    6022:	4b2e      	ldr	r3, [pc, #184]	; (60dc <xTaskGenericNotify+0x10c>)
    6024:	18d3      	adds	r3, r2, r3
    6026:	681b      	ldr	r3, [r3, #0]
    6028:	469f      	mov	pc, r3
		case eSetBits:
			pxTCB->ulNotifiedValue |= ulValue;
    602a:	69bb      	ldr	r3, [r7, #24]
    602c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    602e:	68bb      	ldr	r3, [r7, #8]
    6030:	431a      	orrs	r2, r3
    6032:	69bb      	ldr	r3, [r7, #24]
    6034:	645a      	str	r2, [r3, #68]	; 0x44
			break;
    6036:	e016      	b.n	6066 <xTaskGenericNotify+0x96>

		case eIncrement:
			(pxTCB->ulNotifiedValue)++;
    6038:	69bb      	ldr	r3, [r7, #24]
    603a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    603c:	1c5a      	adds	r2, r3, #1
    603e:	69bb      	ldr	r3, [r7, #24]
    6040:	645a      	str	r2, [r3, #68]	; 0x44
			break;
    6042:	e010      	b.n	6066 <xTaskGenericNotify+0x96>

		case eSetValueWithOverwrite:
			pxTCB->ulNotifiedValue = ulValue;
    6044:	69bb      	ldr	r3, [r7, #24]
    6046:	68ba      	ldr	r2, [r7, #8]
    6048:	645a      	str	r2, [r3, #68]	; 0x44
			break;
    604a:	e00c      	b.n	6066 <xTaskGenericNotify+0x96>

		case eSetValueWithoutOverwrite:
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    604c:	2317      	movs	r3, #23
    604e:	18fb      	adds	r3, r7, r3
    6050:	781b      	ldrb	r3, [r3, #0]
    6052:	2b02      	cmp	r3, #2
    6054:	d003      	beq.n	605e <xTaskGenericNotify+0x8e>
				pxTCB->ulNotifiedValue = ulValue;
    6056:	69bb      	ldr	r3, [r7, #24]
    6058:	68ba      	ldr	r2, [r7, #8]
    605a:	645a      	str	r2, [r3, #68]	; 0x44
			} else {
				/* The value could not be written to the task. */
				xReturn = pdFAIL;
			}
			break;
    605c:	e003      	b.n	6066 <xTaskGenericNotify+0x96>
				xReturn = pdFAIL;
    605e:	2300      	movs	r3, #0
    6060:	61fb      	str	r3, [r7, #28]
			break;
    6062:	e000      	b.n	6066 <xTaskGenericNotify+0x96>

		case eNoAction:
			/* The task is being notified without its notify value being
			updated. */
			break;
    6064:	46c0      	nop			; (mov r8, r8)

		traceTASK_NOTIFY();

		/* If the task is in the blocked state specifically to wait for a
		notification then unblock it now. */
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    6066:	2317      	movs	r3, #23
    6068:	18fb      	adds	r3, r7, r3
    606a:	781b      	ldrb	r3, [r3, #0]
    606c:	2b01      	cmp	r3, #1
    606e:	d12b      	bne.n	60c8 <xTaskGenericNotify+0xf8>
			(void)uxListRemove(&(pxTCB->xStateListItem));
    6070:	69bb      	ldr	r3, [r7, #24]
    6072:	3304      	adds	r3, #4
    6074:	0018      	movs	r0, r3
    6076:	4b1a      	ldr	r3, [pc, #104]	; (60e0 <xTaskGenericNotify+0x110>)
    6078:	4798      	blx	r3
			prvAddTaskToReadyList(pxTCB);
    607a:	69bb      	ldr	r3, [r7, #24]
    607c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    607e:	4b19      	ldr	r3, [pc, #100]	; (60e4 <xTaskGenericNotify+0x114>)
    6080:	681b      	ldr	r3, [r3, #0]
    6082:	429a      	cmp	r2, r3
    6084:	d903      	bls.n	608e <xTaskGenericNotify+0xbe>
    6086:	69bb      	ldr	r3, [r7, #24]
    6088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    608a:	4b16      	ldr	r3, [pc, #88]	; (60e4 <xTaskGenericNotify+0x114>)
    608c:	601a      	str	r2, [r3, #0]
    608e:	69bb      	ldr	r3, [r7, #24]
    6090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6092:	0013      	movs	r3, r2
    6094:	009b      	lsls	r3, r3, #2
    6096:	189b      	adds	r3, r3, r2
    6098:	009b      	lsls	r3, r3, #2
    609a:	4a13      	ldr	r2, [pc, #76]	; (60e8 <xTaskGenericNotify+0x118>)
    609c:	189a      	adds	r2, r3, r2
    609e:	69bb      	ldr	r3, [r7, #24]
    60a0:	3304      	adds	r3, #4
    60a2:	0019      	movs	r1, r3
    60a4:	0010      	movs	r0, r2
    60a6:	4b11      	ldr	r3, [pc, #68]	; (60ec <xTaskGenericNotify+0x11c>)
    60a8:	4798      	blx	r3

			/* The task should not have been on an event list. */
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    60aa:	69bb      	ldr	r3, [r7, #24]
    60ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    60ae:	2b00      	cmp	r3, #0
    60b0:	d001      	beq.n	60b6 <xTaskGenericNotify+0xe6>
    60b2:	b672      	cpsid	i
    60b4:	e7fe      	b.n	60b4 <xTaskGenericNotify+0xe4>
				earliest possible time. */
				prvResetNextTaskUnblockTime();
			}
#endif

			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    60b6:	69bb      	ldr	r3, [r7, #24]
    60b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    60ba:	4b0d      	ldr	r3, [pc, #52]	; (60f0 <xTaskGenericNotify+0x120>)
    60bc:	681b      	ldr	r3, [r3, #0]
    60be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    60c0:	429a      	cmp	r2, r3
    60c2:	d901      	bls.n	60c8 <xTaskGenericNotify+0xf8>
				/* The notified task has a priority above the currently
				executing task so a yield is required. */
				taskYIELD_IF_USING_PREEMPTION();
    60c4:	4b0b      	ldr	r3, [pc, #44]	; (60f4 <xTaskGenericNotify+0x124>)
    60c6:	4798      	blx	r3
			}
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    60c8:	4b0b      	ldr	r3, [pc, #44]	; (60f8 <xTaskGenericNotify+0x128>)
    60ca:	4798      	blx	r3

	return xReturn;
    60cc:	69fb      	ldr	r3, [r7, #28]
}
    60ce:	0018      	movs	r0, r3
    60d0:	46bd      	mov	sp, r7
    60d2:	b008      	add	sp, #32
    60d4:	bd80      	pop	{r7, pc}
    60d6:	46c0      	nop			; (mov r8, r8)
    60d8:	00004911 	.word	0x00004911
    60dc:	0000869c 	.word	0x0000869c
    60e0:	0000477f 	.word	0x0000477f
    60e4:	20002748 	.word	0x20002748
    60e8:	2000266c 	.word	0x2000266c
    60ec:	000046cf 	.word	0x000046cf
    60f0:	20002668 	.word	0x20002668
    60f4:	000048f1 	.word	0x000048f1
    60f8:	00004935 	.word	0x00004935

000060fc <xTaskGenericNotifyFromISR>:

#if (configUSE_TASK_NOTIFICATIONS == 1)

BaseType_t xTaskGenericNotifyFromISR(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction,
                                     uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken)
{
    60fc:	b580      	push	{r7, lr}
    60fe:	b088      	sub	sp, #32
    6100:	af00      	add	r7, sp, #0
    6102:	60f8      	str	r0, [r7, #12]
    6104:	60b9      	str	r1, [r7, #8]
    6106:	603b      	str	r3, [r7, #0]
    6108:	1dfb      	adds	r3, r7, #7
    610a:	701a      	strb	r2, [r3, #0]
	TCB_t *     pxTCB;
	uint8_t     ucOriginalNotifyState;
	BaseType_t  xReturn = pdPASS;
    610c:	2301      	movs	r3, #1
    610e:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

	configASSERT(xTaskToNotify);
    6110:	68fb      	ldr	r3, [r7, #12]
    6112:	2b00      	cmp	r3, #0
    6114:	d101      	bne.n	611a <xTaskGenericNotifyFromISR+0x1e>
    6116:	b672      	cpsid	i
    6118:	e7fe      	b.n	6118 <xTaskGenericNotifyFromISR+0x1c>
	simple as possible.  More information (albeit Cortex-M specific) is
	provided on the following link:
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	pxTCB = (TCB_t *)xTaskToNotify;
    611a:	68fb      	ldr	r3, [r7, #12]
    611c:	61bb      	str	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    611e:	4b45      	ldr	r3, [pc, #276]	; (6234 <xTaskGenericNotifyFromISR+0x138>)
    6120:	4798      	blx	r3
    6122:	0003      	movs	r3, r0
    6124:	617b      	str	r3, [r7, #20]
	{
		if (pulPreviousNotificationValue != NULL) {
    6126:	683b      	ldr	r3, [r7, #0]
    6128:	2b00      	cmp	r3, #0
    612a:	d003      	beq.n	6134 <xTaskGenericNotifyFromISR+0x38>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    612c:	69bb      	ldr	r3, [r7, #24]
    612e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    6130:	683b      	ldr	r3, [r7, #0]
    6132:	601a      	str	r2, [r3, #0]
		}

		ucOriginalNotifyState = pxTCB->ucNotifyState;
    6134:	2313      	movs	r3, #19
    6136:	18fb      	adds	r3, r7, r3
    6138:	69ba      	ldr	r2, [r7, #24]
    613a:	2148      	movs	r1, #72	; 0x48
    613c:	5c52      	ldrb	r2, [r2, r1]
    613e:	701a      	strb	r2, [r3, #0]
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    6140:	69bb      	ldr	r3, [r7, #24]
    6142:	2248      	movs	r2, #72	; 0x48
    6144:	2102      	movs	r1, #2
    6146:	5499      	strb	r1, [r3, r2]

		switch (eAction) {
    6148:	1dfb      	adds	r3, r7, #7
    614a:	781b      	ldrb	r3, [r3, #0]
    614c:	2b04      	cmp	r3, #4
    614e:	d822      	bhi.n	6196 <xTaskGenericNotifyFromISR+0x9a>
    6150:	009a      	lsls	r2, r3, #2
    6152:	4b39      	ldr	r3, [pc, #228]	; (6238 <xTaskGenericNotifyFromISR+0x13c>)
    6154:	18d3      	adds	r3, r2, r3
    6156:	681b      	ldr	r3, [r3, #0]
    6158:	469f      	mov	pc, r3
		case eSetBits:
			pxTCB->ulNotifiedValue |= ulValue;
    615a:	69bb      	ldr	r3, [r7, #24]
    615c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    615e:	68bb      	ldr	r3, [r7, #8]
    6160:	431a      	orrs	r2, r3
    6162:	69bb      	ldr	r3, [r7, #24]
    6164:	645a      	str	r2, [r3, #68]	; 0x44
			break;
    6166:	e016      	b.n	6196 <xTaskGenericNotifyFromISR+0x9a>

		case eIncrement:
			(pxTCB->ulNotifiedValue)++;
    6168:	69bb      	ldr	r3, [r7, #24]
    616a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    616c:	1c5a      	adds	r2, r3, #1
    616e:	69bb      	ldr	r3, [r7, #24]
    6170:	645a      	str	r2, [r3, #68]	; 0x44
			break;
    6172:	e010      	b.n	6196 <xTaskGenericNotifyFromISR+0x9a>

		case eSetValueWithOverwrite:
			pxTCB->ulNotifiedValue = ulValue;
    6174:	69bb      	ldr	r3, [r7, #24]
    6176:	68ba      	ldr	r2, [r7, #8]
    6178:	645a      	str	r2, [r3, #68]	; 0x44
			break;
    617a:	e00c      	b.n	6196 <xTaskGenericNotifyFromISR+0x9a>

		case eSetValueWithoutOverwrite:
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    617c:	2313      	movs	r3, #19
    617e:	18fb      	adds	r3, r7, r3
    6180:	781b      	ldrb	r3, [r3, #0]
    6182:	2b02      	cmp	r3, #2
    6184:	d003      	beq.n	618e <xTaskGenericNotifyFromISR+0x92>
				pxTCB->ulNotifiedValue = ulValue;
    6186:	69bb      	ldr	r3, [r7, #24]
    6188:	68ba      	ldr	r2, [r7, #8]
    618a:	645a      	str	r2, [r3, #68]	; 0x44
			} else {
				/* The value could not be written to the task. */
				xReturn = pdFAIL;
			}
			break;
    618c:	e003      	b.n	6196 <xTaskGenericNotifyFromISR+0x9a>
				xReturn = pdFAIL;
    618e:	2300      	movs	r3, #0
    6190:	61fb      	str	r3, [r7, #28]
			break;
    6192:	e000      	b.n	6196 <xTaskGenericNotifyFromISR+0x9a>

		case eNoAction:
			/* The task is being notified without its notify value being
			updated. */
			break;
    6194:	46c0      	nop			; (mov r8, r8)

		traceTASK_NOTIFY_FROM_ISR();

		/* If the task is in the blocked state specifically to wait for a
		notification then unblock it now. */
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    6196:	2313      	movs	r3, #19
    6198:	18fb      	adds	r3, r7, r3
    619a:	781b      	ldrb	r3, [r3, #0]
    619c:	2b01      	cmp	r3, #1
    619e:	d140      	bne.n	6222 <xTaskGenericNotifyFromISR+0x126>
			/* The task should not have been on an event list. */
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    61a0:	69bb      	ldr	r3, [r7, #24]
    61a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61a4:	2b00      	cmp	r3, #0
    61a6:	d001      	beq.n	61ac <xTaskGenericNotifyFromISR+0xb0>
    61a8:	b672      	cpsid	i
    61aa:	e7fe      	b.n	61aa <xTaskGenericNotifyFromISR+0xae>

			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    61ac:	4b23      	ldr	r3, [pc, #140]	; (623c <xTaskGenericNotifyFromISR+0x140>)
    61ae:	681b      	ldr	r3, [r3, #0]
    61b0:	2b00      	cmp	r3, #0
    61b2:	d11d      	bne.n	61f0 <xTaskGenericNotifyFromISR+0xf4>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    61b4:	69bb      	ldr	r3, [r7, #24]
    61b6:	3304      	adds	r3, #4
    61b8:	0018      	movs	r0, r3
    61ba:	4b21      	ldr	r3, [pc, #132]	; (6240 <xTaskGenericNotifyFromISR+0x144>)
    61bc:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    61be:	69bb      	ldr	r3, [r7, #24]
    61c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    61c2:	4b20      	ldr	r3, [pc, #128]	; (6244 <xTaskGenericNotifyFromISR+0x148>)
    61c4:	681b      	ldr	r3, [r3, #0]
    61c6:	429a      	cmp	r2, r3
    61c8:	d903      	bls.n	61d2 <xTaskGenericNotifyFromISR+0xd6>
    61ca:	69bb      	ldr	r3, [r7, #24]
    61cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    61ce:	4b1d      	ldr	r3, [pc, #116]	; (6244 <xTaskGenericNotifyFromISR+0x148>)
    61d0:	601a      	str	r2, [r3, #0]
    61d2:	69bb      	ldr	r3, [r7, #24]
    61d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    61d6:	0013      	movs	r3, r2
    61d8:	009b      	lsls	r3, r3, #2
    61da:	189b      	adds	r3, r3, r2
    61dc:	009b      	lsls	r3, r3, #2
    61de:	4a1a      	ldr	r2, [pc, #104]	; (6248 <xTaskGenericNotifyFromISR+0x14c>)
    61e0:	189a      	adds	r2, r3, r2
    61e2:	69bb      	ldr	r3, [r7, #24]
    61e4:	3304      	adds	r3, #4
    61e6:	0019      	movs	r1, r3
    61e8:	0010      	movs	r0, r2
    61ea:	4b18      	ldr	r3, [pc, #96]	; (624c <xTaskGenericNotifyFromISR+0x150>)
    61ec:	4798      	blx	r3
    61ee:	e007      	b.n	6200 <xTaskGenericNotifyFromISR+0x104>
			} else {
				/* The delayed and ready lists cannot be accessed, so hold
				this task pending until the scheduler is resumed. */
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    61f0:	69bb      	ldr	r3, [r7, #24]
    61f2:	3318      	adds	r3, #24
    61f4:	001a      	movs	r2, r3
    61f6:	4b16      	ldr	r3, [pc, #88]	; (6250 <xTaskGenericNotifyFromISR+0x154>)
    61f8:	0011      	movs	r1, r2
    61fa:	0018      	movs	r0, r3
    61fc:	4b13      	ldr	r3, [pc, #76]	; (624c <xTaskGenericNotifyFromISR+0x150>)
    61fe:	4798      	blx	r3
			}

			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    6200:	69bb      	ldr	r3, [r7, #24]
    6202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6204:	4b13      	ldr	r3, [pc, #76]	; (6254 <xTaskGenericNotifyFromISR+0x158>)
    6206:	681b      	ldr	r3, [r3, #0]
    6208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    620a:	429a      	cmp	r2, r3
    620c:	d909      	bls.n	6222 <xTaskGenericNotifyFromISR+0x126>
				/* The notified task has a priority above the currently
				executing task so a yield is required. */
				if (pxHigherPriorityTaskWoken != NULL) {
    620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6210:	2b00      	cmp	r3, #0
    6212:	d003      	beq.n	621c <xTaskGenericNotifyFromISR+0x120>
					*pxHigherPriorityTaskWoken = pdTRUE;
    6214:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6216:	2201      	movs	r2, #1
    6218:	601a      	str	r2, [r3, #0]
    621a:	e002      	b.n	6222 <xTaskGenericNotifyFromISR+0x126>
				} else {
					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
    621c:	4b0e      	ldr	r3, [pc, #56]	; (6258 <xTaskGenericNotifyFromISR+0x15c>)
    621e:	2201      	movs	r2, #1
    6220:	601a      	str	r2, [r3, #0]
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
    6222:	697b      	ldr	r3, [r7, #20]
    6224:	0018      	movs	r0, r3
    6226:	4b0d      	ldr	r3, [pc, #52]	; (625c <xTaskGenericNotifyFromISR+0x160>)
    6228:	4798      	blx	r3

	return xReturn;
    622a:	69fb      	ldr	r3, [r7, #28]
}
    622c:	0018      	movs	r0, r3
    622e:	46bd      	mov	sp, r7
    6230:	b008      	add	sp, #32
    6232:	bd80      	pop	{r7, pc}
    6234:	00004965 	.word	0x00004965
    6238:	000086b0 	.word	0x000086b0
    623c:	20002768 	.word	0x20002768
    6240:	0000477f 	.word	0x0000477f
    6244:	20002748 	.word	0x20002748
    6248:	2000266c 	.word	0x2000266c
    624c:	000046cf 	.word	0x000046cf
    6250:	20002700 	.word	0x20002700
    6254:	20002668 	.word	0x20002668
    6258:	20002754 	.word	0x20002754
    625c:	00004971 	.word	0x00004971

00006260 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    6260:	b580      	push	{r7, lr}
    6262:	b084      	sub	sp, #16
    6264:	af00      	add	r7, sp, #0
    6266:	6078      	str	r0, [r7, #4]
    6268:	6039      	str	r1, [r7, #0]
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    626a:	4b21      	ldr	r3, [pc, #132]	; (62f0 <prvAddCurrentTaskToDelayedList+0x90>)
    626c:	681b      	ldr	r3, [r3, #0]
    626e:	60fb      	str	r3, [r7, #12]
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    6270:	4b20      	ldr	r3, [pc, #128]	; (62f4 <prvAddCurrentTaskToDelayedList+0x94>)
    6272:	681b      	ldr	r3, [r3, #0]
    6274:	3304      	adds	r3, #4
    6276:	0018      	movs	r0, r3
    6278:	4b1f      	ldr	r3, [pc, #124]	; (62f8 <prvAddCurrentTaskToDelayedList+0x98>)
    627a:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    627c:	687b      	ldr	r3, [r7, #4]
    627e:	3301      	adds	r3, #1
    6280:	d10b      	bne.n	629a <prvAddCurrentTaskToDelayedList+0x3a>
    6282:	683b      	ldr	r3, [r7, #0]
    6284:	2b00      	cmp	r3, #0
    6286:	d008      	beq.n	629a <prvAddCurrentTaskToDelayedList+0x3a>
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    6288:	4b1a      	ldr	r3, [pc, #104]	; (62f4 <prvAddCurrentTaskToDelayedList+0x94>)
    628a:	681b      	ldr	r3, [r3, #0]
    628c:	1d1a      	adds	r2, r3, #4
    628e:	4b1b      	ldr	r3, [pc, #108]	; (62fc <prvAddCurrentTaskToDelayedList+0x9c>)
    6290:	0011      	movs	r1, r2
    6292:	0018      	movs	r0, r3
    6294:	4b1a      	ldr	r3, [pc, #104]	; (6300 <prvAddCurrentTaskToDelayedList+0xa0>)
    6296:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		(void)xCanBlockIndefinitely;
	}
#endif /* INCLUDE_vTaskSuspend */
}
    6298:	e026      	b.n	62e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
    629a:	68fa      	ldr	r2, [r7, #12]
    629c:	687b      	ldr	r3, [r7, #4]
    629e:	18d3      	adds	r3, r2, r3
    62a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    62a2:	4b14      	ldr	r3, [pc, #80]	; (62f4 <prvAddCurrentTaskToDelayedList+0x94>)
    62a4:	681b      	ldr	r3, [r3, #0]
    62a6:	68ba      	ldr	r2, [r7, #8]
    62a8:	605a      	str	r2, [r3, #4]
			if (xTimeToWake < xConstTickCount) {
    62aa:	68ba      	ldr	r2, [r7, #8]
    62ac:	68fb      	ldr	r3, [r7, #12]
    62ae:	429a      	cmp	r2, r3
    62b0:	d209      	bcs.n	62c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    62b2:	4b14      	ldr	r3, [pc, #80]	; (6304 <prvAddCurrentTaskToDelayedList+0xa4>)
    62b4:	681a      	ldr	r2, [r3, #0]
    62b6:	4b0f      	ldr	r3, [pc, #60]	; (62f4 <prvAddCurrentTaskToDelayedList+0x94>)
    62b8:	681b      	ldr	r3, [r3, #0]
    62ba:	3304      	adds	r3, #4
    62bc:	0019      	movs	r1, r3
    62be:	0010      	movs	r0, r2
    62c0:	4b11      	ldr	r3, [pc, #68]	; (6308 <prvAddCurrentTaskToDelayedList+0xa8>)
    62c2:	4798      	blx	r3
}
    62c4:	e010      	b.n	62e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    62c6:	4b11      	ldr	r3, [pc, #68]	; (630c <prvAddCurrentTaskToDelayedList+0xac>)
    62c8:	681a      	ldr	r2, [r3, #0]
    62ca:	4b0a      	ldr	r3, [pc, #40]	; (62f4 <prvAddCurrentTaskToDelayedList+0x94>)
    62cc:	681b      	ldr	r3, [r3, #0]
    62ce:	3304      	adds	r3, #4
    62d0:	0019      	movs	r1, r3
    62d2:	0010      	movs	r0, r2
    62d4:	4b0c      	ldr	r3, [pc, #48]	; (6308 <prvAddCurrentTaskToDelayedList+0xa8>)
    62d6:	4798      	blx	r3
				if (xTimeToWake < xNextTaskUnblockTime) {
    62d8:	4b0d      	ldr	r3, [pc, #52]	; (6310 <prvAddCurrentTaskToDelayedList+0xb0>)
    62da:	681b      	ldr	r3, [r3, #0]
    62dc:	68ba      	ldr	r2, [r7, #8]
    62de:	429a      	cmp	r2, r3
    62e0:	d202      	bcs.n	62e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
    62e2:	4b0b      	ldr	r3, [pc, #44]	; (6310 <prvAddCurrentTaskToDelayedList+0xb0>)
    62e4:	68ba      	ldr	r2, [r7, #8]
    62e6:	601a      	str	r2, [r3, #0]
}
    62e8:	46c0      	nop			; (mov r8, r8)
    62ea:	46bd      	mov	sp, r7
    62ec:	b004      	add	sp, #16
    62ee:	bd80      	pop	{r7, pc}
    62f0:	20002744 	.word	0x20002744
    62f4:	20002668 	.word	0x20002668
    62f8:	0000477f 	.word	0x0000477f
    62fc:	2000272c 	.word	0x2000272c
    6300:	000046cf 	.word	0x000046cf
    6304:	200026fc 	.word	0x200026fc
    6308:	00004713 	.word	0x00004713
    630c:	200026f8 	.word	0x200026f8
    6310:	20002760 	.word	0x20002760

00006314 <xTimerCreateTimerTask>:
                                  void *const pvTimerID, TimerCallbackFunction_t pxCallbackFunction,
                                  Timer_t *pxNewTimer) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask(void)
{
    6314:	b590      	push	{r4, r7, lr}
    6316:	b085      	sub	sp, #20
    6318:	af02      	add	r7, sp, #8
	BaseType_t xReturn = pdFAIL;
    631a:	2300      	movs	r3, #0
    631c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    631e:	4b0e      	ldr	r3, [pc, #56]	; (6358 <xTimerCreateTimerTask+0x44>)
    6320:	4798      	blx	r3

	if (xTimerQueue != NULL) {
    6322:	4b0e      	ldr	r3, [pc, #56]	; (635c <xTimerCreateTimerTask+0x48>)
    6324:	681b      	ldr	r3, [r3, #0]
    6326:	2b00      	cmp	r3, #0
    6328:	d00c      	beq.n	6344 <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
#else
		{
			xReturn = xTaskCreate(prvTimerTask,
    632a:	2380      	movs	r3, #128	; 0x80
    632c:	005a      	lsls	r2, r3, #1
    632e:	490c      	ldr	r1, [pc, #48]	; (6360 <xTimerCreateTimerTask+0x4c>)
    6330:	480c      	ldr	r0, [pc, #48]	; (6364 <xTimerCreateTimerTask+0x50>)
    6332:	4b0d      	ldr	r3, [pc, #52]	; (6368 <xTimerCreateTimerTask+0x54>)
    6334:	9301      	str	r3, [sp, #4]
    6336:	2302      	movs	r3, #2
    6338:	9300      	str	r3, [sp, #0]
    633a:	2300      	movs	r3, #0
    633c:	4c0b      	ldr	r4, [pc, #44]	; (636c <xTimerCreateTimerTask+0x58>)
    633e:	47a0      	blx	r4
    6340:	0003      	movs	r3, r0
    6342:	607b      	str	r3, [r7, #4]
#endif /* configSUPPORT_STATIC_ALLOCATION */
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT(xReturn);
    6344:	687b      	ldr	r3, [r7, #4]
    6346:	2b00      	cmp	r3, #0
    6348:	d101      	bne.n	634e <xTimerCreateTimerTask+0x3a>
    634a:	b672      	cpsid	i
    634c:	e7fe      	b.n	634c <xTimerCreateTimerTask+0x38>
	return xReturn;
    634e:	687b      	ldr	r3, [r7, #4]
}
    6350:	0018      	movs	r0, r3
    6352:	46bd      	mov	sp, r7
    6354:	b003      	add	sp, #12
    6356:	bd90      	pop	{r4, r7, pc}
    6358:	00006855 	.word	0x00006855
    635c:	2000279c 	.word	0x2000279c
    6360:	000086c4 	.word	0x000086c4
    6364:	00006495 	.word	0x00006495
    6368:	200027a0 	.word	0x200027a0
    636c:	000054dd 	.word	0x000054dd

00006370 <xTimerGenericCommand>:
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand(TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue,
                                BaseType_t *const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait)
{
    6370:	b590      	push	{r4, r7, lr}
    6372:	b089      	sub	sp, #36	; 0x24
    6374:	af00      	add	r7, sp, #0
    6376:	60f8      	str	r0, [r7, #12]
    6378:	60b9      	str	r1, [r7, #8]
    637a:	607a      	str	r2, [r7, #4]
    637c:	603b      	str	r3, [r7, #0]
	BaseType_t          xReturn = pdFAIL;
    637e:	2300      	movs	r3, #0
    6380:	61fb      	str	r3, [r7, #28]
	DaemonTaskMessage_t xMessage;

	configASSERT(xTimer);
    6382:	68fb      	ldr	r3, [r7, #12]
    6384:	2b00      	cmp	r3, #0
    6386:	d101      	bne.n	638c <xTimerGenericCommand+0x1c>
    6388:	b672      	cpsid	i
    638a:	e7fe      	b.n	638a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if (xTimerQueue != NULL) {
    638c:	4b1e      	ldr	r3, [pc, #120]	; (6408 <xTimerGenericCommand+0x98>)
    638e:	681b      	ldr	r3, [r3, #0]
    6390:	2b00      	cmp	r3, #0
    6392:	d033      	beq.n	63fc <xTimerGenericCommand+0x8c>
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID                       = xCommandID;
    6394:	2310      	movs	r3, #16
    6396:	18fb      	adds	r3, r7, r3
    6398:	68ba      	ldr	r2, [r7, #8]
    639a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    639c:	2310      	movs	r3, #16
    639e:	18fb      	adds	r3, r7, r3
    63a0:	687a      	ldr	r2, [r7, #4]
    63a2:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    63a4:	2310      	movs	r3, #16
    63a6:	18fb      	adds	r3, r7, r3
    63a8:	68fa      	ldr	r2, [r7, #12]
    63aa:	609a      	str	r2, [r3, #8]

		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    63ac:	68bb      	ldr	r3, [r7, #8]
    63ae:	2b05      	cmp	r3, #5
    63b0:	dc1a      	bgt.n	63e8 <xTimerGenericCommand+0x78>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    63b2:	4b16      	ldr	r3, [pc, #88]	; (640c <xTimerGenericCommand+0x9c>)
    63b4:	4798      	blx	r3
    63b6:	0003      	movs	r3, r0
    63b8:	2b02      	cmp	r3, #2
    63ba:	d10a      	bne.n	63d2 <xTimerGenericCommand+0x62>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    63bc:	4b12      	ldr	r3, [pc, #72]	; (6408 <xTimerGenericCommand+0x98>)
    63be:	6818      	ldr	r0, [r3, #0]
    63c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    63c2:	2310      	movs	r3, #16
    63c4:	18f9      	adds	r1, r7, r3
    63c6:	2300      	movs	r3, #0
    63c8:	4c11      	ldr	r4, [pc, #68]	; (6410 <xTimerGenericCommand+0xa0>)
    63ca:	47a0      	blx	r4
    63cc:	0003      	movs	r3, r0
    63ce:	61fb      	str	r3, [r7, #28]
    63d0:	e014      	b.n	63fc <xTimerGenericCommand+0x8c>
			} else {
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    63d2:	4b0d      	ldr	r3, [pc, #52]	; (6408 <xTimerGenericCommand+0x98>)
    63d4:	6818      	ldr	r0, [r3, #0]
    63d6:	2310      	movs	r3, #16
    63d8:	18f9      	adds	r1, r7, r3
    63da:	2300      	movs	r3, #0
    63dc:	2200      	movs	r2, #0
    63de:	4c0c      	ldr	r4, [pc, #48]	; (6410 <xTimerGenericCommand+0xa0>)
    63e0:	47a0      	blx	r4
    63e2:	0003      	movs	r3, r0
    63e4:	61fb      	str	r3, [r7, #28]
    63e6:	e009      	b.n	63fc <xTimerGenericCommand+0x8c>
			}
		} else {
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    63e8:	4b07      	ldr	r3, [pc, #28]	; (6408 <xTimerGenericCommand+0x98>)
    63ea:	6818      	ldr	r0, [r3, #0]
    63ec:	683a      	ldr	r2, [r7, #0]
    63ee:	2310      	movs	r3, #16
    63f0:	18f9      	adds	r1, r7, r3
    63f2:	2300      	movs	r3, #0
    63f4:	4c07      	ldr	r4, [pc, #28]	; (6414 <xTimerGenericCommand+0xa4>)
    63f6:	47a0      	blx	r4
    63f8:	0003      	movs	r3, r0
    63fa:	61fb      	str	r3, [r7, #28]
		traceTIMER_COMMAND_SEND(xTimer, xCommandID, xOptionalValue, xReturn);
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    63fc:	69fb      	ldr	r3, [r7, #28]
}
    63fe:	0018      	movs	r0, r3
    6400:	46bd      	mov	sp, r7
    6402:	b009      	add	sp, #36	; 0x24
    6404:	bd90      	pop	{r4, r7, pc}
    6406:	46c0      	nop			; (mov r8, r8)
    6408:	2000279c 	.word	0x2000279c
    640c:	00005f99 	.word	0x00005f99
    6410:	00004cb9 	.word	0x00004cb9
    6414:	00004e99 	.word	0x00004e99

00006418 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer(const TickType_t xNextExpireTime, const TickType_t xTimeNow)
{
    6418:	b590      	push	{r4, r7, lr}
    641a:	b087      	sub	sp, #28
    641c:	af02      	add	r7, sp, #8
    641e:	6078      	str	r0, [r7, #4]
    6420:	6039      	str	r1, [r7, #0]
	BaseType_t     xResult;
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    6422:	4b18      	ldr	r3, [pc, #96]	; (6484 <prvProcessExpiredTimer+0x6c>)
    6424:	681b      	ldr	r3, [r3, #0]
    6426:	68db      	ldr	r3, [r3, #12]
    6428:	68db      	ldr	r3, [r3, #12]
    642a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    642c:	68fb      	ldr	r3, [r7, #12]
    642e:	3304      	adds	r3, #4
    6430:	0018      	movs	r0, r3
    6432:	4b15      	ldr	r3, [pc, #84]	; (6488 <prvProcessExpiredTimer+0x70>)
    6434:	4798      	blx	r3
	traceTIMER_EXPIRED(pxTimer);

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6436:	68fb      	ldr	r3, [r7, #12]
    6438:	69db      	ldr	r3, [r3, #28]
    643a:	2b01      	cmp	r3, #1
    643c:	d119      	bne.n	6472 <prvProcessExpiredTimer+0x5a>
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if (prvInsertTimerInActiveList(
		        pxTimer, (xNextExpireTime + pxTimer->xTimerPeriodInTicks), xTimeNow, xNextExpireTime)
    643e:	68fb      	ldr	r3, [r7, #12]
    6440:	699a      	ldr	r2, [r3, #24]
		if (prvInsertTimerInActiveList(
    6442:	687b      	ldr	r3, [r7, #4]
    6444:	18d1      	adds	r1, r2, r3
    6446:	687b      	ldr	r3, [r7, #4]
    6448:	683a      	ldr	r2, [r7, #0]
    644a:	68f8      	ldr	r0, [r7, #12]
    644c:	4c0f      	ldr	r4, [pc, #60]	; (648c <prvProcessExpiredTimer+0x74>)
    644e:	47a0      	blx	r4
    6450:	1e03      	subs	r3, r0, #0
    6452:	d00e      	beq.n	6472 <prvProcessExpiredTimer+0x5a>
		    != pdFALSE) {
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    6454:	687a      	ldr	r2, [r7, #4]
    6456:	68f8      	ldr	r0, [r7, #12]
    6458:	2300      	movs	r3, #0
    645a:	9300      	str	r3, [sp, #0]
    645c:	2300      	movs	r3, #0
    645e:	2100      	movs	r1, #0
    6460:	4c0b      	ldr	r4, [pc, #44]	; (6490 <prvProcessExpiredTimer+0x78>)
    6462:	47a0      	blx	r4
    6464:	0003      	movs	r3, r0
    6466:	60bb      	str	r3, [r7, #8]
			configASSERT(xResult);
    6468:	68bb      	ldr	r3, [r7, #8]
    646a:	2b00      	cmp	r3, #0
    646c:	d101      	bne.n	6472 <prvProcessExpiredTimer+0x5a>
    646e:	b672      	cpsid	i
    6470:	e7fe      	b.n	6470 <prvProcessExpiredTimer+0x58>
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6472:	68fb      	ldr	r3, [r7, #12]
    6474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6476:	68fa      	ldr	r2, [r7, #12]
    6478:	0010      	movs	r0, r2
    647a:	4798      	blx	r3
}
    647c:	46c0      	nop			; (mov r8, r8)
    647e:	46bd      	mov	sp, r7
    6480:	b005      	add	sp, #20
    6482:	bd90      	pop	{r4, r7, pc}
    6484:	20002794 	.word	0x20002794
    6488:	0000477f 	.word	0x0000477f
    648c:	000065f5 	.word	0x000065f5
    6490:	00006371 	.word	0x00006371

00006494 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask(void *pvParameters)
{
    6494:	b580      	push	{r7, lr}
    6496:	b084      	sub	sp, #16
    6498:	af00      	add	r7, sp, #0
    649a:	6078      	str	r0, [r7, #4]
#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */

	for (;;) {
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
    649c:	2308      	movs	r3, #8
    649e:	18fb      	adds	r3, r7, r3
    64a0:	0018      	movs	r0, r3
    64a2:	4b06      	ldr	r3, [pc, #24]	; (64bc <prvTimerTask+0x28>)
    64a4:	4798      	blx	r3
    64a6:	0003      	movs	r3, r0
    64a8:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
    64aa:	68ba      	ldr	r2, [r7, #8]
    64ac:	68fb      	ldr	r3, [r7, #12]
    64ae:	0011      	movs	r1, r2
    64b0:	0018      	movs	r0, r3
    64b2:	4b03      	ldr	r3, [pc, #12]	; (64c0 <prvTimerTask+0x2c>)
    64b4:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    64b6:	4b03      	ldr	r3, [pc, #12]	; (64c4 <prvTimerTask+0x30>)
    64b8:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
    64ba:	e7ef      	b.n	649c <prvTimerTask+0x8>
    64bc:	0000656d 	.word	0x0000656d
    64c0:	000064c9 	.word	0x000064c9
    64c4:	0000667d 	.word	0x0000667d

000064c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask(const TickType_t xNextExpireTime, BaseType_t xListWasEmpty)
{
    64c8:	b580      	push	{r7, lr}
    64ca:	b084      	sub	sp, #16
    64cc:	af00      	add	r7, sp, #0
    64ce:	6078      	str	r0, [r7, #4]
    64d0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeNow;
	BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    64d2:	4b1e      	ldr	r3, [pc, #120]	; (654c <prvProcessTimerOrBlockTask+0x84>)
    64d4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    64d6:	2308      	movs	r3, #8
    64d8:	18fb      	adds	r3, r7, r3
    64da:	0018      	movs	r0, r3
    64dc:	4b1c      	ldr	r3, [pc, #112]	; (6550 <prvProcessTimerOrBlockTask+0x88>)
    64de:	4798      	blx	r3
    64e0:	0003      	movs	r3, r0
    64e2:	60fb      	str	r3, [r7, #12]
		if (xTimerListsWereSwitched == pdFALSE) {
    64e4:	68bb      	ldr	r3, [r7, #8]
    64e6:	2b00      	cmp	r3, #0
    64e8:	d129      	bne.n	653e <prvProcessTimerOrBlockTask+0x76>
			/* The tick count has not overflowed, has the timer expired? */
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    64ea:	683b      	ldr	r3, [r7, #0]
    64ec:	2b00      	cmp	r3, #0
    64ee:	d10c      	bne.n	650a <prvProcessTimerOrBlockTask+0x42>
    64f0:	687a      	ldr	r2, [r7, #4]
    64f2:	68fb      	ldr	r3, [r7, #12]
    64f4:	429a      	cmp	r2, r3
    64f6:	d808      	bhi.n	650a <prvProcessTimerOrBlockTask+0x42>
				(void)xTaskResumeAll();
    64f8:	4b16      	ldr	r3, [pc, #88]	; (6554 <prvProcessTimerOrBlockTask+0x8c>)
    64fa:	4798      	blx	r3
				prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
    64fc:	68fa      	ldr	r2, [r7, #12]
    64fe:	687b      	ldr	r3, [r7, #4]
    6500:	0011      	movs	r1, r2
    6502:	0018      	movs	r0, r3
    6504:	4b14      	ldr	r3, [pc, #80]	; (6558 <prvProcessTimerOrBlockTask+0x90>)
    6506:	4798      	blx	r3
			}
		} else {
			(void)xTaskResumeAll();
		}
	}
}
    6508:	e01b      	b.n	6542 <prvProcessTimerOrBlockTask+0x7a>
				if (xListWasEmpty != pdFALSE) {
    650a:	683b      	ldr	r3, [r7, #0]
    650c:	2b00      	cmp	r3, #0
    650e:	d006      	beq.n	651e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    6510:	4b12      	ldr	r3, [pc, #72]	; (655c <prvProcessTimerOrBlockTask+0x94>)
    6512:	681b      	ldr	r3, [r3, #0]
    6514:	681b      	ldr	r3, [r3, #0]
    6516:	425a      	negs	r2, r3
    6518:	4153      	adcs	r3, r2
    651a:	b2db      	uxtb	r3, r3
    651c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    651e:	4b10      	ldr	r3, [pc, #64]	; (6560 <prvProcessTimerOrBlockTask+0x98>)
    6520:	6818      	ldr	r0, [r3, #0]
    6522:	687a      	ldr	r2, [r7, #4]
    6524:	68fb      	ldr	r3, [r7, #12]
    6526:	1ad3      	subs	r3, r2, r3
    6528:	683a      	ldr	r2, [r7, #0]
    652a:	0019      	movs	r1, r3
    652c:	4b0d      	ldr	r3, [pc, #52]	; (6564 <prvProcessTimerOrBlockTask+0x9c>)
    652e:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    6530:	4b08      	ldr	r3, [pc, #32]	; (6554 <prvProcessTimerOrBlockTask+0x8c>)
    6532:	4798      	blx	r3
    6534:	1e03      	subs	r3, r0, #0
    6536:	d104      	bne.n	6542 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
    6538:	4b0b      	ldr	r3, [pc, #44]	; (6568 <prvProcessTimerOrBlockTask+0xa0>)
    653a:	4798      	blx	r3
}
    653c:	e001      	b.n	6542 <prvProcessTimerOrBlockTask+0x7a>
			(void)xTaskResumeAll();
    653e:	4b05      	ldr	r3, [pc, #20]	; (6554 <prvProcessTimerOrBlockTask+0x8c>)
    6540:	4798      	blx	r3
}
    6542:	46c0      	nop			; (mov r8, r8)
    6544:	46bd      	mov	sp, r7
    6546:	b004      	add	sp, #16
    6548:	bd80      	pop	{r7, pc}
    654a:	46c0      	nop			; (mov r8, r8)
    654c:	00005849 	.word	0x00005849
    6550:	000065ad 	.word	0x000065ad
    6554:	00005861 	.word	0x00005861
    6558:	00006419 	.word	0x00006419
    655c:	20002798 	.word	0x20002798
    6560:	2000279c 	.word	0x2000279c
    6564:	000053c1 	.word	0x000053c1
    6568:	000048f1 	.word	0x000048f1

0000656c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime(BaseType_t *const pxListWasEmpty)
{
    656c:	b580      	push	{r7, lr}
    656e:	b084      	sub	sp, #16
    6570:	af00      	add	r7, sp, #0
    6572:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    6574:	4b0c      	ldr	r3, [pc, #48]	; (65a8 <prvGetNextExpireTime+0x3c>)
    6576:	681b      	ldr	r3, [r3, #0]
    6578:	681b      	ldr	r3, [r3, #0]
    657a:	425a      	negs	r2, r3
    657c:	4153      	adcs	r3, r2
    657e:	b2db      	uxtb	r3, r3
    6580:	001a      	movs	r2, r3
    6582:	687b      	ldr	r3, [r7, #4]
    6584:	601a      	str	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    6586:	687b      	ldr	r3, [r7, #4]
    6588:	681b      	ldr	r3, [r3, #0]
    658a:	2b00      	cmp	r3, #0
    658c:	d105      	bne.n	659a <prvGetNextExpireTime+0x2e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    658e:	4b06      	ldr	r3, [pc, #24]	; (65a8 <prvGetNextExpireTime+0x3c>)
    6590:	681b      	ldr	r3, [r3, #0]
    6592:	68db      	ldr	r3, [r3, #12]
    6594:	681b      	ldr	r3, [r3, #0]
    6596:	60fb      	str	r3, [r7, #12]
    6598:	e001      	b.n	659e <prvGetNextExpireTime+0x32>
	} else {
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = (TickType_t)0U;
    659a:	2300      	movs	r3, #0
    659c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    659e:	68fb      	ldr	r3, [r7, #12]
}
    65a0:	0018      	movs	r0, r3
    65a2:	46bd      	mov	sp, r7
    65a4:	b004      	add	sp, #16
    65a6:	bd80      	pop	{r7, pc}
    65a8:	20002794 	.word	0x20002794

000065ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow(BaseType_t *const pxTimerListsWereSwitched)
{
    65ac:	b580      	push	{r7, lr}
    65ae:	b084      	sub	sp, #16
    65b0:	af00      	add	r7, sp, #0
    65b2:	6078      	str	r0, [r7, #4]
	TickType_t                        xTimeNow;
	PRIVILEGED_DATA static TickType_t xLastTime
	    = (TickType_t)0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    65b4:	4b0c      	ldr	r3, [pc, #48]	; (65e8 <prvSampleTimeNow+0x3c>)
    65b6:	4798      	blx	r3
    65b8:	0003      	movs	r3, r0
    65ba:	60fb      	str	r3, [r7, #12]

	if (xTimeNow < xLastTime) {
    65bc:	4b0b      	ldr	r3, [pc, #44]	; (65ec <prvSampleTimeNow+0x40>)
    65be:	681b      	ldr	r3, [r3, #0]
    65c0:	68fa      	ldr	r2, [r7, #12]
    65c2:	429a      	cmp	r2, r3
    65c4:	d205      	bcs.n	65d2 <prvSampleTimeNow+0x26>
		prvSwitchTimerLists();
    65c6:	4b0a      	ldr	r3, [pc, #40]	; (65f0 <prvSampleTimeNow+0x44>)
    65c8:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    65ca:	687b      	ldr	r3, [r7, #4]
    65cc:	2201      	movs	r2, #1
    65ce:	601a      	str	r2, [r3, #0]
    65d0:	e002      	b.n	65d8 <prvSampleTimeNow+0x2c>
	} else {
		*pxTimerListsWereSwitched = pdFALSE;
    65d2:	687b      	ldr	r3, [r7, #4]
    65d4:	2200      	movs	r2, #0
    65d6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    65d8:	4b04      	ldr	r3, [pc, #16]	; (65ec <prvSampleTimeNow+0x40>)
    65da:	68fa      	ldr	r2, [r7, #12]
    65dc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    65de:	68fb      	ldr	r3, [r7, #12]
}
    65e0:	0018      	movs	r0, r3
    65e2:	46bd      	mov	sp, r7
    65e4:	b004      	add	sp, #16
    65e6:	bd80      	pop	{r7, pc}
    65e8:	00005995 	.word	0x00005995
    65ec:	200027a4 	.word	0x200027a4
    65f0:	00006795 	.word	0x00006795

000065f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    65f4:	b580      	push	{r7, lr}
    65f6:	b086      	sub	sp, #24
    65f8:	af00      	add	r7, sp, #0
    65fa:	60f8      	str	r0, [r7, #12]
    65fc:	60b9      	str	r1, [r7, #8]
    65fe:	607a      	str	r2, [r7, #4]
    6600:	603b      	str	r3, [r7, #0]
	BaseType_t xProcessTimerNow = pdFALSE;
    6602:	2300      	movs	r3, #0
    6604:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    6606:	68fb      	ldr	r3, [r7, #12]
    6608:	68ba      	ldr	r2, [r7, #8]
    660a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    660c:	68fb      	ldr	r3, [r7, #12]
    660e:	68fa      	ldr	r2, [r7, #12]
    6610:	611a      	str	r2, [r3, #16]

	if (xNextExpiryTime <= xTimeNow) {
    6612:	68ba      	ldr	r2, [r7, #8]
    6614:	687b      	ldr	r3, [r7, #4]
    6616:	429a      	cmp	r2, r3
    6618:	d812      	bhi.n	6640 <prvInsertTimerInActiveList+0x4c>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    661a:	687a      	ldr	r2, [r7, #4]
    661c:	683b      	ldr	r3, [r7, #0]
    661e:	1ad2      	subs	r2, r2, r3
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
    6620:	68fb      	ldr	r3, [r7, #12]
    6622:	699b      	ldr	r3, [r3, #24]
		if (((TickType_t)(xTimeNow - xCommandTime))
    6624:	429a      	cmp	r2, r3
    6626:	d302      	bcc.n	662e <prvInsertTimerInActiveList+0x3a>
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    6628:	2301      	movs	r3, #1
    662a:	617b      	str	r3, [r7, #20]
    662c:	e01b      	b.n	6666 <prvInsertTimerInActiveList+0x72>
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    662e:	4b10      	ldr	r3, [pc, #64]	; (6670 <prvInsertTimerInActiveList+0x7c>)
    6630:	681a      	ldr	r2, [r3, #0]
    6632:	68fb      	ldr	r3, [r7, #12]
    6634:	3304      	adds	r3, #4
    6636:	0019      	movs	r1, r3
    6638:	0010      	movs	r0, r2
    663a:	4b0e      	ldr	r3, [pc, #56]	; (6674 <prvInsertTimerInActiveList+0x80>)
    663c:	4798      	blx	r3
    663e:	e012      	b.n	6666 <prvInsertTimerInActiveList+0x72>
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    6640:	687a      	ldr	r2, [r7, #4]
    6642:	683b      	ldr	r3, [r7, #0]
    6644:	429a      	cmp	r2, r3
    6646:	d206      	bcs.n	6656 <prvInsertTimerInActiveList+0x62>
    6648:	68ba      	ldr	r2, [r7, #8]
    664a:	683b      	ldr	r3, [r7, #0]
    664c:	429a      	cmp	r2, r3
    664e:	d302      	bcc.n	6656 <prvInsertTimerInActiveList+0x62>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    6650:	2301      	movs	r3, #1
    6652:	617b      	str	r3, [r7, #20]
    6654:	e007      	b.n	6666 <prvInsertTimerInActiveList+0x72>
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    6656:	4b08      	ldr	r3, [pc, #32]	; (6678 <prvInsertTimerInActiveList+0x84>)
    6658:	681a      	ldr	r2, [r3, #0]
    665a:	68fb      	ldr	r3, [r7, #12]
    665c:	3304      	adds	r3, #4
    665e:	0019      	movs	r1, r3
    6660:	0010      	movs	r0, r2
    6662:	4b04      	ldr	r3, [pc, #16]	; (6674 <prvInsertTimerInActiveList+0x80>)
    6664:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    6666:	697b      	ldr	r3, [r7, #20]
}
    6668:	0018      	movs	r0, r3
    666a:	46bd      	mov	sp, r7
    666c:	b006      	add	sp, #24
    666e:	bd80      	pop	{r7, pc}
    6670:	20002798 	.word	0x20002798
    6674:	00004713 	.word	0x00004713
    6678:	20002794 	.word	0x20002794

0000667c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void prvProcessReceivedCommands(void)
{
    667c:	b590      	push	{r4, r7, lr}
    667e:	b08b      	sub	sp, #44	; 0x2c
    6680:	af02      	add	r7, sp, #8
	DaemonTaskMessage_t xMessage;
	Timer_t *           pxTimer;
	BaseType_t          xTimerListsWereSwitched, xResult;
	TickType_t          xTimeNow;

	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    6682:	e068      	b.n	6756 <prvProcessReceivedCommands+0xda>
		}
#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if (xMessage.xMessageID >= (BaseType_t)0) {
    6684:	2308      	movs	r3, #8
    6686:	18fb      	adds	r3, r7, r3
    6688:	681b      	ldr	r3, [r3, #0]
    668a:	2b00      	cmp	r3, #0
    668c:	db63      	blt.n	6756 <prvProcessReceivedCommands+0xda>
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    668e:	2308      	movs	r3, #8
    6690:	18fb      	adds	r3, r7, r3
    6692:	689b      	ldr	r3, [r3, #8]
    6694:	61fb      	str	r3, [r7, #28]

			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    6696:	69fb      	ldr	r3, [r7, #28]
    6698:	695b      	ldr	r3, [r3, #20]
    669a:	2b00      	cmp	r3, #0
    669c:	d004      	beq.n	66a8 <prvProcessReceivedCommands+0x2c>
			    == pdFALSE) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
			{
				/* The timer is in a list, remove it. */
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    669e:	69fb      	ldr	r3, [r7, #28]
    66a0:	3304      	adds	r3, #4
    66a2:	0018      	movs	r0, r3
    66a4:	4b33      	ldr	r3, [pc, #204]	; (6774 <prvProcessReceivedCommands+0xf8>)
    66a6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    66a8:	1d3b      	adds	r3, r7, #4
    66aa:	0018      	movs	r0, r3
    66ac:	4b32      	ldr	r3, [pc, #200]	; (6778 <prvProcessReceivedCommands+0xfc>)
    66ae:	4798      	blx	r3
    66b0:	0003      	movs	r3, r0
    66b2:	61bb      	str	r3, [r7, #24]

			switch (xMessage.xMessageID) {
    66b4:	2308      	movs	r3, #8
    66b6:	18fb      	adds	r3, r7, r3
    66b8:	681b      	ldr	r3, [r3, #0]
    66ba:	2b09      	cmp	r3, #9
    66bc:	d84a      	bhi.n	6754 <prvProcessReceivedCommands+0xd8>
    66be:	009a      	lsls	r2, r3, #2
    66c0:	4b2e      	ldr	r3, [pc, #184]	; (677c <prvProcessReceivedCommands+0x100>)
    66c2:	18d3      	adds	r3, r2, r3
    66c4:	681b      	ldr	r3, [r3, #0]
    66c6:	469f      	mov	pc, r3
			case tmrCOMMAND_RESET:
			case tmrCOMMAND_RESET_FROM_ISR:
			case tmrCOMMAND_START_DONT_TRACE:
				/* Start or restart a timer. */
				if (prvInsertTimerInActiveList(pxTimer,
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    66c8:	2308      	movs	r3, #8
    66ca:	18fb      	adds	r3, r7, r3
    66cc:	685a      	ldr	r2, [r3, #4]
    66ce:	69fb      	ldr	r3, [r7, #28]
    66d0:	699b      	ldr	r3, [r3, #24]
				if (prvInsertTimerInActiveList(pxTimer,
    66d2:	18d1      	adds	r1, r2, r3
    66d4:	2308      	movs	r3, #8
    66d6:	18fb      	adds	r3, r7, r3
    66d8:	685b      	ldr	r3, [r3, #4]
    66da:	69ba      	ldr	r2, [r7, #24]
    66dc:	69f8      	ldr	r0, [r7, #28]
    66de:	4c28      	ldr	r4, [pc, #160]	; (6780 <prvProcessReceivedCommands+0x104>)
    66e0:	47a0      	blx	r4
    66e2:	1e03      	subs	r3, r0, #0
    66e4:	d037      	beq.n	6756 <prvProcessReceivedCommands+0xda>
				                               xTimeNow,
				                               xMessage.u.xTimerParameters.xMessageValue)
				    != pdFALSE) {
					/* The timer expired before it was added to the active
					timer list.  Process it now. */
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    66e6:	69fb      	ldr	r3, [r7, #28]
    66e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66ea:	69fa      	ldr	r2, [r7, #28]
    66ec:	0010      	movs	r0, r2
    66ee:	4798      	blx	r3
					traceTIMER_EXPIRED(pxTimer);

					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    66f0:	69fb      	ldr	r3, [r7, #28]
    66f2:	69db      	ldr	r3, [r3, #28]
    66f4:	2b01      	cmp	r3, #1
    66f6:	d12e      	bne.n	6756 <prvProcessReceivedCommands+0xda>
						xResult = xTimerGenericCommand(pxTimer,
						                               tmrCOMMAND_START_DONT_TRACE,
						                               xMessage.u.xTimerParameters.xMessageValue
    66f8:	2308      	movs	r3, #8
    66fa:	18fb      	adds	r3, r7, r3
    66fc:	685a      	ldr	r2, [r3, #4]
						                                   + pxTimer->xTimerPeriodInTicks,
    66fe:	69fb      	ldr	r3, [r7, #28]
    6700:	699b      	ldr	r3, [r3, #24]
						xResult = xTimerGenericCommand(pxTimer,
    6702:	18d2      	adds	r2, r2, r3
    6704:	69f8      	ldr	r0, [r7, #28]
    6706:	2300      	movs	r3, #0
    6708:	9300      	str	r3, [sp, #0]
    670a:	2300      	movs	r3, #0
    670c:	2100      	movs	r1, #0
    670e:	4c1d      	ldr	r4, [pc, #116]	; (6784 <prvProcessReceivedCommands+0x108>)
    6710:	47a0      	blx	r4
    6712:	0003      	movs	r3, r0
    6714:	617b      	str	r3, [r7, #20]
						                               NULL,
						                               tmrNO_DELAY);
						configASSERT(xResult);
    6716:	697b      	ldr	r3, [r7, #20]
    6718:	2b00      	cmp	r3, #0
    671a:	d11c      	bne.n	6756 <prvProcessReceivedCommands+0xda>
    671c:	b672      	cpsid	i
    671e:	e7fe      	b.n	671e <prvProcessReceivedCommands+0xa2>
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD:
			case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    6720:	2308      	movs	r3, #8
    6722:	18fb      	adds	r3, r7, r3
    6724:	685a      	ldr	r2, [r3, #4]
    6726:	69fb      	ldr	r3, [r7, #28]
    6728:	619a      	str	r2, [r3, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    672a:	69fb      	ldr	r3, [r7, #28]
    672c:	699b      	ldr	r3, [r3, #24]
    672e:	2b00      	cmp	r3, #0
    6730:	d101      	bne.n	6736 <prvProcessReceivedCommands+0xba>
    6732:	b672      	cpsid	i
    6734:	e7fe      	b.n	6734 <prvProcessReceivedCommands+0xb8>
				therefore set to the current time, and as the period cannot
				be zero the next expiry time can only be in the future,
				meaning (unlike for the xTimerStart() case above) there is
				no fail case that needs to be handled here. */
				(void)prvInsertTimerInActiveList(
				    pxTimer, (xTimeNow + pxTimer->xTimerPeriodInTicks), xTimeNow, xTimeNow);
    6736:	69fb      	ldr	r3, [r7, #28]
    6738:	699a      	ldr	r2, [r3, #24]
				(void)prvInsertTimerInActiveList(
    673a:	69bb      	ldr	r3, [r7, #24]
    673c:	18d1      	adds	r1, r2, r3
    673e:	69bb      	ldr	r3, [r7, #24]
    6740:	69ba      	ldr	r2, [r7, #24]
    6742:	69f8      	ldr	r0, [r7, #28]
    6744:	4c0e      	ldr	r4, [pc, #56]	; (6780 <prvProcessReceivedCommands+0x104>)
    6746:	47a0      	blx	r4
				break;
    6748:	e005      	b.n	6756 <prvProcessReceivedCommands+0xda>
allocated. */
#if ((configSUPPORT_DYNAMIC_ALLOCATION == 1) && (configSUPPORT_STATIC_ALLOCATION == 0))
			{
				/* The timer can only have been allocated dynamically -
				free it again. */
				vPortFree(pxTimer);
    674a:	69fb      	ldr	r3, [r7, #28]
    674c:	0018      	movs	r0, r3
    674e:	4b0e      	ldr	r3, [pc, #56]	; (6788 <prvProcessReceivedCommands+0x10c>)
    6750:	4798      	blx	r3
				} else {
					mtCOVERAGE_TEST_MARKER();
				}
			}
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
			break;
    6752:	e000      	b.n	6756 <prvProcessReceivedCommands+0xda>

			default:
				/* Don't expect to get here. */
				break;
    6754:	46c0      	nop			; (mov r8, r8)
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    6756:	4b0d      	ldr	r3, [pc, #52]	; (678c <prvProcessReceivedCommands+0x110>)
    6758:	681b      	ldr	r3, [r3, #0]
    675a:	2208      	movs	r2, #8
    675c:	18b9      	adds	r1, r7, r2
    675e:	2200      	movs	r2, #0
    6760:	0018      	movs	r0, r3
    6762:	4b0b      	ldr	r3, [pc, #44]	; (6790 <prvProcessReceivedCommands+0x114>)
    6764:	4798      	blx	r3
    6766:	1e03      	subs	r3, r0, #0
    6768:	d18c      	bne.n	6684 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
    676a:	46c0      	nop			; (mov r8, r8)
    676c:	46bd      	mov	sp, r7
    676e:	b009      	add	sp, #36	; 0x24
    6770:	bd90      	pop	{r4, r7, pc}
    6772:	46c0      	nop			; (mov r8, r8)
    6774:	0000477f 	.word	0x0000477f
    6778:	000065ad 	.word	0x000065ad
    677c:	000086cc 	.word	0x000086cc
    6780:	000065f5 	.word	0x000065f5
    6784:	00006371 	.word	0x00006371
    6788:	00004ad1 	.word	0x00004ad1
    678c:	2000279c 	.word	0x2000279c
    6790:	00004fb9 	.word	0x00004fb9

00006794 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists(void)
{
    6794:	b590      	push	{r4, r7, lr}
    6796:	b089      	sub	sp, #36	; 0x24
    6798:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    679a:	e03e      	b.n	681a <prvSwitchTimerLists+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    679c:	4b28      	ldr	r3, [pc, #160]	; (6840 <prvSwitchTimerLists+0xac>)
    679e:	681b      	ldr	r3, [r3, #0]
    67a0:	68db      	ldr	r3, [r3, #12]
    67a2:	681b      	ldr	r3, [r3, #0]
    67a4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    67a6:	4b26      	ldr	r3, [pc, #152]	; (6840 <prvSwitchTimerLists+0xac>)
    67a8:	681b      	ldr	r3, [r3, #0]
    67aa:	68db      	ldr	r3, [r3, #12]
    67ac:	68db      	ldr	r3, [r3, #12]
    67ae:	613b      	str	r3, [r7, #16]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    67b0:	693b      	ldr	r3, [r7, #16]
    67b2:	3304      	adds	r3, #4
    67b4:	0018      	movs	r0, r3
    67b6:	4b23      	ldr	r3, [pc, #140]	; (6844 <prvSwitchTimerLists+0xb0>)
    67b8:	4798      	blx	r3
		traceTIMER_EXPIRED(pxTimer);

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    67ba:	693b      	ldr	r3, [r7, #16]
    67bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    67be:	693a      	ldr	r2, [r7, #16]
    67c0:	0010      	movs	r0, r2
    67c2:	4798      	blx	r3

		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    67c4:	693b      	ldr	r3, [r7, #16]
    67c6:	69db      	ldr	r3, [r3, #28]
    67c8:	2b01      	cmp	r3, #1
    67ca:	d126      	bne.n	681a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    67cc:	693b      	ldr	r3, [r7, #16]
    67ce:	699a      	ldr	r2, [r3, #24]
    67d0:	697b      	ldr	r3, [r7, #20]
    67d2:	18d3      	adds	r3, r2, r3
    67d4:	60fb      	str	r3, [r7, #12]
			if (xReloadTime > xNextExpireTime) {
    67d6:	68fa      	ldr	r2, [r7, #12]
    67d8:	697b      	ldr	r3, [r7, #20]
    67da:	429a      	cmp	r2, r3
    67dc:	d90e      	bls.n	67fc <prvSwitchTimerLists+0x68>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    67de:	693b      	ldr	r3, [r7, #16]
    67e0:	68fa      	ldr	r2, [r7, #12]
    67e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    67e4:	693b      	ldr	r3, [r7, #16]
    67e6:	693a      	ldr	r2, [r7, #16]
    67e8:	611a      	str	r2, [r3, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    67ea:	4b15      	ldr	r3, [pc, #84]	; (6840 <prvSwitchTimerLists+0xac>)
    67ec:	681a      	ldr	r2, [r3, #0]
    67ee:	693b      	ldr	r3, [r7, #16]
    67f0:	3304      	adds	r3, #4
    67f2:	0019      	movs	r1, r3
    67f4:	0010      	movs	r0, r2
    67f6:	4b14      	ldr	r3, [pc, #80]	; (6848 <prvSwitchTimerLists+0xb4>)
    67f8:	4798      	blx	r3
    67fa:	e00e      	b.n	681a <prvSwitchTimerLists+0x86>
			} else {
				xResult
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    67fc:	697a      	ldr	r2, [r7, #20]
    67fe:	6938      	ldr	r0, [r7, #16]
    6800:	2300      	movs	r3, #0
    6802:	9300      	str	r3, [sp, #0]
    6804:	2300      	movs	r3, #0
    6806:	2100      	movs	r1, #0
    6808:	4c10      	ldr	r4, [pc, #64]	; (684c <prvSwitchTimerLists+0xb8>)
    680a:	47a0      	blx	r4
    680c:	0003      	movs	r3, r0
    680e:	60bb      	str	r3, [r7, #8]
				configASSERT(xResult);
    6810:	68bb      	ldr	r3, [r7, #8]
    6812:	2b00      	cmp	r3, #0
    6814:	d101      	bne.n	681a <prvSwitchTimerLists+0x86>
    6816:	b672      	cpsid	i
    6818:	e7fe      	b.n	6818 <prvSwitchTimerLists+0x84>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    681a:	4b09      	ldr	r3, [pc, #36]	; (6840 <prvSwitchTimerLists+0xac>)
    681c:	681b      	ldr	r3, [r3, #0]
    681e:	681b      	ldr	r3, [r3, #0]
    6820:	2b00      	cmp	r3, #0
    6822:	d1bb      	bne.n	679c <prvSwitchTimerLists+0x8>
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp              = pxCurrentTimerList;
    6824:	4b06      	ldr	r3, [pc, #24]	; (6840 <prvSwitchTimerLists+0xac>)
    6826:	681b      	ldr	r3, [r3, #0]
    6828:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList  = pxOverflowTimerList;
    682a:	4b09      	ldr	r3, [pc, #36]	; (6850 <prvSwitchTimerLists+0xbc>)
    682c:	681a      	ldr	r2, [r3, #0]
    682e:	4b04      	ldr	r3, [pc, #16]	; (6840 <prvSwitchTimerLists+0xac>)
    6830:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    6832:	4b07      	ldr	r3, [pc, #28]	; (6850 <prvSwitchTimerLists+0xbc>)
    6834:	687a      	ldr	r2, [r7, #4]
    6836:	601a      	str	r2, [r3, #0]
}
    6838:	46c0      	nop			; (mov r8, r8)
    683a:	46bd      	mov	sp, r7
    683c:	b007      	add	sp, #28
    683e:	bd90      	pop	{r4, r7, pc}
    6840:	20002794 	.word	0x20002794
    6844:	0000477f 	.word	0x0000477f
    6848:	00004713 	.word	0x00004713
    684c:	00006371 	.word	0x00006371
    6850:	20002798 	.word	0x20002798

00006854 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    6854:	b580      	push	{r7, lr}
    6856:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    6858:	4b10      	ldr	r3, [pc, #64]	; (689c <prvCheckForValidListAndQueue+0x48>)
    685a:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    685c:	4b10      	ldr	r3, [pc, #64]	; (68a0 <prvCheckForValidListAndQueue+0x4c>)
    685e:	681b      	ldr	r3, [r3, #0]
    6860:	2b00      	cmp	r3, #0
    6862:	d115      	bne.n	6890 <prvCheckForValidListAndQueue+0x3c>
			vListInitialise(&xActiveTimerList1);
    6864:	4b0f      	ldr	r3, [pc, #60]	; (68a4 <prvCheckForValidListAndQueue+0x50>)
    6866:	0018      	movs	r0, r3
    6868:	4b0f      	ldr	r3, [pc, #60]	; (68a8 <prvCheckForValidListAndQueue+0x54>)
    686a:	4798      	blx	r3
			vListInitialise(&xActiveTimerList2);
    686c:	4b0f      	ldr	r3, [pc, #60]	; (68ac <prvCheckForValidListAndQueue+0x58>)
    686e:	0018      	movs	r0, r3
    6870:	4b0d      	ldr	r3, [pc, #52]	; (68a8 <prvCheckForValidListAndQueue+0x54>)
    6872:	4798      	blx	r3
			pxCurrentTimerList  = &xActiveTimerList1;
    6874:	4b0e      	ldr	r3, [pc, #56]	; (68b0 <prvCheckForValidListAndQueue+0x5c>)
    6876:	4a0b      	ldr	r2, [pc, #44]	; (68a4 <prvCheckForValidListAndQueue+0x50>)
    6878:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    687a:	4b0e      	ldr	r3, [pc, #56]	; (68b4 <prvCheckForValidListAndQueue+0x60>)
    687c:	4a0b      	ldr	r2, [pc, #44]	; (68ac <prvCheckForValidListAndQueue+0x58>)
    687e:	601a      	str	r2, [r3, #0]
				                                 &(ucStaticTimerQueueStorage[0]),
				                                 &xStaticTimerQueue);
			}
#else
			{
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    6880:	2200      	movs	r2, #0
    6882:	210c      	movs	r1, #12
    6884:	2002      	movs	r0, #2
    6886:	4b0c      	ldr	r3, [pc, #48]	; (68b8 <prvCheckForValidListAndQueue+0x64>)
    6888:	4798      	blx	r3
    688a:	0002      	movs	r2, r0
    688c:	4b04      	ldr	r3, [pc, #16]	; (68a0 <prvCheckForValidListAndQueue+0x4c>)
    688e:	601a      	str	r2, [r3, #0]
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    6890:	4b0a      	ldr	r3, [pc, #40]	; (68bc <prvCheckForValidListAndQueue+0x68>)
    6892:	4798      	blx	r3
}
    6894:	46c0      	nop			; (mov r8, r8)
    6896:	46bd      	mov	sp, r7
    6898:	bd80      	pop	{r7, pc}
    689a:	46c0      	nop			; (mov r8, r8)
    689c:	00004911 	.word	0x00004911
    68a0:	2000279c 	.word	0x2000279c
    68a4:	2000276c 	.word	0x2000276c
    68a8:	0000467d 	.word	0x0000467d
    68ac:	20002780 	.word	0x20002780
    68b0:	20002794 	.word	0x20002794
    68b4:	20002798 	.word	0x20002798
    68b8:	00004ba9 	.word	0x00004ba9
    68bc:	00004935 	.word	0x00004935

000068c0 <__aeabi_cdrcmple>:
    68c0:	4684      	mov	ip, r0
    68c2:	1c10      	adds	r0, r2, #0
    68c4:	4662      	mov	r2, ip
    68c6:	468c      	mov	ip, r1
    68c8:	1c19      	adds	r1, r3, #0
    68ca:	4663      	mov	r3, ip
    68cc:	e000      	b.n	68d0 <__aeabi_cdcmpeq>
    68ce:	46c0      	nop			; (mov r8, r8)

000068d0 <__aeabi_cdcmpeq>:
    68d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    68d2:	f000 ff15 	bl	7700 <__ledf2>
    68d6:	2800      	cmp	r0, #0
    68d8:	d401      	bmi.n	68de <__aeabi_cdcmpeq+0xe>
    68da:	2100      	movs	r1, #0
    68dc:	42c8      	cmn	r0, r1
    68de:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000068e0 <__aeabi_dcmpeq>:
    68e0:	b510      	push	{r4, lr}
    68e2:	f000 fe6f 	bl	75c4 <__eqdf2>
    68e6:	4240      	negs	r0, r0
    68e8:	3001      	adds	r0, #1
    68ea:	bd10      	pop	{r4, pc}

000068ec <__aeabi_dcmplt>:
    68ec:	b510      	push	{r4, lr}
    68ee:	f000 ff07 	bl	7700 <__ledf2>
    68f2:	2800      	cmp	r0, #0
    68f4:	db01      	blt.n	68fa <__aeabi_dcmplt+0xe>
    68f6:	2000      	movs	r0, #0
    68f8:	bd10      	pop	{r4, pc}
    68fa:	2001      	movs	r0, #1
    68fc:	bd10      	pop	{r4, pc}
    68fe:	46c0      	nop			; (mov r8, r8)

00006900 <__aeabi_dcmple>:
    6900:	b510      	push	{r4, lr}
    6902:	f000 fefd 	bl	7700 <__ledf2>
    6906:	2800      	cmp	r0, #0
    6908:	dd01      	ble.n	690e <__aeabi_dcmple+0xe>
    690a:	2000      	movs	r0, #0
    690c:	bd10      	pop	{r4, pc}
    690e:	2001      	movs	r0, #1
    6910:	bd10      	pop	{r4, pc}
    6912:	46c0      	nop			; (mov r8, r8)

00006914 <__aeabi_dcmpgt>:
    6914:	b510      	push	{r4, lr}
    6916:	f000 fe8f 	bl	7638 <__gedf2>
    691a:	2800      	cmp	r0, #0
    691c:	dc01      	bgt.n	6922 <__aeabi_dcmpgt+0xe>
    691e:	2000      	movs	r0, #0
    6920:	bd10      	pop	{r4, pc}
    6922:	2001      	movs	r0, #1
    6924:	bd10      	pop	{r4, pc}
    6926:	46c0      	nop			; (mov r8, r8)

00006928 <__aeabi_dcmpge>:
    6928:	b510      	push	{r4, lr}
    692a:	f000 fe85 	bl	7638 <__gedf2>
    692e:	2800      	cmp	r0, #0
    6930:	da01      	bge.n	6936 <__aeabi_dcmpge+0xe>
    6932:	2000      	movs	r0, #0
    6934:	bd10      	pop	{r4, pc}
    6936:	2001      	movs	r0, #1
    6938:	bd10      	pop	{r4, pc}
    693a:	46c0      	nop			; (mov r8, r8)

0000693c <__aeabi_dadd>:
    693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    693e:	4645      	mov	r5, r8
    6940:	46de      	mov	lr, fp
    6942:	4657      	mov	r7, sl
    6944:	464e      	mov	r6, r9
    6946:	030c      	lsls	r4, r1, #12
    6948:	b5e0      	push	{r5, r6, r7, lr}
    694a:	004e      	lsls	r6, r1, #1
    694c:	0fc9      	lsrs	r1, r1, #31
    694e:	4688      	mov	r8, r1
    6950:	000d      	movs	r5, r1
    6952:	0a61      	lsrs	r1, r4, #9
    6954:	0f44      	lsrs	r4, r0, #29
    6956:	430c      	orrs	r4, r1
    6958:	00c7      	lsls	r7, r0, #3
    695a:	0319      	lsls	r1, r3, #12
    695c:	0058      	lsls	r0, r3, #1
    695e:	0fdb      	lsrs	r3, r3, #31
    6960:	469b      	mov	fp, r3
    6962:	0a4b      	lsrs	r3, r1, #9
    6964:	0f51      	lsrs	r1, r2, #29
    6966:	430b      	orrs	r3, r1
    6968:	0d76      	lsrs	r6, r6, #21
    696a:	0d40      	lsrs	r0, r0, #21
    696c:	0019      	movs	r1, r3
    696e:	00d2      	lsls	r2, r2, #3
    6970:	45d8      	cmp	r8, fp
    6972:	d100      	bne.n	6976 <__aeabi_dadd+0x3a>
    6974:	e0ae      	b.n	6ad4 <__aeabi_dadd+0x198>
    6976:	1a35      	subs	r5, r6, r0
    6978:	2d00      	cmp	r5, #0
    697a:	dc00      	bgt.n	697e <__aeabi_dadd+0x42>
    697c:	e0f6      	b.n	6b6c <__aeabi_dadd+0x230>
    697e:	2800      	cmp	r0, #0
    6980:	d10f      	bne.n	69a2 <__aeabi_dadd+0x66>
    6982:	4313      	orrs	r3, r2
    6984:	d100      	bne.n	6988 <__aeabi_dadd+0x4c>
    6986:	e0db      	b.n	6b40 <__aeabi_dadd+0x204>
    6988:	1e6b      	subs	r3, r5, #1
    698a:	2b00      	cmp	r3, #0
    698c:	d000      	beq.n	6990 <__aeabi_dadd+0x54>
    698e:	e137      	b.n	6c00 <__aeabi_dadd+0x2c4>
    6990:	1aba      	subs	r2, r7, r2
    6992:	4297      	cmp	r7, r2
    6994:	41bf      	sbcs	r7, r7
    6996:	1a64      	subs	r4, r4, r1
    6998:	427f      	negs	r7, r7
    699a:	1be4      	subs	r4, r4, r7
    699c:	2601      	movs	r6, #1
    699e:	0017      	movs	r7, r2
    69a0:	e024      	b.n	69ec <__aeabi_dadd+0xb0>
    69a2:	4bc6      	ldr	r3, [pc, #792]	; (6cbc <__aeabi_dadd+0x380>)
    69a4:	429e      	cmp	r6, r3
    69a6:	d04d      	beq.n	6a44 <__aeabi_dadd+0x108>
    69a8:	2380      	movs	r3, #128	; 0x80
    69aa:	041b      	lsls	r3, r3, #16
    69ac:	4319      	orrs	r1, r3
    69ae:	2d38      	cmp	r5, #56	; 0x38
    69b0:	dd00      	ble.n	69b4 <__aeabi_dadd+0x78>
    69b2:	e107      	b.n	6bc4 <__aeabi_dadd+0x288>
    69b4:	2d1f      	cmp	r5, #31
    69b6:	dd00      	ble.n	69ba <__aeabi_dadd+0x7e>
    69b8:	e138      	b.n	6c2c <__aeabi_dadd+0x2f0>
    69ba:	2020      	movs	r0, #32
    69bc:	1b43      	subs	r3, r0, r5
    69be:	469a      	mov	sl, r3
    69c0:	000b      	movs	r3, r1
    69c2:	4650      	mov	r0, sl
    69c4:	4083      	lsls	r3, r0
    69c6:	4699      	mov	r9, r3
    69c8:	0013      	movs	r3, r2
    69ca:	4648      	mov	r0, r9
    69cc:	40eb      	lsrs	r3, r5
    69ce:	4318      	orrs	r0, r3
    69d0:	0003      	movs	r3, r0
    69d2:	4650      	mov	r0, sl
    69d4:	4082      	lsls	r2, r0
    69d6:	1e50      	subs	r0, r2, #1
    69d8:	4182      	sbcs	r2, r0
    69da:	40e9      	lsrs	r1, r5
    69dc:	431a      	orrs	r2, r3
    69de:	1aba      	subs	r2, r7, r2
    69e0:	1a61      	subs	r1, r4, r1
    69e2:	4297      	cmp	r7, r2
    69e4:	41a4      	sbcs	r4, r4
    69e6:	0017      	movs	r7, r2
    69e8:	4264      	negs	r4, r4
    69ea:	1b0c      	subs	r4, r1, r4
    69ec:	0223      	lsls	r3, r4, #8
    69ee:	d562      	bpl.n	6ab6 <__aeabi_dadd+0x17a>
    69f0:	0264      	lsls	r4, r4, #9
    69f2:	0a65      	lsrs	r5, r4, #9
    69f4:	2d00      	cmp	r5, #0
    69f6:	d100      	bne.n	69fa <__aeabi_dadd+0xbe>
    69f8:	e0df      	b.n	6bba <__aeabi_dadd+0x27e>
    69fa:	0028      	movs	r0, r5
    69fc:	f001 fcba 	bl	8374 <__clzsi2>
    6a00:	0003      	movs	r3, r0
    6a02:	3b08      	subs	r3, #8
    6a04:	2b1f      	cmp	r3, #31
    6a06:	dd00      	ble.n	6a0a <__aeabi_dadd+0xce>
    6a08:	e0d2      	b.n	6bb0 <__aeabi_dadd+0x274>
    6a0a:	2220      	movs	r2, #32
    6a0c:	003c      	movs	r4, r7
    6a0e:	1ad2      	subs	r2, r2, r3
    6a10:	409d      	lsls	r5, r3
    6a12:	40d4      	lsrs	r4, r2
    6a14:	409f      	lsls	r7, r3
    6a16:	4325      	orrs	r5, r4
    6a18:	429e      	cmp	r6, r3
    6a1a:	dd00      	ble.n	6a1e <__aeabi_dadd+0xe2>
    6a1c:	e0c4      	b.n	6ba8 <__aeabi_dadd+0x26c>
    6a1e:	1b9e      	subs	r6, r3, r6
    6a20:	1c73      	adds	r3, r6, #1
    6a22:	2b1f      	cmp	r3, #31
    6a24:	dd00      	ble.n	6a28 <__aeabi_dadd+0xec>
    6a26:	e0f1      	b.n	6c0c <__aeabi_dadd+0x2d0>
    6a28:	2220      	movs	r2, #32
    6a2a:	0038      	movs	r0, r7
    6a2c:	0029      	movs	r1, r5
    6a2e:	1ad2      	subs	r2, r2, r3
    6a30:	40d8      	lsrs	r0, r3
    6a32:	4091      	lsls	r1, r2
    6a34:	4097      	lsls	r7, r2
    6a36:	002c      	movs	r4, r5
    6a38:	4301      	orrs	r1, r0
    6a3a:	1e78      	subs	r0, r7, #1
    6a3c:	4187      	sbcs	r7, r0
    6a3e:	40dc      	lsrs	r4, r3
    6a40:	2600      	movs	r6, #0
    6a42:	430f      	orrs	r7, r1
    6a44:	077b      	lsls	r3, r7, #29
    6a46:	d009      	beq.n	6a5c <__aeabi_dadd+0x120>
    6a48:	230f      	movs	r3, #15
    6a4a:	403b      	ands	r3, r7
    6a4c:	2b04      	cmp	r3, #4
    6a4e:	d005      	beq.n	6a5c <__aeabi_dadd+0x120>
    6a50:	1d3b      	adds	r3, r7, #4
    6a52:	42bb      	cmp	r3, r7
    6a54:	41bf      	sbcs	r7, r7
    6a56:	427f      	negs	r7, r7
    6a58:	19e4      	adds	r4, r4, r7
    6a5a:	001f      	movs	r7, r3
    6a5c:	0223      	lsls	r3, r4, #8
    6a5e:	d52c      	bpl.n	6aba <__aeabi_dadd+0x17e>
    6a60:	4b96      	ldr	r3, [pc, #600]	; (6cbc <__aeabi_dadd+0x380>)
    6a62:	3601      	adds	r6, #1
    6a64:	429e      	cmp	r6, r3
    6a66:	d100      	bne.n	6a6a <__aeabi_dadd+0x12e>
    6a68:	e09a      	b.n	6ba0 <__aeabi_dadd+0x264>
    6a6a:	4645      	mov	r5, r8
    6a6c:	4b94      	ldr	r3, [pc, #592]	; (6cc0 <__aeabi_dadd+0x384>)
    6a6e:	08ff      	lsrs	r7, r7, #3
    6a70:	401c      	ands	r4, r3
    6a72:	0760      	lsls	r0, r4, #29
    6a74:	0576      	lsls	r6, r6, #21
    6a76:	0264      	lsls	r4, r4, #9
    6a78:	4307      	orrs	r7, r0
    6a7a:	0b24      	lsrs	r4, r4, #12
    6a7c:	0d76      	lsrs	r6, r6, #21
    6a7e:	2100      	movs	r1, #0
    6a80:	0324      	lsls	r4, r4, #12
    6a82:	0b23      	lsrs	r3, r4, #12
    6a84:	0d0c      	lsrs	r4, r1, #20
    6a86:	4a8f      	ldr	r2, [pc, #572]	; (6cc4 <__aeabi_dadd+0x388>)
    6a88:	0524      	lsls	r4, r4, #20
    6a8a:	431c      	orrs	r4, r3
    6a8c:	4014      	ands	r4, r2
    6a8e:	0533      	lsls	r3, r6, #20
    6a90:	4323      	orrs	r3, r4
    6a92:	005b      	lsls	r3, r3, #1
    6a94:	07ed      	lsls	r5, r5, #31
    6a96:	085b      	lsrs	r3, r3, #1
    6a98:	432b      	orrs	r3, r5
    6a9a:	0038      	movs	r0, r7
    6a9c:	0019      	movs	r1, r3
    6a9e:	bc3c      	pop	{r2, r3, r4, r5}
    6aa0:	4690      	mov	r8, r2
    6aa2:	4699      	mov	r9, r3
    6aa4:	46a2      	mov	sl, r4
    6aa6:	46ab      	mov	fp, r5
    6aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6aaa:	4664      	mov	r4, ip
    6aac:	4304      	orrs	r4, r0
    6aae:	d100      	bne.n	6ab2 <__aeabi_dadd+0x176>
    6ab0:	e211      	b.n	6ed6 <__aeabi_dadd+0x59a>
    6ab2:	0004      	movs	r4, r0
    6ab4:	4667      	mov	r7, ip
    6ab6:	077b      	lsls	r3, r7, #29
    6ab8:	d1c6      	bne.n	6a48 <__aeabi_dadd+0x10c>
    6aba:	4645      	mov	r5, r8
    6abc:	0760      	lsls	r0, r4, #29
    6abe:	08ff      	lsrs	r7, r7, #3
    6ac0:	4307      	orrs	r7, r0
    6ac2:	08e4      	lsrs	r4, r4, #3
    6ac4:	4b7d      	ldr	r3, [pc, #500]	; (6cbc <__aeabi_dadd+0x380>)
    6ac6:	429e      	cmp	r6, r3
    6ac8:	d030      	beq.n	6b2c <__aeabi_dadd+0x1f0>
    6aca:	0324      	lsls	r4, r4, #12
    6acc:	0576      	lsls	r6, r6, #21
    6ace:	0b24      	lsrs	r4, r4, #12
    6ad0:	0d76      	lsrs	r6, r6, #21
    6ad2:	e7d4      	b.n	6a7e <__aeabi_dadd+0x142>
    6ad4:	1a33      	subs	r3, r6, r0
    6ad6:	469a      	mov	sl, r3
    6ad8:	2b00      	cmp	r3, #0
    6ada:	dd78      	ble.n	6bce <__aeabi_dadd+0x292>
    6adc:	2800      	cmp	r0, #0
    6ade:	d031      	beq.n	6b44 <__aeabi_dadd+0x208>
    6ae0:	4876      	ldr	r0, [pc, #472]	; (6cbc <__aeabi_dadd+0x380>)
    6ae2:	4286      	cmp	r6, r0
    6ae4:	d0ae      	beq.n	6a44 <__aeabi_dadd+0x108>
    6ae6:	2080      	movs	r0, #128	; 0x80
    6ae8:	0400      	lsls	r0, r0, #16
    6aea:	4301      	orrs	r1, r0
    6aec:	4653      	mov	r3, sl
    6aee:	2b38      	cmp	r3, #56	; 0x38
    6af0:	dc00      	bgt.n	6af4 <__aeabi_dadd+0x1b8>
    6af2:	e0e9      	b.n	6cc8 <__aeabi_dadd+0x38c>
    6af4:	430a      	orrs	r2, r1
    6af6:	1e51      	subs	r1, r2, #1
    6af8:	418a      	sbcs	r2, r1
    6afa:	2100      	movs	r1, #0
    6afc:	19d2      	adds	r2, r2, r7
    6afe:	42ba      	cmp	r2, r7
    6b00:	41bf      	sbcs	r7, r7
    6b02:	1909      	adds	r1, r1, r4
    6b04:	427c      	negs	r4, r7
    6b06:	0017      	movs	r7, r2
    6b08:	190c      	adds	r4, r1, r4
    6b0a:	0223      	lsls	r3, r4, #8
    6b0c:	d5d3      	bpl.n	6ab6 <__aeabi_dadd+0x17a>
    6b0e:	4b6b      	ldr	r3, [pc, #428]	; (6cbc <__aeabi_dadd+0x380>)
    6b10:	3601      	adds	r6, #1
    6b12:	429e      	cmp	r6, r3
    6b14:	d100      	bne.n	6b18 <__aeabi_dadd+0x1dc>
    6b16:	e13a      	b.n	6d8e <__aeabi_dadd+0x452>
    6b18:	2001      	movs	r0, #1
    6b1a:	4b69      	ldr	r3, [pc, #420]	; (6cc0 <__aeabi_dadd+0x384>)
    6b1c:	401c      	ands	r4, r3
    6b1e:	087b      	lsrs	r3, r7, #1
    6b20:	4007      	ands	r7, r0
    6b22:	431f      	orrs	r7, r3
    6b24:	07e0      	lsls	r0, r4, #31
    6b26:	4307      	orrs	r7, r0
    6b28:	0864      	lsrs	r4, r4, #1
    6b2a:	e78b      	b.n	6a44 <__aeabi_dadd+0x108>
    6b2c:	0023      	movs	r3, r4
    6b2e:	433b      	orrs	r3, r7
    6b30:	d100      	bne.n	6b34 <__aeabi_dadd+0x1f8>
    6b32:	e1cb      	b.n	6ecc <__aeabi_dadd+0x590>
    6b34:	2280      	movs	r2, #128	; 0x80
    6b36:	0312      	lsls	r2, r2, #12
    6b38:	4314      	orrs	r4, r2
    6b3a:	0324      	lsls	r4, r4, #12
    6b3c:	0b24      	lsrs	r4, r4, #12
    6b3e:	e79e      	b.n	6a7e <__aeabi_dadd+0x142>
    6b40:	002e      	movs	r6, r5
    6b42:	e77f      	b.n	6a44 <__aeabi_dadd+0x108>
    6b44:	0008      	movs	r0, r1
    6b46:	4310      	orrs	r0, r2
    6b48:	d100      	bne.n	6b4c <__aeabi_dadd+0x210>
    6b4a:	e0b4      	b.n	6cb6 <__aeabi_dadd+0x37a>
    6b4c:	1e58      	subs	r0, r3, #1
    6b4e:	2800      	cmp	r0, #0
    6b50:	d000      	beq.n	6b54 <__aeabi_dadd+0x218>
    6b52:	e0de      	b.n	6d12 <__aeabi_dadd+0x3d6>
    6b54:	18ba      	adds	r2, r7, r2
    6b56:	42ba      	cmp	r2, r7
    6b58:	419b      	sbcs	r3, r3
    6b5a:	1864      	adds	r4, r4, r1
    6b5c:	425b      	negs	r3, r3
    6b5e:	18e4      	adds	r4, r4, r3
    6b60:	0017      	movs	r7, r2
    6b62:	2601      	movs	r6, #1
    6b64:	0223      	lsls	r3, r4, #8
    6b66:	d5a6      	bpl.n	6ab6 <__aeabi_dadd+0x17a>
    6b68:	2602      	movs	r6, #2
    6b6a:	e7d5      	b.n	6b18 <__aeabi_dadd+0x1dc>
    6b6c:	2d00      	cmp	r5, #0
    6b6e:	d16e      	bne.n	6c4e <__aeabi_dadd+0x312>
    6b70:	1c70      	adds	r0, r6, #1
    6b72:	0540      	lsls	r0, r0, #21
    6b74:	0d40      	lsrs	r0, r0, #21
    6b76:	2801      	cmp	r0, #1
    6b78:	dc00      	bgt.n	6b7c <__aeabi_dadd+0x240>
    6b7a:	e0f9      	b.n	6d70 <__aeabi_dadd+0x434>
    6b7c:	1ab8      	subs	r0, r7, r2
    6b7e:	4684      	mov	ip, r0
    6b80:	4287      	cmp	r7, r0
    6b82:	4180      	sbcs	r0, r0
    6b84:	1ae5      	subs	r5, r4, r3
    6b86:	4240      	negs	r0, r0
    6b88:	1a2d      	subs	r5, r5, r0
    6b8a:	0228      	lsls	r0, r5, #8
    6b8c:	d400      	bmi.n	6b90 <__aeabi_dadd+0x254>
    6b8e:	e089      	b.n	6ca4 <__aeabi_dadd+0x368>
    6b90:	1bd7      	subs	r7, r2, r7
    6b92:	42ba      	cmp	r2, r7
    6b94:	4192      	sbcs	r2, r2
    6b96:	1b1c      	subs	r4, r3, r4
    6b98:	4252      	negs	r2, r2
    6b9a:	1aa5      	subs	r5, r4, r2
    6b9c:	46d8      	mov	r8, fp
    6b9e:	e729      	b.n	69f4 <__aeabi_dadd+0xb8>
    6ba0:	4645      	mov	r5, r8
    6ba2:	2400      	movs	r4, #0
    6ba4:	2700      	movs	r7, #0
    6ba6:	e76a      	b.n	6a7e <__aeabi_dadd+0x142>
    6ba8:	4c45      	ldr	r4, [pc, #276]	; (6cc0 <__aeabi_dadd+0x384>)
    6baa:	1af6      	subs	r6, r6, r3
    6bac:	402c      	ands	r4, r5
    6bae:	e749      	b.n	6a44 <__aeabi_dadd+0x108>
    6bb0:	003d      	movs	r5, r7
    6bb2:	3828      	subs	r0, #40	; 0x28
    6bb4:	4085      	lsls	r5, r0
    6bb6:	2700      	movs	r7, #0
    6bb8:	e72e      	b.n	6a18 <__aeabi_dadd+0xdc>
    6bba:	0038      	movs	r0, r7
    6bbc:	f001 fbda 	bl	8374 <__clzsi2>
    6bc0:	3020      	adds	r0, #32
    6bc2:	e71d      	b.n	6a00 <__aeabi_dadd+0xc4>
    6bc4:	430a      	orrs	r2, r1
    6bc6:	1e51      	subs	r1, r2, #1
    6bc8:	418a      	sbcs	r2, r1
    6bca:	2100      	movs	r1, #0
    6bcc:	e707      	b.n	69de <__aeabi_dadd+0xa2>
    6bce:	2b00      	cmp	r3, #0
    6bd0:	d000      	beq.n	6bd4 <__aeabi_dadd+0x298>
    6bd2:	e0f3      	b.n	6dbc <__aeabi_dadd+0x480>
    6bd4:	1c70      	adds	r0, r6, #1
    6bd6:	0543      	lsls	r3, r0, #21
    6bd8:	0d5b      	lsrs	r3, r3, #21
    6bda:	2b01      	cmp	r3, #1
    6bdc:	dc00      	bgt.n	6be0 <__aeabi_dadd+0x2a4>
    6bde:	e0ad      	b.n	6d3c <__aeabi_dadd+0x400>
    6be0:	4b36      	ldr	r3, [pc, #216]	; (6cbc <__aeabi_dadd+0x380>)
    6be2:	4298      	cmp	r0, r3
    6be4:	d100      	bne.n	6be8 <__aeabi_dadd+0x2ac>
    6be6:	e0d1      	b.n	6d8c <__aeabi_dadd+0x450>
    6be8:	18ba      	adds	r2, r7, r2
    6bea:	42ba      	cmp	r2, r7
    6bec:	41bf      	sbcs	r7, r7
    6bee:	1864      	adds	r4, r4, r1
    6bf0:	427f      	negs	r7, r7
    6bf2:	19e4      	adds	r4, r4, r7
    6bf4:	07e7      	lsls	r7, r4, #31
    6bf6:	0852      	lsrs	r2, r2, #1
    6bf8:	4317      	orrs	r7, r2
    6bfa:	0864      	lsrs	r4, r4, #1
    6bfc:	0006      	movs	r6, r0
    6bfe:	e721      	b.n	6a44 <__aeabi_dadd+0x108>
    6c00:	482e      	ldr	r0, [pc, #184]	; (6cbc <__aeabi_dadd+0x380>)
    6c02:	4285      	cmp	r5, r0
    6c04:	d100      	bne.n	6c08 <__aeabi_dadd+0x2cc>
    6c06:	e093      	b.n	6d30 <__aeabi_dadd+0x3f4>
    6c08:	001d      	movs	r5, r3
    6c0a:	e6d0      	b.n	69ae <__aeabi_dadd+0x72>
    6c0c:	0029      	movs	r1, r5
    6c0e:	3e1f      	subs	r6, #31
    6c10:	40f1      	lsrs	r1, r6
    6c12:	2b20      	cmp	r3, #32
    6c14:	d100      	bne.n	6c18 <__aeabi_dadd+0x2dc>
    6c16:	e08d      	b.n	6d34 <__aeabi_dadd+0x3f8>
    6c18:	2240      	movs	r2, #64	; 0x40
    6c1a:	1ad3      	subs	r3, r2, r3
    6c1c:	409d      	lsls	r5, r3
    6c1e:	432f      	orrs	r7, r5
    6c20:	1e7d      	subs	r5, r7, #1
    6c22:	41af      	sbcs	r7, r5
    6c24:	2400      	movs	r4, #0
    6c26:	430f      	orrs	r7, r1
    6c28:	2600      	movs	r6, #0
    6c2a:	e744      	b.n	6ab6 <__aeabi_dadd+0x17a>
    6c2c:	002b      	movs	r3, r5
    6c2e:	0008      	movs	r0, r1
    6c30:	3b20      	subs	r3, #32
    6c32:	40d8      	lsrs	r0, r3
    6c34:	0003      	movs	r3, r0
    6c36:	2d20      	cmp	r5, #32
    6c38:	d100      	bne.n	6c3c <__aeabi_dadd+0x300>
    6c3a:	e07d      	b.n	6d38 <__aeabi_dadd+0x3fc>
    6c3c:	2040      	movs	r0, #64	; 0x40
    6c3e:	1b45      	subs	r5, r0, r5
    6c40:	40a9      	lsls	r1, r5
    6c42:	430a      	orrs	r2, r1
    6c44:	1e51      	subs	r1, r2, #1
    6c46:	418a      	sbcs	r2, r1
    6c48:	2100      	movs	r1, #0
    6c4a:	431a      	orrs	r2, r3
    6c4c:	e6c7      	b.n	69de <__aeabi_dadd+0xa2>
    6c4e:	2e00      	cmp	r6, #0
    6c50:	d050      	beq.n	6cf4 <__aeabi_dadd+0x3b8>
    6c52:	4e1a      	ldr	r6, [pc, #104]	; (6cbc <__aeabi_dadd+0x380>)
    6c54:	42b0      	cmp	r0, r6
    6c56:	d057      	beq.n	6d08 <__aeabi_dadd+0x3cc>
    6c58:	2680      	movs	r6, #128	; 0x80
    6c5a:	426b      	negs	r3, r5
    6c5c:	4699      	mov	r9, r3
    6c5e:	0436      	lsls	r6, r6, #16
    6c60:	4334      	orrs	r4, r6
    6c62:	464b      	mov	r3, r9
    6c64:	2b38      	cmp	r3, #56	; 0x38
    6c66:	dd00      	ble.n	6c6a <__aeabi_dadd+0x32e>
    6c68:	e0d6      	b.n	6e18 <__aeabi_dadd+0x4dc>
    6c6a:	2b1f      	cmp	r3, #31
    6c6c:	dd00      	ble.n	6c70 <__aeabi_dadd+0x334>
    6c6e:	e135      	b.n	6edc <__aeabi_dadd+0x5a0>
    6c70:	2620      	movs	r6, #32
    6c72:	1af5      	subs	r5, r6, r3
    6c74:	0026      	movs	r6, r4
    6c76:	40ae      	lsls	r6, r5
    6c78:	46b2      	mov	sl, r6
    6c7a:	003e      	movs	r6, r7
    6c7c:	40de      	lsrs	r6, r3
    6c7e:	46ac      	mov	ip, r5
    6c80:	0035      	movs	r5, r6
    6c82:	4656      	mov	r6, sl
    6c84:	432e      	orrs	r6, r5
    6c86:	4665      	mov	r5, ip
    6c88:	40af      	lsls	r7, r5
    6c8a:	1e7d      	subs	r5, r7, #1
    6c8c:	41af      	sbcs	r7, r5
    6c8e:	40dc      	lsrs	r4, r3
    6c90:	4337      	orrs	r7, r6
    6c92:	1bd7      	subs	r7, r2, r7
    6c94:	42ba      	cmp	r2, r7
    6c96:	4192      	sbcs	r2, r2
    6c98:	1b0c      	subs	r4, r1, r4
    6c9a:	4252      	negs	r2, r2
    6c9c:	1aa4      	subs	r4, r4, r2
    6c9e:	0006      	movs	r6, r0
    6ca0:	46d8      	mov	r8, fp
    6ca2:	e6a3      	b.n	69ec <__aeabi_dadd+0xb0>
    6ca4:	4664      	mov	r4, ip
    6ca6:	4667      	mov	r7, ip
    6ca8:	432c      	orrs	r4, r5
    6caa:	d000      	beq.n	6cae <__aeabi_dadd+0x372>
    6cac:	e6a2      	b.n	69f4 <__aeabi_dadd+0xb8>
    6cae:	2500      	movs	r5, #0
    6cb0:	2600      	movs	r6, #0
    6cb2:	2700      	movs	r7, #0
    6cb4:	e706      	b.n	6ac4 <__aeabi_dadd+0x188>
    6cb6:	001e      	movs	r6, r3
    6cb8:	e6c4      	b.n	6a44 <__aeabi_dadd+0x108>
    6cba:	46c0      	nop			; (mov r8, r8)
    6cbc:	000007ff 	.word	0x000007ff
    6cc0:	ff7fffff 	.word	0xff7fffff
    6cc4:	800fffff 	.word	0x800fffff
    6cc8:	2b1f      	cmp	r3, #31
    6cca:	dc63      	bgt.n	6d94 <__aeabi_dadd+0x458>
    6ccc:	2020      	movs	r0, #32
    6cce:	1ac3      	subs	r3, r0, r3
    6cd0:	0008      	movs	r0, r1
    6cd2:	4098      	lsls	r0, r3
    6cd4:	469c      	mov	ip, r3
    6cd6:	4683      	mov	fp, r0
    6cd8:	4653      	mov	r3, sl
    6cda:	0010      	movs	r0, r2
    6cdc:	40d8      	lsrs	r0, r3
    6cde:	0003      	movs	r3, r0
    6ce0:	4658      	mov	r0, fp
    6ce2:	4318      	orrs	r0, r3
    6ce4:	4663      	mov	r3, ip
    6ce6:	409a      	lsls	r2, r3
    6ce8:	1e53      	subs	r3, r2, #1
    6cea:	419a      	sbcs	r2, r3
    6cec:	4653      	mov	r3, sl
    6cee:	4302      	orrs	r2, r0
    6cf0:	40d9      	lsrs	r1, r3
    6cf2:	e703      	b.n	6afc <__aeabi_dadd+0x1c0>
    6cf4:	0026      	movs	r6, r4
    6cf6:	433e      	orrs	r6, r7
    6cf8:	d006      	beq.n	6d08 <__aeabi_dadd+0x3cc>
    6cfa:	43eb      	mvns	r3, r5
    6cfc:	4699      	mov	r9, r3
    6cfe:	2b00      	cmp	r3, #0
    6d00:	d0c7      	beq.n	6c92 <__aeabi_dadd+0x356>
    6d02:	4e94      	ldr	r6, [pc, #592]	; (6f54 <__aeabi_dadd+0x618>)
    6d04:	42b0      	cmp	r0, r6
    6d06:	d1ac      	bne.n	6c62 <__aeabi_dadd+0x326>
    6d08:	000c      	movs	r4, r1
    6d0a:	0017      	movs	r7, r2
    6d0c:	0006      	movs	r6, r0
    6d0e:	46d8      	mov	r8, fp
    6d10:	e698      	b.n	6a44 <__aeabi_dadd+0x108>
    6d12:	4b90      	ldr	r3, [pc, #576]	; (6f54 <__aeabi_dadd+0x618>)
    6d14:	459a      	cmp	sl, r3
    6d16:	d00b      	beq.n	6d30 <__aeabi_dadd+0x3f4>
    6d18:	4682      	mov	sl, r0
    6d1a:	e6e7      	b.n	6aec <__aeabi_dadd+0x1b0>
    6d1c:	2800      	cmp	r0, #0
    6d1e:	d000      	beq.n	6d22 <__aeabi_dadd+0x3e6>
    6d20:	e09e      	b.n	6e60 <__aeabi_dadd+0x524>
    6d22:	0018      	movs	r0, r3
    6d24:	4310      	orrs	r0, r2
    6d26:	d100      	bne.n	6d2a <__aeabi_dadd+0x3ee>
    6d28:	e0e9      	b.n	6efe <__aeabi_dadd+0x5c2>
    6d2a:	001c      	movs	r4, r3
    6d2c:	0017      	movs	r7, r2
    6d2e:	46d8      	mov	r8, fp
    6d30:	4e88      	ldr	r6, [pc, #544]	; (6f54 <__aeabi_dadd+0x618>)
    6d32:	e687      	b.n	6a44 <__aeabi_dadd+0x108>
    6d34:	2500      	movs	r5, #0
    6d36:	e772      	b.n	6c1e <__aeabi_dadd+0x2e2>
    6d38:	2100      	movs	r1, #0
    6d3a:	e782      	b.n	6c42 <__aeabi_dadd+0x306>
    6d3c:	0023      	movs	r3, r4
    6d3e:	433b      	orrs	r3, r7
    6d40:	2e00      	cmp	r6, #0
    6d42:	d000      	beq.n	6d46 <__aeabi_dadd+0x40a>
    6d44:	e0ab      	b.n	6e9e <__aeabi_dadd+0x562>
    6d46:	2b00      	cmp	r3, #0
    6d48:	d100      	bne.n	6d4c <__aeabi_dadd+0x410>
    6d4a:	e0e7      	b.n	6f1c <__aeabi_dadd+0x5e0>
    6d4c:	000b      	movs	r3, r1
    6d4e:	4313      	orrs	r3, r2
    6d50:	d100      	bne.n	6d54 <__aeabi_dadd+0x418>
    6d52:	e677      	b.n	6a44 <__aeabi_dadd+0x108>
    6d54:	18ba      	adds	r2, r7, r2
    6d56:	42ba      	cmp	r2, r7
    6d58:	41bf      	sbcs	r7, r7
    6d5a:	1864      	adds	r4, r4, r1
    6d5c:	427f      	negs	r7, r7
    6d5e:	19e4      	adds	r4, r4, r7
    6d60:	0223      	lsls	r3, r4, #8
    6d62:	d400      	bmi.n	6d66 <__aeabi_dadd+0x42a>
    6d64:	e0f2      	b.n	6f4c <__aeabi_dadd+0x610>
    6d66:	4b7c      	ldr	r3, [pc, #496]	; (6f58 <__aeabi_dadd+0x61c>)
    6d68:	0017      	movs	r7, r2
    6d6a:	401c      	ands	r4, r3
    6d6c:	0006      	movs	r6, r0
    6d6e:	e669      	b.n	6a44 <__aeabi_dadd+0x108>
    6d70:	0020      	movs	r0, r4
    6d72:	4338      	orrs	r0, r7
    6d74:	2e00      	cmp	r6, #0
    6d76:	d1d1      	bne.n	6d1c <__aeabi_dadd+0x3e0>
    6d78:	2800      	cmp	r0, #0
    6d7a:	d15b      	bne.n	6e34 <__aeabi_dadd+0x4f8>
    6d7c:	001c      	movs	r4, r3
    6d7e:	4314      	orrs	r4, r2
    6d80:	d100      	bne.n	6d84 <__aeabi_dadd+0x448>
    6d82:	e0a8      	b.n	6ed6 <__aeabi_dadd+0x59a>
    6d84:	001c      	movs	r4, r3
    6d86:	0017      	movs	r7, r2
    6d88:	46d8      	mov	r8, fp
    6d8a:	e65b      	b.n	6a44 <__aeabi_dadd+0x108>
    6d8c:	0006      	movs	r6, r0
    6d8e:	2400      	movs	r4, #0
    6d90:	2700      	movs	r7, #0
    6d92:	e697      	b.n	6ac4 <__aeabi_dadd+0x188>
    6d94:	4650      	mov	r0, sl
    6d96:	000b      	movs	r3, r1
    6d98:	3820      	subs	r0, #32
    6d9a:	40c3      	lsrs	r3, r0
    6d9c:	4699      	mov	r9, r3
    6d9e:	4653      	mov	r3, sl
    6da0:	2b20      	cmp	r3, #32
    6da2:	d100      	bne.n	6da6 <__aeabi_dadd+0x46a>
    6da4:	e095      	b.n	6ed2 <__aeabi_dadd+0x596>
    6da6:	2340      	movs	r3, #64	; 0x40
    6da8:	4650      	mov	r0, sl
    6daa:	1a1b      	subs	r3, r3, r0
    6dac:	4099      	lsls	r1, r3
    6dae:	430a      	orrs	r2, r1
    6db0:	1e51      	subs	r1, r2, #1
    6db2:	418a      	sbcs	r2, r1
    6db4:	464b      	mov	r3, r9
    6db6:	2100      	movs	r1, #0
    6db8:	431a      	orrs	r2, r3
    6dba:	e69f      	b.n	6afc <__aeabi_dadd+0x1c0>
    6dbc:	2e00      	cmp	r6, #0
    6dbe:	d130      	bne.n	6e22 <__aeabi_dadd+0x4e6>
    6dc0:	0026      	movs	r6, r4
    6dc2:	433e      	orrs	r6, r7
    6dc4:	d067      	beq.n	6e96 <__aeabi_dadd+0x55a>
    6dc6:	43db      	mvns	r3, r3
    6dc8:	469a      	mov	sl, r3
    6dca:	2b00      	cmp	r3, #0
    6dcc:	d01c      	beq.n	6e08 <__aeabi_dadd+0x4cc>
    6dce:	4e61      	ldr	r6, [pc, #388]	; (6f54 <__aeabi_dadd+0x618>)
    6dd0:	42b0      	cmp	r0, r6
    6dd2:	d060      	beq.n	6e96 <__aeabi_dadd+0x55a>
    6dd4:	4653      	mov	r3, sl
    6dd6:	2b38      	cmp	r3, #56	; 0x38
    6dd8:	dd00      	ble.n	6ddc <__aeabi_dadd+0x4a0>
    6dda:	e096      	b.n	6f0a <__aeabi_dadd+0x5ce>
    6ddc:	2b1f      	cmp	r3, #31
    6dde:	dd00      	ble.n	6de2 <__aeabi_dadd+0x4a6>
    6de0:	e09f      	b.n	6f22 <__aeabi_dadd+0x5e6>
    6de2:	2620      	movs	r6, #32
    6de4:	1af3      	subs	r3, r6, r3
    6de6:	0026      	movs	r6, r4
    6de8:	409e      	lsls	r6, r3
    6dea:	469c      	mov	ip, r3
    6dec:	46b3      	mov	fp, r6
    6dee:	4653      	mov	r3, sl
    6df0:	003e      	movs	r6, r7
    6df2:	40de      	lsrs	r6, r3
    6df4:	0033      	movs	r3, r6
    6df6:	465e      	mov	r6, fp
    6df8:	431e      	orrs	r6, r3
    6dfa:	4663      	mov	r3, ip
    6dfc:	409f      	lsls	r7, r3
    6dfe:	1e7b      	subs	r3, r7, #1
    6e00:	419f      	sbcs	r7, r3
    6e02:	4653      	mov	r3, sl
    6e04:	40dc      	lsrs	r4, r3
    6e06:	4337      	orrs	r7, r6
    6e08:	18bf      	adds	r7, r7, r2
    6e0a:	4297      	cmp	r7, r2
    6e0c:	4192      	sbcs	r2, r2
    6e0e:	1864      	adds	r4, r4, r1
    6e10:	4252      	negs	r2, r2
    6e12:	18a4      	adds	r4, r4, r2
    6e14:	0006      	movs	r6, r0
    6e16:	e678      	b.n	6b0a <__aeabi_dadd+0x1ce>
    6e18:	4327      	orrs	r7, r4
    6e1a:	1e7c      	subs	r4, r7, #1
    6e1c:	41a7      	sbcs	r7, r4
    6e1e:	2400      	movs	r4, #0
    6e20:	e737      	b.n	6c92 <__aeabi_dadd+0x356>
    6e22:	4e4c      	ldr	r6, [pc, #304]	; (6f54 <__aeabi_dadd+0x618>)
    6e24:	42b0      	cmp	r0, r6
    6e26:	d036      	beq.n	6e96 <__aeabi_dadd+0x55a>
    6e28:	2680      	movs	r6, #128	; 0x80
    6e2a:	425b      	negs	r3, r3
    6e2c:	0436      	lsls	r6, r6, #16
    6e2e:	469a      	mov	sl, r3
    6e30:	4334      	orrs	r4, r6
    6e32:	e7cf      	b.n	6dd4 <__aeabi_dadd+0x498>
    6e34:	0018      	movs	r0, r3
    6e36:	4310      	orrs	r0, r2
    6e38:	d100      	bne.n	6e3c <__aeabi_dadd+0x500>
    6e3a:	e603      	b.n	6a44 <__aeabi_dadd+0x108>
    6e3c:	1ab8      	subs	r0, r7, r2
    6e3e:	4684      	mov	ip, r0
    6e40:	4567      	cmp	r7, ip
    6e42:	41ad      	sbcs	r5, r5
    6e44:	1ae0      	subs	r0, r4, r3
    6e46:	426d      	negs	r5, r5
    6e48:	1b40      	subs	r0, r0, r5
    6e4a:	0205      	lsls	r5, r0, #8
    6e4c:	d400      	bmi.n	6e50 <__aeabi_dadd+0x514>
    6e4e:	e62c      	b.n	6aaa <__aeabi_dadd+0x16e>
    6e50:	1bd7      	subs	r7, r2, r7
    6e52:	42ba      	cmp	r2, r7
    6e54:	4192      	sbcs	r2, r2
    6e56:	1b1c      	subs	r4, r3, r4
    6e58:	4252      	negs	r2, r2
    6e5a:	1aa4      	subs	r4, r4, r2
    6e5c:	46d8      	mov	r8, fp
    6e5e:	e5f1      	b.n	6a44 <__aeabi_dadd+0x108>
    6e60:	0018      	movs	r0, r3
    6e62:	4310      	orrs	r0, r2
    6e64:	d100      	bne.n	6e68 <__aeabi_dadd+0x52c>
    6e66:	e763      	b.n	6d30 <__aeabi_dadd+0x3f4>
    6e68:	08f8      	lsrs	r0, r7, #3
    6e6a:	0767      	lsls	r7, r4, #29
    6e6c:	4307      	orrs	r7, r0
    6e6e:	2080      	movs	r0, #128	; 0x80
    6e70:	08e4      	lsrs	r4, r4, #3
    6e72:	0300      	lsls	r0, r0, #12
    6e74:	4204      	tst	r4, r0
    6e76:	d008      	beq.n	6e8a <__aeabi_dadd+0x54e>
    6e78:	08dd      	lsrs	r5, r3, #3
    6e7a:	4205      	tst	r5, r0
    6e7c:	d105      	bne.n	6e8a <__aeabi_dadd+0x54e>
    6e7e:	08d2      	lsrs	r2, r2, #3
    6e80:	0759      	lsls	r1, r3, #29
    6e82:	4311      	orrs	r1, r2
    6e84:	000f      	movs	r7, r1
    6e86:	002c      	movs	r4, r5
    6e88:	46d8      	mov	r8, fp
    6e8a:	0f7b      	lsrs	r3, r7, #29
    6e8c:	00e4      	lsls	r4, r4, #3
    6e8e:	431c      	orrs	r4, r3
    6e90:	00ff      	lsls	r7, r7, #3
    6e92:	4e30      	ldr	r6, [pc, #192]	; (6f54 <__aeabi_dadd+0x618>)
    6e94:	e5d6      	b.n	6a44 <__aeabi_dadd+0x108>
    6e96:	000c      	movs	r4, r1
    6e98:	0017      	movs	r7, r2
    6e9a:	0006      	movs	r6, r0
    6e9c:	e5d2      	b.n	6a44 <__aeabi_dadd+0x108>
    6e9e:	2b00      	cmp	r3, #0
    6ea0:	d038      	beq.n	6f14 <__aeabi_dadd+0x5d8>
    6ea2:	000b      	movs	r3, r1
    6ea4:	4313      	orrs	r3, r2
    6ea6:	d100      	bne.n	6eaa <__aeabi_dadd+0x56e>
    6ea8:	e742      	b.n	6d30 <__aeabi_dadd+0x3f4>
    6eaa:	08f8      	lsrs	r0, r7, #3
    6eac:	0767      	lsls	r7, r4, #29
    6eae:	4307      	orrs	r7, r0
    6eb0:	2080      	movs	r0, #128	; 0x80
    6eb2:	08e4      	lsrs	r4, r4, #3
    6eb4:	0300      	lsls	r0, r0, #12
    6eb6:	4204      	tst	r4, r0
    6eb8:	d0e7      	beq.n	6e8a <__aeabi_dadd+0x54e>
    6eba:	08cb      	lsrs	r3, r1, #3
    6ebc:	4203      	tst	r3, r0
    6ebe:	d1e4      	bne.n	6e8a <__aeabi_dadd+0x54e>
    6ec0:	08d2      	lsrs	r2, r2, #3
    6ec2:	0749      	lsls	r1, r1, #29
    6ec4:	4311      	orrs	r1, r2
    6ec6:	000f      	movs	r7, r1
    6ec8:	001c      	movs	r4, r3
    6eca:	e7de      	b.n	6e8a <__aeabi_dadd+0x54e>
    6ecc:	2700      	movs	r7, #0
    6ece:	2400      	movs	r4, #0
    6ed0:	e5d5      	b.n	6a7e <__aeabi_dadd+0x142>
    6ed2:	2100      	movs	r1, #0
    6ed4:	e76b      	b.n	6dae <__aeabi_dadd+0x472>
    6ed6:	2500      	movs	r5, #0
    6ed8:	2700      	movs	r7, #0
    6eda:	e5f3      	b.n	6ac4 <__aeabi_dadd+0x188>
    6edc:	464e      	mov	r6, r9
    6ede:	0025      	movs	r5, r4
    6ee0:	3e20      	subs	r6, #32
    6ee2:	40f5      	lsrs	r5, r6
    6ee4:	464b      	mov	r3, r9
    6ee6:	002e      	movs	r6, r5
    6ee8:	2b20      	cmp	r3, #32
    6eea:	d02d      	beq.n	6f48 <__aeabi_dadd+0x60c>
    6eec:	2540      	movs	r5, #64	; 0x40
    6eee:	1aed      	subs	r5, r5, r3
    6ef0:	40ac      	lsls	r4, r5
    6ef2:	4327      	orrs	r7, r4
    6ef4:	1e7c      	subs	r4, r7, #1
    6ef6:	41a7      	sbcs	r7, r4
    6ef8:	2400      	movs	r4, #0
    6efa:	4337      	orrs	r7, r6
    6efc:	e6c9      	b.n	6c92 <__aeabi_dadd+0x356>
    6efe:	2480      	movs	r4, #128	; 0x80
    6f00:	2500      	movs	r5, #0
    6f02:	0324      	lsls	r4, r4, #12
    6f04:	4e13      	ldr	r6, [pc, #76]	; (6f54 <__aeabi_dadd+0x618>)
    6f06:	2700      	movs	r7, #0
    6f08:	e5dc      	b.n	6ac4 <__aeabi_dadd+0x188>
    6f0a:	4327      	orrs	r7, r4
    6f0c:	1e7c      	subs	r4, r7, #1
    6f0e:	41a7      	sbcs	r7, r4
    6f10:	2400      	movs	r4, #0
    6f12:	e779      	b.n	6e08 <__aeabi_dadd+0x4cc>
    6f14:	000c      	movs	r4, r1
    6f16:	0017      	movs	r7, r2
    6f18:	4e0e      	ldr	r6, [pc, #56]	; (6f54 <__aeabi_dadd+0x618>)
    6f1a:	e593      	b.n	6a44 <__aeabi_dadd+0x108>
    6f1c:	000c      	movs	r4, r1
    6f1e:	0017      	movs	r7, r2
    6f20:	e590      	b.n	6a44 <__aeabi_dadd+0x108>
    6f22:	4656      	mov	r6, sl
    6f24:	0023      	movs	r3, r4
    6f26:	3e20      	subs	r6, #32
    6f28:	40f3      	lsrs	r3, r6
    6f2a:	4699      	mov	r9, r3
    6f2c:	4653      	mov	r3, sl
    6f2e:	2b20      	cmp	r3, #32
    6f30:	d00e      	beq.n	6f50 <__aeabi_dadd+0x614>
    6f32:	2340      	movs	r3, #64	; 0x40
    6f34:	4656      	mov	r6, sl
    6f36:	1b9b      	subs	r3, r3, r6
    6f38:	409c      	lsls	r4, r3
    6f3a:	4327      	orrs	r7, r4
    6f3c:	1e7c      	subs	r4, r7, #1
    6f3e:	41a7      	sbcs	r7, r4
    6f40:	464b      	mov	r3, r9
    6f42:	2400      	movs	r4, #0
    6f44:	431f      	orrs	r7, r3
    6f46:	e75f      	b.n	6e08 <__aeabi_dadd+0x4cc>
    6f48:	2400      	movs	r4, #0
    6f4a:	e7d2      	b.n	6ef2 <__aeabi_dadd+0x5b6>
    6f4c:	0017      	movs	r7, r2
    6f4e:	e5b2      	b.n	6ab6 <__aeabi_dadd+0x17a>
    6f50:	2400      	movs	r4, #0
    6f52:	e7f2      	b.n	6f3a <__aeabi_dadd+0x5fe>
    6f54:	000007ff 	.word	0x000007ff
    6f58:	ff7fffff 	.word	0xff7fffff

00006f5c <__aeabi_ddiv>:
    6f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f5e:	4657      	mov	r7, sl
    6f60:	4645      	mov	r5, r8
    6f62:	46de      	mov	lr, fp
    6f64:	464e      	mov	r6, r9
    6f66:	b5e0      	push	{r5, r6, r7, lr}
    6f68:	004c      	lsls	r4, r1, #1
    6f6a:	030e      	lsls	r6, r1, #12
    6f6c:	b087      	sub	sp, #28
    6f6e:	4683      	mov	fp, r0
    6f70:	4692      	mov	sl, r2
    6f72:	001d      	movs	r5, r3
    6f74:	4680      	mov	r8, r0
    6f76:	0b36      	lsrs	r6, r6, #12
    6f78:	0d64      	lsrs	r4, r4, #21
    6f7a:	0fcf      	lsrs	r7, r1, #31
    6f7c:	2c00      	cmp	r4, #0
    6f7e:	d04f      	beq.n	7020 <__aeabi_ddiv+0xc4>
    6f80:	4b6f      	ldr	r3, [pc, #444]	; (7140 <__aeabi_ddiv+0x1e4>)
    6f82:	429c      	cmp	r4, r3
    6f84:	d035      	beq.n	6ff2 <__aeabi_ddiv+0x96>
    6f86:	2380      	movs	r3, #128	; 0x80
    6f88:	0f42      	lsrs	r2, r0, #29
    6f8a:	041b      	lsls	r3, r3, #16
    6f8c:	00f6      	lsls	r6, r6, #3
    6f8e:	4313      	orrs	r3, r2
    6f90:	4333      	orrs	r3, r6
    6f92:	4699      	mov	r9, r3
    6f94:	00c3      	lsls	r3, r0, #3
    6f96:	4698      	mov	r8, r3
    6f98:	4b6a      	ldr	r3, [pc, #424]	; (7144 <__aeabi_ddiv+0x1e8>)
    6f9a:	2600      	movs	r6, #0
    6f9c:	469c      	mov	ip, r3
    6f9e:	2300      	movs	r3, #0
    6fa0:	4464      	add	r4, ip
    6fa2:	9303      	str	r3, [sp, #12]
    6fa4:	032b      	lsls	r3, r5, #12
    6fa6:	0b1b      	lsrs	r3, r3, #12
    6fa8:	469b      	mov	fp, r3
    6faa:	006b      	lsls	r3, r5, #1
    6fac:	0fed      	lsrs	r5, r5, #31
    6fae:	4650      	mov	r0, sl
    6fb0:	0d5b      	lsrs	r3, r3, #21
    6fb2:	9501      	str	r5, [sp, #4]
    6fb4:	d05e      	beq.n	7074 <__aeabi_ddiv+0x118>
    6fb6:	4a62      	ldr	r2, [pc, #392]	; (7140 <__aeabi_ddiv+0x1e4>)
    6fb8:	4293      	cmp	r3, r2
    6fba:	d053      	beq.n	7064 <__aeabi_ddiv+0x108>
    6fbc:	465a      	mov	r2, fp
    6fbe:	00d1      	lsls	r1, r2, #3
    6fc0:	2280      	movs	r2, #128	; 0x80
    6fc2:	0f40      	lsrs	r0, r0, #29
    6fc4:	0412      	lsls	r2, r2, #16
    6fc6:	4302      	orrs	r2, r0
    6fc8:	430a      	orrs	r2, r1
    6fca:	4693      	mov	fp, r2
    6fcc:	4652      	mov	r2, sl
    6fce:	00d1      	lsls	r1, r2, #3
    6fd0:	4a5c      	ldr	r2, [pc, #368]	; (7144 <__aeabi_ddiv+0x1e8>)
    6fd2:	4694      	mov	ip, r2
    6fd4:	2200      	movs	r2, #0
    6fd6:	4463      	add	r3, ip
    6fd8:	0038      	movs	r0, r7
    6fda:	4068      	eors	r0, r5
    6fdc:	4684      	mov	ip, r0
    6fde:	9002      	str	r0, [sp, #8]
    6fe0:	1ae4      	subs	r4, r4, r3
    6fe2:	4316      	orrs	r6, r2
    6fe4:	2e0f      	cmp	r6, #15
    6fe6:	d900      	bls.n	6fea <__aeabi_ddiv+0x8e>
    6fe8:	e0b4      	b.n	7154 <__aeabi_ddiv+0x1f8>
    6fea:	4b57      	ldr	r3, [pc, #348]	; (7148 <__aeabi_ddiv+0x1ec>)
    6fec:	00b6      	lsls	r6, r6, #2
    6fee:	599b      	ldr	r3, [r3, r6]
    6ff0:	469f      	mov	pc, r3
    6ff2:	0003      	movs	r3, r0
    6ff4:	4333      	orrs	r3, r6
    6ff6:	4699      	mov	r9, r3
    6ff8:	d16c      	bne.n	70d4 <__aeabi_ddiv+0x178>
    6ffa:	2300      	movs	r3, #0
    6ffc:	4698      	mov	r8, r3
    6ffe:	3302      	adds	r3, #2
    7000:	2608      	movs	r6, #8
    7002:	9303      	str	r3, [sp, #12]
    7004:	e7ce      	b.n	6fa4 <__aeabi_ddiv+0x48>
    7006:	46cb      	mov	fp, r9
    7008:	4641      	mov	r1, r8
    700a:	9a03      	ldr	r2, [sp, #12]
    700c:	9701      	str	r7, [sp, #4]
    700e:	2a02      	cmp	r2, #2
    7010:	d165      	bne.n	70de <__aeabi_ddiv+0x182>
    7012:	9b01      	ldr	r3, [sp, #4]
    7014:	4c4a      	ldr	r4, [pc, #296]	; (7140 <__aeabi_ddiv+0x1e4>)
    7016:	469c      	mov	ip, r3
    7018:	2300      	movs	r3, #0
    701a:	2200      	movs	r2, #0
    701c:	4698      	mov	r8, r3
    701e:	e06b      	b.n	70f8 <__aeabi_ddiv+0x19c>
    7020:	0003      	movs	r3, r0
    7022:	4333      	orrs	r3, r6
    7024:	4699      	mov	r9, r3
    7026:	d04e      	beq.n	70c6 <__aeabi_ddiv+0x16a>
    7028:	2e00      	cmp	r6, #0
    702a:	d100      	bne.n	702e <__aeabi_ddiv+0xd2>
    702c:	e1bc      	b.n	73a8 <__aeabi_ddiv+0x44c>
    702e:	0030      	movs	r0, r6
    7030:	f001 f9a0 	bl	8374 <__clzsi2>
    7034:	0003      	movs	r3, r0
    7036:	3b0b      	subs	r3, #11
    7038:	2b1c      	cmp	r3, #28
    703a:	dd00      	ble.n	703e <__aeabi_ddiv+0xe2>
    703c:	e1ac      	b.n	7398 <__aeabi_ddiv+0x43c>
    703e:	221d      	movs	r2, #29
    7040:	1ad3      	subs	r3, r2, r3
    7042:	465a      	mov	r2, fp
    7044:	0001      	movs	r1, r0
    7046:	40da      	lsrs	r2, r3
    7048:	3908      	subs	r1, #8
    704a:	408e      	lsls	r6, r1
    704c:	0013      	movs	r3, r2
    704e:	4333      	orrs	r3, r6
    7050:	4699      	mov	r9, r3
    7052:	465b      	mov	r3, fp
    7054:	408b      	lsls	r3, r1
    7056:	4698      	mov	r8, r3
    7058:	2300      	movs	r3, #0
    705a:	4c3c      	ldr	r4, [pc, #240]	; (714c <__aeabi_ddiv+0x1f0>)
    705c:	2600      	movs	r6, #0
    705e:	1a24      	subs	r4, r4, r0
    7060:	9303      	str	r3, [sp, #12]
    7062:	e79f      	b.n	6fa4 <__aeabi_ddiv+0x48>
    7064:	4651      	mov	r1, sl
    7066:	465a      	mov	r2, fp
    7068:	4311      	orrs	r1, r2
    706a:	d129      	bne.n	70c0 <__aeabi_ddiv+0x164>
    706c:	2200      	movs	r2, #0
    706e:	4693      	mov	fp, r2
    7070:	3202      	adds	r2, #2
    7072:	e7b1      	b.n	6fd8 <__aeabi_ddiv+0x7c>
    7074:	4659      	mov	r1, fp
    7076:	4301      	orrs	r1, r0
    7078:	d01e      	beq.n	70b8 <__aeabi_ddiv+0x15c>
    707a:	465b      	mov	r3, fp
    707c:	2b00      	cmp	r3, #0
    707e:	d100      	bne.n	7082 <__aeabi_ddiv+0x126>
    7080:	e19e      	b.n	73c0 <__aeabi_ddiv+0x464>
    7082:	4658      	mov	r0, fp
    7084:	f001 f976 	bl	8374 <__clzsi2>
    7088:	0003      	movs	r3, r0
    708a:	3b0b      	subs	r3, #11
    708c:	2b1c      	cmp	r3, #28
    708e:	dd00      	ble.n	7092 <__aeabi_ddiv+0x136>
    7090:	e18f      	b.n	73b2 <__aeabi_ddiv+0x456>
    7092:	0002      	movs	r2, r0
    7094:	4659      	mov	r1, fp
    7096:	3a08      	subs	r2, #8
    7098:	4091      	lsls	r1, r2
    709a:	468b      	mov	fp, r1
    709c:	211d      	movs	r1, #29
    709e:	1acb      	subs	r3, r1, r3
    70a0:	4651      	mov	r1, sl
    70a2:	40d9      	lsrs	r1, r3
    70a4:	000b      	movs	r3, r1
    70a6:	4659      	mov	r1, fp
    70a8:	430b      	orrs	r3, r1
    70aa:	4651      	mov	r1, sl
    70ac:	469b      	mov	fp, r3
    70ae:	4091      	lsls	r1, r2
    70b0:	4b26      	ldr	r3, [pc, #152]	; (714c <__aeabi_ddiv+0x1f0>)
    70b2:	2200      	movs	r2, #0
    70b4:	1a1b      	subs	r3, r3, r0
    70b6:	e78f      	b.n	6fd8 <__aeabi_ddiv+0x7c>
    70b8:	2300      	movs	r3, #0
    70ba:	2201      	movs	r2, #1
    70bc:	469b      	mov	fp, r3
    70be:	e78b      	b.n	6fd8 <__aeabi_ddiv+0x7c>
    70c0:	4651      	mov	r1, sl
    70c2:	2203      	movs	r2, #3
    70c4:	e788      	b.n	6fd8 <__aeabi_ddiv+0x7c>
    70c6:	2300      	movs	r3, #0
    70c8:	4698      	mov	r8, r3
    70ca:	3301      	adds	r3, #1
    70cc:	2604      	movs	r6, #4
    70ce:	2400      	movs	r4, #0
    70d0:	9303      	str	r3, [sp, #12]
    70d2:	e767      	b.n	6fa4 <__aeabi_ddiv+0x48>
    70d4:	2303      	movs	r3, #3
    70d6:	46b1      	mov	r9, r6
    70d8:	9303      	str	r3, [sp, #12]
    70da:	260c      	movs	r6, #12
    70dc:	e762      	b.n	6fa4 <__aeabi_ddiv+0x48>
    70de:	2a03      	cmp	r2, #3
    70e0:	d100      	bne.n	70e4 <__aeabi_ddiv+0x188>
    70e2:	e25c      	b.n	759e <__aeabi_ddiv+0x642>
    70e4:	9b01      	ldr	r3, [sp, #4]
    70e6:	2a01      	cmp	r2, #1
    70e8:	d000      	beq.n	70ec <__aeabi_ddiv+0x190>
    70ea:	e1e4      	b.n	74b6 <__aeabi_ddiv+0x55a>
    70ec:	4013      	ands	r3, r2
    70ee:	469c      	mov	ip, r3
    70f0:	2300      	movs	r3, #0
    70f2:	2400      	movs	r4, #0
    70f4:	2200      	movs	r2, #0
    70f6:	4698      	mov	r8, r3
    70f8:	2100      	movs	r1, #0
    70fa:	0312      	lsls	r2, r2, #12
    70fc:	0b13      	lsrs	r3, r2, #12
    70fe:	0d0a      	lsrs	r2, r1, #20
    7100:	0512      	lsls	r2, r2, #20
    7102:	431a      	orrs	r2, r3
    7104:	0523      	lsls	r3, r4, #20
    7106:	4c12      	ldr	r4, [pc, #72]	; (7150 <__aeabi_ddiv+0x1f4>)
    7108:	4640      	mov	r0, r8
    710a:	4022      	ands	r2, r4
    710c:	4313      	orrs	r3, r2
    710e:	4662      	mov	r2, ip
    7110:	005b      	lsls	r3, r3, #1
    7112:	07d2      	lsls	r2, r2, #31
    7114:	085b      	lsrs	r3, r3, #1
    7116:	4313      	orrs	r3, r2
    7118:	0019      	movs	r1, r3
    711a:	b007      	add	sp, #28
    711c:	bc3c      	pop	{r2, r3, r4, r5}
    711e:	4690      	mov	r8, r2
    7120:	4699      	mov	r9, r3
    7122:	46a2      	mov	sl, r4
    7124:	46ab      	mov	fp, r5
    7126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7128:	2300      	movs	r3, #0
    712a:	2280      	movs	r2, #128	; 0x80
    712c:	469c      	mov	ip, r3
    712e:	0312      	lsls	r2, r2, #12
    7130:	4698      	mov	r8, r3
    7132:	4c03      	ldr	r4, [pc, #12]	; (7140 <__aeabi_ddiv+0x1e4>)
    7134:	e7e0      	b.n	70f8 <__aeabi_ddiv+0x19c>
    7136:	2300      	movs	r3, #0
    7138:	4c01      	ldr	r4, [pc, #4]	; (7140 <__aeabi_ddiv+0x1e4>)
    713a:	2200      	movs	r2, #0
    713c:	4698      	mov	r8, r3
    713e:	e7db      	b.n	70f8 <__aeabi_ddiv+0x19c>
    7140:	000007ff 	.word	0x000007ff
    7144:	fffffc01 	.word	0xfffffc01
    7148:	000086f4 	.word	0x000086f4
    714c:	fffffc0d 	.word	0xfffffc0d
    7150:	800fffff 	.word	0x800fffff
    7154:	45d9      	cmp	r9, fp
    7156:	d900      	bls.n	715a <__aeabi_ddiv+0x1fe>
    7158:	e139      	b.n	73ce <__aeabi_ddiv+0x472>
    715a:	d100      	bne.n	715e <__aeabi_ddiv+0x202>
    715c:	e134      	b.n	73c8 <__aeabi_ddiv+0x46c>
    715e:	2300      	movs	r3, #0
    7160:	4646      	mov	r6, r8
    7162:	464d      	mov	r5, r9
    7164:	469a      	mov	sl, r3
    7166:	3c01      	subs	r4, #1
    7168:	465b      	mov	r3, fp
    716a:	0e0a      	lsrs	r2, r1, #24
    716c:	021b      	lsls	r3, r3, #8
    716e:	431a      	orrs	r2, r3
    7170:	020b      	lsls	r3, r1, #8
    7172:	0c17      	lsrs	r7, r2, #16
    7174:	9303      	str	r3, [sp, #12]
    7176:	0413      	lsls	r3, r2, #16
    7178:	0c1b      	lsrs	r3, r3, #16
    717a:	0039      	movs	r1, r7
    717c:	0028      	movs	r0, r5
    717e:	4690      	mov	r8, r2
    7180:	9301      	str	r3, [sp, #4]
    7182:	f7fb f991 	bl	24a8 <__aeabi_uidiv>
    7186:	0002      	movs	r2, r0
    7188:	9b01      	ldr	r3, [sp, #4]
    718a:	4683      	mov	fp, r0
    718c:	435a      	muls	r2, r3
    718e:	0028      	movs	r0, r5
    7190:	0039      	movs	r1, r7
    7192:	4691      	mov	r9, r2
    7194:	f7fb f9d0 	bl	2538 <__aeabi_uidivmod>
    7198:	0c35      	lsrs	r5, r6, #16
    719a:	0409      	lsls	r1, r1, #16
    719c:	430d      	orrs	r5, r1
    719e:	45a9      	cmp	r9, r5
    71a0:	d90d      	bls.n	71be <__aeabi_ddiv+0x262>
    71a2:	465b      	mov	r3, fp
    71a4:	4445      	add	r5, r8
    71a6:	3b01      	subs	r3, #1
    71a8:	45a8      	cmp	r8, r5
    71aa:	d900      	bls.n	71ae <__aeabi_ddiv+0x252>
    71ac:	e13a      	b.n	7424 <__aeabi_ddiv+0x4c8>
    71ae:	45a9      	cmp	r9, r5
    71b0:	d800      	bhi.n	71b4 <__aeabi_ddiv+0x258>
    71b2:	e137      	b.n	7424 <__aeabi_ddiv+0x4c8>
    71b4:	2302      	movs	r3, #2
    71b6:	425b      	negs	r3, r3
    71b8:	469c      	mov	ip, r3
    71ba:	4445      	add	r5, r8
    71bc:	44e3      	add	fp, ip
    71be:	464b      	mov	r3, r9
    71c0:	1aeb      	subs	r3, r5, r3
    71c2:	0039      	movs	r1, r7
    71c4:	0018      	movs	r0, r3
    71c6:	9304      	str	r3, [sp, #16]
    71c8:	f7fb f96e 	bl	24a8 <__aeabi_uidiv>
    71cc:	9b01      	ldr	r3, [sp, #4]
    71ce:	0005      	movs	r5, r0
    71d0:	4343      	muls	r3, r0
    71d2:	0039      	movs	r1, r7
    71d4:	9804      	ldr	r0, [sp, #16]
    71d6:	4699      	mov	r9, r3
    71d8:	f7fb f9ae 	bl	2538 <__aeabi_uidivmod>
    71dc:	0433      	lsls	r3, r6, #16
    71de:	0409      	lsls	r1, r1, #16
    71e0:	0c1b      	lsrs	r3, r3, #16
    71e2:	430b      	orrs	r3, r1
    71e4:	4599      	cmp	r9, r3
    71e6:	d909      	bls.n	71fc <__aeabi_ddiv+0x2a0>
    71e8:	4443      	add	r3, r8
    71ea:	1e6a      	subs	r2, r5, #1
    71ec:	4598      	cmp	r8, r3
    71ee:	d900      	bls.n	71f2 <__aeabi_ddiv+0x296>
    71f0:	e11a      	b.n	7428 <__aeabi_ddiv+0x4cc>
    71f2:	4599      	cmp	r9, r3
    71f4:	d800      	bhi.n	71f8 <__aeabi_ddiv+0x29c>
    71f6:	e117      	b.n	7428 <__aeabi_ddiv+0x4cc>
    71f8:	3d02      	subs	r5, #2
    71fa:	4443      	add	r3, r8
    71fc:	464a      	mov	r2, r9
    71fe:	1a9b      	subs	r3, r3, r2
    7200:	465a      	mov	r2, fp
    7202:	0412      	lsls	r2, r2, #16
    7204:	432a      	orrs	r2, r5
    7206:	9903      	ldr	r1, [sp, #12]
    7208:	4693      	mov	fp, r2
    720a:	0c10      	lsrs	r0, r2, #16
    720c:	0c0a      	lsrs	r2, r1, #16
    720e:	4691      	mov	r9, r2
    7210:	0409      	lsls	r1, r1, #16
    7212:	465a      	mov	r2, fp
    7214:	0c09      	lsrs	r1, r1, #16
    7216:	464e      	mov	r6, r9
    7218:	000d      	movs	r5, r1
    721a:	0412      	lsls	r2, r2, #16
    721c:	0c12      	lsrs	r2, r2, #16
    721e:	4345      	muls	r5, r0
    7220:	9105      	str	r1, [sp, #20]
    7222:	4351      	muls	r1, r2
    7224:	4372      	muls	r2, r6
    7226:	4370      	muls	r0, r6
    7228:	1952      	adds	r2, r2, r5
    722a:	0c0e      	lsrs	r6, r1, #16
    722c:	18b2      	adds	r2, r6, r2
    722e:	4295      	cmp	r5, r2
    7230:	d903      	bls.n	723a <__aeabi_ddiv+0x2de>
    7232:	2580      	movs	r5, #128	; 0x80
    7234:	026d      	lsls	r5, r5, #9
    7236:	46ac      	mov	ip, r5
    7238:	4460      	add	r0, ip
    723a:	0c15      	lsrs	r5, r2, #16
    723c:	0409      	lsls	r1, r1, #16
    723e:	0412      	lsls	r2, r2, #16
    7240:	0c09      	lsrs	r1, r1, #16
    7242:	1828      	adds	r0, r5, r0
    7244:	1852      	adds	r2, r2, r1
    7246:	4283      	cmp	r3, r0
    7248:	d200      	bcs.n	724c <__aeabi_ddiv+0x2f0>
    724a:	e0ce      	b.n	73ea <__aeabi_ddiv+0x48e>
    724c:	d100      	bne.n	7250 <__aeabi_ddiv+0x2f4>
    724e:	e0c8      	b.n	73e2 <__aeabi_ddiv+0x486>
    7250:	1a1d      	subs	r5, r3, r0
    7252:	4653      	mov	r3, sl
    7254:	1a9e      	subs	r6, r3, r2
    7256:	45b2      	cmp	sl, r6
    7258:	4192      	sbcs	r2, r2
    725a:	4252      	negs	r2, r2
    725c:	1aab      	subs	r3, r5, r2
    725e:	469a      	mov	sl, r3
    7260:	4598      	cmp	r8, r3
    7262:	d100      	bne.n	7266 <__aeabi_ddiv+0x30a>
    7264:	e117      	b.n	7496 <__aeabi_ddiv+0x53a>
    7266:	0039      	movs	r1, r7
    7268:	0018      	movs	r0, r3
    726a:	f7fb f91d 	bl	24a8 <__aeabi_uidiv>
    726e:	9b01      	ldr	r3, [sp, #4]
    7270:	0005      	movs	r5, r0
    7272:	4343      	muls	r3, r0
    7274:	0039      	movs	r1, r7
    7276:	4650      	mov	r0, sl
    7278:	9304      	str	r3, [sp, #16]
    727a:	f7fb f95d 	bl	2538 <__aeabi_uidivmod>
    727e:	9804      	ldr	r0, [sp, #16]
    7280:	040b      	lsls	r3, r1, #16
    7282:	0c31      	lsrs	r1, r6, #16
    7284:	4319      	orrs	r1, r3
    7286:	4288      	cmp	r0, r1
    7288:	d909      	bls.n	729e <__aeabi_ddiv+0x342>
    728a:	4441      	add	r1, r8
    728c:	1e6b      	subs	r3, r5, #1
    728e:	4588      	cmp	r8, r1
    7290:	d900      	bls.n	7294 <__aeabi_ddiv+0x338>
    7292:	e107      	b.n	74a4 <__aeabi_ddiv+0x548>
    7294:	4288      	cmp	r0, r1
    7296:	d800      	bhi.n	729a <__aeabi_ddiv+0x33e>
    7298:	e104      	b.n	74a4 <__aeabi_ddiv+0x548>
    729a:	3d02      	subs	r5, #2
    729c:	4441      	add	r1, r8
    729e:	9b04      	ldr	r3, [sp, #16]
    72a0:	1acb      	subs	r3, r1, r3
    72a2:	0018      	movs	r0, r3
    72a4:	0039      	movs	r1, r7
    72a6:	9304      	str	r3, [sp, #16]
    72a8:	f7fb f8fe 	bl	24a8 <__aeabi_uidiv>
    72ac:	9b01      	ldr	r3, [sp, #4]
    72ae:	4682      	mov	sl, r0
    72b0:	4343      	muls	r3, r0
    72b2:	0039      	movs	r1, r7
    72b4:	9804      	ldr	r0, [sp, #16]
    72b6:	9301      	str	r3, [sp, #4]
    72b8:	f7fb f93e 	bl	2538 <__aeabi_uidivmod>
    72bc:	9801      	ldr	r0, [sp, #4]
    72be:	040b      	lsls	r3, r1, #16
    72c0:	0431      	lsls	r1, r6, #16
    72c2:	0c09      	lsrs	r1, r1, #16
    72c4:	4319      	orrs	r1, r3
    72c6:	4288      	cmp	r0, r1
    72c8:	d90d      	bls.n	72e6 <__aeabi_ddiv+0x38a>
    72ca:	4653      	mov	r3, sl
    72cc:	4441      	add	r1, r8
    72ce:	3b01      	subs	r3, #1
    72d0:	4588      	cmp	r8, r1
    72d2:	d900      	bls.n	72d6 <__aeabi_ddiv+0x37a>
    72d4:	e0e8      	b.n	74a8 <__aeabi_ddiv+0x54c>
    72d6:	4288      	cmp	r0, r1
    72d8:	d800      	bhi.n	72dc <__aeabi_ddiv+0x380>
    72da:	e0e5      	b.n	74a8 <__aeabi_ddiv+0x54c>
    72dc:	2302      	movs	r3, #2
    72de:	425b      	negs	r3, r3
    72e0:	469c      	mov	ip, r3
    72e2:	4441      	add	r1, r8
    72e4:	44e2      	add	sl, ip
    72e6:	9b01      	ldr	r3, [sp, #4]
    72e8:	042d      	lsls	r5, r5, #16
    72ea:	1ace      	subs	r6, r1, r3
    72ec:	4651      	mov	r1, sl
    72ee:	4329      	orrs	r1, r5
    72f0:	9d05      	ldr	r5, [sp, #20]
    72f2:	464f      	mov	r7, r9
    72f4:	002a      	movs	r2, r5
    72f6:	040b      	lsls	r3, r1, #16
    72f8:	0c08      	lsrs	r0, r1, #16
    72fa:	0c1b      	lsrs	r3, r3, #16
    72fc:	435a      	muls	r2, r3
    72fe:	4345      	muls	r5, r0
    7300:	437b      	muls	r3, r7
    7302:	4378      	muls	r0, r7
    7304:	195b      	adds	r3, r3, r5
    7306:	0c17      	lsrs	r7, r2, #16
    7308:	18fb      	adds	r3, r7, r3
    730a:	429d      	cmp	r5, r3
    730c:	d903      	bls.n	7316 <__aeabi_ddiv+0x3ba>
    730e:	2580      	movs	r5, #128	; 0x80
    7310:	026d      	lsls	r5, r5, #9
    7312:	46ac      	mov	ip, r5
    7314:	4460      	add	r0, ip
    7316:	0c1d      	lsrs	r5, r3, #16
    7318:	0412      	lsls	r2, r2, #16
    731a:	041b      	lsls	r3, r3, #16
    731c:	0c12      	lsrs	r2, r2, #16
    731e:	1828      	adds	r0, r5, r0
    7320:	189b      	adds	r3, r3, r2
    7322:	4286      	cmp	r6, r0
    7324:	d200      	bcs.n	7328 <__aeabi_ddiv+0x3cc>
    7326:	e093      	b.n	7450 <__aeabi_ddiv+0x4f4>
    7328:	d100      	bne.n	732c <__aeabi_ddiv+0x3d0>
    732a:	e08e      	b.n	744a <__aeabi_ddiv+0x4ee>
    732c:	2301      	movs	r3, #1
    732e:	4319      	orrs	r1, r3
    7330:	4ba0      	ldr	r3, [pc, #640]	; (75b4 <__aeabi_ddiv+0x658>)
    7332:	18e3      	adds	r3, r4, r3
    7334:	2b00      	cmp	r3, #0
    7336:	dc00      	bgt.n	733a <__aeabi_ddiv+0x3de>
    7338:	e099      	b.n	746e <__aeabi_ddiv+0x512>
    733a:	074a      	lsls	r2, r1, #29
    733c:	d000      	beq.n	7340 <__aeabi_ddiv+0x3e4>
    733e:	e09e      	b.n	747e <__aeabi_ddiv+0x522>
    7340:	465a      	mov	r2, fp
    7342:	01d2      	lsls	r2, r2, #7
    7344:	d506      	bpl.n	7354 <__aeabi_ddiv+0x3f8>
    7346:	465a      	mov	r2, fp
    7348:	4b9b      	ldr	r3, [pc, #620]	; (75b8 <__aeabi_ddiv+0x65c>)
    734a:	401a      	ands	r2, r3
    734c:	2380      	movs	r3, #128	; 0x80
    734e:	4693      	mov	fp, r2
    7350:	00db      	lsls	r3, r3, #3
    7352:	18e3      	adds	r3, r4, r3
    7354:	4a99      	ldr	r2, [pc, #612]	; (75bc <__aeabi_ddiv+0x660>)
    7356:	4293      	cmp	r3, r2
    7358:	dd68      	ble.n	742c <__aeabi_ddiv+0x4d0>
    735a:	2301      	movs	r3, #1
    735c:	9a02      	ldr	r2, [sp, #8]
    735e:	4c98      	ldr	r4, [pc, #608]	; (75c0 <__aeabi_ddiv+0x664>)
    7360:	401a      	ands	r2, r3
    7362:	2300      	movs	r3, #0
    7364:	4694      	mov	ip, r2
    7366:	4698      	mov	r8, r3
    7368:	2200      	movs	r2, #0
    736a:	e6c5      	b.n	70f8 <__aeabi_ddiv+0x19c>
    736c:	2280      	movs	r2, #128	; 0x80
    736e:	464b      	mov	r3, r9
    7370:	0312      	lsls	r2, r2, #12
    7372:	4213      	tst	r3, r2
    7374:	d00a      	beq.n	738c <__aeabi_ddiv+0x430>
    7376:	465b      	mov	r3, fp
    7378:	4213      	tst	r3, r2
    737a:	d106      	bne.n	738a <__aeabi_ddiv+0x42e>
    737c:	431a      	orrs	r2, r3
    737e:	0312      	lsls	r2, r2, #12
    7380:	0b12      	lsrs	r2, r2, #12
    7382:	46ac      	mov	ip, r5
    7384:	4688      	mov	r8, r1
    7386:	4c8e      	ldr	r4, [pc, #568]	; (75c0 <__aeabi_ddiv+0x664>)
    7388:	e6b6      	b.n	70f8 <__aeabi_ddiv+0x19c>
    738a:	464b      	mov	r3, r9
    738c:	431a      	orrs	r2, r3
    738e:	0312      	lsls	r2, r2, #12
    7390:	0b12      	lsrs	r2, r2, #12
    7392:	46bc      	mov	ip, r7
    7394:	4c8a      	ldr	r4, [pc, #552]	; (75c0 <__aeabi_ddiv+0x664>)
    7396:	e6af      	b.n	70f8 <__aeabi_ddiv+0x19c>
    7398:	0003      	movs	r3, r0
    739a:	465a      	mov	r2, fp
    739c:	3b28      	subs	r3, #40	; 0x28
    739e:	409a      	lsls	r2, r3
    73a0:	2300      	movs	r3, #0
    73a2:	4691      	mov	r9, r2
    73a4:	4698      	mov	r8, r3
    73a6:	e657      	b.n	7058 <__aeabi_ddiv+0xfc>
    73a8:	4658      	mov	r0, fp
    73aa:	f000 ffe3 	bl	8374 <__clzsi2>
    73ae:	3020      	adds	r0, #32
    73b0:	e640      	b.n	7034 <__aeabi_ddiv+0xd8>
    73b2:	0003      	movs	r3, r0
    73b4:	4652      	mov	r2, sl
    73b6:	3b28      	subs	r3, #40	; 0x28
    73b8:	409a      	lsls	r2, r3
    73ba:	2100      	movs	r1, #0
    73bc:	4693      	mov	fp, r2
    73be:	e677      	b.n	70b0 <__aeabi_ddiv+0x154>
    73c0:	f000 ffd8 	bl	8374 <__clzsi2>
    73c4:	3020      	adds	r0, #32
    73c6:	e65f      	b.n	7088 <__aeabi_ddiv+0x12c>
    73c8:	4588      	cmp	r8, r1
    73ca:	d200      	bcs.n	73ce <__aeabi_ddiv+0x472>
    73cc:	e6c7      	b.n	715e <__aeabi_ddiv+0x202>
    73ce:	464b      	mov	r3, r9
    73d0:	07de      	lsls	r6, r3, #31
    73d2:	085d      	lsrs	r5, r3, #1
    73d4:	4643      	mov	r3, r8
    73d6:	085b      	lsrs	r3, r3, #1
    73d8:	431e      	orrs	r6, r3
    73da:	4643      	mov	r3, r8
    73dc:	07db      	lsls	r3, r3, #31
    73de:	469a      	mov	sl, r3
    73e0:	e6c2      	b.n	7168 <__aeabi_ddiv+0x20c>
    73e2:	2500      	movs	r5, #0
    73e4:	4592      	cmp	sl, r2
    73e6:	d300      	bcc.n	73ea <__aeabi_ddiv+0x48e>
    73e8:	e733      	b.n	7252 <__aeabi_ddiv+0x2f6>
    73ea:	9e03      	ldr	r6, [sp, #12]
    73ec:	4659      	mov	r1, fp
    73ee:	46b4      	mov	ip, r6
    73f0:	44e2      	add	sl, ip
    73f2:	45b2      	cmp	sl, r6
    73f4:	41ad      	sbcs	r5, r5
    73f6:	426d      	negs	r5, r5
    73f8:	4445      	add	r5, r8
    73fa:	18eb      	adds	r3, r5, r3
    73fc:	3901      	subs	r1, #1
    73fe:	4598      	cmp	r8, r3
    7400:	d207      	bcs.n	7412 <__aeabi_ddiv+0x4b6>
    7402:	4298      	cmp	r0, r3
    7404:	d900      	bls.n	7408 <__aeabi_ddiv+0x4ac>
    7406:	e07f      	b.n	7508 <__aeabi_ddiv+0x5ac>
    7408:	d100      	bne.n	740c <__aeabi_ddiv+0x4b0>
    740a:	e0bc      	b.n	7586 <__aeabi_ddiv+0x62a>
    740c:	1a1d      	subs	r5, r3, r0
    740e:	468b      	mov	fp, r1
    7410:	e71f      	b.n	7252 <__aeabi_ddiv+0x2f6>
    7412:	4598      	cmp	r8, r3
    7414:	d1fa      	bne.n	740c <__aeabi_ddiv+0x4b0>
    7416:	9d03      	ldr	r5, [sp, #12]
    7418:	4555      	cmp	r5, sl
    741a:	d9f2      	bls.n	7402 <__aeabi_ddiv+0x4a6>
    741c:	4643      	mov	r3, r8
    741e:	468b      	mov	fp, r1
    7420:	1a1d      	subs	r5, r3, r0
    7422:	e716      	b.n	7252 <__aeabi_ddiv+0x2f6>
    7424:	469b      	mov	fp, r3
    7426:	e6ca      	b.n	71be <__aeabi_ddiv+0x262>
    7428:	0015      	movs	r5, r2
    742a:	e6e7      	b.n	71fc <__aeabi_ddiv+0x2a0>
    742c:	465a      	mov	r2, fp
    742e:	08c9      	lsrs	r1, r1, #3
    7430:	0752      	lsls	r2, r2, #29
    7432:	430a      	orrs	r2, r1
    7434:	055b      	lsls	r3, r3, #21
    7436:	4690      	mov	r8, r2
    7438:	0d5c      	lsrs	r4, r3, #21
    743a:	465a      	mov	r2, fp
    743c:	2301      	movs	r3, #1
    743e:	9902      	ldr	r1, [sp, #8]
    7440:	0252      	lsls	r2, r2, #9
    7442:	4019      	ands	r1, r3
    7444:	0b12      	lsrs	r2, r2, #12
    7446:	468c      	mov	ip, r1
    7448:	e656      	b.n	70f8 <__aeabi_ddiv+0x19c>
    744a:	2b00      	cmp	r3, #0
    744c:	d100      	bne.n	7450 <__aeabi_ddiv+0x4f4>
    744e:	e76f      	b.n	7330 <__aeabi_ddiv+0x3d4>
    7450:	4446      	add	r6, r8
    7452:	1e4a      	subs	r2, r1, #1
    7454:	45b0      	cmp	r8, r6
    7456:	d929      	bls.n	74ac <__aeabi_ddiv+0x550>
    7458:	0011      	movs	r1, r2
    745a:	4286      	cmp	r6, r0
    745c:	d000      	beq.n	7460 <__aeabi_ddiv+0x504>
    745e:	e765      	b.n	732c <__aeabi_ddiv+0x3d0>
    7460:	9a03      	ldr	r2, [sp, #12]
    7462:	4293      	cmp	r3, r2
    7464:	d000      	beq.n	7468 <__aeabi_ddiv+0x50c>
    7466:	e761      	b.n	732c <__aeabi_ddiv+0x3d0>
    7468:	e762      	b.n	7330 <__aeabi_ddiv+0x3d4>
    746a:	2101      	movs	r1, #1
    746c:	4249      	negs	r1, r1
    746e:	2001      	movs	r0, #1
    7470:	1ac2      	subs	r2, r0, r3
    7472:	2a38      	cmp	r2, #56	; 0x38
    7474:	dd21      	ble.n	74ba <__aeabi_ddiv+0x55e>
    7476:	9b02      	ldr	r3, [sp, #8]
    7478:	4003      	ands	r3, r0
    747a:	469c      	mov	ip, r3
    747c:	e638      	b.n	70f0 <__aeabi_ddiv+0x194>
    747e:	220f      	movs	r2, #15
    7480:	400a      	ands	r2, r1
    7482:	2a04      	cmp	r2, #4
    7484:	d100      	bne.n	7488 <__aeabi_ddiv+0x52c>
    7486:	e75b      	b.n	7340 <__aeabi_ddiv+0x3e4>
    7488:	000a      	movs	r2, r1
    748a:	1d11      	adds	r1, r2, #4
    748c:	4291      	cmp	r1, r2
    748e:	4192      	sbcs	r2, r2
    7490:	4252      	negs	r2, r2
    7492:	4493      	add	fp, r2
    7494:	e754      	b.n	7340 <__aeabi_ddiv+0x3e4>
    7496:	4b47      	ldr	r3, [pc, #284]	; (75b4 <__aeabi_ddiv+0x658>)
    7498:	18e3      	adds	r3, r4, r3
    749a:	2b00      	cmp	r3, #0
    749c:	dde5      	ble.n	746a <__aeabi_ddiv+0x50e>
    749e:	2201      	movs	r2, #1
    74a0:	4252      	negs	r2, r2
    74a2:	e7f2      	b.n	748a <__aeabi_ddiv+0x52e>
    74a4:	001d      	movs	r5, r3
    74a6:	e6fa      	b.n	729e <__aeabi_ddiv+0x342>
    74a8:	469a      	mov	sl, r3
    74aa:	e71c      	b.n	72e6 <__aeabi_ddiv+0x38a>
    74ac:	42b0      	cmp	r0, r6
    74ae:	d839      	bhi.n	7524 <__aeabi_ddiv+0x5c8>
    74b0:	d06e      	beq.n	7590 <__aeabi_ddiv+0x634>
    74b2:	0011      	movs	r1, r2
    74b4:	e73a      	b.n	732c <__aeabi_ddiv+0x3d0>
    74b6:	9302      	str	r3, [sp, #8]
    74b8:	e73a      	b.n	7330 <__aeabi_ddiv+0x3d4>
    74ba:	2a1f      	cmp	r2, #31
    74bc:	dc3c      	bgt.n	7538 <__aeabi_ddiv+0x5dc>
    74be:	2320      	movs	r3, #32
    74c0:	1a9b      	subs	r3, r3, r2
    74c2:	000c      	movs	r4, r1
    74c4:	4658      	mov	r0, fp
    74c6:	4099      	lsls	r1, r3
    74c8:	4098      	lsls	r0, r3
    74ca:	1e4b      	subs	r3, r1, #1
    74cc:	4199      	sbcs	r1, r3
    74ce:	465b      	mov	r3, fp
    74d0:	40d4      	lsrs	r4, r2
    74d2:	40d3      	lsrs	r3, r2
    74d4:	4320      	orrs	r0, r4
    74d6:	4308      	orrs	r0, r1
    74d8:	001a      	movs	r2, r3
    74da:	0743      	lsls	r3, r0, #29
    74dc:	d009      	beq.n	74f2 <__aeabi_ddiv+0x596>
    74de:	230f      	movs	r3, #15
    74e0:	4003      	ands	r3, r0
    74e2:	2b04      	cmp	r3, #4
    74e4:	d005      	beq.n	74f2 <__aeabi_ddiv+0x596>
    74e6:	0001      	movs	r1, r0
    74e8:	1d08      	adds	r0, r1, #4
    74ea:	4288      	cmp	r0, r1
    74ec:	419b      	sbcs	r3, r3
    74ee:	425b      	negs	r3, r3
    74f0:	18d2      	adds	r2, r2, r3
    74f2:	0213      	lsls	r3, r2, #8
    74f4:	d53a      	bpl.n	756c <__aeabi_ddiv+0x610>
    74f6:	2301      	movs	r3, #1
    74f8:	9a02      	ldr	r2, [sp, #8]
    74fa:	2401      	movs	r4, #1
    74fc:	401a      	ands	r2, r3
    74fe:	2300      	movs	r3, #0
    7500:	4694      	mov	ip, r2
    7502:	4698      	mov	r8, r3
    7504:	2200      	movs	r2, #0
    7506:	e5f7      	b.n	70f8 <__aeabi_ddiv+0x19c>
    7508:	2102      	movs	r1, #2
    750a:	4249      	negs	r1, r1
    750c:	468c      	mov	ip, r1
    750e:	9d03      	ldr	r5, [sp, #12]
    7510:	44e3      	add	fp, ip
    7512:	46ac      	mov	ip, r5
    7514:	44e2      	add	sl, ip
    7516:	45aa      	cmp	sl, r5
    7518:	41ad      	sbcs	r5, r5
    751a:	426d      	negs	r5, r5
    751c:	4445      	add	r5, r8
    751e:	18ed      	adds	r5, r5, r3
    7520:	1a2d      	subs	r5, r5, r0
    7522:	e696      	b.n	7252 <__aeabi_ddiv+0x2f6>
    7524:	1e8a      	subs	r2, r1, #2
    7526:	9903      	ldr	r1, [sp, #12]
    7528:	004d      	lsls	r5, r1, #1
    752a:	428d      	cmp	r5, r1
    752c:	4189      	sbcs	r1, r1
    752e:	4249      	negs	r1, r1
    7530:	4441      	add	r1, r8
    7532:	1876      	adds	r6, r6, r1
    7534:	9503      	str	r5, [sp, #12]
    7536:	e78f      	b.n	7458 <__aeabi_ddiv+0x4fc>
    7538:	201f      	movs	r0, #31
    753a:	4240      	negs	r0, r0
    753c:	1ac3      	subs	r3, r0, r3
    753e:	4658      	mov	r0, fp
    7540:	40d8      	lsrs	r0, r3
    7542:	0003      	movs	r3, r0
    7544:	2a20      	cmp	r2, #32
    7546:	d028      	beq.n	759a <__aeabi_ddiv+0x63e>
    7548:	2040      	movs	r0, #64	; 0x40
    754a:	465d      	mov	r5, fp
    754c:	1a82      	subs	r2, r0, r2
    754e:	4095      	lsls	r5, r2
    7550:	4329      	orrs	r1, r5
    7552:	1e4a      	subs	r2, r1, #1
    7554:	4191      	sbcs	r1, r2
    7556:	4319      	orrs	r1, r3
    7558:	2307      	movs	r3, #7
    755a:	2200      	movs	r2, #0
    755c:	400b      	ands	r3, r1
    755e:	d009      	beq.n	7574 <__aeabi_ddiv+0x618>
    7560:	230f      	movs	r3, #15
    7562:	2200      	movs	r2, #0
    7564:	400b      	ands	r3, r1
    7566:	0008      	movs	r0, r1
    7568:	2b04      	cmp	r3, #4
    756a:	d1bd      	bne.n	74e8 <__aeabi_ddiv+0x58c>
    756c:	0001      	movs	r1, r0
    756e:	0753      	lsls	r3, r2, #29
    7570:	0252      	lsls	r2, r2, #9
    7572:	0b12      	lsrs	r2, r2, #12
    7574:	08c9      	lsrs	r1, r1, #3
    7576:	4319      	orrs	r1, r3
    7578:	2301      	movs	r3, #1
    757a:	4688      	mov	r8, r1
    757c:	9902      	ldr	r1, [sp, #8]
    757e:	2400      	movs	r4, #0
    7580:	4019      	ands	r1, r3
    7582:	468c      	mov	ip, r1
    7584:	e5b8      	b.n	70f8 <__aeabi_ddiv+0x19c>
    7586:	4552      	cmp	r2, sl
    7588:	d8be      	bhi.n	7508 <__aeabi_ddiv+0x5ac>
    758a:	468b      	mov	fp, r1
    758c:	2500      	movs	r5, #0
    758e:	e660      	b.n	7252 <__aeabi_ddiv+0x2f6>
    7590:	9d03      	ldr	r5, [sp, #12]
    7592:	429d      	cmp	r5, r3
    7594:	d3c6      	bcc.n	7524 <__aeabi_ddiv+0x5c8>
    7596:	0011      	movs	r1, r2
    7598:	e762      	b.n	7460 <__aeabi_ddiv+0x504>
    759a:	2500      	movs	r5, #0
    759c:	e7d8      	b.n	7550 <__aeabi_ddiv+0x5f4>
    759e:	2280      	movs	r2, #128	; 0x80
    75a0:	465b      	mov	r3, fp
    75a2:	0312      	lsls	r2, r2, #12
    75a4:	431a      	orrs	r2, r3
    75a6:	9b01      	ldr	r3, [sp, #4]
    75a8:	0312      	lsls	r2, r2, #12
    75aa:	0b12      	lsrs	r2, r2, #12
    75ac:	469c      	mov	ip, r3
    75ae:	4688      	mov	r8, r1
    75b0:	4c03      	ldr	r4, [pc, #12]	; (75c0 <__aeabi_ddiv+0x664>)
    75b2:	e5a1      	b.n	70f8 <__aeabi_ddiv+0x19c>
    75b4:	000003ff 	.word	0x000003ff
    75b8:	feffffff 	.word	0xfeffffff
    75bc:	000007fe 	.word	0x000007fe
    75c0:	000007ff 	.word	0x000007ff

000075c4 <__eqdf2>:
    75c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    75c6:	464f      	mov	r7, r9
    75c8:	4646      	mov	r6, r8
    75ca:	46d6      	mov	lr, sl
    75cc:	005c      	lsls	r4, r3, #1
    75ce:	b5c0      	push	{r6, r7, lr}
    75d0:	031f      	lsls	r7, r3, #12
    75d2:	0fdb      	lsrs	r3, r3, #31
    75d4:	469a      	mov	sl, r3
    75d6:	4b17      	ldr	r3, [pc, #92]	; (7634 <__eqdf2+0x70>)
    75d8:	030e      	lsls	r6, r1, #12
    75da:	004d      	lsls	r5, r1, #1
    75dc:	4684      	mov	ip, r0
    75de:	4680      	mov	r8, r0
    75e0:	0b36      	lsrs	r6, r6, #12
    75e2:	0d6d      	lsrs	r5, r5, #21
    75e4:	0fc9      	lsrs	r1, r1, #31
    75e6:	4691      	mov	r9, r2
    75e8:	0b3f      	lsrs	r7, r7, #12
    75ea:	0d64      	lsrs	r4, r4, #21
    75ec:	2001      	movs	r0, #1
    75ee:	429d      	cmp	r5, r3
    75f0:	d008      	beq.n	7604 <__eqdf2+0x40>
    75f2:	429c      	cmp	r4, r3
    75f4:	d001      	beq.n	75fa <__eqdf2+0x36>
    75f6:	42a5      	cmp	r5, r4
    75f8:	d00b      	beq.n	7612 <__eqdf2+0x4e>
    75fa:	bc1c      	pop	{r2, r3, r4}
    75fc:	4690      	mov	r8, r2
    75fe:	4699      	mov	r9, r3
    7600:	46a2      	mov	sl, r4
    7602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7604:	4663      	mov	r3, ip
    7606:	4333      	orrs	r3, r6
    7608:	d1f7      	bne.n	75fa <__eqdf2+0x36>
    760a:	42ac      	cmp	r4, r5
    760c:	d1f5      	bne.n	75fa <__eqdf2+0x36>
    760e:	433a      	orrs	r2, r7
    7610:	d1f3      	bne.n	75fa <__eqdf2+0x36>
    7612:	2001      	movs	r0, #1
    7614:	42be      	cmp	r6, r7
    7616:	d1f0      	bne.n	75fa <__eqdf2+0x36>
    7618:	45c8      	cmp	r8, r9
    761a:	d1ee      	bne.n	75fa <__eqdf2+0x36>
    761c:	4551      	cmp	r1, sl
    761e:	d007      	beq.n	7630 <__eqdf2+0x6c>
    7620:	2d00      	cmp	r5, #0
    7622:	d1ea      	bne.n	75fa <__eqdf2+0x36>
    7624:	4663      	mov	r3, ip
    7626:	431e      	orrs	r6, r3
    7628:	0030      	movs	r0, r6
    762a:	1e46      	subs	r6, r0, #1
    762c:	41b0      	sbcs	r0, r6
    762e:	e7e4      	b.n	75fa <__eqdf2+0x36>
    7630:	2000      	movs	r0, #0
    7632:	e7e2      	b.n	75fa <__eqdf2+0x36>
    7634:	000007ff 	.word	0x000007ff

00007638 <__gedf2>:
    7638:	b5f0      	push	{r4, r5, r6, r7, lr}
    763a:	4645      	mov	r5, r8
    763c:	46de      	mov	lr, fp
    763e:	4657      	mov	r7, sl
    7640:	464e      	mov	r6, r9
    7642:	b5e0      	push	{r5, r6, r7, lr}
    7644:	031f      	lsls	r7, r3, #12
    7646:	0b3d      	lsrs	r5, r7, #12
    7648:	4f2c      	ldr	r7, [pc, #176]	; (76fc <__gedf2+0xc4>)
    764a:	030e      	lsls	r6, r1, #12
    764c:	004c      	lsls	r4, r1, #1
    764e:	46ab      	mov	fp, r5
    7650:	005d      	lsls	r5, r3, #1
    7652:	4684      	mov	ip, r0
    7654:	0b36      	lsrs	r6, r6, #12
    7656:	0d64      	lsrs	r4, r4, #21
    7658:	0fc9      	lsrs	r1, r1, #31
    765a:	4690      	mov	r8, r2
    765c:	0d6d      	lsrs	r5, r5, #21
    765e:	0fdb      	lsrs	r3, r3, #31
    7660:	42bc      	cmp	r4, r7
    7662:	d02a      	beq.n	76ba <__gedf2+0x82>
    7664:	4f25      	ldr	r7, [pc, #148]	; (76fc <__gedf2+0xc4>)
    7666:	42bd      	cmp	r5, r7
    7668:	d02d      	beq.n	76c6 <__gedf2+0x8e>
    766a:	2c00      	cmp	r4, #0
    766c:	d10f      	bne.n	768e <__gedf2+0x56>
    766e:	4330      	orrs	r0, r6
    7670:	0007      	movs	r7, r0
    7672:	4681      	mov	r9, r0
    7674:	4278      	negs	r0, r7
    7676:	4178      	adcs	r0, r7
    7678:	b2c0      	uxtb	r0, r0
    767a:	2d00      	cmp	r5, #0
    767c:	d117      	bne.n	76ae <__gedf2+0x76>
    767e:	465f      	mov	r7, fp
    7680:	433a      	orrs	r2, r7
    7682:	d114      	bne.n	76ae <__gedf2+0x76>
    7684:	464b      	mov	r3, r9
    7686:	2000      	movs	r0, #0
    7688:	2b00      	cmp	r3, #0
    768a:	d00a      	beq.n	76a2 <__gedf2+0x6a>
    768c:	e006      	b.n	769c <__gedf2+0x64>
    768e:	2d00      	cmp	r5, #0
    7690:	d102      	bne.n	7698 <__gedf2+0x60>
    7692:	4658      	mov	r0, fp
    7694:	4302      	orrs	r2, r0
    7696:	d001      	beq.n	769c <__gedf2+0x64>
    7698:	4299      	cmp	r1, r3
    769a:	d018      	beq.n	76ce <__gedf2+0x96>
    769c:	4248      	negs	r0, r1
    769e:	2101      	movs	r1, #1
    76a0:	4308      	orrs	r0, r1
    76a2:	bc3c      	pop	{r2, r3, r4, r5}
    76a4:	4690      	mov	r8, r2
    76a6:	4699      	mov	r9, r3
    76a8:	46a2      	mov	sl, r4
    76aa:	46ab      	mov	fp, r5
    76ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76ae:	2800      	cmp	r0, #0
    76b0:	d0f2      	beq.n	7698 <__gedf2+0x60>
    76b2:	2001      	movs	r0, #1
    76b4:	3b01      	subs	r3, #1
    76b6:	4318      	orrs	r0, r3
    76b8:	e7f3      	b.n	76a2 <__gedf2+0x6a>
    76ba:	0037      	movs	r7, r6
    76bc:	4307      	orrs	r7, r0
    76be:	d0d1      	beq.n	7664 <__gedf2+0x2c>
    76c0:	2002      	movs	r0, #2
    76c2:	4240      	negs	r0, r0
    76c4:	e7ed      	b.n	76a2 <__gedf2+0x6a>
    76c6:	465f      	mov	r7, fp
    76c8:	4317      	orrs	r7, r2
    76ca:	d0ce      	beq.n	766a <__gedf2+0x32>
    76cc:	e7f8      	b.n	76c0 <__gedf2+0x88>
    76ce:	42ac      	cmp	r4, r5
    76d0:	dce4      	bgt.n	769c <__gedf2+0x64>
    76d2:	da03      	bge.n	76dc <__gedf2+0xa4>
    76d4:	1e48      	subs	r0, r1, #1
    76d6:	2101      	movs	r1, #1
    76d8:	4308      	orrs	r0, r1
    76da:	e7e2      	b.n	76a2 <__gedf2+0x6a>
    76dc:	455e      	cmp	r6, fp
    76de:	d8dd      	bhi.n	769c <__gedf2+0x64>
    76e0:	d006      	beq.n	76f0 <__gedf2+0xb8>
    76e2:	2000      	movs	r0, #0
    76e4:	455e      	cmp	r6, fp
    76e6:	d2dc      	bcs.n	76a2 <__gedf2+0x6a>
    76e8:	2301      	movs	r3, #1
    76ea:	1e48      	subs	r0, r1, #1
    76ec:	4318      	orrs	r0, r3
    76ee:	e7d8      	b.n	76a2 <__gedf2+0x6a>
    76f0:	45c4      	cmp	ip, r8
    76f2:	d8d3      	bhi.n	769c <__gedf2+0x64>
    76f4:	2000      	movs	r0, #0
    76f6:	45c4      	cmp	ip, r8
    76f8:	d3f6      	bcc.n	76e8 <__gedf2+0xb0>
    76fa:	e7d2      	b.n	76a2 <__gedf2+0x6a>
    76fc:	000007ff 	.word	0x000007ff

00007700 <__ledf2>:
    7700:	b5f0      	push	{r4, r5, r6, r7, lr}
    7702:	464e      	mov	r6, r9
    7704:	4645      	mov	r5, r8
    7706:	46de      	mov	lr, fp
    7708:	4657      	mov	r7, sl
    770a:	005c      	lsls	r4, r3, #1
    770c:	b5e0      	push	{r5, r6, r7, lr}
    770e:	031f      	lsls	r7, r3, #12
    7710:	0fdb      	lsrs	r3, r3, #31
    7712:	4699      	mov	r9, r3
    7714:	4b2a      	ldr	r3, [pc, #168]	; (77c0 <__ledf2+0xc0>)
    7716:	030e      	lsls	r6, r1, #12
    7718:	004d      	lsls	r5, r1, #1
    771a:	0fc9      	lsrs	r1, r1, #31
    771c:	4684      	mov	ip, r0
    771e:	0b36      	lsrs	r6, r6, #12
    7720:	0d6d      	lsrs	r5, r5, #21
    7722:	468b      	mov	fp, r1
    7724:	4690      	mov	r8, r2
    7726:	0b3f      	lsrs	r7, r7, #12
    7728:	0d64      	lsrs	r4, r4, #21
    772a:	429d      	cmp	r5, r3
    772c:	d020      	beq.n	7770 <__ledf2+0x70>
    772e:	4b24      	ldr	r3, [pc, #144]	; (77c0 <__ledf2+0xc0>)
    7730:	429c      	cmp	r4, r3
    7732:	d022      	beq.n	777a <__ledf2+0x7a>
    7734:	2d00      	cmp	r5, #0
    7736:	d112      	bne.n	775e <__ledf2+0x5e>
    7738:	4330      	orrs	r0, r6
    773a:	4243      	negs	r3, r0
    773c:	4143      	adcs	r3, r0
    773e:	b2db      	uxtb	r3, r3
    7740:	2c00      	cmp	r4, #0
    7742:	d01f      	beq.n	7784 <__ledf2+0x84>
    7744:	2b00      	cmp	r3, #0
    7746:	d00c      	beq.n	7762 <__ledf2+0x62>
    7748:	464b      	mov	r3, r9
    774a:	2001      	movs	r0, #1
    774c:	3b01      	subs	r3, #1
    774e:	4303      	orrs	r3, r0
    7750:	0018      	movs	r0, r3
    7752:	bc3c      	pop	{r2, r3, r4, r5}
    7754:	4690      	mov	r8, r2
    7756:	4699      	mov	r9, r3
    7758:	46a2      	mov	sl, r4
    775a:	46ab      	mov	fp, r5
    775c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    775e:	2c00      	cmp	r4, #0
    7760:	d016      	beq.n	7790 <__ledf2+0x90>
    7762:	45cb      	cmp	fp, r9
    7764:	d017      	beq.n	7796 <__ledf2+0x96>
    7766:	465b      	mov	r3, fp
    7768:	4259      	negs	r1, r3
    776a:	2301      	movs	r3, #1
    776c:	430b      	orrs	r3, r1
    776e:	e7ef      	b.n	7750 <__ledf2+0x50>
    7770:	0031      	movs	r1, r6
    7772:	2302      	movs	r3, #2
    7774:	4301      	orrs	r1, r0
    7776:	d1eb      	bne.n	7750 <__ledf2+0x50>
    7778:	e7d9      	b.n	772e <__ledf2+0x2e>
    777a:	0039      	movs	r1, r7
    777c:	2302      	movs	r3, #2
    777e:	4311      	orrs	r1, r2
    7780:	d1e6      	bne.n	7750 <__ledf2+0x50>
    7782:	e7d7      	b.n	7734 <__ledf2+0x34>
    7784:	433a      	orrs	r2, r7
    7786:	d1dd      	bne.n	7744 <__ledf2+0x44>
    7788:	2300      	movs	r3, #0
    778a:	2800      	cmp	r0, #0
    778c:	d0e0      	beq.n	7750 <__ledf2+0x50>
    778e:	e7ea      	b.n	7766 <__ledf2+0x66>
    7790:	433a      	orrs	r2, r7
    7792:	d1e6      	bne.n	7762 <__ledf2+0x62>
    7794:	e7e7      	b.n	7766 <__ledf2+0x66>
    7796:	42a5      	cmp	r5, r4
    7798:	dce5      	bgt.n	7766 <__ledf2+0x66>
    779a:	db05      	blt.n	77a8 <__ledf2+0xa8>
    779c:	42be      	cmp	r6, r7
    779e:	d8e2      	bhi.n	7766 <__ledf2+0x66>
    77a0:	d007      	beq.n	77b2 <__ledf2+0xb2>
    77a2:	2300      	movs	r3, #0
    77a4:	42be      	cmp	r6, r7
    77a6:	d2d3      	bcs.n	7750 <__ledf2+0x50>
    77a8:	4659      	mov	r1, fp
    77aa:	2301      	movs	r3, #1
    77ac:	3901      	subs	r1, #1
    77ae:	430b      	orrs	r3, r1
    77b0:	e7ce      	b.n	7750 <__ledf2+0x50>
    77b2:	45c4      	cmp	ip, r8
    77b4:	d8d7      	bhi.n	7766 <__ledf2+0x66>
    77b6:	2300      	movs	r3, #0
    77b8:	45c4      	cmp	ip, r8
    77ba:	d3f5      	bcc.n	77a8 <__ledf2+0xa8>
    77bc:	e7c8      	b.n	7750 <__ledf2+0x50>
    77be:	46c0      	nop			; (mov r8, r8)
    77c0:	000007ff 	.word	0x000007ff

000077c4 <__aeabi_dmul>:
    77c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    77c6:	4657      	mov	r7, sl
    77c8:	4645      	mov	r5, r8
    77ca:	46de      	mov	lr, fp
    77cc:	464e      	mov	r6, r9
    77ce:	b5e0      	push	{r5, r6, r7, lr}
    77d0:	030c      	lsls	r4, r1, #12
    77d2:	4698      	mov	r8, r3
    77d4:	004e      	lsls	r6, r1, #1
    77d6:	0b23      	lsrs	r3, r4, #12
    77d8:	b087      	sub	sp, #28
    77da:	0007      	movs	r7, r0
    77dc:	4692      	mov	sl, r2
    77de:	469b      	mov	fp, r3
    77e0:	0d76      	lsrs	r6, r6, #21
    77e2:	0fcd      	lsrs	r5, r1, #31
    77e4:	2e00      	cmp	r6, #0
    77e6:	d06b      	beq.n	78c0 <__aeabi_dmul+0xfc>
    77e8:	4b6d      	ldr	r3, [pc, #436]	; (79a0 <__aeabi_dmul+0x1dc>)
    77ea:	429e      	cmp	r6, r3
    77ec:	d035      	beq.n	785a <__aeabi_dmul+0x96>
    77ee:	2480      	movs	r4, #128	; 0x80
    77f0:	465b      	mov	r3, fp
    77f2:	0f42      	lsrs	r2, r0, #29
    77f4:	0424      	lsls	r4, r4, #16
    77f6:	00db      	lsls	r3, r3, #3
    77f8:	4314      	orrs	r4, r2
    77fa:	431c      	orrs	r4, r3
    77fc:	00c3      	lsls	r3, r0, #3
    77fe:	4699      	mov	r9, r3
    7800:	4b68      	ldr	r3, [pc, #416]	; (79a4 <__aeabi_dmul+0x1e0>)
    7802:	46a3      	mov	fp, r4
    7804:	469c      	mov	ip, r3
    7806:	2300      	movs	r3, #0
    7808:	2700      	movs	r7, #0
    780a:	4466      	add	r6, ip
    780c:	9302      	str	r3, [sp, #8]
    780e:	4643      	mov	r3, r8
    7810:	031c      	lsls	r4, r3, #12
    7812:	005a      	lsls	r2, r3, #1
    7814:	0fdb      	lsrs	r3, r3, #31
    7816:	4650      	mov	r0, sl
    7818:	0b24      	lsrs	r4, r4, #12
    781a:	0d52      	lsrs	r2, r2, #21
    781c:	4698      	mov	r8, r3
    781e:	d100      	bne.n	7822 <__aeabi_dmul+0x5e>
    7820:	e076      	b.n	7910 <__aeabi_dmul+0x14c>
    7822:	4b5f      	ldr	r3, [pc, #380]	; (79a0 <__aeabi_dmul+0x1dc>)
    7824:	429a      	cmp	r2, r3
    7826:	d06d      	beq.n	7904 <__aeabi_dmul+0x140>
    7828:	2380      	movs	r3, #128	; 0x80
    782a:	0f41      	lsrs	r1, r0, #29
    782c:	041b      	lsls	r3, r3, #16
    782e:	430b      	orrs	r3, r1
    7830:	495c      	ldr	r1, [pc, #368]	; (79a4 <__aeabi_dmul+0x1e0>)
    7832:	00e4      	lsls	r4, r4, #3
    7834:	468c      	mov	ip, r1
    7836:	431c      	orrs	r4, r3
    7838:	00c3      	lsls	r3, r0, #3
    783a:	2000      	movs	r0, #0
    783c:	4462      	add	r2, ip
    783e:	4641      	mov	r1, r8
    7840:	18b6      	adds	r6, r6, r2
    7842:	4069      	eors	r1, r5
    7844:	1c72      	adds	r2, r6, #1
    7846:	9101      	str	r1, [sp, #4]
    7848:	4694      	mov	ip, r2
    784a:	4307      	orrs	r7, r0
    784c:	2f0f      	cmp	r7, #15
    784e:	d900      	bls.n	7852 <__aeabi_dmul+0x8e>
    7850:	e0b0      	b.n	79b4 <__aeabi_dmul+0x1f0>
    7852:	4a55      	ldr	r2, [pc, #340]	; (79a8 <__aeabi_dmul+0x1e4>)
    7854:	00bf      	lsls	r7, r7, #2
    7856:	59d2      	ldr	r2, [r2, r7]
    7858:	4697      	mov	pc, r2
    785a:	465b      	mov	r3, fp
    785c:	4303      	orrs	r3, r0
    785e:	4699      	mov	r9, r3
    7860:	d000      	beq.n	7864 <__aeabi_dmul+0xa0>
    7862:	e087      	b.n	7974 <__aeabi_dmul+0x1b0>
    7864:	2300      	movs	r3, #0
    7866:	469b      	mov	fp, r3
    7868:	3302      	adds	r3, #2
    786a:	2708      	movs	r7, #8
    786c:	9302      	str	r3, [sp, #8]
    786e:	e7ce      	b.n	780e <__aeabi_dmul+0x4a>
    7870:	4642      	mov	r2, r8
    7872:	9201      	str	r2, [sp, #4]
    7874:	2802      	cmp	r0, #2
    7876:	d067      	beq.n	7948 <__aeabi_dmul+0x184>
    7878:	2803      	cmp	r0, #3
    787a:	d100      	bne.n	787e <__aeabi_dmul+0xba>
    787c:	e20e      	b.n	7c9c <__aeabi_dmul+0x4d8>
    787e:	2801      	cmp	r0, #1
    7880:	d000      	beq.n	7884 <__aeabi_dmul+0xc0>
    7882:	e162      	b.n	7b4a <__aeabi_dmul+0x386>
    7884:	2300      	movs	r3, #0
    7886:	2400      	movs	r4, #0
    7888:	2200      	movs	r2, #0
    788a:	4699      	mov	r9, r3
    788c:	9901      	ldr	r1, [sp, #4]
    788e:	4001      	ands	r1, r0
    7890:	b2cd      	uxtb	r5, r1
    7892:	2100      	movs	r1, #0
    7894:	0312      	lsls	r2, r2, #12
    7896:	0d0b      	lsrs	r3, r1, #20
    7898:	0b12      	lsrs	r2, r2, #12
    789a:	051b      	lsls	r3, r3, #20
    789c:	4313      	orrs	r3, r2
    789e:	4a43      	ldr	r2, [pc, #268]	; (79ac <__aeabi_dmul+0x1e8>)
    78a0:	0524      	lsls	r4, r4, #20
    78a2:	4013      	ands	r3, r2
    78a4:	431c      	orrs	r4, r3
    78a6:	0064      	lsls	r4, r4, #1
    78a8:	07ed      	lsls	r5, r5, #31
    78aa:	0864      	lsrs	r4, r4, #1
    78ac:	432c      	orrs	r4, r5
    78ae:	4648      	mov	r0, r9
    78b0:	0021      	movs	r1, r4
    78b2:	b007      	add	sp, #28
    78b4:	bc3c      	pop	{r2, r3, r4, r5}
    78b6:	4690      	mov	r8, r2
    78b8:	4699      	mov	r9, r3
    78ba:	46a2      	mov	sl, r4
    78bc:	46ab      	mov	fp, r5
    78be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78c0:	4303      	orrs	r3, r0
    78c2:	4699      	mov	r9, r3
    78c4:	d04f      	beq.n	7966 <__aeabi_dmul+0x1a2>
    78c6:	465b      	mov	r3, fp
    78c8:	2b00      	cmp	r3, #0
    78ca:	d100      	bne.n	78ce <__aeabi_dmul+0x10a>
    78cc:	e189      	b.n	7be2 <__aeabi_dmul+0x41e>
    78ce:	4658      	mov	r0, fp
    78d0:	f000 fd50 	bl	8374 <__clzsi2>
    78d4:	0003      	movs	r3, r0
    78d6:	3b0b      	subs	r3, #11
    78d8:	2b1c      	cmp	r3, #28
    78da:	dd00      	ble.n	78de <__aeabi_dmul+0x11a>
    78dc:	e17a      	b.n	7bd4 <__aeabi_dmul+0x410>
    78de:	221d      	movs	r2, #29
    78e0:	1ad3      	subs	r3, r2, r3
    78e2:	003a      	movs	r2, r7
    78e4:	0001      	movs	r1, r0
    78e6:	465c      	mov	r4, fp
    78e8:	40da      	lsrs	r2, r3
    78ea:	3908      	subs	r1, #8
    78ec:	408c      	lsls	r4, r1
    78ee:	0013      	movs	r3, r2
    78f0:	408f      	lsls	r7, r1
    78f2:	4323      	orrs	r3, r4
    78f4:	469b      	mov	fp, r3
    78f6:	46b9      	mov	r9, r7
    78f8:	2300      	movs	r3, #0
    78fa:	4e2d      	ldr	r6, [pc, #180]	; (79b0 <__aeabi_dmul+0x1ec>)
    78fc:	2700      	movs	r7, #0
    78fe:	1a36      	subs	r6, r6, r0
    7900:	9302      	str	r3, [sp, #8]
    7902:	e784      	b.n	780e <__aeabi_dmul+0x4a>
    7904:	4653      	mov	r3, sl
    7906:	4323      	orrs	r3, r4
    7908:	d12a      	bne.n	7960 <__aeabi_dmul+0x19c>
    790a:	2400      	movs	r4, #0
    790c:	2002      	movs	r0, #2
    790e:	e796      	b.n	783e <__aeabi_dmul+0x7a>
    7910:	4653      	mov	r3, sl
    7912:	4323      	orrs	r3, r4
    7914:	d020      	beq.n	7958 <__aeabi_dmul+0x194>
    7916:	2c00      	cmp	r4, #0
    7918:	d100      	bne.n	791c <__aeabi_dmul+0x158>
    791a:	e157      	b.n	7bcc <__aeabi_dmul+0x408>
    791c:	0020      	movs	r0, r4
    791e:	f000 fd29 	bl	8374 <__clzsi2>
    7922:	0003      	movs	r3, r0
    7924:	3b0b      	subs	r3, #11
    7926:	2b1c      	cmp	r3, #28
    7928:	dd00      	ble.n	792c <__aeabi_dmul+0x168>
    792a:	e149      	b.n	7bc0 <__aeabi_dmul+0x3fc>
    792c:	211d      	movs	r1, #29
    792e:	1acb      	subs	r3, r1, r3
    7930:	4651      	mov	r1, sl
    7932:	0002      	movs	r2, r0
    7934:	40d9      	lsrs	r1, r3
    7936:	4653      	mov	r3, sl
    7938:	3a08      	subs	r2, #8
    793a:	4094      	lsls	r4, r2
    793c:	4093      	lsls	r3, r2
    793e:	430c      	orrs	r4, r1
    7940:	4a1b      	ldr	r2, [pc, #108]	; (79b0 <__aeabi_dmul+0x1ec>)
    7942:	1a12      	subs	r2, r2, r0
    7944:	2000      	movs	r0, #0
    7946:	e77a      	b.n	783e <__aeabi_dmul+0x7a>
    7948:	2501      	movs	r5, #1
    794a:	9b01      	ldr	r3, [sp, #4]
    794c:	4c14      	ldr	r4, [pc, #80]	; (79a0 <__aeabi_dmul+0x1dc>)
    794e:	401d      	ands	r5, r3
    7950:	2300      	movs	r3, #0
    7952:	2200      	movs	r2, #0
    7954:	4699      	mov	r9, r3
    7956:	e79c      	b.n	7892 <__aeabi_dmul+0xce>
    7958:	2400      	movs	r4, #0
    795a:	2200      	movs	r2, #0
    795c:	2001      	movs	r0, #1
    795e:	e76e      	b.n	783e <__aeabi_dmul+0x7a>
    7960:	4653      	mov	r3, sl
    7962:	2003      	movs	r0, #3
    7964:	e76b      	b.n	783e <__aeabi_dmul+0x7a>
    7966:	2300      	movs	r3, #0
    7968:	469b      	mov	fp, r3
    796a:	3301      	adds	r3, #1
    796c:	2704      	movs	r7, #4
    796e:	2600      	movs	r6, #0
    7970:	9302      	str	r3, [sp, #8]
    7972:	e74c      	b.n	780e <__aeabi_dmul+0x4a>
    7974:	2303      	movs	r3, #3
    7976:	4681      	mov	r9, r0
    7978:	270c      	movs	r7, #12
    797a:	9302      	str	r3, [sp, #8]
    797c:	e747      	b.n	780e <__aeabi_dmul+0x4a>
    797e:	2280      	movs	r2, #128	; 0x80
    7980:	2300      	movs	r3, #0
    7982:	2500      	movs	r5, #0
    7984:	0312      	lsls	r2, r2, #12
    7986:	4699      	mov	r9, r3
    7988:	4c05      	ldr	r4, [pc, #20]	; (79a0 <__aeabi_dmul+0x1dc>)
    798a:	e782      	b.n	7892 <__aeabi_dmul+0xce>
    798c:	465c      	mov	r4, fp
    798e:	464b      	mov	r3, r9
    7990:	9802      	ldr	r0, [sp, #8]
    7992:	e76f      	b.n	7874 <__aeabi_dmul+0xb0>
    7994:	465c      	mov	r4, fp
    7996:	464b      	mov	r3, r9
    7998:	9501      	str	r5, [sp, #4]
    799a:	9802      	ldr	r0, [sp, #8]
    799c:	e76a      	b.n	7874 <__aeabi_dmul+0xb0>
    799e:	46c0      	nop			; (mov r8, r8)
    79a0:	000007ff 	.word	0x000007ff
    79a4:	fffffc01 	.word	0xfffffc01
    79a8:	00008734 	.word	0x00008734
    79ac:	800fffff 	.word	0x800fffff
    79b0:	fffffc0d 	.word	0xfffffc0d
    79b4:	464a      	mov	r2, r9
    79b6:	4649      	mov	r1, r9
    79b8:	0c17      	lsrs	r7, r2, #16
    79ba:	0c1a      	lsrs	r2, r3, #16
    79bc:	041b      	lsls	r3, r3, #16
    79be:	0c1b      	lsrs	r3, r3, #16
    79c0:	0408      	lsls	r0, r1, #16
    79c2:	0019      	movs	r1, r3
    79c4:	0c00      	lsrs	r0, r0, #16
    79c6:	4341      	muls	r1, r0
    79c8:	0015      	movs	r5, r2
    79ca:	4688      	mov	r8, r1
    79cc:	0019      	movs	r1, r3
    79ce:	437d      	muls	r5, r7
    79d0:	4379      	muls	r1, r7
    79d2:	9503      	str	r5, [sp, #12]
    79d4:	4689      	mov	r9, r1
    79d6:	0029      	movs	r1, r5
    79d8:	0015      	movs	r5, r2
    79da:	4345      	muls	r5, r0
    79dc:	444d      	add	r5, r9
    79de:	9502      	str	r5, [sp, #8]
    79e0:	4645      	mov	r5, r8
    79e2:	0c2d      	lsrs	r5, r5, #16
    79e4:	46aa      	mov	sl, r5
    79e6:	9d02      	ldr	r5, [sp, #8]
    79e8:	4455      	add	r5, sl
    79ea:	45a9      	cmp	r9, r5
    79ec:	d906      	bls.n	79fc <__aeabi_dmul+0x238>
    79ee:	468a      	mov	sl, r1
    79f0:	2180      	movs	r1, #128	; 0x80
    79f2:	0249      	lsls	r1, r1, #9
    79f4:	4689      	mov	r9, r1
    79f6:	44ca      	add	sl, r9
    79f8:	4651      	mov	r1, sl
    79fa:	9103      	str	r1, [sp, #12]
    79fc:	0c29      	lsrs	r1, r5, #16
    79fe:	9104      	str	r1, [sp, #16]
    7a00:	4641      	mov	r1, r8
    7a02:	0409      	lsls	r1, r1, #16
    7a04:	042d      	lsls	r5, r5, #16
    7a06:	0c09      	lsrs	r1, r1, #16
    7a08:	4688      	mov	r8, r1
    7a0a:	0029      	movs	r1, r5
    7a0c:	0c25      	lsrs	r5, r4, #16
    7a0e:	0424      	lsls	r4, r4, #16
    7a10:	4441      	add	r1, r8
    7a12:	0c24      	lsrs	r4, r4, #16
    7a14:	9105      	str	r1, [sp, #20]
    7a16:	0021      	movs	r1, r4
    7a18:	4341      	muls	r1, r0
    7a1a:	4688      	mov	r8, r1
    7a1c:	0021      	movs	r1, r4
    7a1e:	4379      	muls	r1, r7
    7a20:	468a      	mov	sl, r1
    7a22:	4368      	muls	r0, r5
    7a24:	4641      	mov	r1, r8
    7a26:	4450      	add	r0, sl
    7a28:	4681      	mov	r9, r0
    7a2a:	0c08      	lsrs	r0, r1, #16
    7a2c:	4448      	add	r0, r9
    7a2e:	436f      	muls	r7, r5
    7a30:	4582      	cmp	sl, r0
    7a32:	d903      	bls.n	7a3c <__aeabi_dmul+0x278>
    7a34:	2180      	movs	r1, #128	; 0x80
    7a36:	0249      	lsls	r1, r1, #9
    7a38:	4689      	mov	r9, r1
    7a3a:	444f      	add	r7, r9
    7a3c:	0c01      	lsrs	r1, r0, #16
    7a3e:	4689      	mov	r9, r1
    7a40:	0039      	movs	r1, r7
    7a42:	4449      	add	r1, r9
    7a44:	9102      	str	r1, [sp, #8]
    7a46:	4641      	mov	r1, r8
    7a48:	040f      	lsls	r7, r1, #16
    7a4a:	9904      	ldr	r1, [sp, #16]
    7a4c:	0c3f      	lsrs	r7, r7, #16
    7a4e:	4688      	mov	r8, r1
    7a50:	0400      	lsls	r0, r0, #16
    7a52:	19c0      	adds	r0, r0, r7
    7a54:	4480      	add	r8, r0
    7a56:	4641      	mov	r1, r8
    7a58:	9104      	str	r1, [sp, #16]
    7a5a:	4659      	mov	r1, fp
    7a5c:	0c0f      	lsrs	r7, r1, #16
    7a5e:	0409      	lsls	r1, r1, #16
    7a60:	0c09      	lsrs	r1, r1, #16
    7a62:	4688      	mov	r8, r1
    7a64:	4359      	muls	r1, r3
    7a66:	468a      	mov	sl, r1
    7a68:	0039      	movs	r1, r7
    7a6a:	4351      	muls	r1, r2
    7a6c:	4689      	mov	r9, r1
    7a6e:	4641      	mov	r1, r8
    7a70:	434a      	muls	r2, r1
    7a72:	4651      	mov	r1, sl
    7a74:	0c09      	lsrs	r1, r1, #16
    7a76:	468b      	mov	fp, r1
    7a78:	437b      	muls	r3, r7
    7a7a:	18d2      	adds	r2, r2, r3
    7a7c:	445a      	add	r2, fp
    7a7e:	4293      	cmp	r3, r2
    7a80:	d903      	bls.n	7a8a <__aeabi_dmul+0x2c6>
    7a82:	2380      	movs	r3, #128	; 0x80
    7a84:	025b      	lsls	r3, r3, #9
    7a86:	469b      	mov	fp, r3
    7a88:	44d9      	add	r9, fp
    7a8a:	4651      	mov	r1, sl
    7a8c:	0409      	lsls	r1, r1, #16
    7a8e:	0c09      	lsrs	r1, r1, #16
    7a90:	468a      	mov	sl, r1
    7a92:	4641      	mov	r1, r8
    7a94:	4361      	muls	r1, r4
    7a96:	437c      	muls	r4, r7
    7a98:	0c13      	lsrs	r3, r2, #16
    7a9a:	0412      	lsls	r2, r2, #16
    7a9c:	444b      	add	r3, r9
    7a9e:	4452      	add	r2, sl
    7aa0:	46a1      	mov	r9, r4
    7aa2:	468a      	mov	sl, r1
    7aa4:	003c      	movs	r4, r7
    7aa6:	4641      	mov	r1, r8
    7aa8:	436c      	muls	r4, r5
    7aaa:	434d      	muls	r5, r1
    7aac:	4651      	mov	r1, sl
    7aae:	444d      	add	r5, r9
    7ab0:	0c0f      	lsrs	r7, r1, #16
    7ab2:	197d      	adds	r5, r7, r5
    7ab4:	45a9      	cmp	r9, r5
    7ab6:	d903      	bls.n	7ac0 <__aeabi_dmul+0x2fc>
    7ab8:	2180      	movs	r1, #128	; 0x80
    7aba:	0249      	lsls	r1, r1, #9
    7abc:	4688      	mov	r8, r1
    7abe:	4444      	add	r4, r8
    7ac0:	9f04      	ldr	r7, [sp, #16]
    7ac2:	9903      	ldr	r1, [sp, #12]
    7ac4:	46b8      	mov	r8, r7
    7ac6:	4441      	add	r1, r8
    7ac8:	468b      	mov	fp, r1
    7aca:	4583      	cmp	fp, r0
    7acc:	4180      	sbcs	r0, r0
    7ace:	4241      	negs	r1, r0
    7ad0:	4688      	mov	r8, r1
    7ad2:	4651      	mov	r1, sl
    7ad4:	0408      	lsls	r0, r1, #16
    7ad6:	042f      	lsls	r7, r5, #16
    7ad8:	0c00      	lsrs	r0, r0, #16
    7ada:	183f      	adds	r7, r7, r0
    7adc:	4658      	mov	r0, fp
    7ade:	9902      	ldr	r1, [sp, #8]
    7ae0:	1810      	adds	r0, r2, r0
    7ae2:	4689      	mov	r9, r1
    7ae4:	4290      	cmp	r0, r2
    7ae6:	4192      	sbcs	r2, r2
    7ae8:	444f      	add	r7, r9
    7aea:	46ba      	mov	sl, r7
    7aec:	4252      	negs	r2, r2
    7aee:	4699      	mov	r9, r3
    7af0:	4693      	mov	fp, r2
    7af2:	44c2      	add	sl, r8
    7af4:	44d1      	add	r9, sl
    7af6:	44cb      	add	fp, r9
    7af8:	428f      	cmp	r7, r1
    7afa:	41bf      	sbcs	r7, r7
    7afc:	45c2      	cmp	sl, r8
    7afe:	4189      	sbcs	r1, r1
    7b00:	4599      	cmp	r9, r3
    7b02:	419b      	sbcs	r3, r3
    7b04:	4593      	cmp	fp, r2
    7b06:	4192      	sbcs	r2, r2
    7b08:	427f      	negs	r7, r7
    7b0a:	4249      	negs	r1, r1
    7b0c:	0c2d      	lsrs	r5, r5, #16
    7b0e:	4252      	negs	r2, r2
    7b10:	430f      	orrs	r7, r1
    7b12:	425b      	negs	r3, r3
    7b14:	4313      	orrs	r3, r2
    7b16:	197f      	adds	r7, r7, r5
    7b18:	18ff      	adds	r7, r7, r3
    7b1a:	465b      	mov	r3, fp
    7b1c:	193c      	adds	r4, r7, r4
    7b1e:	0ddb      	lsrs	r3, r3, #23
    7b20:	9a05      	ldr	r2, [sp, #20]
    7b22:	0264      	lsls	r4, r4, #9
    7b24:	431c      	orrs	r4, r3
    7b26:	0243      	lsls	r3, r0, #9
    7b28:	4313      	orrs	r3, r2
    7b2a:	1e5d      	subs	r5, r3, #1
    7b2c:	41ab      	sbcs	r3, r5
    7b2e:	465a      	mov	r2, fp
    7b30:	0dc0      	lsrs	r0, r0, #23
    7b32:	4303      	orrs	r3, r0
    7b34:	0252      	lsls	r2, r2, #9
    7b36:	4313      	orrs	r3, r2
    7b38:	01e2      	lsls	r2, r4, #7
    7b3a:	d556      	bpl.n	7bea <__aeabi_dmul+0x426>
    7b3c:	2001      	movs	r0, #1
    7b3e:	085a      	lsrs	r2, r3, #1
    7b40:	4003      	ands	r3, r0
    7b42:	4313      	orrs	r3, r2
    7b44:	07e2      	lsls	r2, r4, #31
    7b46:	4313      	orrs	r3, r2
    7b48:	0864      	lsrs	r4, r4, #1
    7b4a:	485a      	ldr	r0, [pc, #360]	; (7cb4 <__aeabi_dmul+0x4f0>)
    7b4c:	4460      	add	r0, ip
    7b4e:	2800      	cmp	r0, #0
    7b50:	dd4d      	ble.n	7bee <__aeabi_dmul+0x42a>
    7b52:	075a      	lsls	r2, r3, #29
    7b54:	d009      	beq.n	7b6a <__aeabi_dmul+0x3a6>
    7b56:	220f      	movs	r2, #15
    7b58:	401a      	ands	r2, r3
    7b5a:	2a04      	cmp	r2, #4
    7b5c:	d005      	beq.n	7b6a <__aeabi_dmul+0x3a6>
    7b5e:	1d1a      	adds	r2, r3, #4
    7b60:	429a      	cmp	r2, r3
    7b62:	419b      	sbcs	r3, r3
    7b64:	425b      	negs	r3, r3
    7b66:	18e4      	adds	r4, r4, r3
    7b68:	0013      	movs	r3, r2
    7b6a:	01e2      	lsls	r2, r4, #7
    7b6c:	d504      	bpl.n	7b78 <__aeabi_dmul+0x3b4>
    7b6e:	2080      	movs	r0, #128	; 0x80
    7b70:	4a51      	ldr	r2, [pc, #324]	; (7cb8 <__aeabi_dmul+0x4f4>)
    7b72:	00c0      	lsls	r0, r0, #3
    7b74:	4014      	ands	r4, r2
    7b76:	4460      	add	r0, ip
    7b78:	4a50      	ldr	r2, [pc, #320]	; (7cbc <__aeabi_dmul+0x4f8>)
    7b7a:	4290      	cmp	r0, r2
    7b7c:	dd00      	ble.n	7b80 <__aeabi_dmul+0x3bc>
    7b7e:	e6e3      	b.n	7948 <__aeabi_dmul+0x184>
    7b80:	2501      	movs	r5, #1
    7b82:	08db      	lsrs	r3, r3, #3
    7b84:	0762      	lsls	r2, r4, #29
    7b86:	431a      	orrs	r2, r3
    7b88:	0264      	lsls	r4, r4, #9
    7b8a:	9b01      	ldr	r3, [sp, #4]
    7b8c:	4691      	mov	r9, r2
    7b8e:	0b22      	lsrs	r2, r4, #12
    7b90:	0544      	lsls	r4, r0, #21
    7b92:	0d64      	lsrs	r4, r4, #21
    7b94:	401d      	ands	r5, r3
    7b96:	e67c      	b.n	7892 <__aeabi_dmul+0xce>
    7b98:	2280      	movs	r2, #128	; 0x80
    7b9a:	4659      	mov	r1, fp
    7b9c:	0312      	lsls	r2, r2, #12
    7b9e:	4211      	tst	r1, r2
    7ba0:	d008      	beq.n	7bb4 <__aeabi_dmul+0x3f0>
    7ba2:	4214      	tst	r4, r2
    7ba4:	d106      	bne.n	7bb4 <__aeabi_dmul+0x3f0>
    7ba6:	4322      	orrs	r2, r4
    7ba8:	0312      	lsls	r2, r2, #12
    7baa:	0b12      	lsrs	r2, r2, #12
    7bac:	4645      	mov	r5, r8
    7bae:	4699      	mov	r9, r3
    7bb0:	4c43      	ldr	r4, [pc, #268]	; (7cc0 <__aeabi_dmul+0x4fc>)
    7bb2:	e66e      	b.n	7892 <__aeabi_dmul+0xce>
    7bb4:	465b      	mov	r3, fp
    7bb6:	431a      	orrs	r2, r3
    7bb8:	0312      	lsls	r2, r2, #12
    7bba:	0b12      	lsrs	r2, r2, #12
    7bbc:	4c40      	ldr	r4, [pc, #256]	; (7cc0 <__aeabi_dmul+0x4fc>)
    7bbe:	e668      	b.n	7892 <__aeabi_dmul+0xce>
    7bc0:	0003      	movs	r3, r0
    7bc2:	4654      	mov	r4, sl
    7bc4:	3b28      	subs	r3, #40	; 0x28
    7bc6:	409c      	lsls	r4, r3
    7bc8:	2300      	movs	r3, #0
    7bca:	e6b9      	b.n	7940 <__aeabi_dmul+0x17c>
    7bcc:	f000 fbd2 	bl	8374 <__clzsi2>
    7bd0:	3020      	adds	r0, #32
    7bd2:	e6a6      	b.n	7922 <__aeabi_dmul+0x15e>
    7bd4:	0003      	movs	r3, r0
    7bd6:	3b28      	subs	r3, #40	; 0x28
    7bd8:	409f      	lsls	r7, r3
    7bda:	2300      	movs	r3, #0
    7bdc:	46bb      	mov	fp, r7
    7bde:	4699      	mov	r9, r3
    7be0:	e68a      	b.n	78f8 <__aeabi_dmul+0x134>
    7be2:	f000 fbc7 	bl	8374 <__clzsi2>
    7be6:	3020      	adds	r0, #32
    7be8:	e674      	b.n	78d4 <__aeabi_dmul+0x110>
    7bea:	46b4      	mov	ip, r6
    7bec:	e7ad      	b.n	7b4a <__aeabi_dmul+0x386>
    7bee:	2501      	movs	r5, #1
    7bf0:	1a2a      	subs	r2, r5, r0
    7bf2:	2a38      	cmp	r2, #56	; 0x38
    7bf4:	dd06      	ble.n	7c04 <__aeabi_dmul+0x440>
    7bf6:	9b01      	ldr	r3, [sp, #4]
    7bf8:	2400      	movs	r4, #0
    7bfa:	401d      	ands	r5, r3
    7bfc:	2300      	movs	r3, #0
    7bfe:	2200      	movs	r2, #0
    7c00:	4699      	mov	r9, r3
    7c02:	e646      	b.n	7892 <__aeabi_dmul+0xce>
    7c04:	2a1f      	cmp	r2, #31
    7c06:	dc21      	bgt.n	7c4c <__aeabi_dmul+0x488>
    7c08:	2520      	movs	r5, #32
    7c0a:	0020      	movs	r0, r4
    7c0c:	1aad      	subs	r5, r5, r2
    7c0e:	001e      	movs	r6, r3
    7c10:	40ab      	lsls	r3, r5
    7c12:	40a8      	lsls	r0, r5
    7c14:	40d6      	lsrs	r6, r2
    7c16:	1e5d      	subs	r5, r3, #1
    7c18:	41ab      	sbcs	r3, r5
    7c1a:	4330      	orrs	r0, r6
    7c1c:	4318      	orrs	r0, r3
    7c1e:	40d4      	lsrs	r4, r2
    7c20:	0743      	lsls	r3, r0, #29
    7c22:	d009      	beq.n	7c38 <__aeabi_dmul+0x474>
    7c24:	230f      	movs	r3, #15
    7c26:	4003      	ands	r3, r0
    7c28:	2b04      	cmp	r3, #4
    7c2a:	d005      	beq.n	7c38 <__aeabi_dmul+0x474>
    7c2c:	0003      	movs	r3, r0
    7c2e:	1d18      	adds	r0, r3, #4
    7c30:	4298      	cmp	r0, r3
    7c32:	419b      	sbcs	r3, r3
    7c34:	425b      	negs	r3, r3
    7c36:	18e4      	adds	r4, r4, r3
    7c38:	0223      	lsls	r3, r4, #8
    7c3a:	d521      	bpl.n	7c80 <__aeabi_dmul+0x4bc>
    7c3c:	2501      	movs	r5, #1
    7c3e:	9b01      	ldr	r3, [sp, #4]
    7c40:	2401      	movs	r4, #1
    7c42:	401d      	ands	r5, r3
    7c44:	2300      	movs	r3, #0
    7c46:	2200      	movs	r2, #0
    7c48:	4699      	mov	r9, r3
    7c4a:	e622      	b.n	7892 <__aeabi_dmul+0xce>
    7c4c:	251f      	movs	r5, #31
    7c4e:	0021      	movs	r1, r4
    7c50:	426d      	negs	r5, r5
    7c52:	1a28      	subs	r0, r5, r0
    7c54:	40c1      	lsrs	r1, r0
    7c56:	0008      	movs	r0, r1
    7c58:	2a20      	cmp	r2, #32
    7c5a:	d01d      	beq.n	7c98 <__aeabi_dmul+0x4d4>
    7c5c:	355f      	adds	r5, #95	; 0x5f
    7c5e:	1aaa      	subs	r2, r5, r2
    7c60:	4094      	lsls	r4, r2
    7c62:	4323      	orrs	r3, r4
    7c64:	1e5c      	subs	r4, r3, #1
    7c66:	41a3      	sbcs	r3, r4
    7c68:	2507      	movs	r5, #7
    7c6a:	4303      	orrs	r3, r0
    7c6c:	401d      	ands	r5, r3
    7c6e:	2200      	movs	r2, #0
    7c70:	2d00      	cmp	r5, #0
    7c72:	d009      	beq.n	7c88 <__aeabi_dmul+0x4c4>
    7c74:	220f      	movs	r2, #15
    7c76:	2400      	movs	r4, #0
    7c78:	401a      	ands	r2, r3
    7c7a:	0018      	movs	r0, r3
    7c7c:	2a04      	cmp	r2, #4
    7c7e:	d1d6      	bne.n	7c2e <__aeabi_dmul+0x46a>
    7c80:	0003      	movs	r3, r0
    7c82:	0765      	lsls	r5, r4, #29
    7c84:	0264      	lsls	r4, r4, #9
    7c86:	0b22      	lsrs	r2, r4, #12
    7c88:	08db      	lsrs	r3, r3, #3
    7c8a:	432b      	orrs	r3, r5
    7c8c:	2501      	movs	r5, #1
    7c8e:	4699      	mov	r9, r3
    7c90:	9b01      	ldr	r3, [sp, #4]
    7c92:	2400      	movs	r4, #0
    7c94:	401d      	ands	r5, r3
    7c96:	e5fc      	b.n	7892 <__aeabi_dmul+0xce>
    7c98:	2400      	movs	r4, #0
    7c9a:	e7e2      	b.n	7c62 <__aeabi_dmul+0x49e>
    7c9c:	2280      	movs	r2, #128	; 0x80
    7c9e:	2501      	movs	r5, #1
    7ca0:	0312      	lsls	r2, r2, #12
    7ca2:	4322      	orrs	r2, r4
    7ca4:	9901      	ldr	r1, [sp, #4]
    7ca6:	0312      	lsls	r2, r2, #12
    7ca8:	0b12      	lsrs	r2, r2, #12
    7caa:	400d      	ands	r5, r1
    7cac:	4699      	mov	r9, r3
    7cae:	4c04      	ldr	r4, [pc, #16]	; (7cc0 <__aeabi_dmul+0x4fc>)
    7cb0:	e5ef      	b.n	7892 <__aeabi_dmul+0xce>
    7cb2:	46c0      	nop			; (mov r8, r8)
    7cb4:	000003ff 	.word	0x000003ff
    7cb8:	feffffff 	.word	0xfeffffff
    7cbc:	000007fe 	.word	0x000007fe
    7cc0:	000007ff 	.word	0x000007ff

00007cc4 <__aeabi_dsub>:
    7cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cc6:	4646      	mov	r6, r8
    7cc8:	46d6      	mov	lr, sl
    7cca:	464f      	mov	r7, r9
    7ccc:	030c      	lsls	r4, r1, #12
    7cce:	b5c0      	push	{r6, r7, lr}
    7cd0:	0fcd      	lsrs	r5, r1, #31
    7cd2:	004e      	lsls	r6, r1, #1
    7cd4:	0a61      	lsrs	r1, r4, #9
    7cd6:	0f44      	lsrs	r4, r0, #29
    7cd8:	430c      	orrs	r4, r1
    7cda:	00c1      	lsls	r1, r0, #3
    7cdc:	0058      	lsls	r0, r3, #1
    7cde:	0d40      	lsrs	r0, r0, #21
    7ce0:	4684      	mov	ip, r0
    7ce2:	468a      	mov	sl, r1
    7ce4:	000f      	movs	r7, r1
    7ce6:	0319      	lsls	r1, r3, #12
    7ce8:	0f50      	lsrs	r0, r2, #29
    7cea:	0a49      	lsrs	r1, r1, #9
    7cec:	4301      	orrs	r1, r0
    7cee:	48c6      	ldr	r0, [pc, #792]	; (8008 <__aeabi_dsub+0x344>)
    7cf0:	0d76      	lsrs	r6, r6, #21
    7cf2:	46a8      	mov	r8, r5
    7cf4:	0fdb      	lsrs	r3, r3, #31
    7cf6:	00d2      	lsls	r2, r2, #3
    7cf8:	4584      	cmp	ip, r0
    7cfa:	d100      	bne.n	7cfe <__aeabi_dsub+0x3a>
    7cfc:	e0d8      	b.n	7eb0 <__aeabi_dsub+0x1ec>
    7cfe:	2001      	movs	r0, #1
    7d00:	4043      	eors	r3, r0
    7d02:	42ab      	cmp	r3, r5
    7d04:	d100      	bne.n	7d08 <__aeabi_dsub+0x44>
    7d06:	e0a6      	b.n	7e56 <__aeabi_dsub+0x192>
    7d08:	4660      	mov	r0, ip
    7d0a:	1a35      	subs	r5, r6, r0
    7d0c:	2d00      	cmp	r5, #0
    7d0e:	dc00      	bgt.n	7d12 <__aeabi_dsub+0x4e>
    7d10:	e105      	b.n	7f1e <__aeabi_dsub+0x25a>
    7d12:	2800      	cmp	r0, #0
    7d14:	d110      	bne.n	7d38 <__aeabi_dsub+0x74>
    7d16:	000b      	movs	r3, r1
    7d18:	4313      	orrs	r3, r2
    7d1a:	d100      	bne.n	7d1e <__aeabi_dsub+0x5a>
    7d1c:	e0d7      	b.n	7ece <__aeabi_dsub+0x20a>
    7d1e:	1e6b      	subs	r3, r5, #1
    7d20:	2b00      	cmp	r3, #0
    7d22:	d000      	beq.n	7d26 <__aeabi_dsub+0x62>
    7d24:	e14b      	b.n	7fbe <__aeabi_dsub+0x2fa>
    7d26:	4653      	mov	r3, sl
    7d28:	1a9f      	subs	r7, r3, r2
    7d2a:	45ba      	cmp	sl, r7
    7d2c:	4180      	sbcs	r0, r0
    7d2e:	1a64      	subs	r4, r4, r1
    7d30:	4240      	negs	r0, r0
    7d32:	1a24      	subs	r4, r4, r0
    7d34:	2601      	movs	r6, #1
    7d36:	e01e      	b.n	7d76 <__aeabi_dsub+0xb2>
    7d38:	4bb3      	ldr	r3, [pc, #716]	; (8008 <__aeabi_dsub+0x344>)
    7d3a:	429e      	cmp	r6, r3
    7d3c:	d048      	beq.n	7dd0 <__aeabi_dsub+0x10c>
    7d3e:	2380      	movs	r3, #128	; 0x80
    7d40:	041b      	lsls	r3, r3, #16
    7d42:	4319      	orrs	r1, r3
    7d44:	2d38      	cmp	r5, #56	; 0x38
    7d46:	dd00      	ble.n	7d4a <__aeabi_dsub+0x86>
    7d48:	e119      	b.n	7f7e <__aeabi_dsub+0x2ba>
    7d4a:	2d1f      	cmp	r5, #31
    7d4c:	dd00      	ble.n	7d50 <__aeabi_dsub+0x8c>
    7d4e:	e14c      	b.n	7fea <__aeabi_dsub+0x326>
    7d50:	2320      	movs	r3, #32
    7d52:	000f      	movs	r7, r1
    7d54:	1b5b      	subs	r3, r3, r5
    7d56:	0010      	movs	r0, r2
    7d58:	409a      	lsls	r2, r3
    7d5a:	409f      	lsls	r7, r3
    7d5c:	40e8      	lsrs	r0, r5
    7d5e:	1e53      	subs	r3, r2, #1
    7d60:	419a      	sbcs	r2, r3
    7d62:	40e9      	lsrs	r1, r5
    7d64:	4307      	orrs	r7, r0
    7d66:	4317      	orrs	r7, r2
    7d68:	4653      	mov	r3, sl
    7d6a:	1bdf      	subs	r7, r3, r7
    7d6c:	1a61      	subs	r1, r4, r1
    7d6e:	45ba      	cmp	sl, r7
    7d70:	41a4      	sbcs	r4, r4
    7d72:	4264      	negs	r4, r4
    7d74:	1b0c      	subs	r4, r1, r4
    7d76:	0223      	lsls	r3, r4, #8
    7d78:	d400      	bmi.n	7d7c <__aeabi_dsub+0xb8>
    7d7a:	e0c5      	b.n	7f08 <__aeabi_dsub+0x244>
    7d7c:	0264      	lsls	r4, r4, #9
    7d7e:	0a65      	lsrs	r5, r4, #9
    7d80:	2d00      	cmp	r5, #0
    7d82:	d100      	bne.n	7d86 <__aeabi_dsub+0xc2>
    7d84:	e0f6      	b.n	7f74 <__aeabi_dsub+0x2b0>
    7d86:	0028      	movs	r0, r5
    7d88:	f000 faf4 	bl	8374 <__clzsi2>
    7d8c:	0003      	movs	r3, r0
    7d8e:	3b08      	subs	r3, #8
    7d90:	2b1f      	cmp	r3, #31
    7d92:	dd00      	ble.n	7d96 <__aeabi_dsub+0xd2>
    7d94:	e0e9      	b.n	7f6a <__aeabi_dsub+0x2a6>
    7d96:	2220      	movs	r2, #32
    7d98:	003c      	movs	r4, r7
    7d9a:	1ad2      	subs	r2, r2, r3
    7d9c:	409d      	lsls	r5, r3
    7d9e:	40d4      	lsrs	r4, r2
    7da0:	409f      	lsls	r7, r3
    7da2:	4325      	orrs	r5, r4
    7da4:	429e      	cmp	r6, r3
    7da6:	dd00      	ble.n	7daa <__aeabi_dsub+0xe6>
    7da8:	e0db      	b.n	7f62 <__aeabi_dsub+0x29e>
    7daa:	1b9e      	subs	r6, r3, r6
    7dac:	1c73      	adds	r3, r6, #1
    7dae:	2b1f      	cmp	r3, #31
    7db0:	dd00      	ble.n	7db4 <__aeabi_dsub+0xf0>
    7db2:	e10a      	b.n	7fca <__aeabi_dsub+0x306>
    7db4:	2220      	movs	r2, #32
    7db6:	0038      	movs	r0, r7
    7db8:	1ad2      	subs	r2, r2, r3
    7dba:	0029      	movs	r1, r5
    7dbc:	4097      	lsls	r7, r2
    7dbe:	002c      	movs	r4, r5
    7dc0:	4091      	lsls	r1, r2
    7dc2:	40d8      	lsrs	r0, r3
    7dc4:	1e7a      	subs	r2, r7, #1
    7dc6:	4197      	sbcs	r7, r2
    7dc8:	40dc      	lsrs	r4, r3
    7dca:	2600      	movs	r6, #0
    7dcc:	4301      	orrs	r1, r0
    7dce:	430f      	orrs	r7, r1
    7dd0:	077b      	lsls	r3, r7, #29
    7dd2:	d009      	beq.n	7de8 <__aeabi_dsub+0x124>
    7dd4:	230f      	movs	r3, #15
    7dd6:	403b      	ands	r3, r7
    7dd8:	2b04      	cmp	r3, #4
    7dda:	d005      	beq.n	7de8 <__aeabi_dsub+0x124>
    7ddc:	1d3b      	adds	r3, r7, #4
    7dde:	42bb      	cmp	r3, r7
    7de0:	41bf      	sbcs	r7, r7
    7de2:	427f      	negs	r7, r7
    7de4:	19e4      	adds	r4, r4, r7
    7de6:	001f      	movs	r7, r3
    7de8:	0223      	lsls	r3, r4, #8
    7dea:	d525      	bpl.n	7e38 <__aeabi_dsub+0x174>
    7dec:	4b86      	ldr	r3, [pc, #536]	; (8008 <__aeabi_dsub+0x344>)
    7dee:	3601      	adds	r6, #1
    7df0:	429e      	cmp	r6, r3
    7df2:	d100      	bne.n	7df6 <__aeabi_dsub+0x132>
    7df4:	e0af      	b.n	7f56 <__aeabi_dsub+0x292>
    7df6:	4b85      	ldr	r3, [pc, #532]	; (800c <__aeabi_dsub+0x348>)
    7df8:	2501      	movs	r5, #1
    7dfa:	401c      	ands	r4, r3
    7dfc:	4643      	mov	r3, r8
    7dfe:	0762      	lsls	r2, r4, #29
    7e00:	08ff      	lsrs	r7, r7, #3
    7e02:	0264      	lsls	r4, r4, #9
    7e04:	0576      	lsls	r6, r6, #21
    7e06:	4317      	orrs	r7, r2
    7e08:	0b24      	lsrs	r4, r4, #12
    7e0a:	0d76      	lsrs	r6, r6, #21
    7e0c:	401d      	ands	r5, r3
    7e0e:	2100      	movs	r1, #0
    7e10:	0324      	lsls	r4, r4, #12
    7e12:	0b23      	lsrs	r3, r4, #12
    7e14:	0d0c      	lsrs	r4, r1, #20
    7e16:	4a7e      	ldr	r2, [pc, #504]	; (8010 <__aeabi_dsub+0x34c>)
    7e18:	0524      	lsls	r4, r4, #20
    7e1a:	431c      	orrs	r4, r3
    7e1c:	4014      	ands	r4, r2
    7e1e:	0533      	lsls	r3, r6, #20
    7e20:	4323      	orrs	r3, r4
    7e22:	005b      	lsls	r3, r3, #1
    7e24:	07ed      	lsls	r5, r5, #31
    7e26:	085b      	lsrs	r3, r3, #1
    7e28:	432b      	orrs	r3, r5
    7e2a:	0038      	movs	r0, r7
    7e2c:	0019      	movs	r1, r3
    7e2e:	bc1c      	pop	{r2, r3, r4}
    7e30:	4690      	mov	r8, r2
    7e32:	4699      	mov	r9, r3
    7e34:	46a2      	mov	sl, r4
    7e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e38:	2501      	movs	r5, #1
    7e3a:	4643      	mov	r3, r8
    7e3c:	0762      	lsls	r2, r4, #29
    7e3e:	08ff      	lsrs	r7, r7, #3
    7e40:	4317      	orrs	r7, r2
    7e42:	08e4      	lsrs	r4, r4, #3
    7e44:	401d      	ands	r5, r3
    7e46:	4b70      	ldr	r3, [pc, #448]	; (8008 <__aeabi_dsub+0x344>)
    7e48:	429e      	cmp	r6, r3
    7e4a:	d036      	beq.n	7eba <__aeabi_dsub+0x1f6>
    7e4c:	0324      	lsls	r4, r4, #12
    7e4e:	0576      	lsls	r6, r6, #21
    7e50:	0b24      	lsrs	r4, r4, #12
    7e52:	0d76      	lsrs	r6, r6, #21
    7e54:	e7db      	b.n	7e0e <__aeabi_dsub+0x14a>
    7e56:	4663      	mov	r3, ip
    7e58:	1af3      	subs	r3, r6, r3
    7e5a:	2b00      	cmp	r3, #0
    7e5c:	dc00      	bgt.n	7e60 <__aeabi_dsub+0x19c>
    7e5e:	e094      	b.n	7f8a <__aeabi_dsub+0x2c6>
    7e60:	4660      	mov	r0, ip
    7e62:	2800      	cmp	r0, #0
    7e64:	d035      	beq.n	7ed2 <__aeabi_dsub+0x20e>
    7e66:	4868      	ldr	r0, [pc, #416]	; (8008 <__aeabi_dsub+0x344>)
    7e68:	4286      	cmp	r6, r0
    7e6a:	d0b1      	beq.n	7dd0 <__aeabi_dsub+0x10c>
    7e6c:	2780      	movs	r7, #128	; 0x80
    7e6e:	043f      	lsls	r7, r7, #16
    7e70:	4339      	orrs	r1, r7
    7e72:	2b38      	cmp	r3, #56	; 0x38
    7e74:	dc00      	bgt.n	7e78 <__aeabi_dsub+0x1b4>
    7e76:	e0fd      	b.n	8074 <__aeabi_dsub+0x3b0>
    7e78:	430a      	orrs	r2, r1
    7e7a:	0017      	movs	r7, r2
    7e7c:	2100      	movs	r1, #0
    7e7e:	1e7a      	subs	r2, r7, #1
    7e80:	4197      	sbcs	r7, r2
    7e82:	4457      	add	r7, sl
    7e84:	4557      	cmp	r7, sl
    7e86:	4180      	sbcs	r0, r0
    7e88:	1909      	adds	r1, r1, r4
    7e8a:	4244      	negs	r4, r0
    7e8c:	190c      	adds	r4, r1, r4
    7e8e:	0223      	lsls	r3, r4, #8
    7e90:	d53a      	bpl.n	7f08 <__aeabi_dsub+0x244>
    7e92:	4b5d      	ldr	r3, [pc, #372]	; (8008 <__aeabi_dsub+0x344>)
    7e94:	3601      	adds	r6, #1
    7e96:	429e      	cmp	r6, r3
    7e98:	d100      	bne.n	7e9c <__aeabi_dsub+0x1d8>
    7e9a:	e14b      	b.n	8134 <__aeabi_dsub+0x470>
    7e9c:	2201      	movs	r2, #1
    7e9e:	4b5b      	ldr	r3, [pc, #364]	; (800c <__aeabi_dsub+0x348>)
    7ea0:	401c      	ands	r4, r3
    7ea2:	087b      	lsrs	r3, r7, #1
    7ea4:	4017      	ands	r7, r2
    7ea6:	431f      	orrs	r7, r3
    7ea8:	07e2      	lsls	r2, r4, #31
    7eaa:	4317      	orrs	r7, r2
    7eac:	0864      	lsrs	r4, r4, #1
    7eae:	e78f      	b.n	7dd0 <__aeabi_dsub+0x10c>
    7eb0:	0008      	movs	r0, r1
    7eb2:	4310      	orrs	r0, r2
    7eb4:	d000      	beq.n	7eb8 <__aeabi_dsub+0x1f4>
    7eb6:	e724      	b.n	7d02 <__aeabi_dsub+0x3e>
    7eb8:	e721      	b.n	7cfe <__aeabi_dsub+0x3a>
    7eba:	0023      	movs	r3, r4
    7ebc:	433b      	orrs	r3, r7
    7ebe:	d100      	bne.n	7ec2 <__aeabi_dsub+0x1fe>
    7ec0:	e1b9      	b.n	8236 <__aeabi_dsub+0x572>
    7ec2:	2280      	movs	r2, #128	; 0x80
    7ec4:	0312      	lsls	r2, r2, #12
    7ec6:	4314      	orrs	r4, r2
    7ec8:	0324      	lsls	r4, r4, #12
    7eca:	0b24      	lsrs	r4, r4, #12
    7ecc:	e79f      	b.n	7e0e <__aeabi_dsub+0x14a>
    7ece:	002e      	movs	r6, r5
    7ed0:	e77e      	b.n	7dd0 <__aeabi_dsub+0x10c>
    7ed2:	0008      	movs	r0, r1
    7ed4:	4310      	orrs	r0, r2
    7ed6:	d100      	bne.n	7eda <__aeabi_dsub+0x216>
    7ed8:	e0ca      	b.n	8070 <__aeabi_dsub+0x3ac>
    7eda:	1e58      	subs	r0, r3, #1
    7edc:	4684      	mov	ip, r0
    7ede:	2800      	cmp	r0, #0
    7ee0:	d000      	beq.n	7ee4 <__aeabi_dsub+0x220>
    7ee2:	e0e7      	b.n	80b4 <__aeabi_dsub+0x3f0>
    7ee4:	4452      	add	r2, sl
    7ee6:	4552      	cmp	r2, sl
    7ee8:	4180      	sbcs	r0, r0
    7eea:	1864      	adds	r4, r4, r1
    7eec:	4240      	negs	r0, r0
    7eee:	1824      	adds	r4, r4, r0
    7ef0:	0017      	movs	r7, r2
    7ef2:	2601      	movs	r6, #1
    7ef4:	0223      	lsls	r3, r4, #8
    7ef6:	d507      	bpl.n	7f08 <__aeabi_dsub+0x244>
    7ef8:	2602      	movs	r6, #2
    7efa:	e7cf      	b.n	7e9c <__aeabi_dsub+0x1d8>
    7efc:	4664      	mov	r4, ip
    7efe:	432c      	orrs	r4, r5
    7f00:	d100      	bne.n	7f04 <__aeabi_dsub+0x240>
    7f02:	e1b3      	b.n	826c <__aeabi_dsub+0x5a8>
    7f04:	002c      	movs	r4, r5
    7f06:	4667      	mov	r7, ip
    7f08:	077b      	lsls	r3, r7, #29
    7f0a:	d000      	beq.n	7f0e <__aeabi_dsub+0x24a>
    7f0c:	e762      	b.n	7dd4 <__aeabi_dsub+0x110>
    7f0e:	0763      	lsls	r3, r4, #29
    7f10:	08ff      	lsrs	r7, r7, #3
    7f12:	431f      	orrs	r7, r3
    7f14:	2501      	movs	r5, #1
    7f16:	4643      	mov	r3, r8
    7f18:	08e4      	lsrs	r4, r4, #3
    7f1a:	401d      	ands	r5, r3
    7f1c:	e793      	b.n	7e46 <__aeabi_dsub+0x182>
    7f1e:	2d00      	cmp	r5, #0
    7f20:	d178      	bne.n	8014 <__aeabi_dsub+0x350>
    7f22:	1c75      	adds	r5, r6, #1
    7f24:	056d      	lsls	r5, r5, #21
    7f26:	0d6d      	lsrs	r5, r5, #21
    7f28:	2d01      	cmp	r5, #1
    7f2a:	dc00      	bgt.n	7f2e <__aeabi_dsub+0x26a>
    7f2c:	e0f2      	b.n	8114 <__aeabi_dsub+0x450>
    7f2e:	4650      	mov	r0, sl
    7f30:	1a80      	subs	r0, r0, r2
    7f32:	4582      	cmp	sl, r0
    7f34:	41bf      	sbcs	r7, r7
    7f36:	1a65      	subs	r5, r4, r1
    7f38:	427f      	negs	r7, r7
    7f3a:	1bed      	subs	r5, r5, r7
    7f3c:	4684      	mov	ip, r0
    7f3e:	0228      	lsls	r0, r5, #8
    7f40:	d400      	bmi.n	7f44 <__aeabi_dsub+0x280>
    7f42:	e08c      	b.n	805e <__aeabi_dsub+0x39a>
    7f44:	4650      	mov	r0, sl
    7f46:	1a17      	subs	r7, r2, r0
    7f48:	42ba      	cmp	r2, r7
    7f4a:	4192      	sbcs	r2, r2
    7f4c:	1b0c      	subs	r4, r1, r4
    7f4e:	4255      	negs	r5, r2
    7f50:	1b65      	subs	r5, r4, r5
    7f52:	4698      	mov	r8, r3
    7f54:	e714      	b.n	7d80 <__aeabi_dsub+0xbc>
    7f56:	2501      	movs	r5, #1
    7f58:	4643      	mov	r3, r8
    7f5a:	2400      	movs	r4, #0
    7f5c:	401d      	ands	r5, r3
    7f5e:	2700      	movs	r7, #0
    7f60:	e755      	b.n	7e0e <__aeabi_dsub+0x14a>
    7f62:	4c2a      	ldr	r4, [pc, #168]	; (800c <__aeabi_dsub+0x348>)
    7f64:	1af6      	subs	r6, r6, r3
    7f66:	402c      	ands	r4, r5
    7f68:	e732      	b.n	7dd0 <__aeabi_dsub+0x10c>
    7f6a:	003d      	movs	r5, r7
    7f6c:	3828      	subs	r0, #40	; 0x28
    7f6e:	4085      	lsls	r5, r0
    7f70:	2700      	movs	r7, #0
    7f72:	e717      	b.n	7da4 <__aeabi_dsub+0xe0>
    7f74:	0038      	movs	r0, r7
    7f76:	f000 f9fd 	bl	8374 <__clzsi2>
    7f7a:	3020      	adds	r0, #32
    7f7c:	e706      	b.n	7d8c <__aeabi_dsub+0xc8>
    7f7e:	430a      	orrs	r2, r1
    7f80:	0017      	movs	r7, r2
    7f82:	2100      	movs	r1, #0
    7f84:	1e7a      	subs	r2, r7, #1
    7f86:	4197      	sbcs	r7, r2
    7f88:	e6ee      	b.n	7d68 <__aeabi_dsub+0xa4>
    7f8a:	2b00      	cmp	r3, #0
    7f8c:	d000      	beq.n	7f90 <__aeabi_dsub+0x2cc>
    7f8e:	e0e5      	b.n	815c <__aeabi_dsub+0x498>
    7f90:	1c73      	adds	r3, r6, #1
    7f92:	469c      	mov	ip, r3
    7f94:	055b      	lsls	r3, r3, #21
    7f96:	0d5b      	lsrs	r3, r3, #21
    7f98:	2b01      	cmp	r3, #1
    7f9a:	dc00      	bgt.n	7f9e <__aeabi_dsub+0x2da>
    7f9c:	e09f      	b.n	80de <__aeabi_dsub+0x41a>
    7f9e:	4b1a      	ldr	r3, [pc, #104]	; (8008 <__aeabi_dsub+0x344>)
    7fa0:	459c      	cmp	ip, r3
    7fa2:	d100      	bne.n	7fa6 <__aeabi_dsub+0x2e2>
    7fa4:	e0c5      	b.n	8132 <__aeabi_dsub+0x46e>
    7fa6:	4452      	add	r2, sl
    7fa8:	4552      	cmp	r2, sl
    7faa:	4180      	sbcs	r0, r0
    7fac:	1864      	adds	r4, r4, r1
    7fae:	4240      	negs	r0, r0
    7fb0:	1824      	adds	r4, r4, r0
    7fb2:	07e7      	lsls	r7, r4, #31
    7fb4:	0852      	lsrs	r2, r2, #1
    7fb6:	4317      	orrs	r7, r2
    7fb8:	0864      	lsrs	r4, r4, #1
    7fba:	4666      	mov	r6, ip
    7fbc:	e708      	b.n	7dd0 <__aeabi_dsub+0x10c>
    7fbe:	4812      	ldr	r0, [pc, #72]	; (8008 <__aeabi_dsub+0x344>)
    7fc0:	4285      	cmp	r5, r0
    7fc2:	d100      	bne.n	7fc6 <__aeabi_dsub+0x302>
    7fc4:	e085      	b.n	80d2 <__aeabi_dsub+0x40e>
    7fc6:	001d      	movs	r5, r3
    7fc8:	e6bc      	b.n	7d44 <__aeabi_dsub+0x80>
    7fca:	0029      	movs	r1, r5
    7fcc:	3e1f      	subs	r6, #31
    7fce:	40f1      	lsrs	r1, r6
    7fd0:	2b20      	cmp	r3, #32
    7fd2:	d100      	bne.n	7fd6 <__aeabi_dsub+0x312>
    7fd4:	e07f      	b.n	80d6 <__aeabi_dsub+0x412>
    7fd6:	2240      	movs	r2, #64	; 0x40
    7fd8:	1ad3      	subs	r3, r2, r3
    7fda:	409d      	lsls	r5, r3
    7fdc:	432f      	orrs	r7, r5
    7fde:	1e7d      	subs	r5, r7, #1
    7fe0:	41af      	sbcs	r7, r5
    7fe2:	2400      	movs	r4, #0
    7fe4:	430f      	orrs	r7, r1
    7fe6:	2600      	movs	r6, #0
    7fe8:	e78e      	b.n	7f08 <__aeabi_dsub+0x244>
    7fea:	002b      	movs	r3, r5
    7fec:	000f      	movs	r7, r1
    7fee:	3b20      	subs	r3, #32
    7ff0:	40df      	lsrs	r7, r3
    7ff2:	2d20      	cmp	r5, #32
    7ff4:	d071      	beq.n	80da <__aeabi_dsub+0x416>
    7ff6:	2340      	movs	r3, #64	; 0x40
    7ff8:	1b5d      	subs	r5, r3, r5
    7ffa:	40a9      	lsls	r1, r5
    7ffc:	430a      	orrs	r2, r1
    7ffe:	1e51      	subs	r1, r2, #1
    8000:	418a      	sbcs	r2, r1
    8002:	2100      	movs	r1, #0
    8004:	4317      	orrs	r7, r2
    8006:	e6af      	b.n	7d68 <__aeabi_dsub+0xa4>
    8008:	000007ff 	.word	0x000007ff
    800c:	ff7fffff 	.word	0xff7fffff
    8010:	800fffff 	.word	0x800fffff
    8014:	2e00      	cmp	r6, #0
    8016:	d03e      	beq.n	8096 <__aeabi_dsub+0x3d2>
    8018:	4eb3      	ldr	r6, [pc, #716]	; (82e8 <__aeabi_dsub+0x624>)
    801a:	45b4      	cmp	ip, r6
    801c:	d045      	beq.n	80aa <__aeabi_dsub+0x3e6>
    801e:	2680      	movs	r6, #128	; 0x80
    8020:	0436      	lsls	r6, r6, #16
    8022:	426d      	negs	r5, r5
    8024:	4334      	orrs	r4, r6
    8026:	2d38      	cmp	r5, #56	; 0x38
    8028:	dd00      	ble.n	802c <__aeabi_dsub+0x368>
    802a:	e0a8      	b.n	817e <__aeabi_dsub+0x4ba>
    802c:	2d1f      	cmp	r5, #31
    802e:	dd00      	ble.n	8032 <__aeabi_dsub+0x36e>
    8030:	e11f      	b.n	8272 <__aeabi_dsub+0x5ae>
    8032:	2620      	movs	r6, #32
    8034:	0027      	movs	r7, r4
    8036:	4650      	mov	r0, sl
    8038:	1b76      	subs	r6, r6, r5
    803a:	40b7      	lsls	r7, r6
    803c:	40e8      	lsrs	r0, r5
    803e:	4307      	orrs	r7, r0
    8040:	4650      	mov	r0, sl
    8042:	40b0      	lsls	r0, r6
    8044:	1e46      	subs	r6, r0, #1
    8046:	41b0      	sbcs	r0, r6
    8048:	40ec      	lsrs	r4, r5
    804a:	4338      	orrs	r0, r7
    804c:	1a17      	subs	r7, r2, r0
    804e:	42ba      	cmp	r2, r7
    8050:	4192      	sbcs	r2, r2
    8052:	1b0c      	subs	r4, r1, r4
    8054:	4252      	negs	r2, r2
    8056:	1aa4      	subs	r4, r4, r2
    8058:	4666      	mov	r6, ip
    805a:	4698      	mov	r8, r3
    805c:	e68b      	b.n	7d76 <__aeabi_dsub+0xb2>
    805e:	4664      	mov	r4, ip
    8060:	4667      	mov	r7, ip
    8062:	432c      	orrs	r4, r5
    8064:	d000      	beq.n	8068 <__aeabi_dsub+0x3a4>
    8066:	e68b      	b.n	7d80 <__aeabi_dsub+0xbc>
    8068:	2500      	movs	r5, #0
    806a:	2600      	movs	r6, #0
    806c:	2700      	movs	r7, #0
    806e:	e6ea      	b.n	7e46 <__aeabi_dsub+0x182>
    8070:	001e      	movs	r6, r3
    8072:	e6ad      	b.n	7dd0 <__aeabi_dsub+0x10c>
    8074:	2b1f      	cmp	r3, #31
    8076:	dc60      	bgt.n	813a <__aeabi_dsub+0x476>
    8078:	2720      	movs	r7, #32
    807a:	1af8      	subs	r0, r7, r3
    807c:	000f      	movs	r7, r1
    807e:	4684      	mov	ip, r0
    8080:	4087      	lsls	r7, r0
    8082:	0010      	movs	r0, r2
    8084:	40d8      	lsrs	r0, r3
    8086:	4307      	orrs	r7, r0
    8088:	4660      	mov	r0, ip
    808a:	4082      	lsls	r2, r0
    808c:	1e50      	subs	r0, r2, #1
    808e:	4182      	sbcs	r2, r0
    8090:	40d9      	lsrs	r1, r3
    8092:	4317      	orrs	r7, r2
    8094:	e6f5      	b.n	7e82 <__aeabi_dsub+0x1be>
    8096:	0026      	movs	r6, r4
    8098:	4650      	mov	r0, sl
    809a:	4306      	orrs	r6, r0
    809c:	d005      	beq.n	80aa <__aeabi_dsub+0x3e6>
    809e:	43ed      	mvns	r5, r5
    80a0:	2d00      	cmp	r5, #0
    80a2:	d0d3      	beq.n	804c <__aeabi_dsub+0x388>
    80a4:	4e90      	ldr	r6, [pc, #576]	; (82e8 <__aeabi_dsub+0x624>)
    80a6:	45b4      	cmp	ip, r6
    80a8:	d1bd      	bne.n	8026 <__aeabi_dsub+0x362>
    80aa:	000c      	movs	r4, r1
    80ac:	0017      	movs	r7, r2
    80ae:	4666      	mov	r6, ip
    80b0:	4698      	mov	r8, r3
    80b2:	e68d      	b.n	7dd0 <__aeabi_dsub+0x10c>
    80b4:	488c      	ldr	r0, [pc, #560]	; (82e8 <__aeabi_dsub+0x624>)
    80b6:	4283      	cmp	r3, r0
    80b8:	d00b      	beq.n	80d2 <__aeabi_dsub+0x40e>
    80ba:	4663      	mov	r3, ip
    80bc:	e6d9      	b.n	7e72 <__aeabi_dsub+0x1ae>
    80be:	2d00      	cmp	r5, #0
    80c0:	d000      	beq.n	80c4 <__aeabi_dsub+0x400>
    80c2:	e096      	b.n	81f2 <__aeabi_dsub+0x52e>
    80c4:	0008      	movs	r0, r1
    80c6:	4310      	orrs	r0, r2
    80c8:	d100      	bne.n	80cc <__aeabi_dsub+0x408>
    80ca:	e0e2      	b.n	8292 <__aeabi_dsub+0x5ce>
    80cc:	000c      	movs	r4, r1
    80ce:	0017      	movs	r7, r2
    80d0:	4698      	mov	r8, r3
    80d2:	4e85      	ldr	r6, [pc, #532]	; (82e8 <__aeabi_dsub+0x624>)
    80d4:	e67c      	b.n	7dd0 <__aeabi_dsub+0x10c>
    80d6:	2500      	movs	r5, #0
    80d8:	e780      	b.n	7fdc <__aeabi_dsub+0x318>
    80da:	2100      	movs	r1, #0
    80dc:	e78e      	b.n	7ffc <__aeabi_dsub+0x338>
    80de:	0023      	movs	r3, r4
    80e0:	4650      	mov	r0, sl
    80e2:	4303      	orrs	r3, r0
    80e4:	2e00      	cmp	r6, #0
    80e6:	d000      	beq.n	80ea <__aeabi_dsub+0x426>
    80e8:	e0a8      	b.n	823c <__aeabi_dsub+0x578>
    80ea:	2b00      	cmp	r3, #0
    80ec:	d100      	bne.n	80f0 <__aeabi_dsub+0x42c>
    80ee:	e0de      	b.n	82ae <__aeabi_dsub+0x5ea>
    80f0:	000b      	movs	r3, r1
    80f2:	4313      	orrs	r3, r2
    80f4:	d100      	bne.n	80f8 <__aeabi_dsub+0x434>
    80f6:	e66b      	b.n	7dd0 <__aeabi_dsub+0x10c>
    80f8:	4452      	add	r2, sl
    80fa:	4552      	cmp	r2, sl
    80fc:	4180      	sbcs	r0, r0
    80fe:	1864      	adds	r4, r4, r1
    8100:	4240      	negs	r0, r0
    8102:	1824      	adds	r4, r4, r0
    8104:	0017      	movs	r7, r2
    8106:	0223      	lsls	r3, r4, #8
    8108:	d400      	bmi.n	810c <__aeabi_dsub+0x448>
    810a:	e6fd      	b.n	7f08 <__aeabi_dsub+0x244>
    810c:	4b77      	ldr	r3, [pc, #476]	; (82ec <__aeabi_dsub+0x628>)
    810e:	4666      	mov	r6, ip
    8110:	401c      	ands	r4, r3
    8112:	e65d      	b.n	7dd0 <__aeabi_dsub+0x10c>
    8114:	0025      	movs	r5, r4
    8116:	4650      	mov	r0, sl
    8118:	4305      	orrs	r5, r0
    811a:	2e00      	cmp	r6, #0
    811c:	d1cf      	bne.n	80be <__aeabi_dsub+0x3fa>
    811e:	2d00      	cmp	r5, #0
    8120:	d14f      	bne.n	81c2 <__aeabi_dsub+0x4fe>
    8122:	000c      	movs	r4, r1
    8124:	4314      	orrs	r4, r2
    8126:	d100      	bne.n	812a <__aeabi_dsub+0x466>
    8128:	e0a0      	b.n	826c <__aeabi_dsub+0x5a8>
    812a:	000c      	movs	r4, r1
    812c:	0017      	movs	r7, r2
    812e:	4698      	mov	r8, r3
    8130:	e64e      	b.n	7dd0 <__aeabi_dsub+0x10c>
    8132:	4666      	mov	r6, ip
    8134:	2400      	movs	r4, #0
    8136:	2700      	movs	r7, #0
    8138:	e685      	b.n	7e46 <__aeabi_dsub+0x182>
    813a:	001f      	movs	r7, r3
    813c:	0008      	movs	r0, r1
    813e:	3f20      	subs	r7, #32
    8140:	40f8      	lsrs	r0, r7
    8142:	0007      	movs	r7, r0
    8144:	2b20      	cmp	r3, #32
    8146:	d100      	bne.n	814a <__aeabi_dsub+0x486>
    8148:	e08e      	b.n	8268 <__aeabi_dsub+0x5a4>
    814a:	2040      	movs	r0, #64	; 0x40
    814c:	1ac3      	subs	r3, r0, r3
    814e:	4099      	lsls	r1, r3
    8150:	430a      	orrs	r2, r1
    8152:	1e51      	subs	r1, r2, #1
    8154:	418a      	sbcs	r2, r1
    8156:	2100      	movs	r1, #0
    8158:	4317      	orrs	r7, r2
    815a:	e692      	b.n	7e82 <__aeabi_dsub+0x1be>
    815c:	2e00      	cmp	r6, #0
    815e:	d114      	bne.n	818a <__aeabi_dsub+0x4c6>
    8160:	0026      	movs	r6, r4
    8162:	4650      	mov	r0, sl
    8164:	4306      	orrs	r6, r0
    8166:	d062      	beq.n	822e <__aeabi_dsub+0x56a>
    8168:	43db      	mvns	r3, r3
    816a:	2b00      	cmp	r3, #0
    816c:	d15c      	bne.n	8228 <__aeabi_dsub+0x564>
    816e:	1887      	adds	r7, r0, r2
    8170:	4297      	cmp	r7, r2
    8172:	4192      	sbcs	r2, r2
    8174:	1864      	adds	r4, r4, r1
    8176:	4252      	negs	r2, r2
    8178:	18a4      	adds	r4, r4, r2
    817a:	4666      	mov	r6, ip
    817c:	e687      	b.n	7e8e <__aeabi_dsub+0x1ca>
    817e:	4650      	mov	r0, sl
    8180:	4320      	orrs	r0, r4
    8182:	1e44      	subs	r4, r0, #1
    8184:	41a0      	sbcs	r0, r4
    8186:	2400      	movs	r4, #0
    8188:	e760      	b.n	804c <__aeabi_dsub+0x388>
    818a:	4e57      	ldr	r6, [pc, #348]	; (82e8 <__aeabi_dsub+0x624>)
    818c:	45b4      	cmp	ip, r6
    818e:	d04e      	beq.n	822e <__aeabi_dsub+0x56a>
    8190:	2680      	movs	r6, #128	; 0x80
    8192:	0436      	lsls	r6, r6, #16
    8194:	425b      	negs	r3, r3
    8196:	4334      	orrs	r4, r6
    8198:	2b38      	cmp	r3, #56	; 0x38
    819a:	dd00      	ble.n	819e <__aeabi_dsub+0x4da>
    819c:	e07f      	b.n	829e <__aeabi_dsub+0x5da>
    819e:	2b1f      	cmp	r3, #31
    81a0:	dd00      	ble.n	81a4 <__aeabi_dsub+0x4e0>
    81a2:	e08b      	b.n	82bc <__aeabi_dsub+0x5f8>
    81a4:	2620      	movs	r6, #32
    81a6:	0027      	movs	r7, r4
    81a8:	4650      	mov	r0, sl
    81aa:	1af6      	subs	r6, r6, r3
    81ac:	40b7      	lsls	r7, r6
    81ae:	40d8      	lsrs	r0, r3
    81b0:	4307      	orrs	r7, r0
    81b2:	4650      	mov	r0, sl
    81b4:	40b0      	lsls	r0, r6
    81b6:	1e46      	subs	r6, r0, #1
    81b8:	41b0      	sbcs	r0, r6
    81ba:	4307      	orrs	r7, r0
    81bc:	40dc      	lsrs	r4, r3
    81be:	18bf      	adds	r7, r7, r2
    81c0:	e7d6      	b.n	8170 <__aeabi_dsub+0x4ac>
    81c2:	000d      	movs	r5, r1
    81c4:	4315      	orrs	r5, r2
    81c6:	d100      	bne.n	81ca <__aeabi_dsub+0x506>
    81c8:	e602      	b.n	7dd0 <__aeabi_dsub+0x10c>
    81ca:	4650      	mov	r0, sl
    81cc:	1a80      	subs	r0, r0, r2
    81ce:	4582      	cmp	sl, r0
    81d0:	41bf      	sbcs	r7, r7
    81d2:	1a65      	subs	r5, r4, r1
    81d4:	427f      	negs	r7, r7
    81d6:	1bed      	subs	r5, r5, r7
    81d8:	4684      	mov	ip, r0
    81da:	0228      	lsls	r0, r5, #8
    81dc:	d400      	bmi.n	81e0 <__aeabi_dsub+0x51c>
    81de:	e68d      	b.n	7efc <__aeabi_dsub+0x238>
    81e0:	4650      	mov	r0, sl
    81e2:	1a17      	subs	r7, r2, r0
    81e4:	42ba      	cmp	r2, r7
    81e6:	4192      	sbcs	r2, r2
    81e8:	1b0c      	subs	r4, r1, r4
    81ea:	4252      	negs	r2, r2
    81ec:	1aa4      	subs	r4, r4, r2
    81ee:	4698      	mov	r8, r3
    81f0:	e5ee      	b.n	7dd0 <__aeabi_dsub+0x10c>
    81f2:	000d      	movs	r5, r1
    81f4:	4315      	orrs	r5, r2
    81f6:	d100      	bne.n	81fa <__aeabi_dsub+0x536>
    81f8:	e76b      	b.n	80d2 <__aeabi_dsub+0x40e>
    81fa:	4650      	mov	r0, sl
    81fc:	0767      	lsls	r7, r4, #29
    81fe:	08c0      	lsrs	r0, r0, #3
    8200:	4307      	orrs	r7, r0
    8202:	2080      	movs	r0, #128	; 0x80
    8204:	08e4      	lsrs	r4, r4, #3
    8206:	0300      	lsls	r0, r0, #12
    8208:	4204      	tst	r4, r0
    820a:	d007      	beq.n	821c <__aeabi_dsub+0x558>
    820c:	08cd      	lsrs	r5, r1, #3
    820e:	4205      	tst	r5, r0
    8210:	d104      	bne.n	821c <__aeabi_dsub+0x558>
    8212:	002c      	movs	r4, r5
    8214:	4698      	mov	r8, r3
    8216:	08d7      	lsrs	r7, r2, #3
    8218:	0749      	lsls	r1, r1, #29
    821a:	430f      	orrs	r7, r1
    821c:	0f7b      	lsrs	r3, r7, #29
    821e:	00e4      	lsls	r4, r4, #3
    8220:	431c      	orrs	r4, r3
    8222:	00ff      	lsls	r7, r7, #3
    8224:	4e30      	ldr	r6, [pc, #192]	; (82e8 <__aeabi_dsub+0x624>)
    8226:	e5d3      	b.n	7dd0 <__aeabi_dsub+0x10c>
    8228:	4e2f      	ldr	r6, [pc, #188]	; (82e8 <__aeabi_dsub+0x624>)
    822a:	45b4      	cmp	ip, r6
    822c:	d1b4      	bne.n	8198 <__aeabi_dsub+0x4d4>
    822e:	000c      	movs	r4, r1
    8230:	0017      	movs	r7, r2
    8232:	4666      	mov	r6, ip
    8234:	e5cc      	b.n	7dd0 <__aeabi_dsub+0x10c>
    8236:	2700      	movs	r7, #0
    8238:	2400      	movs	r4, #0
    823a:	e5e8      	b.n	7e0e <__aeabi_dsub+0x14a>
    823c:	2b00      	cmp	r3, #0
    823e:	d039      	beq.n	82b4 <__aeabi_dsub+0x5f0>
    8240:	000b      	movs	r3, r1
    8242:	4313      	orrs	r3, r2
    8244:	d100      	bne.n	8248 <__aeabi_dsub+0x584>
    8246:	e744      	b.n	80d2 <__aeabi_dsub+0x40e>
    8248:	08c0      	lsrs	r0, r0, #3
    824a:	0767      	lsls	r7, r4, #29
    824c:	4307      	orrs	r7, r0
    824e:	2080      	movs	r0, #128	; 0x80
    8250:	08e4      	lsrs	r4, r4, #3
    8252:	0300      	lsls	r0, r0, #12
    8254:	4204      	tst	r4, r0
    8256:	d0e1      	beq.n	821c <__aeabi_dsub+0x558>
    8258:	08cb      	lsrs	r3, r1, #3
    825a:	4203      	tst	r3, r0
    825c:	d1de      	bne.n	821c <__aeabi_dsub+0x558>
    825e:	08d7      	lsrs	r7, r2, #3
    8260:	0749      	lsls	r1, r1, #29
    8262:	430f      	orrs	r7, r1
    8264:	001c      	movs	r4, r3
    8266:	e7d9      	b.n	821c <__aeabi_dsub+0x558>
    8268:	2100      	movs	r1, #0
    826a:	e771      	b.n	8150 <__aeabi_dsub+0x48c>
    826c:	2500      	movs	r5, #0
    826e:	2700      	movs	r7, #0
    8270:	e5e9      	b.n	7e46 <__aeabi_dsub+0x182>
    8272:	002e      	movs	r6, r5
    8274:	0027      	movs	r7, r4
    8276:	3e20      	subs	r6, #32
    8278:	40f7      	lsrs	r7, r6
    827a:	2d20      	cmp	r5, #32
    827c:	d02f      	beq.n	82de <__aeabi_dsub+0x61a>
    827e:	2640      	movs	r6, #64	; 0x40
    8280:	1b75      	subs	r5, r6, r5
    8282:	40ac      	lsls	r4, r5
    8284:	4650      	mov	r0, sl
    8286:	4320      	orrs	r0, r4
    8288:	1e44      	subs	r4, r0, #1
    828a:	41a0      	sbcs	r0, r4
    828c:	2400      	movs	r4, #0
    828e:	4338      	orrs	r0, r7
    8290:	e6dc      	b.n	804c <__aeabi_dsub+0x388>
    8292:	2480      	movs	r4, #128	; 0x80
    8294:	2500      	movs	r5, #0
    8296:	0324      	lsls	r4, r4, #12
    8298:	4e13      	ldr	r6, [pc, #76]	; (82e8 <__aeabi_dsub+0x624>)
    829a:	2700      	movs	r7, #0
    829c:	e5d3      	b.n	7e46 <__aeabi_dsub+0x182>
    829e:	4650      	mov	r0, sl
    82a0:	4320      	orrs	r0, r4
    82a2:	0007      	movs	r7, r0
    82a4:	1e78      	subs	r0, r7, #1
    82a6:	4187      	sbcs	r7, r0
    82a8:	2400      	movs	r4, #0
    82aa:	18bf      	adds	r7, r7, r2
    82ac:	e760      	b.n	8170 <__aeabi_dsub+0x4ac>
    82ae:	000c      	movs	r4, r1
    82b0:	0017      	movs	r7, r2
    82b2:	e58d      	b.n	7dd0 <__aeabi_dsub+0x10c>
    82b4:	000c      	movs	r4, r1
    82b6:	0017      	movs	r7, r2
    82b8:	4e0b      	ldr	r6, [pc, #44]	; (82e8 <__aeabi_dsub+0x624>)
    82ba:	e589      	b.n	7dd0 <__aeabi_dsub+0x10c>
    82bc:	001e      	movs	r6, r3
    82be:	0027      	movs	r7, r4
    82c0:	3e20      	subs	r6, #32
    82c2:	40f7      	lsrs	r7, r6
    82c4:	2b20      	cmp	r3, #32
    82c6:	d00c      	beq.n	82e2 <__aeabi_dsub+0x61e>
    82c8:	2640      	movs	r6, #64	; 0x40
    82ca:	1af3      	subs	r3, r6, r3
    82cc:	409c      	lsls	r4, r3
    82ce:	4650      	mov	r0, sl
    82d0:	4320      	orrs	r0, r4
    82d2:	1e44      	subs	r4, r0, #1
    82d4:	41a0      	sbcs	r0, r4
    82d6:	4307      	orrs	r7, r0
    82d8:	2400      	movs	r4, #0
    82da:	18bf      	adds	r7, r7, r2
    82dc:	e748      	b.n	8170 <__aeabi_dsub+0x4ac>
    82de:	2400      	movs	r4, #0
    82e0:	e7d0      	b.n	8284 <__aeabi_dsub+0x5c0>
    82e2:	2400      	movs	r4, #0
    82e4:	e7f3      	b.n	82ce <__aeabi_dsub+0x60a>
    82e6:	46c0      	nop			; (mov r8, r8)
    82e8:	000007ff 	.word	0x000007ff
    82ec:	ff7fffff 	.word	0xff7fffff

000082f0 <__aeabi_i2d>:
    82f0:	b570      	push	{r4, r5, r6, lr}
    82f2:	2800      	cmp	r0, #0
    82f4:	d030      	beq.n	8358 <__aeabi_i2d+0x68>
    82f6:	17c3      	asrs	r3, r0, #31
    82f8:	18c4      	adds	r4, r0, r3
    82fa:	405c      	eors	r4, r3
    82fc:	0fc5      	lsrs	r5, r0, #31
    82fe:	0020      	movs	r0, r4
    8300:	f000 f838 	bl	8374 <__clzsi2>
    8304:	4b17      	ldr	r3, [pc, #92]	; (8364 <__aeabi_i2d+0x74>)
    8306:	4a18      	ldr	r2, [pc, #96]	; (8368 <__aeabi_i2d+0x78>)
    8308:	1a1b      	subs	r3, r3, r0
    830a:	1ad2      	subs	r2, r2, r3
    830c:	2a1f      	cmp	r2, #31
    830e:	dd18      	ble.n	8342 <__aeabi_i2d+0x52>
    8310:	4a16      	ldr	r2, [pc, #88]	; (836c <__aeabi_i2d+0x7c>)
    8312:	1ad2      	subs	r2, r2, r3
    8314:	4094      	lsls	r4, r2
    8316:	2200      	movs	r2, #0
    8318:	0324      	lsls	r4, r4, #12
    831a:	055b      	lsls	r3, r3, #21
    831c:	0b24      	lsrs	r4, r4, #12
    831e:	0d5b      	lsrs	r3, r3, #21
    8320:	2100      	movs	r1, #0
    8322:	0010      	movs	r0, r2
    8324:	0324      	lsls	r4, r4, #12
    8326:	0d0a      	lsrs	r2, r1, #20
    8328:	0b24      	lsrs	r4, r4, #12
    832a:	0512      	lsls	r2, r2, #20
    832c:	4322      	orrs	r2, r4
    832e:	4c10      	ldr	r4, [pc, #64]	; (8370 <__aeabi_i2d+0x80>)
    8330:	051b      	lsls	r3, r3, #20
    8332:	4022      	ands	r2, r4
    8334:	4313      	orrs	r3, r2
    8336:	005b      	lsls	r3, r3, #1
    8338:	07ed      	lsls	r5, r5, #31
    833a:	085b      	lsrs	r3, r3, #1
    833c:	432b      	orrs	r3, r5
    833e:	0019      	movs	r1, r3
    8340:	bd70      	pop	{r4, r5, r6, pc}
    8342:	0021      	movs	r1, r4
    8344:	4091      	lsls	r1, r2
    8346:	000a      	movs	r2, r1
    8348:	210b      	movs	r1, #11
    834a:	1a08      	subs	r0, r1, r0
    834c:	40c4      	lsrs	r4, r0
    834e:	055b      	lsls	r3, r3, #21
    8350:	0324      	lsls	r4, r4, #12
    8352:	0b24      	lsrs	r4, r4, #12
    8354:	0d5b      	lsrs	r3, r3, #21
    8356:	e7e3      	b.n	8320 <__aeabi_i2d+0x30>
    8358:	2500      	movs	r5, #0
    835a:	2300      	movs	r3, #0
    835c:	2400      	movs	r4, #0
    835e:	2200      	movs	r2, #0
    8360:	e7de      	b.n	8320 <__aeabi_i2d+0x30>
    8362:	46c0      	nop			; (mov r8, r8)
    8364:	0000041e 	.word	0x0000041e
    8368:	00000433 	.word	0x00000433
    836c:	00000413 	.word	0x00000413
    8370:	800fffff 	.word	0x800fffff

00008374 <__clzsi2>:
    8374:	211c      	movs	r1, #28
    8376:	2301      	movs	r3, #1
    8378:	041b      	lsls	r3, r3, #16
    837a:	4298      	cmp	r0, r3
    837c:	d301      	bcc.n	8382 <__clzsi2+0xe>
    837e:	0c00      	lsrs	r0, r0, #16
    8380:	3910      	subs	r1, #16
    8382:	0a1b      	lsrs	r3, r3, #8
    8384:	4298      	cmp	r0, r3
    8386:	d301      	bcc.n	838c <__clzsi2+0x18>
    8388:	0a00      	lsrs	r0, r0, #8
    838a:	3908      	subs	r1, #8
    838c:	091b      	lsrs	r3, r3, #4
    838e:	4298      	cmp	r0, r3
    8390:	d301      	bcc.n	8396 <__clzsi2+0x22>
    8392:	0900      	lsrs	r0, r0, #4
    8394:	3904      	subs	r1, #4
    8396:	a202      	add	r2, pc, #8	; (adr r2, 83a0 <__clzsi2+0x2c>)
    8398:	5c10      	ldrb	r0, [r2, r0]
    839a:	1840      	adds	r0, r0, r1
    839c:	4770      	bx	lr
    839e:	46c0      	nop			; (mov r8, r8)
    83a0:	02020304 	.word	0x02020304
    83a4:	01010101 	.word	0x01010101
	...

000083b0 <__libc_init_array>:
    83b0:	b570      	push	{r4, r5, r6, lr}
    83b2:	2600      	movs	r6, #0
    83b4:	4d0c      	ldr	r5, [pc, #48]	; (83e8 <__libc_init_array+0x38>)
    83b6:	4c0d      	ldr	r4, [pc, #52]	; (83ec <__libc_init_array+0x3c>)
    83b8:	1b64      	subs	r4, r4, r5
    83ba:	10a4      	asrs	r4, r4, #2
    83bc:	42a6      	cmp	r6, r4
    83be:	d109      	bne.n	83d4 <__libc_init_array+0x24>
    83c0:	2600      	movs	r6, #0
    83c2:	f000 f9d7 	bl	8774 <_init>
    83c6:	4d0a      	ldr	r5, [pc, #40]	; (83f0 <__libc_init_array+0x40>)
    83c8:	4c0a      	ldr	r4, [pc, #40]	; (83f4 <__libc_init_array+0x44>)
    83ca:	1b64      	subs	r4, r4, r5
    83cc:	10a4      	asrs	r4, r4, #2
    83ce:	42a6      	cmp	r6, r4
    83d0:	d105      	bne.n	83de <__libc_init_array+0x2e>
    83d2:	bd70      	pop	{r4, r5, r6, pc}
    83d4:	00b3      	lsls	r3, r6, #2
    83d6:	58eb      	ldr	r3, [r5, r3]
    83d8:	4798      	blx	r3
    83da:	3601      	adds	r6, #1
    83dc:	e7ee      	b.n	83bc <__libc_init_array+0xc>
    83de:	00b3      	lsls	r3, r6, #2
    83e0:	58eb      	ldr	r3, [r5, r3]
    83e2:	4798      	blx	r3
    83e4:	3601      	adds	r6, #1
    83e6:	e7f2      	b.n	83ce <__libc_init_array+0x1e>
    83e8:	00008780 	.word	0x00008780
    83ec:	00008780 	.word	0x00008780
    83f0:	00008780 	.word	0x00008780
    83f4:	00008784 	.word	0x00008784

000083f8 <memcpy>:
    83f8:	2300      	movs	r3, #0
    83fa:	b510      	push	{r4, lr}
    83fc:	429a      	cmp	r2, r3
    83fe:	d100      	bne.n	8402 <memcpy+0xa>
    8400:	bd10      	pop	{r4, pc}
    8402:	5ccc      	ldrb	r4, [r1, r3]
    8404:	54c4      	strb	r4, [r0, r3]
    8406:	3301      	adds	r3, #1
    8408:	e7f8      	b.n	83fc <memcpy+0x4>

0000840a <memset>:
    840a:	0003      	movs	r3, r0
    840c:	1882      	adds	r2, r0, r2
    840e:	4293      	cmp	r3, r2
    8410:	d100      	bne.n	8414 <memset+0xa>
    8412:	4770      	bx	lr
    8414:	7019      	strb	r1, [r3, #0]
    8416:	3301      	adds	r3, #1
    8418:	e7f9      	b.n	840e <memset+0x4>
    841a:	0000      	movs	r0, r0
    841c:	682f2e2e 	.word	0x682f2e2e
    8420:	702f6c70 	.word	0x702f6c70
    8424:	2f74726f 	.word	0x2f74726f
    8428:	5f6c7068 	.word	0x5f6c7068
    842c:	6f697067 	.word	0x6f697067
    8430:	7361625f 	.word	0x7361625f
    8434:	00682e65 	.word	0x00682e65
    8438:	682f2e2e 	.word	0x682f2e2e
    843c:	732f6c61 	.word	0x732f6c61
    8440:	682f6372 	.word	0x682f6372
    8444:	615f6c61 	.word	0x615f6c61
    8448:	735f6364 	.word	0x735f6364
    844c:	2e636e79 	.word	0x2e636e79
    8450:	00000063 	.word	0x00000063
    8454:	000010d8 	.word	0x000010d8
    8458:	000010a2 	.word	0x000010a2
    845c:	000010a8 	.word	0x000010a8
    8460:	000010a2 	.word	0x000010a2
    8464:	000010ae 	.word	0x000010ae
    8468:	000010a2 	.word	0x000010a2
    846c:	000010ae 	.word	0x000010ae
    8470:	000010a2 	.word	0x000010a2
    8474:	000010a2 	.word	0x000010a2
    8478:	000010ae 	.word	0x000010ae
    847c:	000010a2 	.word	0x000010a2
    8480:	000010ae 	.word	0x000010ae
    8484:	000010a2 	.word	0x000010a2
    8488:	000010dc 	.word	0x000010dc
    848c:	000010c6 	.word	0x000010c6
    8490:	000010cc 	.word	0x000010cc
    8494:	000010c6 	.word	0x000010c6
    8498:	000010d2 	.word	0x000010d2
    849c:	000010c6 	.word	0x000010c6
    84a0:	000010d2 	.word	0x000010d2
    84a4:	000010c6 	.word	0x000010c6
    84a8:	000010c6 	.word	0x000010c6
    84ac:	000010d2 	.word	0x000010d2
    84b0:	000010c6 	.word	0x000010c6
    84b4:	000010d2 	.word	0x000010d2
    84b8:	000010c6 	.word	0x000010c6
    84bc:	00001448 	.word	0x00001448
    84c0:	000013bc 	.word	0x000013bc
    84c4:	000013cc 	.word	0x000013cc
    84c8:	000013e2 	.word	0x000013e2
    84cc:	000013f6 	.word	0x000013f6
    84d0:	0000141a 	.word	0x0000141a
    84d4:	00001564 	.word	0x00001564
    84d8:	000014c4 	.word	0x000014c4
    84dc:	000014f8 	.word	0x000014f8
    84e0:	00001522 	.word	0x00001522
    84e4:	00001542 	.word	0x00001542
    84e8:	00001558 	.word	0x00001558
    84ec:	00001564 	.word	0x00001564
    84f0:	682f2e2e 	.word	0x682f2e2e
    84f4:	732f6c61 	.word	0x732f6c61
    84f8:	682f6372 	.word	0x682f6372
    84fc:	635f6c61 	.word	0x635f6c61
    8500:	6e656c61 	.word	0x6e656c61
    8504:	5f726164 	.word	0x5f726164
    8508:	632e736f 	.word	0x632e736f
    850c:	00000000 	.word	0x00000000
    8510:	682f2e2e 	.word	0x682f2e2e
    8514:	732f6c61 	.word	0x732f6c61
    8518:	682f6372 	.word	0x682f6372
    851c:	695f6c61 	.word	0x695f6c61
    8520:	00632e6f 	.word	0x00632e6f
    8524:	682f2e2e 	.word	0x682f2e2e
    8528:	732f6c61 	.word	0x732f6c61
    852c:	682f6372 	.word	0x682f6372
    8530:	705f6c61 	.word	0x705f6c61
    8534:	632e6d77 	.word	0x632e6d77
    8538:	00000000 	.word	0x00000000
    853c:	682f2e2e 	.word	0x682f2e2e
    8540:	732f6c61 	.word	0x732f6c61
    8544:	682f6372 	.word	0x682f6372
    8548:	755f6c61 	.word	0x755f6c61
    854c:	74726173 	.word	0x74726173
    8550:	6e79735f 	.word	0x6e79735f
    8554:	00632e63 	.word	0x00632e63

00008558 <_adcs>:
    8558:	05000000 19030000 00000000 00000000     ................
	...
    8574:	05000001 190a0000 00000000 00000000     ................
	...
    8590:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    85a0:	632e6364 00000000 682f2e2e 722f6c70     dc.c....../hpl/r
    85b0:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    85c0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    85d0:	65735f6c 6d6f6372 0000632e              l_sercom.c..

000085dc <sercomspi_regs>:
	...
    85f0:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    8600:	0000632e 54415453 00000045 000007d0     .c..STATE.......
    8610:	00000535 000003e8 00000320 0000029b     5....... .......
    8620:	0000023b 000001f4 000001bc 00000190     ;...............
    8630:	0000016c 0000014d 00000134 0000011e     l...M...4.......
    8640:	0000010b 000000fa 000000eb 742f2e2e     ............../t
    8650:	64726968 74726170 54522f79 662f534f     hirdparty/RTOS/f
    8660:	72656572 2f736f74 65657246 534f5452     reertos/FreeRTOS
    8670:	2e303156 2f302e30 736f7472 726f705f     V10.0.0/rtos_por
    8680:	00632e74 454c4449 00000000 09632509     t.c.IDLE.....%c.
    8690:	25097525 75250975 00000a0d 00006064     %u.%u.%u....d`..
    86a0:	0000602a 00006038 00006044 0000604c     *`..8`..D`..L`..
    86b0:	00006194 0000615a 00006168 00006174     .a..Za..ha..ta..
    86c0:	0000617c 20726d54 00637653 000066c8     |a..Tmr Svc..f..
    86d0:	000066c8 000066c8 00006756 00006720     .f...f..Vg.. g..
    86e0:	0000674a 000066c8 000066c8 00006756     Jg...f...f..Vg..
    86f0:	00006720 00007154 00007136 000070f0      g..Tq..6q...p..
    8700:	0000700e 000070f0 00007128 000070f0     .p...p..(q...p..
    8710:	0000700e 00007136 00007136 00007128     .p..6q..6q..(q..
    8720:	0000700e 00007006 00007006 00007006     .p...p...p...p..
    8730:	0000736c 000079b4 00007874 00007874     ls...y..tx..tx..
    8740:	00007870 0000798c 0000798c 0000797e     px...y...y..~y..
    8750:	00007870 0000798c 0000797e 0000798c     px...y..~y...y..
    8760:	00007870 00007994 00007994 00007994     px...y...y...y..
    8770:	00007b98                                .{..

00008774 <_init>:
    8774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8776:	46c0      	nop			; (mov r8, r8)
    8778:	bcf8      	pop	{r3, r4, r5, r6, r7}
    877a:	bc08      	pop	{r3}
    877c:	469e      	mov	lr, r3
    877e:	4770      	bx	lr

00008780 <__init_array_start>:
    8780:	000000e5 	.word	0x000000e5

00008784 <_fini>:
    8784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8786:	46c0      	nop			; (mov r8, r8)
    8788:	bcf8      	pop	{r3, r4, r5, r6, r7}
    878a:	bc08      	pop	{r3}
    878c:	469e      	mov	lr, r3
    878e:	4770      	bx	lr

00008790 <__fini_array_start>:
    8790:	000000bd 	.word	0x000000bd
